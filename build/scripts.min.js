function initContactsMap(e){"use strict";var t=document.getElementById("js-contacts-map"),i=t.dataset.mapData;(contactsMap=new e.Map(t,{center:t.dataset.mapCoords.split(","),zoom:t.dataset.mapZoom,controls:["smallMapDefaultSet"]})).behaviors.disable("scrollZoom");var n=e.templateLayoutFactory.createClass('<div class="contacts-map-balloon {{ properties.iconClasses }} {{ properties.iconHoverClasses }}"><div class="contacts-map-balloon-content">{{ properties.iconContent }}</div></div>');$.ajax(i,{method:"GET",cache:!1,dataType:"json"}).done(function(t){t.objects&&t.objects.forEach(function(t){var i=[-100,-70],a="",r={type:"Rectangle",coordinates:[[0,0],[200,70]]};t.type&&"main"===t.type&&(i=[-130,-130],a="contacts-map-balloon-main",r={type:"Rectangle",coordinates:[[0,0],[260,130]]});var s=new e.Placemark(t.coords,{iconContent:t.name,hintContent:t.name},{iconHoverClasses:"",iconLayout:n,iconOffset:i,hasBalloon:!1,iconShape:r});s.properties.set("iconClasses",a),s.events.add("mouseenter",function(e){s.properties.set("iconHoverClasses","contacts-map-balloon-hover")}),s.events.add("mouseleave",function(e){s.properties.set("iconHoverClasses","")}),t.description.length&&s.events.add("click",function(e){initSideModal(t.description,"side-modal-map-object"),e.stopPropagation()}),contactsMap.geoObjects.add(s)})}).fail(function(e,t,i){alert("Ошибка загрузки данных. Пожалуйста, попробуйте перезагрузить страницу."),console.log(e),console.log(i)})}function initSideModalWrapper(e){var t=$('<div class="side-modal-overlay"><div class="side-modal '+e+'"><a href="#" class="side-modal-close" data-side-modal-close></a><div class="side-modal-overflow"></div></div></div>'),i=$("body").children(".side-modal-overlay");return i.length?(i.find(".side-modal").removeClass().addClass("side-modal "+e),i.find(".side-modal-overflow").html("")):$("body").append(t),$("body").children(".side-modal-overlay")}function initSideModal(e,t){var i=initSideModalWrapper(t);i.find(".side-modal-overflow").html(e),i.find("[data-maskedinput]").maskedinput(),i.find("[data-validate]").formValidation(),setTimeout(function(){i.addClass("active"),$(document).on("click","body",n)},200);var n=function(e){$(e.target).closest(".side-modal").length||$(e.target).is("input, label")||(i.removeClass("active"),$(document).off("click","body",n))};i.find("[data-side-modal-close]").click(function(){return $(document).off("click","body",n),i.removeClass("active"),!1})}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function i(e,t){var i=(t=t||ie).createElement("script");i.text=e,t.head.appendChild(i).parentNode.removeChild(i)}function n(e){var t=!!e&&"length"in e&&e.length,i=fe.type(e);return"function"!==i&&!fe.isWindow(e)&&("array"===i||0===t||"number"==typeof t&&t>0&&t-1 in e)}function a(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function r(e,t,i){return fe.isFunction(t)?fe.grep(e,function(e,n){return!!t.call(e,n,e)!==i}):t.nodeType?fe.grep(e,function(e){return e===t!==i}):"string"!=typeof t?fe.grep(e,function(e){return oe.call(t,e)>-1!==i}):Se.test(t)?fe.filter(t,e,i):(t=fe.filter(t,e),fe.grep(e,function(e){return oe.call(t,e)>-1!==i&&1===e.nodeType}))}function s(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t={};return fe.each(e.match(De)||[],function(e,i){t[i]=!0}),t}function l(e){return e}function u(e){throw e}function c(e,t,i,n){var a;try{e&&fe.isFunction(a=e.promise)?a.call(e).done(t).fail(i):e&&fe.isFunction(a=e.then)?a.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}function d(){ie.removeEventListener("DOMContentLoaded",d),e.removeEventListener("load",d),fe.ready()}function p(){this.expando=fe.expando+p.uid++}function h(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:je.test(e)?JSON.parse(e):e)}function f(e,t,i){var n;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(He,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i=h(i)}catch(e){}Ne.set(e,t,i)}else i=void 0;return i}function m(e,t,i,n){var a,r=1,s=20,o=n?function(){return n.cur()}:function(){return fe.css(e,t,"")},l=o(),u=i&&i[3]||(fe.cssNumber[t]?"":"px"),c=(fe.cssNumber[t]||"px"!==u&&+l)&&Oe.exec(fe.css(e,t));if(c&&c[3]!==u){u=u||c[3],i=i||[],c=+l||1;do{c/=r=r||".5",fe.style(e,t,c+u)}while(r!==(r=o()/l)&&1!==r&&--s)}return i&&(c=+c||+l||0,a=i[1]?c+(i[1]+1)*i[2]:+i[2],n&&(n.unit=u,n.start=c,n.end=a)),a}function g(e){var t,i=e.ownerDocument,n=e.nodeName,a=Xe[n];return a||(t=i.body.appendChild(i.createElement(n)),a=fe.css(t,"display"),t.parentNode.removeChild(t),"none"===a&&(a="block"),Xe[n]=a,a)}function v(e,t){for(var i,n,a=[],r=0,s=e.length;r<s;r++)(n=e[r]).style&&(i=n.style.display,t?("none"===i&&(a[r]=Ie.get(n,"display")||null,a[r]||(n.style.display="")),""===n.style.display&&qe(n)&&(a[r]=g(n))):"none"!==i&&(a[r]="none",Ie.set(n,"display",i)));for(r=0;r<s;r++)null!=a[r]&&(e[r].style.display=a[r]);return e}function y(e,t){var i;return i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&a(e,t)?fe.merge([e],i):i}function w(e,t){for(var i=0,n=e.length;i<n;i++)Ie.set(e[i],"globalEval",!t||Ie.get(t[i],"globalEval"))}function b(e,t,i,n,a){for(var r,s,o,l,u,c,d=t.createDocumentFragment(),p=[],h=0,f=e.length;h<f;h++)if((r=e[h])||0===r)if("object"===fe.type(r))fe.merge(p,r.nodeType?[r]:r);else if(Ve.test(r)){for(s=s||d.appendChild(t.createElement("div")),o=(Ye.exec(r)||["",""])[1].toLowerCase(),l=_e[o]||_e._default,s.innerHTML=l[1]+fe.htmlPrefilter(r)+l[2],c=l[0];c--;)s=s.lastChild;fe.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(r));for(d.textContent="",h=0;r=p[h++];)if(n&&fe.inArray(r,n)>-1)a&&a.push(r);else if(u=fe.contains(r.ownerDocument,r),s=y(d.appendChild(r),"script"),u&&w(s),i)for(c=0;r=s[c++];)Ge.test(r.type||"")&&i.push(r);return d}function x(){return!0}function C(){return!1}function T(){try{return ie.activeElement}catch(e){}}function S(e,t,i,n,a,r){var s,o;if("object"==typeof t){"string"!=typeof i&&(n=n||i,i=void 0);for(o in t)S(e,o,i,n,t[o],r);return e}if(null==n&&null==a?(a=i,n=i=void 0):null==a&&("string"==typeof i?(a=n,n=void 0):(a=n,n=i,i=void 0)),!1===a)a=C;else if(!a)return e;return 1===r&&(s=a,(a=function(e){return fe().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=fe.guid++)),e.each(function(){fe.event.add(this,t,a,n,i)})}function k(e,t){return a(e,"table")&&a(11!==t.nodeType?t:t.firstChild,"tr")?fe(">tbody",e)[0]||e:e}function E(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function M(e){var t=it.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function L(e,t){var i,n,a,r,s,o,l,u;if(1===t.nodeType){if(Ie.hasData(e)&&(r=Ie.access(e),s=Ie.set(t,r),u=r.events)){delete s.handle,s.events={};for(a in u)for(i=0,n=u[a].length;i<n;i++)fe.event.add(t,a,u[a][i])}Ne.hasData(e)&&(o=Ne.access(e),l=fe.extend({},o),Ne.set(t,l))}}function D(e,t){var i=t.nodeName.toLowerCase();"input"===i&&We.test(e.type)?t.checked=e.checked:"input"!==i&&"textarea"!==i||(t.defaultValue=e.defaultValue)}function z(e,t,n,a){t=re.apply([],t);var r,s,o,l,u,c,d=0,p=e.length,h=p-1,f=t[0],m=fe.isFunction(f);if(m||p>1&&"string"==typeof f&&!he.checkClone&&tt.test(f))return e.each(function(i){var r=e.eq(i);m&&(t[0]=f.call(this,i,r.html())),z(r,t,n,a)});if(p&&(r=b(t,e[0].ownerDocument,!1,e,a),s=r.firstChild,1===r.childNodes.length&&(r=s),s||a)){for(l=(o=fe.map(y(r,"script"),E)).length;d<p;d++)u=r,d!==h&&(u=fe.clone(u,!0,!0),l&&fe.merge(o,y(u,"script"))),n.call(e[d],u,d);if(l)for(c=o[o.length-1].ownerDocument,fe.map(o,M),d=0;d<l;d++)u=o[d],Ge.test(u.type||"")&&!Ie.access(u,"globalEval")&&fe.contains(c,u)&&(u.src?fe._evalUrl&&fe._evalUrl(u.src):i(u.textContent.replace(nt,""),c))}return e}function P(e,t,i){for(var n,a=t?fe.filter(t,e):e,r=0;null!=(n=a[r]);r++)i||1!==n.nodeType||fe.cleanData(y(n)),n.parentNode&&(i&&fe.contains(n.ownerDocument,n)&&w(y(n,"script")),n.parentNode.removeChild(n));return e}function F(e,t,i){var n,a,r,s,o=e.style;return(i=i||st(e))&&(""!==(s=i.getPropertyValue(t)||i[t])||fe.contains(e.ownerDocument,e)||(s=fe.style(e,t)),!he.pixelMarginRight()&&rt.test(s)&&at.test(t)&&(n=o.width,a=o.minWidth,r=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=i.width,o.width=n,o.minWidth=a,o.maxWidth=r)),void 0!==s?s+"":s}function A(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function I(e){if(e in pt)return e;for(var t=e[0].toUpperCase()+e.slice(1),i=dt.length;i--;)if((e=dt[i]+t)in pt)return e}function N(e){var t=fe.cssProps[e];return t||(t=fe.cssProps[e]=I(e)||e),t}function j(e,t,i){var n=Oe.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function H(e,t,i,n,a){var r,s=0;for(r=i===(n?"border":"content")?4:"width"===t?1:0;r<4;r+=2)"margin"===i&&(s+=fe.css(e,i+Be[r],!0,a)),n?("content"===i&&(s-=fe.css(e,"padding"+Be[r],!0,a)),"margin"!==i&&(s-=fe.css(e,"border"+Be[r]+"Width",!0,a))):(s+=fe.css(e,"padding"+Be[r],!0,a),"padding"!==i&&(s+=fe.css(e,"border"+Be[r]+"Width",!0,a)));return s}function R(e,t,i){var n,a=st(e),r=F(e,t,a),s="border-box"===fe.css(e,"boxSizing",!1,a);return rt.test(r)?r:(n=s&&(he.boxSizingReliable()||r===e.style[t]),"auto"===r&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)]),(r=parseFloat(r)||0)+H(e,t,i||(s?"border":"content"),n,a)+"px")}function O(e,t,i,n,a){return new O.prototype.init(e,t,i,n,a)}function B(){ft&&(!1===ie.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(B):e.setTimeout(B,fe.fx.interval),fe.fx.tick())}function q(){return e.setTimeout(function(){ht=void 0}),ht=fe.now()}function $(e,t){var i,n=0,a={height:e};for(t=t?1:0;n<4;n+=2-t)a["margin"+(i=Be[n])]=a["padding"+i]=e;return t&&(a.opacity=a.width=e),a}function X(e,t,i){for(var n,a=(G.tweeners[t]||[]).concat(G.tweeners["*"]),r=0,s=a.length;r<s;r++)if(n=a[r].call(i,t,e))return n}function W(e,t,i){var n,a,r,s,o,l,u,c,d="width"in t||"height"in t,p=this,h={},f=e.style,m=e.nodeType&&qe(e),g=Ie.get(e,"fxshow");i.queue||(null==(s=fe._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,fe.queue(e,"fx").length||s.empty.fire()})}));for(n in t)if(a=t[n],mt.test(a)){if(delete t[n],r=r||"toggle"===a,a===(m?"hide":"show")){if("show"!==a||!g||void 0===g[n])continue;m=!0}h[n]=g&&g[n]||fe.style(e,n)}if((l=!fe.isEmptyObject(t))||!fe.isEmptyObject(h)){d&&1===e.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(u=g&&g.display)&&(u=Ie.get(e,"display")),"none"===(c=fe.css(e,"display"))&&(u?c=u:(v([e],!0),u=e.style.display||u,c=fe.css(e,"display"),v([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===fe.css(e,"float")&&(l||(p.done(function(){f.display=u}),null==u&&(c=f.display,u="none"===c?"":c)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",p.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1;for(n in h)l||(g?"hidden"in g&&(m=g.hidden):g=Ie.access(e,"fxshow",{display:u}),r&&(g.hidden=!m),m&&v([e],!0),p.done(function(){m||v([e]),Ie.remove(e,"fxshow");for(n in h)fe.style(e,n,h[n])})),l=X(m?g[n]:0,n,p),n in g||(g[n]=l.start,m&&(l.end=l.start,l.start=0))}}function Y(e,t){var i,n,a,r,s;for(i in e)if(n=fe.camelCase(i),a=t[n],r=e[i],Array.isArray(r)&&(a=r[1],r=e[i]=r[0]),i!==n&&(e[n]=r,delete e[i]),(s=fe.cssHooks[n])&&"expand"in s){r=s.expand(r),delete e[n];for(i in r)i in e||(e[i]=r[i],t[i]=a)}else t[n]=a}function G(e,t,i){var n,a,r=0,s=G.prefilters.length,o=fe.Deferred().always(function(){delete l.elem}),l=function(){if(a)return!1;for(var t=ht||q(),i=Math.max(0,u.startTime+u.duration-t),n=1-(i/u.duration||0),r=0,s=u.tweens.length;r<s;r++)u.tweens[r].run(n);return o.notifyWith(e,[u,n,i]),n<1&&s?i:(s||o.notifyWith(e,[u,1,0]),o.resolveWith(e,[u]),!1)},u=o.promise({elem:e,props:fe.extend({},t),opts:fe.extend(!0,{specialEasing:{},easing:fe.easing._default},i),originalProperties:t,originalOptions:i,startTime:ht||q(),duration:i.duration,tweens:[],createTween:function(t,i){var n=fe.Tween(e,u.opts,t,i,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(n),n},stop:function(t){var i=0,n=t?u.tweens.length:0;if(a)return this;for(a=!0;i<n;i++)u.tweens[i].run(1);return t?(o.notifyWith(e,[u,1,0]),o.resolveWith(e,[u,t])):o.rejectWith(e,[u,t]),this}}),c=u.props;for(Y(c,u.opts.specialEasing);r<s;r++)if(n=G.prefilters[r].call(u,e,c,u.opts))return fe.isFunction(n.stop)&&(fe._queueHooks(u.elem,u.opts.queue).stop=fe.proxy(n.stop,n)),n;return fe.map(c,X,u),fe.isFunction(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),fe.fx.timer(fe.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}function _(e){return(e.match(De)||[]).join(" ")}function V(e){return e.getAttribute&&e.getAttribute("class")||""}function Q(e,t,i,n){var a;if(Array.isArray(t))fe.each(t,function(t,a){i||Et.test(e)?n(e,a):Q(e+"["+("object"==typeof a&&null!=a?t:"")+"]",a,i,n)});else if(i||"object"!==fe.type(t))n(e,t);else for(a in t)Q(e+"["+a+"]",t[a],i,n)}function U(e){return function(t,i){"string"!=typeof t&&(i=t,t="*");var n,a=0,r=t.toLowerCase().match(De)||[];if(fe.isFunction(i))for(;n=r[a++];)"+"===n[0]?(n=n.slice(1)||"*",(e[n]=e[n]||[]).unshift(i)):(e[n]=e[n]||[]).push(i)}}function K(e,t,i,n){function a(o){var l;return r[o]=!0,fe.each(e[o]||[],function(e,o){var u=o(t,i,n);return"string"!=typeof u||s||r[u]?s?!(l=u):void 0:(t.dataTypes.unshift(u),a(u),!1)}),l}var r={},s=e===Rt;return a(t.dataTypes[0])||!r["*"]&&a("*")}function Z(e,t){var i,n,a=fe.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((a[i]?e:n||(n={}))[i]=t[i]);return n&&fe.extend(!0,e,n),e}function J(e,t,i){for(var n,a,r,s,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(a in o)if(o[a]&&o[a].test(n)){l.unshift(a);break}if(l[0]in i)r=l[0];else{for(a in i){if(!l[0]||e.converters[a+" "+l[0]]){r=a;break}s||(s=a)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),i[r]}function ee(e,t,i,n){var a,r,s,o,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(r=c.shift();r;)if(e.responseFields[r]&&(i[e.responseFields[r]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=c.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=u[l+" "+r]||u["* "+r]))for(a in u)if((o=a.split(" "))[1]===r&&(s=u[l+" "+o[0]]||u["* "+o[0]])){!0===s?s=u[a]:!0!==u[a]&&(r=o[0],c.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}var te=[],ie=e.document,ne=Object.getPrototypeOf,ae=te.slice,re=te.concat,se=te.push,oe=te.indexOf,le={},ue=le.toString,ce=le.hasOwnProperty,de=ce.toString,pe=de.call(Object),he={},fe=function(e,t){return new fe.fn.init(e,t)},me=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ge=/^-ms-/,ve=/-([a-z])/g,ye=function(e,t){return t.toUpperCase()};fe.fn=fe.prototype={jquery:"3.2.1",constructor:fe,length:0,toArray:function(){return ae.call(this)},get:function(e){return null==e?ae.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=fe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return fe.each(this,e)},map:function(e){return this.pushStack(fe.map(this,function(t,i){return e.call(t,i,t)}))},slice:function(){return this.pushStack(ae.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(i>=0&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:se,sort:te.sort,splice:te.splice},fe.extend=fe.fn.extend=function(){var e,t,i,n,a,r,s=arguments[0]||{},o=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[o]||{},o++),"object"==typeof s||fe.isFunction(s)||(s={}),o===l&&(s=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)i=s[t],s!==(n=e[t])&&(u&&n&&(fe.isPlainObject(n)||(a=Array.isArray(n)))?(a?(a=!1,r=i&&Array.isArray(i)?i:[]):r=i&&fe.isPlainObject(i)?i:{},s[t]=fe.extend(u,r,n)):void 0!==n&&(s[t]=n));return s},fe.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===fe.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=fe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==ue.call(e))&&(!(t=ne(e))||"function"==typeof(i=ce.call(t,"constructor")&&t.constructor)&&de.call(i)===pe)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[ue.call(e)]||"object":typeof e},globalEval:function(e){i(e)},camelCase:function(e){return e.replace(ge,"ms-").replace(ve,ye)},each:function(e,t){var i,a=0;if(n(e))for(i=e.length;a<i&&!1!==t.call(e[a],a,e[a]);a++);else for(a in e)if(!1===t.call(e[a],a,e[a]))break;return e},trim:function(e){return null==e?"":(e+"").replace(me,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(n(Object(e))?fe.merge(i,"string"==typeof e?[e]:e):se.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:oe.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,a=e.length;n<i;n++)e[a++]=t[n];return e.length=a,e},grep:function(e,t,i){for(var n=[],a=0,r=e.length,s=!i;a<r;a++)!t(e[a],a)!==s&&n.push(e[a]);return n},map:function(e,t,i){var a,r,s=0,o=[];if(n(e))for(a=e.length;s<a;s++)null!=(r=t(e[s],s,i))&&o.push(r);else for(s in e)null!=(r=t(e[s],s,i))&&o.push(r);return re.apply([],o)},guid:1,proxy:function(e,t){var i,n,a;if("string"==typeof t&&(i=e[t],t=e,e=i),fe.isFunction(e))return n=ae.call(arguments,2),a=function(){return e.apply(t||this,n.concat(ae.call(arguments)))},a.guid=e.guid=e.guid||fe.guid++,a},now:Date.now,support:he}),"function"==typeof Symbol&&(fe.fn[Symbol.iterator]=te[Symbol.iterator]),fe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var we=function(e){function t(e,t,i,n){var a,r,s,o,l,c,p,h=t&&t.ownerDocument,f=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==f&&9!==f&&11!==f)return i;if(!n&&((t?t.ownerDocument||t:O)!==P&&z(t),t=t||P,A)){if(11!==f&&(l=me.exec(e)))if(a=l[1]){if(9===f){if(!(s=t.getElementById(a)))return i;if(s.id===a)return i.push(s),i}else if(h&&(s=h.getElementById(a))&&H(t,s)&&s.id===a)return i.push(s),i}else{if(l[2])return U.apply(i,t.getElementsByTagName(e)),i;if((a=l[3])&&b.getElementsByClassName&&t.getElementsByClassName)return U.apply(i,t.getElementsByClassName(a)),i}if(b.qsa&&!W[e+" "]&&(!I||!I.test(e))){if(1!==f)h=t,p=e;else if("object"!==t.nodeName.toLowerCase()){for((o=t.getAttribute("id"))?o=o.replace(we,be):t.setAttribute("id",o=R),r=(c=S(e)).length;r--;)c[r]="#"+o+" "+d(c[r]);p=c.join(","),h=ge.test(e)&&u(t.parentNode)||t}if(p)try{return U.apply(i,h.querySelectorAll(p)),i}catch(e){}finally{o===R&&t.removeAttribute("id")}}}return E(e.replace(re,"$1"),t,i,n)}function i(){function e(i,n){return t.push(i+" ")>x.cacheLength&&delete e[t.shift()],e[i+" "]=n}var t=[];return e}function n(e){return e[R]=!0,e}function a(e){var t=P.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function r(e,t){for(var i=e.split("|"),n=i.length;n--;)x.attrHandle[i[n]]=t}function s(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function o(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Ce(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return n(function(t){return t=+t,n(function(i,n){for(var a,r=e([],i.length,t),s=r.length;s--;)i[a=r[s]]&&(i[a]=!(n[a]=i[a]))})})}function u(e){return e&&void 0!==e.getElementsByTagName&&e}function c(){}function d(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function p(e,t,i){var n=t.dir,a=t.next,r=a||n,s=i&&"parentNode"===r,o=q++;return t.first?function(t,i,a){for(;t=t[n];)if(1===t.nodeType||s)return e(t,i,a);return!1}:function(t,i,l){var u,c,d,p=[B,o];if(l){for(;t=t[n];)if((1===t.nodeType||s)&&e(t,i,l))return!0}else for(;t=t[n];)if(1===t.nodeType||s)if(d=t[R]||(t[R]={}),c=d[t.uniqueID]||(d[t.uniqueID]={}),a&&a===t.nodeName.toLowerCase())t=t[n]||t;else{if((u=c[r])&&u[0]===B&&u[1]===o)return p[2]=u[2];if(c[r]=p,p[2]=e(t,i,l))return!0}return!1}}function h(e){return e.length>1?function(t,i,n){for(var a=e.length;a--;)if(!e[a](t,i,n))return!1;return!0}:e[0]}function f(e,i,n){for(var a=0,r=i.length;a<r;a++)t(e,i[a],n);return n}function m(e,t,i,n,a){for(var r,s=[],o=0,l=e.length,u=null!=t;o<l;o++)(r=e[o])&&(i&&!i(r,n,a)||(s.push(r),u&&t.push(o)));return s}function g(e,t,i,a,r,s){return a&&!a[R]&&(a=g(a)),r&&!r[R]&&(r=g(r,s)),n(function(n,s,o,l){var u,c,d,p=[],h=[],g=s.length,v=n||f(t||"*",o.nodeType?[o]:o,[]),y=!e||!n&&t?v:m(v,p,e,o,l),w=i?r||(n?e:g||a)?[]:s:y;if(i&&i(y,w,o,l),a)for(u=m(w,h),a(u,[],o,l),c=u.length;c--;)(d=u[c])&&(w[h[c]]=!(y[h[c]]=d));if(n){if(r||e){if(r){for(u=[],c=w.length;c--;)(d=w[c])&&u.push(y[c]=d);r(null,w=[],u,l)}for(c=w.length;c--;)(d=w[c])&&(u=r?Z(n,d):p[c])>-1&&(n[u]=!(s[u]=d))}}else w=m(w===s?w.splice(g,w.length):w),r?r(null,s,w,l):U.apply(s,w)})}function v(e){for(var t,i,n,a=e.length,r=x.relative[e[0].type],s=r||x.relative[" "],o=r?1:0,l=p(function(e){return e===t},s,!0),u=p(function(e){return Z(t,e)>-1},s,!0),c=[function(e,i,n){var a=!r&&(n||i!==M)||((t=i).nodeType?l(e,i,n):u(e,i,n));return t=null,a}];o<a;o++)if(i=x.relative[e[o].type])c=[p(h(c),i)];else{if((i=x.filter[e[o].type].apply(null,e[o].matches))[R]){for(n=++o;n<a&&!x.relative[e[n].type];n++);return g(o>1&&h(c),o>1&&d(e.slice(0,o-1).concat({value:" "===e[o-2].type?"*":""})).replace(re,"$1"),i,o<n&&v(e.slice(o,n)),n<a&&v(e=e.slice(n)),n<a&&d(e))}c.push(i)}return h(c)}function y(e,i){var a=i.length>0,r=e.length>0,s=function(n,s,o,l,u){var c,d,p,h=0,f="0",g=n&&[],v=[],y=M,w=n||r&&x.find.TAG("*",u),b=B+=null==y?1:Math.random()||.1,C=w.length;for(u&&(M=s===P||s||u);f!==C&&null!=(c=w[f]);f++){if(r&&c){for(d=0,s||c.ownerDocument===P||(z(c),o=!A);p=e[d++];)if(p(c,s||P,o)){l.push(c);break}u&&(B=b)}a&&((c=!p&&c)&&h--,n&&g.push(c))}if(h+=f,a&&f!==h){for(d=0;p=i[d++];)p(g,v,s,o);if(n){if(h>0)for(;f--;)g[f]||v[f]||(v[f]=V.call(l));v=m(v)}U.apply(l,v),u&&!n&&v.length>0&&h+i.length>1&&t.uniqueSort(l)}return u&&(B=b,M=y),g};return a?n(s):s}var w,b,x,C,T,S,k,E,M,L,D,z,P,F,A,I,N,j,H,R="sizzle"+1*new Date,O=e.document,B=0,q=0,$=i(),X=i(),W=i(),Y=function(e,t){return e===t&&(D=!0),0},G={}.hasOwnProperty,_=[],V=_.pop,Q=_.push,U=_.push,K=_.slice,Z=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ie="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ne=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",ae=new RegExp(ee+"+","g"),re=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),se=new RegExp("^"+ee+"*,"+ee+"*"),oe=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ue=new RegExp(ne),ce=new RegExp("^"+te+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+ne),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},pe=/^(?:input|select|textarea|button)$/i,he=/^h\d$/i,fe=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ge=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,i){var n="0x"+t-65536;return n!==n||i?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},we=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,be=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},xe=function(){z()},Ce=p(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{U.apply(_=K.call(O.childNodes),O.childNodes),_[O.childNodes.length].nodeType}catch(e){U={apply:_.length?function(e,t){Q.apply(e,K.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}b=t.support={},T=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},z=t.setDocument=function(e){var t,i,n=e?e.ownerDocument||e:O;return n!==P&&9===n.nodeType&&n.documentElement?(P=n,F=P.documentElement,A=!T(P),O!==P&&(i=P.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",xe,!1):i.attachEvent&&i.attachEvent("onunload",xe)),b.attributes=a(function(e){return e.className="i",!e.getAttribute("className")}),b.getElementsByTagName=a(function(e){return e.appendChild(P.createComment("")),!e.getElementsByTagName("*").length}),b.getElementsByClassName=fe.test(P.getElementsByClassName),b.getById=a(function(e){return F.appendChild(e).id=R,!P.getElementsByName||!P.getElementsByName(R).length}),b.getById?(x.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&A){var i=t.getElementById(e);return i?[i]:[]}}):(x.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var i=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return i&&i.value===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&A){var i,n,a,r=t.getElementById(e);if(r){if((i=r.getAttributeNode("id"))&&i.value===e)return[r];for(a=t.getElementsByName(e),n=0;r=a[n++];)if((i=r.getAttributeNode("id"))&&i.value===e)return[r]}return[]}}),x.find.TAG=b.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):b.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],a=0,r=t.getElementsByTagName(e);if("*"===e){for(;i=r[a++];)1===i.nodeType&&n.push(i);return n}return r},x.find.CLASS=b.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&A)return t.getElementsByClassName(e)},N=[],I=[],(b.qsa=fe.test(P.querySelectorAll))&&(a(function(e){F.appendChild(e).innerHTML="<a id='"+R+"'></a><select id='"+R+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&I.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||I.push("\\["+ee+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+R+"-]").length||I.push("~="),e.querySelectorAll(":checked").length||I.push(":checked"),e.querySelectorAll("a#"+R+"+*").length||I.push(".#.+[+~]")}),a(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=P.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&I.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&I.push(":enabled",":disabled"),F.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&I.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),I.push(",.*:")})),(b.matchesSelector=fe.test(j=F.matches||F.webkitMatchesSelector||F.mozMatchesSelector||F.oMatchesSelector||F.msMatchesSelector))&&a(function(e){b.disconnectedMatch=j.call(e,"*"),j.call(e,"[s!='']:x"),N.push("!=",ne)}),I=I.length&&new RegExp(I.join("|")),N=N.length&&new RegExp(N.join("|")),t=fe.test(F.compareDocumentPosition),H=t||fe.test(F.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},Y=t?function(e,t){if(e===t)return D=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&i||!b.sortDetached&&t.compareDocumentPosition(e)===i?e===P||e.ownerDocument===O&&H(O,e)?-1:t===P||t.ownerDocument===O&&H(O,t)?1:L?Z(L,e)-Z(L,t):0:4&i?-1:1)}:function(e,t){if(e===t)return D=!0,0;var i,n=0,a=e.parentNode,r=t.parentNode,o=[e],l=[t];if(!a||!r)return e===P?-1:t===P?1:a?-1:r?1:L?Z(L,e)-Z(L,t):0;if(a===r)return s(e,t);for(i=e;i=i.parentNode;)o.unshift(i);for(i=t;i=i.parentNode;)l.unshift(i);for(;o[n]===l[n];)n++;return n?s(o[n],l[n]):o[n]===O?-1:l[n]===O?1:0},P):P},t.matches=function(e,i){return t(e,null,null,i)},t.matchesSelector=function(e,i){if((e.ownerDocument||e)!==P&&z(e),i=i.replace(le,"='$1']"),b.matchesSelector&&A&&!W[i+" "]&&(!N||!N.test(i))&&(!I||!I.test(i)))try{var n=j.call(e,i);if(n||b.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){}return t(i,P,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==P&&z(e),H(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==P&&z(e);var i=x.attrHandle[t.toLowerCase()],n=i&&G.call(x.attrHandle,t.toLowerCase())?i(e,t,!A):void 0;return void 0!==n?n:b.attributes||!A?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},t.escape=function(e){return(e+"").replace(we,be)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,i=[],n=0,a=0;if(D=!b.detectDuplicates,L=!b.sortStable&&e.slice(0),e.sort(Y),D){for(;t=e[a++];)t===e[a]&&(n=i.push(a));for(;n--;)e.splice(i[n],1)}return L=null,e},C=t.getText=function(e){var t,i="",n=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=C(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[n++];)i+=C(t);return i},(x=t.selectors={cacheLength:50,createPseudo:n,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&ue.test(i)&&(t=S(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=$[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&$(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,i,n){return function(a){var r=t.attr(a,e);return null==r?"!="===i:!i||(r+="","="===i?r===n:"!="===i?r!==n:"^="===i?n&&0===r.indexOf(n):"*="===i?n&&r.indexOf(n)>-1:"$="===i?n&&r.slice(-n.length)===n:"~="===i?(" "+r.replace(ae," ")+" ").indexOf(n)>-1:"|="===i&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,i,n,a){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===t;return 1===n&&0===a?function(e){return!!e.parentNode}:function(t,i,l){var u,c,d,p,h,f,m=r!==s?"nextSibling":"previousSibling",g=t.parentNode,v=o&&t.nodeName.toLowerCase(),y=!l&&!o,w=!1;if(g){if(r){for(;m;){for(p=t;p=p[m];)if(o?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?g.firstChild:g.lastChild],s&&y){for(w=(h=(u=(c=(d=(p=g)[R]||(p[R]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===B&&u[1])&&u[2],p=h&&g.childNodes[h];p=++h&&p&&p[m]||(w=h=0)||f.pop();)if(1===p.nodeType&&++w&&p===t){c[e]=[B,h,w];break}}else if(y&&(w=h=(u=(c=(d=(p=t)[R]||(p[R]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===B&&u[1]),!1===w)for(;(p=++h&&p&&p[m]||(w=h=0)||f.pop())&&((o?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++w||(y&&((c=(d=p[R]||(p[R]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]=[B,w]),p!==t)););return(w-=a)===n||w%n==0&&w/n>=0}}},PSEUDO:function(e,i){var a,r=x.pseudos[e]||x.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return r[R]?r(i):r.length>1?(a=[e,e,"",i],x.setFilters.hasOwnProperty(e.toLowerCase())?n(function(e,t){for(var n,a=r(e,i),s=a.length;s--;)e[n=Z(e,a[s])]=!(t[n]=a[s])}):function(e){return r(e,0,a)}):r}},pseudos:{not:n(function(e){var t=[],i=[],a=k(e.replace(re,"$1"));return a[R]?n(function(e,t,i,n){for(var r,s=a(e,null,n,[]),o=e.length;o--;)(r=s[o])&&(e[o]=!(t[o]=r))}):function(e,n,r){return t[0]=e,a(t,null,r,i),t[0]=null,!i.pop()}}),has:n(function(e){return function(i){return t(e,i).length>0}}),contains:n(function(e){return e=e.replace(ve,ye),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:n(function(e){return ce.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var i;do{if(i=A?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(i=i.toLowerCase())===e||0===i.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var i=e.location&&e.location.hash;return i&&i.slice(1)===t.id},root:function(e){return e===F},focus:function(e){return e===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:o(!1),disabled:o(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return he.test(e.nodeName)},input:function(e){return pe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,i){return[i<0?i+t:i]}),even:l(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:l(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:l(function(e,t,i){for(var n=i<0?i+t:i;--n>=0;)e.push(n);return e}),gt:l(function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e})}}).pseudos.nth=x.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[w]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(w);for(w in{submit:!0,reset:!0})x.pseudos[w]=function(e){return function(t){var i=t.nodeName.toLowerCase();return("input"===i||"button"===i)&&t.type===e}}(w);return c.prototype=x.filters=x.pseudos,x.setFilters=new c,S=t.tokenize=function(e,i){var n,a,r,s,o,l,u,c=X[e+" "];if(c)return i?0:c.slice(0);for(o=e,l=[],u=x.preFilter;o;){n&&!(a=se.exec(o))||(a&&(o=o.slice(a[0].length)||o),l.push(r=[])),n=!1,(a=oe.exec(o))&&(n=a.shift(),r.push({value:n,type:a[0].replace(re," ")}),o=o.slice(n.length));for(s in x.filter)!(a=de[s].exec(o))||u[s]&&!(a=u[s](a))||(n=a.shift(),r.push({value:n,type:s,matches:a}),o=o.slice(n.length));if(!n)break}return i?o.length:o?t.error(e):X(e,l).slice(0)},k=t.compile=function(e,t){var i,n=[],a=[],r=W[e+" "];if(!r){for(t||(t=S(e)),i=t.length;i--;)(r=v(t[i]))[R]?n.push(r):a.push(r);(r=W(e,y(a,n))).selector=e}return r},E=t.select=function(e,t,i,n){var a,r,s,o,l,c="function"==typeof e&&e,p=!n&&S(e=c.selector||e);if(i=i||[],1===p.length){if((r=p[0]=p[0].slice(0)).length>2&&"ID"===(s=r[0]).type&&9===t.nodeType&&A&&x.relative[r[1].type]){if(!(t=(x.find.ID(s.matches[0].replace(ve,ye),t)||[])[0]))return i;c&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(a=de.needsContext.test(e)?0:r.length;a--&&(s=r[a],!x.relative[o=s.type]);)if((l=x.find[o])&&(n=l(s.matches[0].replace(ve,ye),ge.test(r[0].type)&&u(t.parentNode)||t))){if(r.splice(a,1),!(e=n.length&&d(r)))return U.apply(i,n),i;break}}return(c||k(e,p))(n,t,!A,i,!t||ge.test(e)&&u(t.parentNode)||t),i},b.sortStable=R.split("").sort(Y).join("")===R,b.detectDuplicates=!!D,z(),b.sortDetached=a(function(e){return 1&e.compareDocumentPosition(P.createElement("fieldset"))}),a(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||r("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),b.attributes&&a(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||r("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),a(function(e){return null==e.getAttribute("disabled")})||r(J,function(e,t,i){var n;if(!i)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),t}(e);fe.find=we,fe.expr=we.selectors,fe.expr[":"]=fe.expr.pseudos,fe.uniqueSort=fe.unique=we.uniqueSort,fe.text=we.getText,fe.isXMLDoc=we.isXML,fe.contains=we.contains,fe.escapeSelector=we.escape;var be=function(e,t,i){for(var n=[],a=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&fe(e).is(i))break;n.push(e)}return n},xe=function(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i},Ce=fe.expr.match.needsContext,Te=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Se=/^.[^:#\[\.,]*$/;fe.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?fe.find.matchesSelector(n,e)?[n]:[]:fe.find.matches(e,fe.grep(t,function(e){return 1===e.nodeType}))},fe.fn.extend({find:function(e){var t,i,n=this.length,a=this;if("string"!=typeof e)return this.pushStack(fe(e).filter(function(){for(t=0;t<n;t++)if(fe.contains(a[t],this))return!0}));for(i=this.pushStack([]),t=0;t<n;t++)fe.find(e,a[t],i);return n>1?fe.uniqueSort(i):i},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&Ce.test(e)?fe(e):e||[],!1).length}});var ke,Ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(fe.fn.init=function(e,t,i){var n,a;if(!e)return this;if(i=i||ke,"string"==typeof e){if(!(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Ee.exec(e))||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof fe?t[0]:t,fe.merge(this,fe.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:ie,!0)),Te.test(n[1])&&fe.isPlainObject(t))for(n in t)fe.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(a=ie.getElementById(n[2]))&&(this[0]=a,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):fe.isFunction(e)?void 0!==i.ready?i.ready(e):e(fe):fe.makeArray(e,this)}).prototype=fe.fn,ke=fe(ie);var Me=/^(?:parents|prev(?:Until|All))/,Le={children:!0,contents:!0,next:!0,prev:!0};fe.fn.extend({has:function(e){var t=fe(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(fe.contains(this,t[e]))return!0})},closest:function(e,t){var i,n=0,a=this.length,r=[],s="string"!=typeof e&&fe(e);if(!Ce.test(e))for(;n<a;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(s?s.index(i)>-1:1===i.nodeType&&fe.find.matchesSelector(i,e))){r.push(i);break}return this.pushStack(r.length>1?fe.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?oe.call(fe(e),this[0]):oe.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(fe.uniqueSort(fe.merge(this.get(),fe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),fe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return be(e,"parentNode")},parentsUntil:function(e,t,i){return be(e,"parentNode",i)},next:function(e){return s(e,"nextSibling")},prev:function(e){return s(e,"previousSibling")},nextAll:function(e){return be(e,"nextSibling")},prevAll:function(e){return be(e,"previousSibling")},nextUntil:function(e,t,i){return be(e,"nextSibling",i)},prevUntil:function(e,t,i){return be(e,"previousSibling",i)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return a(e,"iframe")?e.contentDocument:(a(e,"template")&&(e=e.content||e),fe.merge([],e.childNodes))}},function(e,t){fe.fn[e]=function(i,n){var a=fe.map(this,t,i);return"Until"!==e.slice(-5)&&(n=i),n&&"string"==typeof n&&(a=fe.filter(n,a)),this.length>1&&(Le[e]||fe.uniqueSort(a),Me.test(e)&&a.reverse()),this.pushStack(a)}});var De=/[^\x20\t\r\n\f]+/g;fe.Callbacks=function(e){e="string"==typeof e?o(e):fe.extend({},e);var t,i,n,a,r=[],s=[],l=-1,u=function(){for(a=a||e.once,n=t=!0;s.length;l=-1)for(i=s.shift();++l<r.length;)!1===r[l].apply(i[0],i[1])&&e.stopOnFalse&&(l=r.length,i=!1);e.memory||(i=!1),t=!1,a&&(r=i?[]:"")},c={add:function(){return r&&(i&&!t&&(l=r.length-1,s.push(i)),function t(i){fe.each(i,function(i,n){fe.isFunction(n)?e.unique&&c.has(n)||r.push(n):n&&n.length&&"string"!==fe.type(n)&&t(n)})}(arguments),i&&!t&&u()),this},remove:function(){return fe.each(arguments,function(e,t){for(var i;(i=fe.inArray(t,r,i))>-1;)r.splice(i,1),i<=l&&l--}),this},has:function(e){return e?fe.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return a=s=[],r=i="",this},disabled:function(){return!r},lock:function(){return a=s=[],i||t||(r=i=""),this},locked:function(){return!!a},fireWith:function(e,i){return a||(i=[e,(i=i||[]).slice?i.slice():i],s.push(i),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},fe.extend({Deferred:function(t){var i=[["notify","progress",fe.Callbacks("memory"),fe.Callbacks("memory"),2],["resolve","done",fe.Callbacks("once memory"),fe.Callbacks("once memory"),0,"resolved"],["reject","fail",fe.Callbacks("once memory"),fe.Callbacks("once memory"),1,"rejected"]],n="pending",a={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var e=arguments;return fe.Deferred(function(t){fe.each(i,function(i,n){var a=fe.isFunction(e[n[4]])&&e[n[4]];r[n[1]](function(){var e=a&&a.apply(this,arguments);e&&fe.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[n[0]+"With"](this,a?[e]:arguments)})}),e=null}).promise()},then:function(t,n,a){function r(t,i,n,a){return function(){var o=this,c=arguments,d=function(){var e,d;if(!(t<s)){if((e=n.apply(o,c))===i.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,fe.isFunction(d)?a?d.call(e,r(s,i,l,a),r(s,i,u,a)):(s++,d.call(e,r(s,i,l,a),r(s,i,u,a),r(s,i,l,i.notifyWith))):(n!==l&&(o=void 0,c=[e]),(a||i.resolveWith)(o,c))}},p=a?d:function(){try{d()}catch(e){fe.Deferred.exceptionHook&&fe.Deferred.exceptionHook(e,p.stackTrace),t+1>=s&&(n!==u&&(o=void 0,c=[e]),i.rejectWith(o,c))}};t?p():(fe.Deferred.getStackHook&&(p.stackTrace=fe.Deferred.getStackHook()),e.setTimeout(p))}}var s=0;return fe.Deferred(function(e){i[0][3].add(r(0,e,fe.isFunction(a)?a:l,e.notifyWith)),i[1][3].add(r(0,e,fe.isFunction(t)?t:l)),i[2][3].add(r(0,e,fe.isFunction(n)?n:u))}).promise()},promise:function(e){return null!=e?fe.extend(e,a):a}},r={};return fe.each(i,function(e,t){var s=t[2],o=t[5];a[t[1]]=s.add,o&&s.add(function(){n=o},i[3-e][2].disable,i[0][2].lock),s.add(t[3].fire),r[t[0]]=function(){return r[t[0]+"With"](this===r?void 0:this,arguments),this},r[t[0]+"With"]=s.fireWith}),a.promise(r),t&&t.call(r,r),r},when:function(e){var t=arguments.length,i=t,n=Array(i),a=ae.call(arguments),r=fe.Deferred(),s=function(e){return function(i){n[e]=this,a[e]=arguments.length>1?ae.call(arguments):i,--t||r.resolveWith(n,a)}};if(t<=1&&(c(e,r.done(s(i)).resolve,r.reject,!t),"pending"===r.state()||fe.isFunction(a[i]&&a[i].then)))return r.then();for(;i--;)c(a[i],s(i),r.reject);return r.promise()}});var ze=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;fe.Deferred.exceptionHook=function(t,i){e.console&&e.console.warn&&t&&ze.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,i)},fe.readyException=function(t){e.setTimeout(function(){throw t})};var Pe=fe.Deferred();fe.fn.ready=function(e){return Pe.then(e).catch(function(e){fe.readyException(e)}),this},fe.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--fe.readyWait:fe.isReady)||(fe.isReady=!0,!0!==e&&--fe.readyWait>0||Pe.resolveWith(ie,[fe]))}}),fe.ready.then=Pe.then,"complete"===ie.readyState||"loading"!==ie.readyState&&!ie.documentElement.doScroll?e.setTimeout(fe.ready):(ie.addEventListener("DOMContentLoaded",d),e.addEventListener("load",d));var Fe=function(e,t,i,n,a,r,s){var o=0,l=e.length,u=null==i;if("object"===fe.type(i)){a=!0;for(o in i)Fe(e,t,o,i[o],!0,r,s)}else if(void 0!==n&&(a=!0,fe.isFunction(n)||(s=!0),u&&(s?(t.call(e,n),t=null):(u=t,t=function(e,t,i){return u.call(fe(e),i)})),t))for(;o<l;o++)t(e[o],i,s?n:n.call(e[o],o,t(e[o],i)));return a?e:u?t.call(e):l?t(e[0],i):r},Ae=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};p.uid=1,p.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Ae(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,a=this.cache(e);if("string"==typeof t)a[fe.camelCase(t)]=i;else for(n in t)a[fe.camelCase(n)]=t[n];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][fe.camelCase(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){i=(t=Array.isArray(t)?t.map(fe.camelCase):(t=fe.camelCase(t))in n?[t]:t.match(De)||[]).length;for(;i--;)delete n[t[i]]}(void 0===t||fe.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!fe.isEmptyObject(t)}};var Ie=new p,Ne=new p,je=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,He=/[A-Z]/g;fe.extend({hasData:function(e){return Ne.hasData(e)||Ie.hasData(e)},data:function(e,t,i){return Ne.access(e,t,i)},removeData:function(e,t){Ne.remove(e,t)},_data:function(e,t,i){return Ie.access(e,t,i)},_removeData:function(e,t){Ie.remove(e,t)}}),fe.fn.extend({data:function(e,t){var i,n,a,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(a=Ne.get(r),1===r.nodeType&&!Ie.get(r,"hasDataAttrs"))){for(i=s.length;i--;)s[i]&&0===(n=s[i].name).indexOf("data-")&&(n=fe.camelCase(n.slice(5)),f(r,n,a[n]));Ie.set(r,"hasDataAttrs",!0)}return a}return"object"==typeof e?this.each(function(){Ne.set(this,e)}):Fe(this,function(t){var i;if(r&&void 0===t){if(void 0!==(i=Ne.get(r,e)))return i;if(void 0!==(i=f(r,e)))return i}else this.each(function(){Ne.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ne.remove(this,e)})}}),fe.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=Ie.get(e,t),i&&(!n||Array.isArray(i)?n=Ie.access(e,t,fe.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=fe.queue(e,t),n=i.length,a=i.shift(),r=fe._queueHooks(e,t),s=function(){fe.dequeue(e,t)};"inprogress"===a&&(a=i.shift(),n--),a&&("fx"===t&&i.unshift("inprogress"),delete r.stop,a.call(e,s,r)),!n&&r&&r.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return Ie.get(e,i)||Ie.access(e,i,{empty:fe.Callbacks("once memory").add(function(){Ie.remove(e,[t+"queue",i])})})}}),fe.fn.extend({queue:function(e,t){var i=2;return"string"!=typeof e&&(t=e,e="fx",i--),arguments.length<i?fe.queue(this[0],e):void 0===t?this:this.each(function(){var i=fe.queue(this,e,t);fe._queueHooks(this,e),"fx"===e&&"inprogress"!==i[0]&&fe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){fe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var i,n=1,a=fe.Deferred(),r=this,s=this.length,o=function(){--n||a.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(i=Ie.get(r[s],e+"queueHooks"))&&i.empty&&(n++,i.empty.add(o));return o(),a.promise(t)}});var Re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Oe=new RegExp("^(?:([+-])=|)("+Re+")([a-z%]*)$","i"),Be=["Top","Right","Bottom","Left"],qe=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&fe.contains(e.ownerDocument,e)&&"none"===fe.css(e,"display")},$e=function(e,t,i,n){var a,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];a=i.apply(e,n||[]);for(r in t)e.style[r]=s[r];return a},Xe={};fe.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){qe(this)?fe(this).show():fe(this).hide()})}});var We=/^(?:checkbox|radio)$/i,Ye=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ge=/^$|\/(?:java|ecma)script/i,_e={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};_e.optgroup=_e.option,_e.tbody=_e.tfoot=_e.colgroup=_e.caption=_e.thead,_e.th=_e.td;var Ve=/<|&#?\w+;/;!function(){var e=ie.createDocumentFragment().appendChild(ie.createElement("div")),t=ie.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),he.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",he.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Qe=ie.documentElement,Ue=/^key/,Ke=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ze=/^([^.]*)(?:\.(.+)|)/;fe.event={global:{},add:function(e,t,i,n,a){var r,s,o,l,u,c,d,p,h,f,m,g=Ie.get(e);if(g)for(i.handler&&(i=(r=i).handler,a=r.selector),a&&fe.find.matchesSelector(Qe,a),i.guid||(i.guid=fe.guid++),(l=g.events)||(l=g.events={}),(s=g.handle)||(s=g.handle=function(t){return void 0!==fe&&fe.event.triggered!==t.type?fe.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(De)||[""]).length;u--;)h=m=(o=Ze.exec(t[u])||[])[1],f=(o[2]||"").split(".").sort(),h&&(d=fe.event.special[h]||{},h=(a?d.delegateType:d.bindType)||h,d=fe.event.special[h]||{},c=fe.extend({type:h,origType:m,data:n,handler:i,guid:i.guid,selector:a,needsContext:a&&fe.expr.match.needsContext.test(a),namespace:f.join(".")},r),(p=l[h])||((p=l[h]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,n,f,s)||e.addEventListener&&e.addEventListener(h,s)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=i.guid)),a?p.splice(p.delegateCount++,0,c):p.push(c),fe.event.global[h]=!0)},remove:function(e,t,i,n,a){var r,s,o,l,u,c,d,p,h,f,m,g=Ie.hasData(e)&&Ie.get(e);if(g&&(l=g.events)){for(u=(t=(t||"").match(De)||[""]).length;u--;)if(o=Ze.exec(t[u])||[],h=m=o[1],f=(o[2]||"").split(".").sort(),h){for(d=fe.event.special[h]||{},p=l[h=(n?d.delegateType:d.bindType)||h]||[],o=o[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)c=p[r],!a&&m!==c.origType||i&&i.guid!==c.guid||o&&!o.test(c.namespace)||n&&n!==c.selector&&("**"!==n||!c.selector)||(p.splice(r,1),c.selector&&p.delegateCount--,d.remove&&d.remove.call(e,c));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,f,g.handle)||fe.removeEvent(e,h,g.handle),delete l[h])}else for(h in l)fe.event.remove(e,h+t[u],i,n,!0);fe.isEmptyObject(l)&&Ie.remove(e,"handle events")}},dispatch:function(e){var t,i,n,a,r,s,o=fe.event.fix(e),l=new Array(arguments.length),u=(Ie.get(this,"events")||{})[o.type]||[],c=fe.event.special[o.type]||{};for(l[0]=o,t=1;t<arguments.length;t++)l[t]=arguments[t];if(o.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,o)){for(s=fe.event.handlers.call(this,o,u),t=0;(a=s[t++])&&!o.isPropagationStopped();)for(o.currentTarget=a.elem,i=0;(r=a.handlers[i++])&&!o.isImmediatePropagationStopped();)o.rnamespace&&!o.rnamespace.test(r.namespace)||(o.handleObj=r,o.data=r.data,void 0!==(n=((fe.event.special[r.origType]||{}).handle||r.handler).apply(a.elem,l))&&!1===(o.result=n)&&(o.preventDefault(),o.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,o),o.result}},handlers:function(e,t){var i,n,a,r,s,o=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(r=[],s={},i=0;i<l;i++)void 0===s[a=(n=t[i]).selector+" "]&&(s[a]=n.needsContext?fe(a,this).index(u)>-1:fe.find(a,this,null,[u]).length),s[a]&&r.push(n);r.length&&o.push({elem:u,handlers:r})}return u=this,l<t.length&&o.push({elem:u,handlers:t.slice(l)}),o},addProp:function(e,t){Object.defineProperty(fe.Event.prototype,e,{enumerable:!0,configurable:!0,get:fe.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[fe.expando]?e:new fe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==T()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===T()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&a(this,"input"))return this.click(),!1},_default:function(e){return a(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},fe.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},fe.Event=function(e,t){if(!(this instanceof fe.Event))return new fe.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?x:C,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&fe.extend(this,t),this.timeStamp=e&&e.timeStamp||fe.now(),this[fe.expando]=!0},fe.Event.prototype={constructor:fe.Event,isDefaultPrevented:C,isPropagationStopped:C,isImmediatePropagationStopped:C,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=x,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=x,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=x,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},fe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ue.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ke.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},fe.event.addProp),fe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){fe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var i,n=this,a=e.relatedTarget,r=e.handleObj;return a&&(a===n||fe.contains(n,a))||(e.type=r.origType,i=r.handler.apply(this,arguments),e.type=t),i}}}),fe.fn.extend({on:function(e,t,i,n){return S(this,e,t,i,n)},one:function(e,t,i,n){return S(this,e,t,i,n,1)},off:function(e,t,i){var n,a;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,fe(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(a in e)this.off(a,t,e[a]);return this}return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=C),this.each(function(){fe.event.remove(this,e,i,t)})}});var Je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,et=/<script|<style|<link/i,tt=/checked\s*(?:[^=]|=\s*.checked.)/i,it=/^true\/(.*)/,nt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;fe.extend({htmlPrefilter:function(e){return e.replace(Je,"<$1></$2>")},clone:function(e,t,i){var n,a,r,s,o=e.cloneNode(!0),l=fe.contains(e.ownerDocument,e);if(!(he.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||fe.isXMLDoc(e)))for(s=y(o),n=0,a=(r=y(e)).length;n<a;n++)D(r[n],s[n]);if(t)if(i)for(r=r||y(e),s=s||y(o),n=0,a=r.length;n<a;n++)L(r[n],s[n]);else L(e,o);return(s=y(o,"script")).length>0&&w(s,!l&&y(e,"script")),o},cleanData:function(e){for(var t,i,n,a=fe.event.special,r=0;void 0!==(i=e[r]);r++)if(Ae(i)){if(t=i[Ie.expando]){if(t.events)for(n in t.events)a[n]?fe.event.remove(i,n):fe.removeEvent(i,n,t.handle);i[Ie.expando]=void 0}i[Ne.expando]&&(i[Ne.expando]=void 0)}}}),fe.fn.extend({detach:function(e){return P(this,e,!0)},remove:function(e){return P(this,e)},text:function(e){return Fe(this,function(e){return void 0===e?fe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return z(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||k(this,e).appendChild(e)})},prepend:function(){return z(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=k(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return z(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return z(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(fe.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return fe.clone(this,e,t)})},html:function(e){return Fe(this,function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!et.test(e)&&!_e[(Ye.exec(e)||["",""])[1].toLowerCase()]){e=fe.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(fe.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return z(this,arguments,function(t){var i=this.parentNode;fe.inArray(this,e)<0&&(fe.cleanData(y(this)),i&&i.replaceChild(t,this))},e)}}),fe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){fe.fn[e]=function(e){for(var i,n=[],a=fe(e),r=a.length-1,s=0;s<=r;s++)i=s===r?this:this.clone(!0),fe(a[s])[t](i),se.apply(n,i.get());return this.pushStack(n)}});var at=/^margin/,rt=new RegExp("^("+Re+")(?!px)[a-z%]+$","i"),st=function(t){var i=t.ownerDocument.defaultView;return i&&i.opener||(i=e),i.getComputedStyle(t)};!function(){function t(){if(o){o.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",o.innerHTML="",Qe.appendChild(s);var t=e.getComputedStyle(o);i="1%"!==t.top,r="2px"===t.marginLeft,n="4px"===t.width,o.style.marginRight="50%",a="4px"===t.marginRight,Qe.removeChild(s),o=null}}var i,n,a,r,s=ie.createElement("div"),o=ie.createElement("div");o.style&&(o.style.backgroundClip="content-box",o.cloneNode(!0).style.backgroundClip="",he.clearCloneStyle="content-box"===o.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(o),fe.extend(he,{pixelPosition:function(){return t(),i},boxSizingReliable:function(){return t(),n},pixelMarginRight:function(){return t(),a},reliableMarginLeft:function(){return t(),r}}))}();var ot=/^(none|table(?!-c[ea]).+)/,lt=/^--/,ut={position:"absolute",visibility:"hidden",display:"block"},ct={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","Moz","ms"],pt=ie.createElement("div").style;fe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=F(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,r,s,o=fe.camelCase(t),l=lt.test(t),u=e.style;if(l||(t=N(o)),s=fe.cssHooks[t]||fe.cssHooks[o],void 0===i)return s&&"get"in s&&void 0!==(a=s.get(e,!1,n))?a:u[t];"string"===(r=typeof i)&&(a=Oe.exec(i))&&a[1]&&(i=m(e,t,a),r="number"),null!=i&&i===i&&("number"===r&&(i+=a&&a[3]||(fe.cssNumber[o]?"":"px")),he.clearCloneStyle||""!==i||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(i=s.set(e,i,n))||(l?u.setProperty(t,i):u[t]=i))}},css:function(e,t,i,n){var a,r,s,o=fe.camelCase(t);return lt.test(t)||(t=N(o)),(s=fe.cssHooks[t]||fe.cssHooks[o])&&"get"in s&&(a=s.get(e,!0,i)),void 0===a&&(a=F(e,t,n)),"normal"===a&&t in ct&&(a=ct[t]),""===i||i?(r=parseFloat(a),!0===i||isFinite(r)?r||0:a):a}}),fe.each(["height","width"],function(e,t){fe.cssHooks[t]={get:function(e,i,n){if(i)return!ot.test(fe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?R(e,t,n):$e(e,ut,function(){return R(e,t,n)})},set:function(e,i,n){var a,r=n&&st(e),s=n&&H(e,t,n,"border-box"===fe.css(e,"boxSizing",!1,r),r);return s&&(a=Oe.exec(i))&&"px"!==(a[3]||"px")&&(e.style[t]=i,i=fe.css(e,t)),j(e,i,s)}}}),fe.cssHooks.marginLeft=A(he.reliableMarginLeft,function(e,t){if(t)return(parseFloat(F(e,"marginLeft"))||e.getBoundingClientRect().left-$e(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),fe.each({margin:"",padding:"",border:"Width"},function(e,t){fe.cssHooks[e+t]={expand:function(i){for(var n=0,a={},r="string"==typeof i?i.split(" "):[i];n<4;n++)a[e+Be[n]+t]=r[n]||r[n-2]||r[0];return a}},at.test(e)||(fe.cssHooks[e+t].set=j)}),fe.fn.extend({css:function(e,t){return Fe(this,function(e,t,i){var n,a,r={},s=0;if(Array.isArray(t)){for(n=st(e),a=t.length;s<a;s++)r[t[s]]=fe.css(e,t[s],!1,n);return r}return void 0!==i?fe.style(e,t,i):fe.css(e,t)},e,t,arguments.length>1)}}),fe.Tween=O,O.prototype={constructor:O,init:function(e,t,i,n,a,r){this.elem=e,this.prop=i,this.easing=a||fe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=r||(fe.cssNumber[i]?"":"px")},cur:function(){var e=O.propHooks[this.prop];return e&&e.get?e.get(this):O.propHooks._default.get(this)},run:function(e){var t,i=O.propHooks[this.prop];return this.options.duration?this.pos=t=fe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):O.propHooks._default.set(this),this}},O.prototype.init.prototype=O.prototype,O.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=fe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){fe.fx.step[e.prop]?fe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[fe.cssProps[e.prop]]&&!fe.cssHooks[e.prop]?e.elem[e.prop]=e.now:fe.style(e.elem,e.prop,e.now+e.unit)}}},O.propHooks.scrollTop=O.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},fe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},fe.fx=O.prototype.init,fe.fx.step={};var ht,ft,mt=/^(?:toggle|show|hide)$/,gt=/queueHooks$/;fe.Animation=fe.extend(G,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return m(i.elem,e,Oe.exec(t),i),i}]},tweener:function(e,t){fe.isFunction(e)?(t=e,e=["*"]):e=e.match(De);for(var i,n=0,a=e.length;n<a;n++)i=e[n],G.tweeners[i]=G.tweeners[i]||[],G.tweeners[i].unshift(t)},prefilters:[W],prefilter:function(e,t){t?G.prefilters.unshift(e):G.prefilters.push(e)}}),fe.speed=function(e,t,i){var n=e&&"object"==typeof e?fe.extend({},e):{complete:i||!i&&t||fe.isFunction(e)&&e,duration:e,easing:i&&t||t&&!fe.isFunction(t)&&t};return fe.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in fe.fx.speeds?n.duration=fe.fx.speeds[n.duration]:n.duration=fe.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){fe.isFunction(n.old)&&n.old.call(this),n.queue&&fe.dequeue(this,n.queue)},n},fe.fn.extend({fadeTo:function(e,t,i,n){return this.filter(qe).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(e,t,i,n){var a=fe.isEmptyObject(e),r=fe.speed(t,i,n),s=function(){var t=G(this,fe.extend({},e),r);(a||Ie.get(this,"finish"))&&t.stop(!0)};return s.finish=s,a||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(e,t,i){var n=function(e){var t=e.stop;delete e.stop,t(i)};return"string"!=typeof e&&(i=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,a=null!=e&&e+"queueHooks",r=fe.timers,s=Ie.get(this);if(a)s[a]&&s[a].stop&&n(s[a]);else for(a in s)s[a]&&s[a].stop&&gt.test(a)&&n(s[a]);for(a=r.length;a--;)r[a].elem!==this||null!=e&&r[a].queue!==e||(r[a].anim.stop(i),t=!1,r.splice(a,1));!t&&i||fe.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,i=Ie.get(this),n=i[e+"queue"],a=i[e+"queueHooks"],r=fe.timers,s=n?n.length:0;for(i.finish=!0,fe.queue(this,e,[]),a&&a.stop&&a.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete i.finish})}}),fe.each(["toggle","show","hide"],function(e,t){var i=fe.fn[t];fe.fn[t]=function(e,n,a){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate($(t,!0),e,n,a)}}),fe.each({slideDown:$("show"),slideUp:$("hide"),slideToggle:$("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){fe.fn[e]=function(e,i,n){return this.animate(t,e,i,n)}}),fe.timers=[],fe.fx.tick=function(){var e,t=0,i=fe.timers;for(ht=fe.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||fe.fx.stop(),ht=void 0},fe.fx.timer=function(e){fe.timers.push(e),fe.fx.start()},fe.fx.interval=13,fe.fx.start=function(){ft||(ft=!0,B())},fe.fx.stop=function(){ft=null},fe.fx.speeds={slow:600,fast:200,_default:400},fe.fn.delay=function(t,i){return t=fe.fx?fe.fx.speeds[t]||t:t,i=i||"fx",this.queue(i,function(i,n){var a=e.setTimeout(i,t);n.stop=function(){e.clearTimeout(a)}})},function(){var e=ie.createElement("input"),t=ie.createElement("select").appendChild(ie.createElement("option"));e.type="checkbox",he.checkOn=""!==e.value,he.optSelected=t.selected,(e=ie.createElement("input")).value="t",e.type="radio",he.radioValue="t"===e.value}();var vt,yt=fe.expr.attrHandle;fe.fn.extend({attr:function(e,t){return Fe(this,fe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){fe.removeAttr(this,e)})}}),fe.extend({attr:function(e,t,i){var n,a,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?fe.prop(e,t,i):(1===r&&fe.isXMLDoc(e)||(a=fe.attrHooks[t.toLowerCase()]||(fe.expr.match.bool.test(t)?vt:void 0)),void 0!==i?null===i?void fe.removeAttr(e,t):a&&"set"in a&&void 0!==(n=a.set(e,i,t))?n:(e.setAttribute(t,i+""),i):a&&"get"in a&&null!==(n=a.get(e,t))?n:(n=fe.find.attr(e,t),null==n?void 0:n))},attrHooks:{type:{set:function(e,t){if(!he.radioValue&&"radio"===t&&a(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,a=t&&t.match(De);if(a&&1===e.nodeType)for(;i=a[n++];)e.removeAttribute(i)}}),vt={set:function(e,t,i){return!1===t?fe.removeAttr(e,i):e.setAttribute(i,i),i}},fe.each(fe.expr.match.bool.source.match(/\w+/g),function(e,t){var i=yt[t]||fe.find.attr;yt[t]=function(e,t,n){var a,r,s=t.toLowerCase();return n||(r=yt[s],yt[s]=a,a=null!=i(e,t,n)?s:null,yt[s]=r),a}});var wt=/^(?:input|select|textarea|button)$/i,bt=/^(?:a|area)$/i;fe.fn.extend({prop:function(e,t){return Fe(this,fe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[fe.propFix[e]||e]})}}),fe.extend({prop:function(e,t,i){var n,a,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&fe.isXMLDoc(e)||(t=fe.propFix[t]||t,a=fe.propHooks[t]),void 0!==i?a&&"set"in a&&void 0!==(n=a.set(e,i,t))?n:e[t]=i:a&&"get"in a&&null!==(n=a.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=fe.find.attr(e,"tabindex");return t?parseInt(t,10):wt.test(e.nodeName)||bt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),he.optSelected||(fe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),fe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){fe.propFix[this.toLowerCase()]=this}),fe.fn.extend({addClass:function(e){var t,i,n,a,r,s,o,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).addClass(e.call(this,t,V(this)))});if("string"==typeof e&&e)for(t=e.match(De)||[];i=this[l++];)if(a=V(i),n=1===i.nodeType&&" "+_(a)+" "){for(s=0;r=t[s++];)n.indexOf(" "+r+" ")<0&&(n+=r+" ");a!==(o=_(n))&&i.setAttribute("class",o)}return this},removeClass:function(e){var t,i,n,a,r,s,o,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).removeClass(e.call(this,t,V(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(De)||[];i=this[l++];)if(a=V(i),n=1===i.nodeType&&" "+_(a)+" "){for(s=0;r=t[s++];)for(;n.indexOf(" "+r+" ")>-1;)n=n.replace(" "+r+" "," ");a!==(o=_(n))&&i.setAttribute("class",o)}return this},toggleClass:function(e,t){var i=typeof e;return"boolean"==typeof t&&"string"===i?t?this.addClass(e):this.removeClass(e):fe.isFunction(e)?this.each(function(i){fe(this).toggleClass(e.call(this,i,V(this),t),t)}):this.each(function(){var t,n,a,r;if("string"===i)for(n=0,a=fe(this),r=e.match(De)||[];t=r[n++];)a.hasClass(t)?a.removeClass(t):a.addClass(t);else void 0!==e&&"boolean"!==i||((t=V(this))&&Ie.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Ie.get(this,"__className__")||""))})},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&(" "+_(V(i))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;fe.fn.extend({val:function(e){var t,i,n,a=this[0];{if(arguments.length)return n=fe.isFunction(e),this.each(function(i){var a;1===this.nodeType&&(null==(a=n?e.call(this,i,fe(this).val()):e)?a="":"number"==typeof a?a+="":Array.isArray(a)&&(a=fe.map(a,function(e){return null==e?"":e+""})),(t=fe.valHooks[this.type]||fe.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,a,"value")||(this.value=a))});if(a)return(t=fe.valHooks[a.type]||fe.valHooks[a.nodeName.toLowerCase()])&&"get"in t&&void 0!==(i=t.get(a,"value"))?i:(i=a.value,"string"==typeof i?i.replace(xt,""):null==i?"":i)}}}),fe.extend({valHooks:{option:{get:function(e){var t=fe.find.attr(e,"value");return null!=t?t:_(fe.text(e))}},select:{get:function(e){var t,i,n,r=e.options,s=e.selectedIndex,o="select-one"===e.type,l=o?null:[],u=o?s+1:r.length;for(n=s<0?u:o?s:0;n<u;n++)if(((i=r[n]).selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!a(i.parentNode,"optgroup"))){if(t=fe(i).val(),o)return t;l.push(t)}return l},set:function(e,t){for(var i,n,a=e.options,r=fe.makeArray(t),s=a.length;s--;)((n=a[s]).selected=fe.inArray(fe.valHooks.option.get(n),r)>-1)&&(i=!0);return i||(e.selectedIndex=-1),r}}}}),fe.each(["radio","checkbox"],function(){fe.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=fe.inArray(fe(e).val(),t)>-1}},he.checkOn||(fe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Ct=/^(?:focusinfocus|focusoutblur)$/;fe.extend(fe.event,{trigger:function(t,i,n,a){var r,s,o,l,u,c,d,p=[n||ie],h=ce.call(t,"type")?t.type:t,f=ce.call(t,"namespace")?t.namespace.split("."):[];if(s=o=n=n||ie,3!==n.nodeType&&8!==n.nodeType&&!Ct.test(h+fe.event.triggered)&&(h.indexOf(".")>-1&&(h=(f=h.split(".")).shift(),f.sort()),u=h.indexOf(":")<0&&"on"+h,t=t[fe.expando]?t:new fe.Event(h,"object"==typeof t&&t),t.isTrigger=a?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),i=null==i?[t]:fe.makeArray(i,[t]),d=fe.event.special[h]||{},a||!d.trigger||!1!==d.trigger.apply(n,i))){if(!a&&!d.noBubble&&!fe.isWindow(n)){for(l=d.delegateType||h,Ct.test(l+h)||(s=s.parentNode);s;s=s.parentNode)p.push(s),o=s;o===(n.ownerDocument||ie)&&p.push(o.defaultView||o.parentWindow||e)}for(r=0;(s=p[r++])&&!t.isPropagationStopped();)t.type=r>1?l:d.bindType||h,(c=(Ie.get(s,"events")||{})[t.type]&&Ie.get(s,"handle"))&&c.apply(s,i),(c=u&&s[u])&&c.apply&&Ae(s)&&(t.result=c.apply(s,i),!1===t.result&&t.preventDefault());return t.type=h,a||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(p.pop(),i)||!Ae(n)||u&&fe.isFunction(n[h])&&!fe.isWindow(n)&&((o=n[u])&&(n[u]=null),fe.event.triggered=h,n[h](),fe.event.triggered=void 0,o&&(n[u]=o)),t.result}},simulate:function(e,t,i){var n=fe.extend(new fe.Event,i,{type:e,isSimulated:!0});fe.event.trigger(n,null,t)}}),fe.fn.extend({trigger:function(e,t){return this.each(function(){fe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return fe.event.trigger(e,t,i,!0)}}),fe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){fe.fn[t]=function(e,i){return arguments.length>0?this.on(t,null,e,i):this.trigger(t)}}),fe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),he.focusin="onfocusin"in e,he.focusin||fe.each({focus:"focusin",blur:"focusout"},function(e,t){var i=function(e){fe.event.simulate(t,e.target,fe.event.fix(e))};fe.event.special[t]={setup:function(){var n=this.ownerDocument||this,a=Ie.access(n,t);a||n.addEventListener(e,i,!0),Ie.access(n,t,(a||0)+1)},teardown:function(){var n=this.ownerDocument||this,a=Ie.access(n,t)-1;a?Ie.access(n,t,a):(n.removeEventListener(e,i,!0),Ie.remove(n,t))}}});var Tt=e.location,St=fe.now(),kt=/\?/;fe.parseXML=function(t){var i;if(!t||"string"!=typeof t)return null;try{i=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){i=void 0}return i&&!i.getElementsByTagName("parsererror").length||fe.error("Invalid XML: "+t),i};var Et=/\[\]$/,Mt=/\r?\n/g,Lt=/^(?:submit|button|image|reset|file)$/i,Dt=/^(?:input|select|textarea|keygen)/i;fe.param=function(e,t){var i,n=[],a=function(e,t){var i=fe.isFunction(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)};if(Array.isArray(e)||e.jquery&&!fe.isPlainObject(e))fe.each(e,function(){a(this.name,this.value)});else for(i in e)Q(i,e[i],t,a);return n.join("&")},fe.fn.extend({serialize:function(){return fe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=fe.prop(this,"elements");return e?fe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!fe(this).is(":disabled")&&Dt.test(this.nodeName)&&!Lt.test(e)&&(this.checked||!We.test(e))}).map(function(e,t){var i=fe(this).val();return null==i?null:Array.isArray(i)?fe.map(i,function(e){return{name:t.name,value:e.replace(Mt,"\r\n")}}):{name:t.name,value:i.replace(Mt,"\r\n")}}).get()}});var zt=/%20/g,Pt=/#.*$/,Ft=/([?&])_=[^&]*/,At=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Nt=/^(?:GET|HEAD)$/,jt=/^\/\//,Ht={},Rt={},Ot="*/".concat("*"),Bt=ie.createElement("a");Bt.href=Tt.href,fe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Tt.href,type:"GET",isLocal:It.test(Tt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ot,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":fe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Z(Z(e,fe.ajaxSettings),t):Z(fe.ajaxSettings,e)},ajaxPrefilter:U(Ht),ajaxTransport:U(Rt),ajax:function(t,i){function n(t,i,n,o){var u,p,h,b,x,C=i;c||(c=!0,l&&e.clearTimeout(l),a=void 0,s=o||"",T.readyState=t>0?4:0,u=t>=200&&t<300||304===t,n&&(b=J(f,T,n)),b=ee(f,b,T,u),u?(f.ifModified&&((x=T.getResponseHeader("Last-Modified"))&&(fe.lastModified[r]=x),(x=T.getResponseHeader("etag"))&&(fe.etag[r]=x)),204===t||"HEAD"===f.type?C="nocontent":304===t?C="notmodified":(C=b.state,p=b.data,u=!(h=b.error))):(h=C,!t&&C||(C="error",t<0&&(t=0))),T.status=t,T.statusText=(i||C)+"",u?v.resolveWith(m,[p,C,T]):v.rejectWith(m,[T,C,h]),T.statusCode(w),w=void 0,d&&g.trigger(u?"ajaxSuccess":"ajaxError",[T,f,u?p:h]),y.fireWith(m,[T,C]),d&&(g.trigger("ajaxComplete",[T,f]),--fe.active||fe.event.trigger("ajaxStop")))}"object"==typeof t&&(i=t,t=void 0),i=i||{};var a,r,s,o,l,u,c,d,p,h,f=fe.ajaxSetup({},i),m=f.context||f,g=f.context&&(m.nodeType||m.jquery)?fe(m):fe.event,v=fe.Deferred(),y=fe.Callbacks("once memory"),w=f.statusCode||{},b={},x={},C="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(c){if(!o)for(o={};t=At.exec(s);)o[t[1].toLowerCase()]=t[2];t=o[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?s:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||C;return a&&a.abort(t),n(0,t),this}};if(v.promise(T),f.url=((t||f.url||Tt.href)+"").replace(jt,Tt.protocol+"//"),f.type=i.method||i.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(De)||[""],null==f.crossDomain){u=ie.createElement("a");try{u.href=f.url,u.href=u.href,f.crossDomain=Bt.protocol+"//"+Bt.host!=u.protocol+"//"+u.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=fe.param(f.data,f.traditional)),K(Ht,f,i,T),c)return T;(d=fe.event&&f.global)&&0==fe.active++&&fe.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Nt.test(f.type),r=f.url.replace(Pt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(zt,"+")):(h=f.url.slice(r.length),f.data&&(r+=(kt.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(r=r.replace(Ft,"$1"),h=(kt.test(r)?"&":"?")+"_="+St+++h),f.url=r+h),f.ifModified&&(fe.lastModified[r]&&T.setRequestHeader("If-Modified-Since",fe.lastModified[r]),fe.etag[r]&&T.setRequestHeader("If-None-Match",fe.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||i.contentType)&&T.setRequestHeader("Content-Type",f.contentType),T.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ot+"; q=0.01":""):f.accepts["*"]);for(p in f.headers)T.setRequestHeader(p,f.headers[p]);if(f.beforeSend&&(!1===f.beforeSend.call(m,T,f)||c))return T.abort();if(C="abort",y.add(f.complete),T.done(f.success),T.fail(f.error),a=K(Rt,f,i,T)){if(T.readyState=1,d&&g.trigger("ajaxSend",[T,f]),c)return T;f.async&&f.timeout>0&&(l=e.setTimeout(function(){T.abort("timeout")},f.timeout));try{c=!1,a.send(b,n)}catch(e){if(c)throw e;n(-1,e)}}else n(-1,"No Transport");return T},getJSON:function(e,t,i){return fe.get(e,t,i,"json")},getScript:function(e,t){return fe.get(e,void 0,t,"script")}}),fe.each(["get","post"],function(e,t){fe[t]=function(e,i,n,a){return fe.isFunction(i)&&(a=a||n,n=i,i=void 0),fe.ajax(fe.extend({url:e,type:t,dataType:a,data:i,success:n},fe.isPlainObject(e)&&e))}}),fe._evalUrl=function(e){return fe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},fe.fn.extend({wrapAll:function(e){var t;return this[0]&&(fe.isFunction(e)&&(e=e.call(this[0])),t=fe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return fe.isFunction(e)?this.each(function(t){fe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=fe(this),i=t.contents();i.length?i.wrapAll(e):t.append(e)})},wrap:function(e){var t=fe.isFunction(e);return this.each(function(i){fe(this).wrapAll(t?e.call(this,i):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){fe(this).replaceWith(this.childNodes)}),this}}),fe.expr.pseudos.hidden=function(e){return!fe.expr.pseudos.visible(e)},fe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},fe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var qt={0:200,1223:204},$t=fe.ajaxSettings.xhr();he.cors=!!$t&&"withCredentials"in $t,he.ajax=$t=!!$t,fe.ajaxTransport(function(t){var i,n;if(he.cors||$t&&!t.crossDomain)return{send:function(a,r){var s,o=t.xhr();if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)o[s]=t.xhrFields[s];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||a["X-Requested-With"]||(a["X-Requested-With"]="XMLHttpRequest");for(s in a)o.setRequestHeader(s,a[s]);i=function(e){return function(){i&&(i=n=o.onload=o.onerror=o.onabort=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?r(0,"error"):r(o.status,o.statusText):r(qt[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=i(),n=o.onerror=i("error"),void 0!==o.onabort?o.onabort=n:o.onreadystatechange=function(){4===o.readyState&&e.setTimeout(function(){i&&n()})},i=i("abort");try{o.send(t.hasContent&&t.data||null)}catch(e){if(i)throw e}},abort:function(){i&&i()}}}),fe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),fe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return fe.globalEval(e),e}}}),fe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),fe.ajaxTransport("script",function(e){if(e.crossDomain){var t,i;return{send:function(n,a){t=fe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",i=function(e){t.remove(),i=null,e&&a("error"===e.type?404:200,e.type)}),ie.head.appendChild(t[0])},abort:function(){i&&i()}}}});var Xt=[],Wt=/(=)\?(?=&|$)|\?\?/;fe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||fe.expando+"_"+St++;return this[e]=!0,e}}),fe.ajaxPrefilter("json jsonp",function(t,i,n){var a,r,s,o=!1!==t.jsonp&&(Wt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wt.test(t.data)&&"data");if(o||"jsonp"===t.dataTypes[0])return a=t.jsonpCallback=fe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,o?t[o]=t[o].replace(Wt,"$1"+a):!1!==t.jsonp&&(t.url+=(kt.test(t.url)?"&":"?")+t.jsonp+"="+a),t.converters["script json"]=function(){return s||fe.error(a+" was not called"),s[0]},t.dataTypes[0]="json",r=e[a],e[a]=function(){s=arguments},n.always(function(){void 0===r?fe(e).removeProp(a):e[a]=r,t[a]&&(t.jsonpCallback=i.jsonpCallback,Xt.push(a)),s&&fe.isFunction(r)&&r(s[0]),s=r=void 0}),"script"}),he.createHTMLDocument=function(){var e=ie.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),fe.parseHTML=function(e,t,i){if("string"!=typeof e)return[];"boolean"==typeof t&&(i=t,t=!1);var n,a,r;return t||(he.createHTMLDocument?((n=(t=ie.implementation.createHTMLDocument("")).createElement("base")).href=ie.location.href,t.head.appendChild(n)):t=ie),a=Te.exec(e),r=!i&&[],a?[t.createElement(a[1])]:(a=b([e],t,r),r&&r.length&&fe(r).remove(),fe.merge([],a.childNodes))},fe.fn.load=function(e,t,i){var n,a,r,s=this,o=e.indexOf(" ");return o>-1&&(n=_(e.slice(o)),e=e.slice(0,o)),fe.isFunction(t)?(i=t,t=void 0):t&&"object"==typeof t&&(a="POST"),s.length>0&&fe.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(n?fe("<div>").append(fe.parseHTML(e)).find(n):e)}).always(i&&function(e,t){s.each(function(){i.apply(this,r||[e.responseText,t,e])})}),this},fe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){fe.fn[t]=function(e){return this.on(t,e)}}),fe.expr.pseudos.animated=function(e){return fe.grep(fe.timers,function(t){return e===t.elem}).length},fe.offset={setOffset:function(e,t,i){var n,a,r,s,o,l,u=fe.css(e,"position"),c=fe(e),d={};"static"===u&&(e.style.position="relative"),o=c.offset(),r=fe.css(e,"top"),l=fe.css(e,"left"),("absolute"===u||"fixed"===u)&&(r+l).indexOf("auto")>-1?(s=(n=c.position()).top,a=n.left):(s=parseFloat(r)||0,a=parseFloat(l)||0),fe.isFunction(t)&&(t=t.call(e,i,fe.extend({},o))),null!=t.top&&(d.top=t.top-o.top+s),null!=t.left&&(d.left=t.left-o.left+a),"using"in t?t.using.call(e,d):c.css(d)}},fe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){fe.offset.setOffset(this,e,t)});var t,i,n,a,r=this[0];if(r)return r.getClientRects().length?(n=r.getBoundingClientRect(),t=r.ownerDocument,i=t.documentElement,a=t.defaultView,{top:n.top+a.pageYOffset-i.clientTop,left:n.left+a.pageXOffset-i.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,i=this[0],n={top:0,left:0};return"fixed"===fe.css(i,"position")?t=i.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),a(e[0],"html")||(n=e.offset()),n={top:n.top+fe.css(e[0],"borderTopWidth",!0),left:n.left+fe.css(e[0],"borderLeftWidth",!0)}),{top:t.top-n.top-fe.css(i,"marginTop",!0),left:t.left-n.left-fe.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===fe.css(e,"position");)e=e.offsetParent;return e||Qe})}}),fe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var i="pageYOffset"===t;fe.fn[e]=function(n){return Fe(this,function(e,n,a){var r;if(fe.isWindow(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===a)return r?r[t]:e[n];r?r.scrollTo(i?r.pageXOffset:a,i?a:r.pageYOffset):e[n]=a},e,n,arguments.length)}}),fe.each(["top","left"],function(e,t){fe.cssHooks[t]=A(he.pixelPosition,function(e,i){if(i)return i=F(e,t),rt.test(i)?fe(e).position()[t]+"px":i})}),fe.each({Height:"height",Width:"width"},function(e,t){fe.each({padding:"inner"+e,content:t,"":"outer"+e},function(i,n){fe.fn[n]=function(a,r){var s=arguments.length&&(i||"boolean"!=typeof a),o=i||(!0===a||!0===r?"margin":"border");return Fe(this,function(t,i,a){var r;return fe.isWindow(t)?0===n.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===a?fe.css(t,i,o):fe.style(t,i,a,o)},t,s?a:void 0,s)}})}),fe.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)}}),fe.holdReady=function(e){e?fe.readyWait++:fe.ready(!0)},fe.isArray=Array.isArray,fe.parseJSON=JSON.parse,fe.nodeName=a,"function"==typeof define&&define.amd&&define("jquery",[],function(){return fe});var Yt=e.jQuery,Gt=e.$;return fe.noConflict=function(t){return e.$===fe&&(e.$=Gt),t&&e.jQuery===fe&&(e.jQuery=Yt),fe},t||(e.jQuery=e.$=fe),fe}),function(e,t){"object"==typeof module&&module.exports?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Spinner=t()}(this,function(){"use strict";function e(e,t){var i,n=document.createElement(e||"div");for(i in t)n[i]=t[i];return n}function t(e){for(var t=1,i=arguments.length;t<i;t++)e.appendChild(arguments[t]);return e}function i(e,t,i,n){var a=["opacity",t,~~(100*e),i,n].join("-"),r=.01+i/n*100,s=Math.max(1-(1-e)/t*(100-r),e),o=l.substring(0,l.indexOf("Animation")).toLowerCase(),c=o&&"-"+o+"-"||"";return d[a]||(u.insertRule("@"+c+"keyframes "+a+"{0%{opacity:"+s+"}"+r+"%{opacity:"+e+"}"+(r+.01)+"%{opacity:1}"+(r+t)%100+"%{opacity:"+e+"}100%{opacity:"+s+"}}",u.cssRules.length),d[a]=1),a}function n(e,t){var i,n,a=e.style;if(t=t.charAt(0).toUpperCase()+t.slice(1),void 0!==a[t])return t;for(n=0;n<c.length;n++)if(i=c[n]+t,void 0!==a[i])return i}function a(e,t){for(var i in t)e.style[n(e,i)||i]=t[i];return e}function r(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var n in i)void 0===e[n]&&(e[n]=i[n])}return e}function s(e,t){return"string"==typeof e?e:e[t%e.length]}function o(e){this.opts=r(e||{},o.defaults,p)}var l,u,c=["webkit","Moz","ms","O"],d={},p={lines:12,length:7,width:5,radius:10,scale:1,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:100,fps:20,zIndex:2e9,className:"spinner",top:"50%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};if(o.defaults={},r(o.prototype,{spin:function(t){this.stop();var i=this,n=i.opts,r=i.el=e(null,{className:n.className});if(a(r,{position:n.position,width:0,zIndex:n.zIndex,left:n.left,top:n.top}),t&&t.insertBefore(r,t.firstChild||null),r.setAttribute("role","progressbar"),i.lines(r,i.opts),!l){var s,o=0,u=(n.lines-1)*(1-n.direction)/2,c=n.fps,d=c/n.speed,p=(1-n.opacity)/(d*n.trail/100),h=d/n.lines;!function e(){o++;for(var t=0;t<n.lines;t++)s=Math.max(1-(o+(n.lines-t)*h)%d*p,n.opacity),i.opacity(r,t*n.direction+u,s,n);i.timeout=i.el&&setTimeout(e,~~(1e3/c))}()}return i},stop:function(){var e=this.el;return e&&(clearTimeout(this.timeout),e.parentNode&&e.parentNode.removeChild(e),this.el=void 0),this},lines:function(n,r){function o(t,i){return a(e(),{position:"absolute",width:r.scale*(r.length+r.width)+"px",height:r.scale*r.width+"px",background:t,boxShadow:i,transformOrigin:"left",transform:"rotate("+~~(360/r.lines*c+r.rotate)+"deg) translate("+r.scale*r.radius+"px,0)",borderRadius:(r.corners*r.scale*r.width>>1)+"px"})}for(var u,c=0,d=(r.lines-1)*(1-r.direction)/2;c<r.lines;c++)u=a(e(),{position:"absolute",top:1+~(r.scale*r.width/2)+"px",transform:r.hwaccel?"translate3d(0,0,0)":"",opacity:r.opacity,animation:l&&i(r.opacity,r.trail,d+c*r.direction,r.lines)+" "+1/r.speed+"s linear infinite"}),r.shadow&&t(u,a(o("#000","0 0 4px #000"),{top:"2px"})),t(n,t(u,o(s(r.color,c),"0 0 1px rgba(0,0,0,.1)")));return n},opacity:function(e,t,i){t<e.childNodes.length&&(e.childNodes[t].style.opacity=i)}}),"undefined"!=typeof document){u=function(){var i=e("style",{type:"text/css"});return t(document.getElementsByTagName("head")[0],i),i.sheet||i.styleSheet}();var h=a(e("group"),{behavior:"url(#default#VML)"});!n(h,"transform")&&h.adj?function(){function i(t,i){return e("<"+t+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',i)}u.addRule(".spin-vml","behavior:url(#default#VML)"),o.prototype.lines=function(e,n){function r(){return a(i("group",{coordsize:c+" "+c,coordorigin:-u+" "+-u}),{width:c,height:c})}function o(e,o,l){t(p,t(a(r(),{rotation:360/n.lines*e+"deg",left:~~o}),t(a(i("roundrect",{arcsize:n.corners}),{width:u,height:n.scale*n.width,left:n.scale*n.radius,top:-n.scale*n.width>>1,filter:l}),i("fill",{color:s(n.color,e),opacity:n.opacity}),i("stroke",{opacity:0}))))}var l,u=n.scale*(n.length+n.width),c=2*n.scale*u,d=-(n.width+n.length)*n.scale*2+"px",p=a(r(),{position:"absolute",top:d,left:d});if(n.shadow)for(l=1;l<=n.lines;l++)o(l,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(l=1;l<=n.lines;l++)o(l);return t(e,p)},o.prototype.opacity=function(e,t,i,n){var a=e.firstChild;n=n.shadow&&n.lines||0,a&&t+n<a.childNodes.length&&(a=(a=(a=a.childNodes[t+n])&&a.firstChild)&&a.firstChild)&&(a.opacity=i)}}():l=n(h,"animation")}return o}),function(e){if("object"==typeof exports)e(require("jquery"),require("spin.js"));else if("function"==typeof define&&define.amd)define(["jquery","spin"],e);else{if(!window.Spinner)throw new Error("Spin.js not present");e(window.jQuery,window.Spinner)}}(function(e,t){e.fn.spin=function(i,n){return this.each(function(){var a=e(this),r=a.data();r.spinner&&(r.spinner.stop(),delete r.spinner),!1!==i&&(i=e.extend({color:n||a.css("color")},e.fn.spin.presets[i]||i),r.spinner=new t(i).spin(this))})},e.fn.spin.presets={tiny:{lines:8,length:2,width:2,radius:3},small:{lines:8,length:4,width:3,radius:5},large:{lines:10,length:8,width:4,radius:8}}}),function(){"use strict";var e,t=function(i,n){function a(e){return Math.floor(e)}function r(){var e=b.params.autoplay,t=b.slides.eq(b.activeIndex);t.attr("data-swiper-autoplay")&&(e=t.attr("data-swiper-autoplay")||b.params.autoplay),b.autoplayTimeoutId=setTimeout(function(){b.params.loop?(b.fixLoop(),b._slideNext(),b.emit("onAutoplay",b)):b.isEnd?n.autoplayStopOnLast?b.stopAutoplay():(b._slideTo(0),b.emit("onAutoplay",b)):(b._slideNext(),b.emit("onAutoplay",b))},e)}function s(t,i){var n=e(t.target);if(!n.is(i))if("string"==typeof i)n=n.parents(i);else if(i.nodeType){var a;return n.parents().each(function(e,t){t===i&&(a=i)}),a?i:void 0}if(0!==n.length)return n[0]}function o(e,t){t=t||{};var i=new(window.MutationObserver||window.WebkitMutationObserver)(function(e){e.forEach(function(e){b.onResize(!0),b.emit("onObserverUpdate",b,e)})});i.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),b.observers.push(i)}function l(e){e.originalEvent&&(e=e.originalEvent);var t=e.keyCode||e.charCode;if(!b.params.allowSwipeToNext&&(b.isHorizontal()&&39===t||!b.isHorizontal()&&40===t))return!1;if(!b.params.allowSwipeToPrev&&(b.isHorizontal()&&37===t||!b.isHorizontal()&&38===t))return!1;if(!(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey||document.activeElement&&document.activeElement.nodeName&&("input"===document.activeElement.nodeName.toLowerCase()||"textarea"===document.activeElement.nodeName.toLowerCase()))){if(37===t||39===t||38===t||40===t){var i=!1;if(b.container.parents("."+b.params.slideClass).length>0&&0===b.container.parents("."+b.params.slideActiveClass).length)return;var n={left:window.pageXOffset,top:window.pageYOffset},a=window.innerWidth,r=window.innerHeight,s=b.container.offset();b.rtl&&(s.left=s.left-b.container[0].scrollLeft);for(var o=[[s.left,s.top],[s.left+b.width,s.top],[s.left,s.top+b.height],[s.left+b.width,s.top+b.height]],l=0;l<o.length;l++){var u=o[l];u[0]>=n.left&&u[0]<=n.left+a&&u[1]>=n.top&&u[1]<=n.top+r&&(i=!0)}if(!i)return}b.isHorizontal()?(37!==t&&39!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),(39===t&&!b.rtl||37===t&&b.rtl)&&b.slideNext(),(37===t&&!b.rtl||39===t&&b.rtl)&&b.slidePrev()):(38!==t&&40!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),40===t&&b.slideNext(),38===t&&b.slidePrev()),b.emit("onKeyPress",b,t)}}function u(e){var t=0,i=0,n=0,a=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),n=10*t,a=10*i,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(n=e.deltaX),(n||a)&&e.deltaMode&&(1===e.deltaMode?(n*=40,a*=40):(n*=800,a*=800)),n&&!t&&(t=n<1?-1:1),a&&!i&&(i=a<1?-1:1),{spinX:t,spinY:i,pixelX:n,pixelY:a}}function c(e){e.originalEvent&&(e=e.originalEvent);var t=0,i=b.rtl?-1:1,n=u(e);if(b.params.mousewheelForceToAxis)if(b.isHorizontal()){if(!(Math.abs(n.pixelX)>Math.abs(n.pixelY)))return;t=n.pixelX*i}else{if(!(Math.abs(n.pixelY)>Math.abs(n.pixelX)))return;t=n.pixelY}else t=Math.abs(n.pixelX)>Math.abs(n.pixelY)?-n.pixelX*i:-n.pixelY;if(0!==t){if(b.params.mousewheelInvert&&(t=-t),b.params.freeMode){var a=b.getWrapperTranslate()+t*b.params.mousewheelSensitivity,r=b.isBeginning,s=b.isEnd;if(a>=b.minTranslate()&&(a=b.minTranslate()),a<=b.maxTranslate()&&(a=b.maxTranslate()),b.setWrapperTransition(0),b.setWrapperTranslate(a),b.updateProgress(),b.updateActiveIndex(),(!r&&b.isBeginning||!s&&b.isEnd)&&b.updateClasses(),b.params.freeModeSticky?(clearTimeout(b.mousewheel.timeout),b.mousewheel.timeout=setTimeout(function(){b.slideReset()},300)):b.params.lazyLoading&&b.lazy&&b.lazy.load(),b.emit("onScroll",b,e),b.params.autoplay&&b.params.autoplayDisableOnInteraction&&b.stopAutoplay(),0===a||a===b.maxTranslate())return}else{if((new window.Date).getTime()-b.mousewheel.lastScrollTime>60)if(t<0)if(b.isEnd&&!b.params.loop||b.animating){if(b.params.mousewheelReleaseOnEdges)return!0}else b.slideNext(),b.emit("onScroll",b,e);else if(b.isBeginning&&!b.params.loop||b.animating){if(b.params.mousewheelReleaseOnEdges)return!0}else b.slidePrev(),b.emit("onScroll",b,e);b.mousewheel.lastScrollTime=(new window.Date).getTime()}return e.preventDefault?e.preventDefault():e.returnValue=!1,!1}}function d(t,i){t=e(t);var n,a,r,s=b.rtl?-1:1;n=t.attr("data-swiper-parallax")||"0",a=t.attr("data-swiper-parallax-x"),r=t.attr("data-swiper-parallax-y"),a||r?(a=a||"0",r=r||"0"):b.isHorizontal()?(a=n,r="0"):(r=n,a="0"),a=a.indexOf("%")>=0?parseInt(a,10)*i*s+"%":a*i*s+"px",r=r.indexOf("%")>=0?parseInt(r,10)*i+"%":r*i+"px",t.transform("translate3d("+a+", "+r+",0px)")}function p(e){return 0!==e.indexOf("on")&&(e=e[0]!==e[0].toUpperCase()?"on"+e[0].toUpperCase()+e.substring(1):"on"+e),e}if(!(this instanceof t))return new t(i,n);var h={direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,autoplay:!1,autoplayDisableOnInteraction:!0,autoplayStopOnLast:!1,iOSEdgeSwipeDetection:!1,iOSEdgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",coverflow:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0},flip:{slideShadows:!0,limitRotation:!0},cube:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94},fade:{crossFade:!1},parallax:!1,zoom:!1,zoomMax:3,zoomMin:1,zoomToggle:!0,scrollbar:null,scrollbarHide:!0,scrollbarDraggable:!1,scrollbarSnapOnRelease:!1,keyboardControl:!1,mousewheelControl:!1,mousewheelReleaseOnEdges:!1,mousewheelInvert:!1,mousewheelForceToAxis:!1,mousewheelSensitivity:1,mousewheelEventsTarged:"container",hashnav:!1,hashnavWatchState:!1,history:!1,replaceState:!1,breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,onlyExternal:!1,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,pagination:null,paginationElement:"span",paginationClickable:!1,paginationHide:!1,paginationBulletRender:null,paginationProgressRender:null,paginationFractionRender:null,paginationCustomRender:null,paginationType:"bullets",resistance:!0,resistanceRatio:.85,nextButton:null,prevButton:null,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,lazyLoading:!1,lazyLoadingInPrevNext:!1,lazyLoadingInPrevNextAmount:1,lazyLoadingOnTransitionStart:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,control:void 0,controlInverse:!1,controlBy:"slide",normalizeSlideIndex:!0,allowSwipeToPrev:!0,allowSwipeToNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",buttonDisabledClass:"swiper-button-disabled",paginationCurrentClass:"swiper-pagination-current",paginationTotalClass:"swiper-pagination-total",paginationHiddenClass:"swiper-pagination-hidden",paginationProgressbarClass:"swiper-pagination-progressbar",paginationClickableClass:"swiper-pagination-clickable",paginationModifierClass:"swiper-pagination-",lazyLoadingClass:"swiper-lazy",lazyStatusLoadingClass:"swiper-lazy-loading",lazyStatusLoadedClass:"swiper-lazy-loaded",lazyPreloaderClass:"swiper-lazy-preloader",notificationClass:"swiper-notification",preloaderClass:"preloader",zoomContainerClass:"swiper-zoom-container",observer:!1,observeParents:!1,a11y:!1,prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",runCallbacksOnInit:!0},f=n&&n.virtualTranslate;n=n||{};var m={};for(var g in n)if("object"!=typeof n[g]||null===n[g]||(n[g].nodeType||n[g]===window||n[g]===document||"undefined"!=typeof Dom7&&n[g]instanceof Dom7||"undefined"!=typeof jQuery&&n[g]instanceof jQuery))m[g]=n[g];else{m[g]={};for(var v in n[g])m[g][v]=n[g][v]}for(var y in h)if(void 0===n[y])n[y]=h[y];else if("object"==typeof n[y])for(var w in h[y])void 0===n[y][w]&&(n[y][w]=h[y][w]);var b=this;if(b.params=n,b.originalParams=m,b.classNames=[],void 0!==e&&"undefined"!=typeof Dom7&&(e=Dom7),(void 0!==e||(e="undefined"==typeof Dom7?window.Dom7||window.Zepto||window.jQuery:Dom7))&&(b.$=e,b.currentBreakpoint=void 0,b.getActiveBreakpoint=function(){if(!b.params.breakpoints)return!1;var e,t=!1,i=[];for(e in b.params.breakpoints)b.params.breakpoints.hasOwnProperty(e)&&i.push(e);i.sort(function(e,t){return parseInt(e,10)>parseInt(t,10)});for(var n=0;n<i.length;n++)(e=i[n])>=window.innerWidth&&!t&&(t=e);return t||"max"},b.setBreakpoint=function(){var e=b.getActiveBreakpoint();if(e&&b.currentBreakpoint!==e){var t=e in b.params.breakpoints?b.params.breakpoints[e]:b.originalParams,i=b.params.loop&&t.slidesPerView!==b.params.slidesPerView;for(var n in t)b.params[n]=t[n];b.currentBreakpoint=e,i&&b.destroyLoop&&b.reLoop(!0)}},b.params.breakpoints&&b.setBreakpoint(),b.container=e(i),0!==b.container.length)){if(b.container.length>1){var x=[];return b.container.each(function(){x.push(new t(this,n))}),x}b.container[0].swiper=b,b.container.data("swiper",b),b.classNames.push(b.params.containerModifierClass+b.params.direction),b.params.freeMode&&b.classNames.push(b.params.containerModifierClass+"free-mode"),b.support.flexbox||(b.classNames.push(b.params.containerModifierClass+"no-flexbox"),b.params.slidesPerColumn=1),b.params.autoHeight&&b.classNames.push(b.params.containerModifierClass+"autoheight"),(b.params.parallax||b.params.watchSlidesVisibility)&&(b.params.watchSlidesProgress=!0),b.params.touchReleaseOnEdges&&(b.params.resistanceRatio=0),["cube","coverflow","flip"].indexOf(b.params.effect)>=0&&(b.support.transforms3d?(b.params.watchSlidesProgress=!0,b.classNames.push(b.params.containerModifierClass+"3d")):b.params.effect="slide"),"slide"!==b.params.effect&&b.classNames.push(b.params.containerModifierClass+b.params.effect),"cube"===b.params.effect&&(b.params.resistanceRatio=0,b.params.slidesPerView=1,b.params.slidesPerColumn=1,b.params.slidesPerGroup=1,b.params.centeredSlides=!1,b.params.spaceBetween=0,b.params.virtualTranslate=!0),"fade"!==b.params.effect&&"flip"!==b.params.effect||(b.params.slidesPerView=1,b.params.slidesPerColumn=1,b.params.slidesPerGroup=1,b.params.watchSlidesProgress=!0,b.params.spaceBetween=0,void 0===f&&(b.params.virtualTranslate=!0)),b.params.grabCursor&&b.support.touch&&(b.params.grabCursor=!1),b.wrapper=b.container.children("."+b.params.wrapperClass),b.params.pagination&&(b.paginationContainer=e(b.params.pagination),b.params.uniqueNavElements&&"string"==typeof b.params.pagination&&b.paginationContainer.length>1&&1===b.container.find(b.params.pagination).length&&(b.paginationContainer=b.container.find(b.params.pagination)),"bullets"===b.params.paginationType&&b.params.paginationClickable?b.paginationContainer.addClass(b.params.paginationModifierClass+"clickable"):b.params.paginationClickable=!1,b.paginationContainer.addClass(b.params.paginationModifierClass+b.params.paginationType)),(b.params.nextButton||b.params.prevButton)&&(b.params.nextButton&&(b.nextButton=e(b.params.nextButton),b.params.uniqueNavElements&&"string"==typeof b.params.nextButton&&b.nextButton.length>1&&1===b.container.find(b.params.nextButton).length&&(b.nextButton=b.container.find(b.params.nextButton))),b.params.prevButton&&(b.prevButton=e(b.params.prevButton),b.params.uniqueNavElements&&"string"==typeof b.params.prevButton&&b.prevButton.length>1&&1===b.container.find(b.params.prevButton).length&&(b.prevButton=b.container.find(b.params.prevButton)))),b.isHorizontal=function(){return"horizontal"===b.params.direction},b.rtl=b.isHorizontal()&&("rtl"===b.container[0].dir.toLowerCase()||"rtl"===b.container.css("direction")),b.rtl&&b.classNames.push(b.params.containerModifierClass+"rtl"),b.rtl&&(b.wrongRTL="-webkit-box"===b.wrapper.css("display")),b.params.slidesPerColumn>1&&b.classNames.push(b.params.containerModifierClass+"multirow"),b.device.android&&b.classNames.push(b.params.containerModifierClass+"android"),b.container.addClass(b.classNames.join(" ")),b.translate=0,b.progress=0,b.velocity=0,b.lockSwipeToNext=function(){b.params.allowSwipeToNext=!1,!1===b.params.allowSwipeToPrev&&b.params.grabCursor&&b.unsetGrabCursor()},b.lockSwipeToPrev=function(){b.params.allowSwipeToPrev=!1,!1===b.params.allowSwipeToNext&&b.params.grabCursor&&b.unsetGrabCursor()},b.lockSwipes=function(){b.params.allowSwipeToNext=b.params.allowSwipeToPrev=!1,b.params.grabCursor&&b.unsetGrabCursor()},b.unlockSwipeToNext=function(){b.params.allowSwipeToNext=!0,!0===b.params.allowSwipeToPrev&&b.params.grabCursor&&b.setGrabCursor()},b.unlockSwipeToPrev=function(){b.params.allowSwipeToPrev=!0,!0===b.params.allowSwipeToNext&&b.params.grabCursor&&b.setGrabCursor()},b.unlockSwipes=function(){b.params.allowSwipeToNext=b.params.allowSwipeToPrev=!0,b.params.grabCursor&&b.setGrabCursor()},b.setGrabCursor=function(e){b.container[0].style.cursor="move",b.container[0].style.cursor=e?"-webkit-grabbing":"-webkit-grab",b.container[0].style.cursor=e?"-moz-grabbin":"-moz-grab",b.container[0].style.cursor=e?"grabbing":"grab"},b.unsetGrabCursor=function(){b.container[0].style.cursor=""},b.params.grabCursor&&b.setGrabCursor(),b.imagesToLoad=[],b.imagesLoaded=0,b.loadImage=function(e,t,i,n,a,r){function s(){r&&r()}var o;e.complete&&a?s():t?((o=new window.Image).onload=s,o.onerror=s,n&&(o.sizes=n),i&&(o.srcset=i),t&&(o.src=t)):s()},b.preloadImages=function(){function e(){void 0!==b&&null!==b&&b&&(void 0!==b.imagesLoaded&&b.imagesLoaded++,b.imagesLoaded===b.imagesToLoad.length&&(b.params.updateOnImagesReady&&b.update(),b.emit("onImagesReady",b)))}b.imagesToLoad=b.container.find("img");for(var t=0;t<b.imagesToLoad.length;t++)b.loadImage(b.imagesToLoad[t],b.imagesToLoad[t].currentSrc||b.imagesToLoad[t].getAttribute("src"),b.imagesToLoad[t].srcset||b.imagesToLoad[t].getAttribute("srcset"),b.imagesToLoad[t].sizes||b.imagesToLoad[t].getAttribute("sizes"),!0,e)},b.autoplayTimeoutId=void 0,b.autoplaying=!1,b.autoplayPaused=!1,b.startAutoplay=function(){return void 0===b.autoplayTimeoutId&&(!!b.params.autoplay&&(!b.autoplaying&&(b.autoplaying=!0,b.emit("onAutoplayStart",b),void r())))},b.stopAutoplay=function(e){b.autoplayTimeoutId&&(b.autoplayTimeoutId&&clearTimeout(b.autoplayTimeoutId),b.autoplaying=!1,b.autoplayTimeoutId=void 0,b.emit("onAutoplayStop",b))},b.pauseAutoplay=function(e){b.autoplayPaused||(b.autoplayTimeoutId&&clearTimeout(b.autoplayTimeoutId),b.autoplayPaused=!0,0===e?(b.autoplayPaused=!1,r()):b.wrapper.transitionEnd(function(){b&&(b.autoplayPaused=!1,b.autoplaying?r():b.stopAutoplay())}))},b.minTranslate=function(){return-b.snapGrid[0]},b.maxTranslate=function(){return-b.snapGrid[b.snapGrid.length-1]},b.updateAutoHeight=function(){var e,t=[],i=0;if("auto"!==b.params.slidesPerView&&b.params.slidesPerView>1)for(e=0;e<Math.ceil(b.params.slidesPerView);e++){var n=b.activeIndex+e;if(n>b.slides.length)break;t.push(b.slides.eq(n)[0])}else t.push(b.slides.eq(b.activeIndex)[0]);for(e=0;e<t.length;e++)if(void 0!==t[e]){var a=t[e].offsetHeight;i=a>i?a:i}i&&b.wrapper.css("height",i+"px")},b.updateContainerSize=function(){var e,t;e=void 0!==b.params.width?b.params.width:b.container[0].clientWidth,t=void 0!==b.params.height?b.params.height:b.container[0].clientHeight,0===e&&b.isHorizontal()||0===t&&!b.isHorizontal()||(e=e-parseInt(b.container.css("padding-left"),10)-parseInt(b.container.css("padding-right"),10),t=t-parseInt(b.container.css("padding-top"),10)-parseInt(b.container.css("padding-bottom"),10),b.width=e,b.height=t,b.size=b.isHorizontal()?b.width:b.height)},b.updateSlidesSize=function(){b.slides=b.wrapper.children("."+b.params.slideClass),b.snapGrid=[],b.slidesGrid=[],b.slidesSizesGrid=[];var e,t=b.params.spaceBetween,i=-b.params.slidesOffsetBefore,n=0,r=0;if(void 0!==b.size){"string"==typeof t&&t.indexOf("%")>=0&&(t=parseFloat(t.replace("%",""))/100*b.size),b.virtualSize=-t,b.rtl?b.slides.css({marginLeft:"",marginTop:""}):b.slides.css({marginRight:"",marginBottom:""});var s;b.params.slidesPerColumn>1&&(s=Math.floor(b.slides.length/b.params.slidesPerColumn)===b.slides.length/b.params.slidesPerColumn?b.slides.length:Math.ceil(b.slides.length/b.params.slidesPerColumn)*b.params.slidesPerColumn,"auto"!==b.params.slidesPerView&&"row"===b.params.slidesPerColumnFill&&(s=Math.max(s,b.params.slidesPerView*b.params.slidesPerColumn)));var o,l=b.params.slidesPerColumn,u=s/l,c=u-(b.params.slidesPerColumn*u-b.slides.length);for(e=0;e<b.slides.length;e++){o=0;var d=b.slides.eq(e);if(b.params.slidesPerColumn>1){var p,h,f;"column"===b.params.slidesPerColumnFill?(f=e-(h=Math.floor(e/l))*l,(h>c||h===c&&f===l-1)&&++f>=l&&(f=0,h++),p=h+f*s/l,d.css({"-webkit-box-ordinal-group":p,"-moz-box-ordinal-group":p,"-ms-flex-order":p,"-webkit-order":p,order:p})):h=e-(f=Math.floor(e/u))*u,d.css("margin-"+(b.isHorizontal()?"top":"left"),0!==f&&b.params.spaceBetween&&b.params.spaceBetween+"px").attr("data-swiper-column",h).attr("data-swiper-row",f)}"none"!==d.css("display")&&("auto"===b.params.slidesPerView?(o=b.isHorizontal()?d.outerWidth(!0):d.outerHeight(!0),b.params.roundLengths&&(o=a(o))):(o=(b.size-(b.params.slidesPerView-1)*t)/b.params.slidesPerView,b.params.roundLengths&&(o=a(o)),b.isHorizontal()?b.slides[e].style.width=o+"px":b.slides[e].style.height=o+"px"),b.slides[e].swiperSlideSize=o,b.slidesSizesGrid.push(o),b.params.centeredSlides?(i=i+o/2+n/2+t,0===n&&0!==e&&(i=i-b.size/2-t),0===e&&(i=i-b.size/2-t),Math.abs(i)<.001&&(i=0),r%b.params.slidesPerGroup==0&&b.snapGrid.push(i),b.slidesGrid.push(i)):(r%b.params.slidesPerGroup==0&&b.snapGrid.push(i),b.slidesGrid.push(i),i=i+o+t),b.virtualSize+=o+t,n=o,r++)}b.virtualSize=Math.max(b.virtualSize,b.size)+b.params.slidesOffsetAfter;var m;if(b.rtl&&b.wrongRTL&&("slide"===b.params.effect||"coverflow"===b.params.effect)&&b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}),b.support.flexbox&&!b.params.setWrapperSize||(b.isHorizontal()?b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}):b.wrapper.css({height:b.virtualSize+b.params.spaceBetween+"px"})),b.params.slidesPerColumn>1&&(b.virtualSize=(o+b.params.spaceBetween)*s,b.virtualSize=Math.ceil(b.virtualSize/b.params.slidesPerColumn)-b.params.spaceBetween,b.isHorizontal()?b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}):b.wrapper.css({height:b.virtualSize+b.params.spaceBetween+"px"}),b.params.centeredSlides)){for(m=[],e=0;e<b.snapGrid.length;e++)b.snapGrid[e]<b.virtualSize+b.snapGrid[0]&&m.push(b.snapGrid[e]);b.snapGrid=m}if(!b.params.centeredSlides){for(m=[],e=0;e<b.snapGrid.length;e++)b.snapGrid[e]<=b.virtualSize-b.size&&m.push(b.snapGrid[e]);b.snapGrid=m,Math.floor(b.virtualSize-b.size)-Math.floor(b.snapGrid[b.snapGrid.length-1])>1&&b.snapGrid.push(b.virtualSize-b.size)}0===b.snapGrid.length&&(b.snapGrid=[0]),0!==b.params.spaceBetween&&(b.isHorizontal()?b.rtl?b.slides.css({marginLeft:t+"px"}):b.slides.css({marginRight:t+"px"}):b.slides.css({marginBottom:t+"px"})),b.params.watchSlidesProgress&&b.updateSlidesOffset()}},b.updateSlidesOffset=function(){for(var e=0;e<b.slides.length;e++)b.slides[e].swiperSlideOffset=b.isHorizontal()?b.slides[e].offsetLeft:b.slides[e].offsetTop},b.currentSlidesPerView=function(){var e,t,i=1;if(b.params.centeredSlides){var n,a=b.slides[b.activeIndex].swiperSlideSize;for(e=b.activeIndex+1;e<b.slides.length;e++)b.slides[e]&&!n&&(i++,(a+=b.slides[e].swiperSlideSize)>b.size&&(n=!0));for(t=b.activeIndex-1;t>=0;t--)b.slides[t]&&!n&&(i++,(a+=b.slides[t].swiperSlideSize)>b.size&&(n=!0))}else for(e=b.activeIndex+1;e<b.slides.length;e++)b.slidesGrid[e]-b.slidesGrid[b.activeIndex]<b.size&&i++;return i},b.updateSlidesProgress=function(e){if(void 0===e&&(e=b.translate||0),0!==b.slides.length){void 0===b.slides[0].swiperSlideOffset&&b.updateSlidesOffset();var t=-e;b.rtl&&(t=e),b.slides.removeClass(b.params.slideVisibleClass);for(var i=0;i<b.slides.length;i++){var n=b.slides[i],a=(t+(b.params.centeredSlides?b.minTranslate():0)-n.swiperSlideOffset)/(n.swiperSlideSize+b.params.spaceBetween);if(b.params.watchSlidesVisibility){var r=-(t-n.swiperSlideOffset),s=r+b.slidesSizesGrid[i];(r>=0&&r<b.size||s>0&&s<=b.size||r<=0&&s>=b.size)&&b.slides.eq(i).addClass(b.params.slideVisibleClass)}n.progress=b.rtl?-a:a}}},b.updateProgress=function(e){void 0===e&&(e=b.translate||0);var t=b.maxTranslate()-b.minTranslate(),i=b.isBeginning,n=b.isEnd;0===t?(b.progress=0,b.isBeginning=b.isEnd=!0):(b.progress=(e-b.minTranslate())/t,b.isBeginning=b.progress<=0,b.isEnd=b.progress>=1),b.isBeginning&&!i&&b.emit("onReachBeginning",b),b.isEnd&&!n&&b.emit("onReachEnd",b),b.params.watchSlidesProgress&&b.updateSlidesProgress(e),b.emit("onProgress",b,b.progress)},b.updateActiveIndex=function(){var e,t,i,n=b.rtl?b.translate:-b.translate;for(t=0;t<b.slidesGrid.length;t++)void 0!==b.slidesGrid[t+1]?n>=b.slidesGrid[t]&&n<b.slidesGrid[t+1]-(b.slidesGrid[t+1]-b.slidesGrid[t])/2?e=t:n>=b.slidesGrid[t]&&n<b.slidesGrid[t+1]&&(e=t+1):n>=b.slidesGrid[t]&&(e=t);b.params.normalizeSlideIndex&&(e<0||void 0===e)&&(e=0),(i=Math.floor(e/b.params.slidesPerGroup))>=b.snapGrid.length&&(i=b.snapGrid.length-1),e!==b.activeIndex&&(b.snapIndex=i,b.previousIndex=b.activeIndex,b.activeIndex=e,b.updateClasses(),b.updateRealIndex())},b.updateRealIndex=function(){b.realIndex=parseInt(b.slides.eq(b.activeIndex).attr("data-swiper-slide-index")||b.activeIndex,10)},b.updateClasses=function(){b.slides.removeClass(b.params.slideActiveClass+" "+b.params.slideNextClass+" "+b.params.slidePrevClass+" "+b.params.slideDuplicateActiveClass+" "+b.params.slideDuplicateNextClass+" "+b.params.slideDuplicatePrevClass);var t=b.slides.eq(b.activeIndex);t.addClass(b.params.slideActiveClass),n.loop&&(t.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+b.realIndex+'"]').addClass(b.params.slideDuplicateActiveClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+b.realIndex+'"]').addClass(b.params.slideDuplicateActiveClass));var i=t.next("."+b.params.slideClass).addClass(b.params.slideNextClass);b.params.loop&&0===i.length&&(i=b.slides.eq(0)).addClass(b.params.slideNextClass);var a=t.prev("."+b.params.slideClass).addClass(b.params.slidePrevClass);if(b.params.loop&&0===a.length&&(a=b.slides.eq(-1)).addClass(b.params.slidePrevClass),n.loop&&(i.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+i.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicateNextClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+i.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicateNextClass),a.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+a.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicatePrevClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+a.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicatePrevClass)),b.paginationContainer&&b.paginationContainer.length>0){var r,s=b.params.loop?Math.ceil((b.slides.length-2*b.loopedSlides)/b.params.slidesPerGroup):b.snapGrid.length;if(b.params.loop?((r=Math.ceil((b.activeIndex-b.loopedSlides)/b.params.slidesPerGroup))>b.slides.length-1-2*b.loopedSlides&&(r-=b.slides.length-2*b.loopedSlides),r>s-1&&(r-=s),r<0&&"bullets"!==b.params.paginationType&&(r=s+r)):r=void 0!==b.snapIndex?b.snapIndex:b.activeIndex||0,"bullets"===b.params.paginationType&&b.bullets&&b.bullets.length>0&&(b.bullets.removeClass(b.params.bulletActiveClass),b.paginationContainer.length>1?b.bullets.each(function(){e(this).index()===r&&e(this).addClass(b.params.bulletActiveClass)}):b.bullets.eq(r).addClass(b.params.bulletActiveClass)),"fraction"===b.params.paginationType&&(b.paginationContainer.find("."+b.params.paginationCurrentClass).text(r+1),b.paginationContainer.find("."+b.params.paginationTotalClass).text(s)),"progress"===b.params.paginationType){var o=(r+1)/s,l=o,u=1;b.isHorizontal()||(u=o,l=1),b.paginationContainer.find("."+b.params.paginationProgressbarClass).transform("translate3d(0,0,0) scaleX("+l+") scaleY("+u+")").transition(b.params.speed)}"custom"===b.params.paginationType&&b.params.paginationCustomRender&&(b.paginationContainer.html(b.params.paginationCustomRender(b,r+1,s)),b.emit("onPaginationRendered",b,b.paginationContainer[0]))}b.params.loop||(b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.isBeginning?(b.prevButton.addClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.disable(b.prevButton)):(b.prevButton.removeClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.enable(b.prevButton))),b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.isEnd?(b.nextButton.addClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.disable(b.nextButton)):(b.nextButton.removeClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.enable(b.nextButton))))},b.updatePagination=function(){if(b.params.pagination&&b.paginationContainer&&b.paginationContainer.length>0){var e="";if("bullets"===b.params.paginationType){for(var t=b.params.loop?Math.ceil((b.slides.length-2*b.loopedSlides)/b.params.slidesPerGroup):b.snapGrid.length,i=0;i<t;i++)b.params.paginationBulletRender?e+=b.params.paginationBulletRender(b,i,b.params.bulletClass):e+="<"+b.params.paginationElement+' class="'+b.params.bulletClass+'"></'+b.params.paginationElement+">";b.paginationContainer.html(e),b.bullets=b.paginationContainer.find("."+b.params.bulletClass),b.params.paginationClickable&&b.params.a11y&&b.a11y&&b.a11y.initPagination()}"fraction"===b.params.paginationType&&(e=b.params.paginationFractionRender?b.params.paginationFractionRender(b,b.params.paginationCurrentClass,b.params.paginationTotalClass):'<span class="'+b.params.paginationCurrentClass+'"></span> / <span class="'+b.params.paginationTotalClass+'"></span>',b.paginationContainer.html(e)),"progress"===b.params.paginationType&&(e=b.params.paginationProgressRender?b.params.paginationProgressRender(b,b.params.paginationProgressbarClass):'<span class="'+b.params.paginationProgressbarClass+'"></span>',b.paginationContainer.html(e)),"custom"!==b.params.paginationType&&b.emit("onPaginationRendered",b,b.paginationContainer[0])}},b.update=function(e){function t(){b.rtl,b.translate;i=Math.min(Math.max(b.translate,b.maxTranslate()),b.minTranslate()),b.setWrapperTranslate(i),b.updateActiveIndex(),b.updateClasses()}if(b){b.updateContainerSize(),b.updateSlidesSize(),b.updateProgress(),b.updatePagination(),b.updateClasses(),b.params.scrollbar&&b.scrollbar&&b.scrollbar.set();var i;if(e){b.controller&&b.controller.spline&&(b.controller.spline=void 0),b.params.freeMode?(t(),b.params.autoHeight&&b.updateAutoHeight()):(("auto"===b.params.slidesPerView||b.params.slidesPerView>1)&&b.isEnd&&!b.params.centeredSlides?b.slideTo(b.slides.length-1,0,!1,!0):b.slideTo(b.activeIndex,0,!1,!0))||t()}else b.params.autoHeight&&b.updateAutoHeight()}},b.onResize=function(e){b.params.onBeforeResize&&b.params.onBeforeResize(b),b.params.breakpoints&&b.setBreakpoint();var t=b.params.allowSwipeToPrev,i=b.params.allowSwipeToNext;b.params.allowSwipeToPrev=b.params.allowSwipeToNext=!0,b.updateContainerSize(),b.updateSlidesSize(),("auto"===b.params.slidesPerView||b.params.freeMode||e)&&b.updatePagination(),b.params.scrollbar&&b.scrollbar&&b.scrollbar.set(),b.controller&&b.controller.spline&&(b.controller.spline=void 0);var n=!1;if(b.params.freeMode){var a=Math.min(Math.max(b.translate,b.maxTranslate()),b.minTranslate());b.setWrapperTranslate(a),b.updateActiveIndex(),b.updateClasses(),b.params.autoHeight&&b.updateAutoHeight()}else b.updateClasses(),n=("auto"===b.params.slidesPerView||b.params.slidesPerView>1)&&b.isEnd&&!b.params.centeredSlides?b.slideTo(b.slides.length-1,0,!1,!0):b.slideTo(b.activeIndex,0,!1,!0);b.params.lazyLoading&&!n&&b.lazy&&b.lazy.load(),b.params.allowSwipeToPrev=t,b.params.allowSwipeToNext=i,b.params.onAfterResize&&b.params.onAfterResize(b)},b.touchEventsDesktop={start:"mousedown",move:"mousemove",end:"mouseup"},window.navigator.pointerEnabled?b.touchEventsDesktop={start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled&&(b.touchEventsDesktop={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}),b.touchEvents={start:b.support.touch||!b.params.simulateTouch?"touchstart":b.touchEventsDesktop.start,move:b.support.touch||!b.params.simulateTouch?"touchmove":b.touchEventsDesktop.move,end:b.support.touch||!b.params.simulateTouch?"touchend":b.touchEventsDesktop.end},(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&("container"===b.params.touchEventsTarget?b.container:b.wrapper).addClass("swiper-wp8-"+b.params.direction),b.initEvents=function(e){var t=e?"off":"on",i=e?"removeEventListener":"addEventListener",a="container"===b.params.touchEventsTarget?b.container[0]:b.wrapper[0],r=b.support.touch?a:document,s=!!b.params.nested;if(b.browser.ie)a[i](b.touchEvents.start,b.onTouchStart,!1),r[i](b.touchEvents.move,b.onTouchMove,s),r[i](b.touchEvents.end,b.onTouchEnd,!1);else{if(b.support.touch){var o=!("touchstart"!==b.touchEvents.start||!b.support.passiveListener||!b.params.passiveListeners)&&{passive:!0,capture:!1};a[i](b.touchEvents.start,b.onTouchStart,o),a[i](b.touchEvents.move,b.onTouchMove,s),a[i](b.touchEvents.end,b.onTouchEnd,o)}(n.simulateTouch&&!b.device.ios&&!b.device.android||n.simulateTouch&&!b.support.touch&&b.device.ios)&&(a[i]("mousedown",b.onTouchStart,!1),document[i]("mousemove",b.onTouchMove,s),document[i]("mouseup",b.onTouchEnd,!1))}window[i]("resize",b.onResize),b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.nextButton[t]("click",b.onClickNext),b.params.a11y&&b.a11y&&b.nextButton[t]("keydown",b.a11y.onEnterKey)),b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.prevButton[t]("click",b.onClickPrev),b.params.a11y&&b.a11y&&b.prevButton[t]("keydown",b.a11y.onEnterKey)),b.params.pagination&&b.params.paginationClickable&&(b.paginationContainer[t]("click","."+b.params.bulletClass,b.onClickIndex),b.params.a11y&&b.a11y&&b.paginationContainer[t]("keydown","."+b.params.bulletClass,b.a11y.onEnterKey)),(b.params.preventClicks||b.params.preventClicksPropagation)&&a[i]("click",b.preventClicks,!0)},b.attachEvents=function(){b.initEvents()},b.detachEvents=function(){b.initEvents(!0)},b.allowClick=!0,b.preventClicks=function(e){b.allowClick||(b.params.preventClicks&&e.preventDefault(),b.params.preventClicksPropagation&&b.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))},b.onClickNext=function(e){e.preventDefault(),b.isEnd&&!b.params.loop||b.slideNext()},b.onClickPrev=function(e){e.preventDefault(),b.isBeginning&&!b.params.loop||b.slidePrev()},b.onClickIndex=function(t){t.preventDefault();var i=e(this).index()*b.params.slidesPerGroup;b.params.loop&&(i+=b.loopedSlides),b.slideTo(i)},b.updateClickedSlide=function(t){var i=s(t,"."+b.params.slideClass),n=!1;if(i)for(var a=0;a<b.slides.length;a++)b.slides[a]===i&&(n=!0);if(!i||!n)return b.clickedSlide=void 0,void(b.clickedIndex=void 0);if(b.clickedSlide=i,b.clickedIndex=e(i).index(),b.params.slideToClickedSlide&&void 0!==b.clickedIndex&&b.clickedIndex!==b.activeIndex){var r,o=b.clickedIndex,l="auto"===b.params.slidesPerView?b.currentSlidesPerView():b.params.slidesPerView;if(b.params.loop){if(b.animating)return;r=parseInt(e(b.clickedSlide).attr("data-swiper-slide-index"),10),b.params.centeredSlides?o<b.loopedSlides-l/2||o>b.slides.length-b.loopedSlides+l/2?(b.fixLoop(),o=b.wrapper.children("."+b.params.slideClass+'[data-swiper-slide-index="'+r+'"]:not(.'+b.params.slideDuplicateClass+")").eq(0).index(),setTimeout(function(){b.slideTo(o)},0)):b.slideTo(o):o>b.slides.length-l?(b.fixLoop(),o=b.wrapper.children("."+b.params.slideClass+'[data-swiper-slide-index="'+r+'"]:not(.'+b.params.slideDuplicateClass+")").eq(0).index(),setTimeout(function(){b.slideTo(o)},0)):b.slideTo(o)}else b.slideTo(o)}};var C,T,S,k,E,M,L,D,z,P,F="input, select, textarea, button, video",A=Date.now(),I=[];b.animating=!1,b.touches={startX:0,startY:0,currentX:0,currentY:0,diff:0};var N,j;b.onTouchStart=function(t){if(t.originalEvent&&(t=t.originalEvent),(N="touchstart"===t.type)||!("which"in t)||3!==t.which)if(b.params.noSwiping&&s(t,"."+b.params.noSwipingClass))b.allowClick=!0;else if(!b.params.swipeHandler||s(t,b.params.swipeHandler)){var i=b.touches.currentX="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,n=b.touches.currentY="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY;if(!(b.device.ios&&b.params.iOSEdgeSwipeDetection&&i<=b.params.iOSEdgeSwipeThreshold)){if(C=!0,T=!1,S=!0,E=void 0,j=void 0,b.touches.startX=i,b.touches.startY=n,k=Date.now(),b.allowClick=!0,b.updateContainerSize(),b.swipeDirection=void 0,b.params.threshold>0&&(D=!1),"touchstart"!==t.type){var a=!0;e(t.target).is(F)&&(a=!1),document.activeElement&&e(document.activeElement).is(F)&&document.activeElement.blur(),a&&t.preventDefault()}b.emit("onTouchStart",b,t)}}},b.onTouchMove=function(t){if(t.originalEvent&&(t=t.originalEvent),!N||"mousemove"!==t.type){if(t.preventedByNestedSwiper)return b.touches.startX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,void(b.touches.startY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY);if(b.params.onlyExternal)return b.allowClick=!1,void(C&&(b.touches.startX=b.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,b.touches.startY=b.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,k=Date.now()));if(N&&b.params.touchReleaseOnEdges&&!b.params.loop)if(b.isHorizontal()){if(b.touches.currentX<b.touches.startX&&b.translate<=b.maxTranslate()||b.touches.currentX>b.touches.startX&&b.translate>=b.minTranslate())return}else if(b.touches.currentY<b.touches.startY&&b.translate<=b.maxTranslate()||b.touches.currentY>b.touches.startY&&b.translate>=b.minTranslate())return;if(N&&document.activeElement&&t.target===document.activeElement&&e(t.target).is(F))return T=!0,void(b.allowClick=!1);if(S&&b.emit("onTouchMove",b,t),!(t.targetTouches&&t.targetTouches.length>1)){if(b.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,b.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,void 0===E){var i;b.isHorizontal()&&b.touches.currentY===b.touches.startY||!b.isHorizontal()&&b.touches.currentX===b.touches.startX?E=!1:(i=180*Math.atan2(Math.abs(b.touches.currentY-b.touches.startY),Math.abs(b.touches.currentX-b.touches.startX))/Math.PI,E=b.isHorizontal()?i>b.params.touchAngle:90-i>b.params.touchAngle)}if(E&&b.emit("onTouchMoveOpposite",b,t),void 0===j&&(b.touches.currentX===b.touches.startX&&b.touches.currentY===b.touches.startY||(j=!0)),C)if(E)C=!1;else if(j){b.allowClick=!1,b.emit("onSliderMove",b,t),t.preventDefault(),b.params.touchMoveStopPropagation&&!b.params.nested&&t.stopPropagation(),T||(n.loop&&b.fixLoop(),L=b.getWrapperTranslate(),b.setWrapperTransition(0),b.animating&&b.wrapper.trigger("webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd"),b.params.autoplay&&b.autoplaying&&(b.params.autoplayDisableOnInteraction?b.stopAutoplay():b.pauseAutoplay()),P=!1,!b.params.grabCursor||!0!==b.params.allowSwipeToNext&&!0!==b.params.allowSwipeToPrev||b.setGrabCursor(!0)),T=!0;var a=b.touches.diff=b.isHorizontal()?b.touches.currentX-b.touches.startX:b.touches.currentY-b.touches.startY;a*=b.params.touchRatio,b.rtl&&(a=-a),b.swipeDirection=a>0?"prev":"next",M=a+L;var r=!0;if(a>0&&M>b.minTranslate()?(r=!1,b.params.resistance&&(M=b.minTranslate()-1+Math.pow(-b.minTranslate()+L+a,b.params.resistanceRatio))):a<0&&M<b.maxTranslate()&&(r=!1,b.params.resistance&&(M=b.maxTranslate()+1-Math.pow(b.maxTranslate()-L-a,b.params.resistanceRatio))),r&&(t.preventedByNestedSwiper=!0),!b.params.allowSwipeToNext&&"next"===b.swipeDirection&&M<L&&(M=L),!b.params.allowSwipeToPrev&&"prev"===b.swipeDirection&&M>L&&(M=L),b.params.threshold>0){if(!(Math.abs(a)>b.params.threshold||D))return void(M=L);if(!D)return D=!0,b.touches.startX=b.touches.currentX,b.touches.startY=b.touches.currentY,M=L,void(b.touches.diff=b.isHorizontal()?b.touches.currentX-b.touches.startX:b.touches.currentY-b.touches.startY)}b.params.followFinger&&((b.params.freeMode||b.params.watchSlidesProgress)&&b.updateActiveIndex(),b.params.freeMode&&(0===I.length&&I.push({position:b.touches[b.isHorizontal()?"startX":"startY"],time:k}),I.push({position:b.touches[b.isHorizontal()?"currentX":"currentY"],time:(new window.Date).getTime()})),b.updateProgress(M),b.setWrapperTranslate(M))}}}},b.onTouchEnd=function(t){if(t.originalEvent&&(t=t.originalEvent),S&&b.emit("onTouchEnd",b,t),S=!1,C){b.params.grabCursor&&T&&C&&(!0===b.params.allowSwipeToNext||!0===b.params.allowSwipeToPrev)&&b.setGrabCursor(!1);var i=Date.now(),n=i-k;if(b.allowClick&&(b.updateClickedSlide(t),b.emit("onTap",b,t),n<300&&i-A>300&&(z&&clearTimeout(z),z=setTimeout(function(){b&&(b.params.paginationHide&&b.paginationContainer.length>0&&!e(t.target).hasClass(b.params.bulletClass)&&b.paginationContainer.toggleClass(b.params.paginationHiddenClass),b.emit("onClick",b,t))},300)),n<300&&i-A<300&&(z&&clearTimeout(z),b.emit("onDoubleTap",b,t))),A=Date.now(),setTimeout(function(){b&&(b.allowClick=!0)},0),C&&T&&b.swipeDirection&&0!==b.touches.diff&&M!==L){C=T=!1;var a;if(a=b.params.followFinger?b.rtl?b.translate:-b.translate:-M,b.params.freeMode){if(a<-b.minTranslate())return void b.slideTo(b.activeIndex);if(a>-b.maxTranslate())return void(b.slides.length<b.snapGrid.length?b.slideTo(b.snapGrid.length-1):b.slideTo(b.slides.length-1));if(b.params.freeModeMomentum){if(I.length>1){var r=I.pop(),s=I.pop(),o=r.position-s.position,l=r.time-s.time;b.velocity=o/l,b.velocity=b.velocity/2,Math.abs(b.velocity)<b.params.freeModeMinimumVelocity&&(b.velocity=0),(l>150||(new window.Date).getTime()-r.time>300)&&(b.velocity=0)}else b.velocity=0;b.velocity=b.velocity*b.params.freeModeMomentumVelocityRatio,I.length=0;var u=1e3*b.params.freeModeMomentumRatio,c=b.velocity*u,d=b.translate+c;b.rtl&&(d=-d);var p,h=!1,f=20*Math.abs(b.velocity)*b.params.freeModeMomentumBounceRatio;if(d<b.maxTranslate())b.params.freeModeMomentumBounce?(d+b.maxTranslate()<-f&&(d=b.maxTranslate()-f),p=b.maxTranslate(),h=!0,P=!0):d=b.maxTranslate();else if(d>b.minTranslate())b.params.freeModeMomentumBounce?(d-b.minTranslate()>f&&(d=b.minTranslate()+f),p=b.minTranslate(),h=!0,P=!0):d=b.minTranslate();else if(b.params.freeModeSticky){var m,g=0;for(g=0;g<b.snapGrid.length;g+=1)if(b.snapGrid[g]>-d){m=g;break}d=Math.abs(b.snapGrid[m]-d)<Math.abs(b.snapGrid[m-1]-d)||"next"===b.swipeDirection?b.snapGrid[m]:b.snapGrid[m-1],b.rtl||(d=-d)}if(0!==b.velocity)u=b.rtl?Math.abs((-d-b.translate)/b.velocity):Math.abs((d-b.translate)/b.velocity);else if(b.params.freeModeSticky)return void b.slideReset();b.params.freeModeMomentumBounce&&h?(b.updateProgress(p),b.setWrapperTransition(u),b.setWrapperTranslate(d),b.onTransitionStart(),b.animating=!0,b.wrapper.transitionEnd(function(){b&&P&&(b.emit("onMomentumBounce",b),b.setWrapperTransition(b.params.speed),b.setWrapperTranslate(p),b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd()}))})):b.velocity?(b.updateProgress(d),b.setWrapperTransition(u),b.setWrapperTranslate(d),b.onTransitionStart(),b.animating||(b.animating=!0,b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd()}))):b.updateProgress(d),b.updateActiveIndex()}(!b.params.freeModeMomentum||n>=b.params.longSwipesMs)&&(b.updateProgress(),b.updateActiveIndex())}else{var v,y=0,w=b.slidesSizesGrid[0];for(v=0;v<b.slidesGrid.length;v+=b.params.slidesPerGroup)void 0!==b.slidesGrid[v+b.params.slidesPerGroup]?a>=b.slidesGrid[v]&&a<b.slidesGrid[v+b.params.slidesPerGroup]&&(y=v,w=b.slidesGrid[v+b.params.slidesPerGroup]-b.slidesGrid[v]):a>=b.slidesGrid[v]&&(y=v,w=b.slidesGrid[b.slidesGrid.length-1]-b.slidesGrid[b.slidesGrid.length-2]);var x=(a-b.slidesGrid[y])/w;if(n>b.params.longSwipesMs){if(!b.params.longSwipes)return void b.slideTo(b.activeIndex);"next"===b.swipeDirection&&(x>=b.params.longSwipesRatio?b.slideTo(y+b.params.slidesPerGroup):b.slideTo(y)),"prev"===b.swipeDirection&&(x>1-b.params.longSwipesRatio?b.slideTo(y+b.params.slidesPerGroup):b.slideTo(y))}else{if(!b.params.shortSwipes)return void b.slideTo(b.activeIndex);"next"===b.swipeDirection&&b.slideTo(y+b.params.slidesPerGroup),"prev"===b.swipeDirection&&b.slideTo(y)}}}else C=T=!1}},b._slideTo=function(e,t){return b.slideTo(e,t,!0,!0)},b.slideTo=function(e,t,i,n){void 0===i&&(i=!0),void 0===e&&(e=0),e<0&&(e=0),b.snapIndex=Math.floor(e/b.params.slidesPerGroup),b.snapIndex>=b.snapGrid.length&&(b.snapIndex=b.snapGrid.length-1);var a=-b.snapGrid[b.snapIndex];if(b.params.autoplay&&b.autoplaying&&(n||!b.params.autoplayDisableOnInteraction?b.pauseAutoplay(t):b.stopAutoplay()),b.updateProgress(a),b.params.normalizeSlideIndex)for(var r=0;r<b.slidesGrid.length;r++)-Math.floor(100*a)>=Math.floor(100*b.slidesGrid[r])&&(e=r);return!(!b.params.allowSwipeToNext&&a<b.translate&&a<b.minTranslate())&&(!(!b.params.allowSwipeToPrev&&a>b.translate&&a>b.maxTranslate()&&(b.activeIndex||0)!==e)&&(void 0===t&&(t=b.params.speed),b.previousIndex=b.activeIndex||0,b.activeIndex=e,b.updateRealIndex(),b.rtl&&-a===b.translate||!b.rtl&&a===b.translate?(b.params.autoHeight&&b.updateAutoHeight(),b.updateClasses(),"slide"!==b.params.effect&&b.setWrapperTranslate(a),!1):(b.updateClasses(),b.onTransitionStart(i),0===t||b.browser.lteIE9?(b.setWrapperTranslate(a),b.setWrapperTransition(0),b.onTransitionEnd(i)):(b.setWrapperTranslate(a),b.setWrapperTransition(t),b.animating||(b.animating=!0,b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd(i)}))),!0)))},b.onTransitionStart=function(e){void 0===e&&(e=!0),b.params.autoHeight&&b.updateAutoHeight(),b.lazy&&b.lazy.onTransitionStart(),e&&(b.emit("onTransitionStart",b),b.activeIndex!==b.previousIndex&&(b.emit("onSlideChangeStart",b),b.activeIndex>b.previousIndex?b.emit("onSlideNextStart",b):b.emit("onSlidePrevStart",b)))},b.onTransitionEnd=function(e){b.animating=!1,b.setWrapperTransition(0),void 0===e&&(e=!0),b.lazy&&b.lazy.onTransitionEnd(),e&&(b.emit("onTransitionEnd",b),b.activeIndex!==b.previousIndex&&(b.emit("onSlideChangeEnd",b),b.activeIndex>b.previousIndex?b.emit("onSlideNextEnd",b):b.emit("onSlidePrevEnd",b))),b.params.history&&b.history&&b.history.setHistory(b.params.history,b.activeIndex),b.params.hashnav&&b.hashnav&&b.hashnav.setHash()},b.slideNext=function(e,t,i){if(b.params.loop){if(b.animating)return!1;b.fixLoop();b.container[0].clientLeft;return b.slideTo(b.activeIndex+b.params.slidesPerGroup,t,e,i)}return b.slideTo(b.activeIndex+b.params.slidesPerGroup,t,e,i)},b._slideNext=function(e){return b.slideNext(!0,e,!0)},b.slidePrev=function(e,t,i){if(b.params.loop){if(b.animating)return!1;b.fixLoop();b.container[0].clientLeft;return b.slideTo(b.activeIndex-1,t,e,i)}return b.slideTo(b.activeIndex-1,t,e,i)},b._slidePrev=function(e){return b.slidePrev(!0,e,!0)},b.slideReset=function(e,t,i){return b.slideTo(b.activeIndex,t,e)},b.disableTouchControl=function(){return b.params.onlyExternal=!0,!0},b.enableTouchControl=function(){return b.params.onlyExternal=!1,!0},b.setWrapperTransition=function(e,t){b.wrapper.transition(e),"slide"!==b.params.effect&&b.effects[b.params.effect]&&b.effects[b.params.effect].setTransition(e),b.params.parallax&&b.parallax&&b.parallax.setTransition(e),b.params.scrollbar&&b.scrollbar&&b.scrollbar.setTransition(e),b.params.control&&b.controller&&b.controller.setTransition(e,t),b.emit("onSetTransition",b,e)},b.setWrapperTranslate=function(e,t,i){var n=0,r=0;b.isHorizontal()?n=b.rtl?-e:e:r=e,b.params.roundLengths&&(n=a(n),r=a(r)),b.params.virtualTranslate||(b.support.transforms3d?b.wrapper.transform("translate3d("+n+"px, "+r+"px, 0px)"):b.wrapper.transform("translate("+n+"px, "+r+"px)")),b.translate=b.isHorizontal()?n:r;var s=b.maxTranslate()-b.minTranslate();(0===s?0:(e-b.minTranslate())/s)!==b.progress&&b.updateProgress(e),t&&b.updateActiveIndex(),"slide"!==b.params.effect&&b.effects[b.params.effect]&&b.effects[b.params.effect].setTranslate(b.translate),b.params.parallax&&b.parallax&&b.parallax.setTranslate(b.translate),b.params.scrollbar&&b.scrollbar&&b.scrollbar.setTranslate(b.translate),b.params.control&&b.controller&&b.controller.setTranslate(b.translate,i),b.emit("onSetTranslate",b,b.translate)},b.getTranslate=function(e,t){var i,n,a,r;return void 0===t&&(t="x"),b.params.virtualTranslate?b.rtl?-b.translate:b.translate:(a=window.getComputedStyle(e,null),window.WebKitCSSMatrix?((n=a.transform||a.webkitTransform).split(",").length>6&&(n=n.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),r=new window.WebKitCSSMatrix("none"===n?"":n)):i=(r=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(n=window.WebKitCSSMatrix?r.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(n=window.WebKitCSSMatrix?r.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),b.rtl&&n&&(n=-n),n||0)},b.getWrapperTranslate=function(e){return void 0===e&&(e=b.isHorizontal()?"x":"y"),b.getTranslate(b.wrapper[0],e)},b.observers=[],b.initObservers=function(){if(b.params.observeParents)for(var e=b.container.parents(),t=0;t<e.length;t++)o(e[t]);o(b.container[0],{childList:!1}),o(b.wrapper[0],{attributes:!1})},b.disconnectObservers=function(){for(var e=0;e<b.observers.length;e++)b.observers[e].disconnect();b.observers=[]},b.createLoop=function(){b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass).remove();var t=b.wrapper.children("."+b.params.slideClass);"auto"!==b.params.slidesPerView||b.params.loopedSlides||(b.params.loopedSlides=t.length),b.loopedSlides=parseInt(b.params.loopedSlides||b.params.slidesPerView,10),b.loopedSlides=b.loopedSlides+b.params.loopAdditionalSlides,b.loopedSlides>t.length&&(b.loopedSlides=t.length);var i,n=[],a=[];for(t.each(function(i,r){var s=e(this);i<b.loopedSlides&&a.push(r),i<t.length&&i>=t.length-b.loopedSlides&&n.push(r),s.attr("data-swiper-slide-index",i)}),i=0;i<a.length;i++)b.wrapper.append(e(a[i].cloneNode(!0)).addClass(b.params.slideDuplicateClass));for(i=n.length-1;i>=0;i--)b.wrapper.prepend(e(n[i].cloneNode(!0)).addClass(b.params.slideDuplicateClass))},b.destroyLoop=function(){b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass).remove(),b.slides.removeAttr("data-swiper-slide-index")},b.reLoop=function(e){var t=b.activeIndex-b.loopedSlides;b.destroyLoop(),b.createLoop(),b.updateSlidesSize(),e&&b.slideTo(t+b.loopedSlides,0,!1)},b.fixLoop=function(){var e;b.activeIndex<b.loopedSlides?(e=b.slides.length-3*b.loopedSlides+b.activeIndex,e+=b.loopedSlides,b.slideTo(e,0,!1,!0)):("auto"===b.params.slidesPerView&&b.activeIndex>=2*b.loopedSlides||b.activeIndex>b.slides.length-2*b.params.slidesPerView)&&(e=-b.slides.length+b.activeIndex+b.loopedSlides,e+=b.loopedSlides,b.slideTo(e,0,!1,!0))},b.appendSlide=function(e){if(b.params.loop&&b.destroyLoop(),"object"==typeof e&&e.length)for(var t=0;t<e.length;t++)e[t]&&b.wrapper.append(e[t]);else b.wrapper.append(e);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0)},b.prependSlide=function(e){b.params.loop&&b.destroyLoop();var t=b.activeIndex+1;if("object"==typeof e&&e.length){for(var i=0;i<e.length;i++)e[i]&&b.wrapper.prepend(e[i]);t=b.activeIndex+e.length}else b.wrapper.prepend(e);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0),b.slideTo(t,0,!1)},b.removeSlide=function(e){b.params.loop&&(b.destroyLoop(),b.slides=b.wrapper.children("."+b.params.slideClass));var t,i=b.activeIndex;if("object"==typeof e&&e.length){for(var n=0;n<e.length;n++)t=e[n],b.slides[t]&&b.slides.eq(t).remove(),t<i&&i--;i=Math.max(i,0)}else t=e,b.slides[t]&&b.slides.eq(t).remove(),t<i&&i--,i=Math.max(i,0);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0),b.params.loop?b.slideTo(i+b.loopedSlides,0,!1):b.slideTo(i,0,!1)},b.removeAllSlides=function(){for(var e=[],t=0;t<b.slides.length;t++)e.push(t);b.removeSlide(e)},b.effects={fade:{setTranslate:function(){for(var e=0;e<b.slides.length;e++){var t=b.slides.eq(e),i=-t[0].swiperSlideOffset;b.params.virtualTranslate||(i-=b.translate);var n=0;b.isHorizontal()||(n=i,i=0);var a=b.params.fade.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:a}).transform("translate3d("+i+"px, "+n+"px, 0px)")}},setTransition:function(e){if(b.slides.transition(e),b.params.virtualTranslate&&0!==e){var t=!1;b.slides.transitionEnd(function(){if(!t&&b){t=!0,b.animating=!1;for(var e=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],i=0;i<e.length;i++)b.wrapper.trigger(e[i])}})}}},flip:{setTranslate:function(){for(var t=0;t<b.slides.length;t++){var i=b.slides.eq(t),n=i[0].progress;b.params.flip.limitRotation&&(n=Math.max(Math.min(i[0].progress,1),-1));var a=-180*n,r=0,s=-i[0].swiperSlideOffset,o=0;if(b.isHorizontal()?b.rtl&&(a=-a):(o=s,s=0,r=-a,a=0),i[0].style.zIndex=-Math.abs(Math.round(n))+b.slides.length,b.params.flip.slideShadows){var l=b.isHorizontal()?i.find(".swiper-slide-shadow-left"):i.find(".swiper-slide-shadow-top"),u=b.isHorizontal()?i.find(".swiper-slide-shadow-right"):i.find(".swiper-slide-shadow-bottom");0===l.length&&(l=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),i.append(l)),0===u.length&&(u=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),i.append(u)),l.length&&(l[0].style.opacity=Math.max(-n,0)),u.length&&(u[0].style.opacity=Math.max(n,0))}i.transform("translate3d("+s+"px, "+o+"px, 0px) rotateX("+r+"deg) rotateY("+a+"deg)")}},setTransition:function(t){if(b.slides.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t),b.params.virtualTranslate&&0!==t){var i=!1;b.slides.eq(b.activeIndex).transitionEnd(function(){if(!i&&b&&e(this).hasClass(b.params.slideActiveClass)){i=!0,b.animating=!1;for(var t=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],n=0;n<t.length;n++)b.wrapper.trigger(t[n])}})}}},cube:{setTranslate:function(){var t,i=0;b.params.cube.shadow&&(b.isHorizontal()?(0===(t=b.wrapper.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),b.wrapper.append(t)),t.css({height:b.width+"px"})):0===(t=b.container.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),b.container.append(t)));for(var n=0;n<b.slides.length;n++){var a=b.slides.eq(n),r=90*n,s=Math.floor(r/360);b.rtl&&(r=-r,s=Math.floor(-r/360));var o=Math.max(Math.min(a[0].progress,1),-1),l=0,u=0,c=0;n%4==0?(l=4*-s*b.size,c=0):(n-1)%4==0?(l=0,c=4*-s*b.size):(n-2)%4==0?(l=b.size+4*s*b.size,c=b.size):(n-3)%4==0&&(l=-b.size,c=3*b.size+4*b.size*s),b.rtl&&(l=-l),b.isHorizontal()||(u=l,l=0);var d="rotateX("+(b.isHorizontal()?0:-r)+"deg) rotateY("+(b.isHorizontal()?r:0)+"deg) translate3d("+l+"px, "+u+"px, "+c+"px)";if(o<=1&&o>-1&&(i=90*n+90*o,b.rtl&&(i=90*-n-90*o)),a.transform(d),b.params.cube.slideShadows){var p=b.isHorizontal()?a.find(".swiper-slide-shadow-left"):a.find(".swiper-slide-shadow-top"),h=b.isHorizontal()?a.find(".swiper-slide-shadow-right"):a.find(".swiper-slide-shadow-bottom");0===p.length&&(p=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),a.append(p)),0===h.length&&(h=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),a.append(h)),p.length&&(p[0].style.opacity=Math.max(-o,0)),h.length&&(h[0].style.opacity=Math.max(o,0))}}if(b.wrapper.css({"-webkit-transform-origin":"50% 50% -"+b.size/2+"px","-moz-transform-origin":"50% 50% -"+b.size/2+"px","-ms-transform-origin":"50% 50% -"+b.size/2+"px","transform-origin":"50% 50% -"+b.size/2+"px"}),b.params.cube.shadow)if(b.isHorizontal())t.transform("translate3d(0px, "+(b.width/2+b.params.cube.shadowOffset)+"px, "+-b.width/2+"px) rotateX(90deg) rotateZ(0deg) scale("+b.params.cube.shadowScale+")");else{var f=Math.abs(i)-90*Math.floor(Math.abs(i)/90),m=1.5-(Math.sin(2*f*Math.PI/360)/2+Math.cos(2*f*Math.PI/360)/2),g=b.params.cube.shadowScale,v=b.params.cube.shadowScale/m,y=b.params.cube.shadowOffset;t.transform("scale3d("+g+", 1, "+v+") translate3d(0px, "+(b.height/2+y)+"px, "+-b.height/2/v+"px) rotateX(-90deg)")}var w=b.isSafari||b.isUiWebView?-b.size/2:0;b.wrapper.transform("translate3d(0px,0,"+w+"px) rotateX("+(b.isHorizontal()?0:i)+"deg) rotateY("+(b.isHorizontal()?-i:0)+"deg)")},setTransition:function(e){b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),b.params.cube.shadow&&!b.isHorizontal()&&b.container.find(".swiper-cube-shadow").transition(e)}},coverflow:{setTranslate:function(){for(var t=b.translate,i=b.isHorizontal()?-t+b.width/2:-t+b.height/2,n=b.isHorizontal()?b.params.coverflow.rotate:-b.params.coverflow.rotate,a=b.params.coverflow.depth,r=0,s=b.slides.length;r<s;r++){var o=b.slides.eq(r),l=b.slidesSizesGrid[r],u=(i-o[0].swiperSlideOffset-l/2)/l*b.params.coverflow.modifier,c=b.isHorizontal()?n*u:0,d=b.isHorizontal()?0:n*u,p=-a*Math.abs(u),h=b.isHorizontal()?0:b.params.coverflow.stretch*u,f=b.isHorizontal()?b.params.coverflow.stretch*u:0;Math.abs(f)<.001&&(f=0),Math.abs(h)<.001&&(h=0),Math.abs(p)<.001&&(p=0),Math.abs(c)<.001&&(c=0),Math.abs(d)<.001&&(d=0);var m="translate3d("+f+"px,"+h+"px,"+p+"px)  rotateX("+d+"deg) rotateY("+c+"deg)";if(o.transform(m),o[0].style.zIndex=1-Math.abs(Math.round(u)),b.params.coverflow.slideShadows){var g=b.isHorizontal()?o.find(".swiper-slide-shadow-left"):o.find(".swiper-slide-shadow-top"),v=b.isHorizontal()?o.find(".swiper-slide-shadow-right"):o.find(".swiper-slide-shadow-bottom");0===g.length&&(g=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),o.append(g)),0===v.length&&(v=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),o.append(v)),g.length&&(g[0].style.opacity=u>0?u:0),v.length&&(v[0].style.opacity=-u>0?-u:0)}}b.browser.ie&&(b.wrapper[0].style.perspectiveOrigin=i+"px 50%")},setTransition:function(e){b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}}},b.lazy={initialImageLoaded:!1,loadImageInSlide:function(t,i){if(void 0!==t&&(void 0===i&&(i=!0),0!==b.slides.length)){var n=b.slides.eq(t),a=n.find("."+b.params.lazyLoadingClass+":not(."+b.params.lazyStatusLoadedClass+"):not(."+b.params.lazyStatusLoadingClass+")");!n.hasClass(b.params.lazyLoadingClass)||n.hasClass(b.params.lazyStatusLoadedClass)||n.hasClass(b.params.lazyStatusLoadingClass)||(a=a.add(n[0])),0!==a.length&&a.each(function(){var t=e(this);t.addClass(b.params.lazyStatusLoadingClass);var a=t.attr("data-background"),r=t.attr("data-src"),s=t.attr("data-srcset"),o=t.attr("data-sizes");b.loadImage(t[0],r||a,s,o,!1,function(){if(void 0!==b&&null!==b&&b){if(a?(t.css("background-image",'url("'+a+'")'),t.removeAttr("data-background")):(s&&(t.attr("srcset",s),t.removeAttr("data-srcset")),o&&(t.attr("sizes",o),t.removeAttr("data-sizes")),r&&(t.attr("src",r),t.removeAttr("data-src"))),t.addClass(b.params.lazyStatusLoadedClass).removeClass(b.params.lazyStatusLoadingClass),n.find("."+b.params.lazyPreloaderClass+", ."+b.params.preloaderClass).remove(),b.params.loop&&i){var e=n.attr("data-swiper-slide-index");if(n.hasClass(b.params.slideDuplicateClass)){var l=b.wrapper.children('[data-swiper-slide-index="'+e+'"]:not(.'+b.params.slideDuplicateClass+")");b.lazy.loadImageInSlide(l.index(),!1)}else{var u=b.wrapper.children("."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');b.lazy.loadImageInSlide(u.index(),!1)}}b.emit("onLazyImageReady",b,n[0],t[0])}}),b.emit("onLazyImageLoad",b,n[0],t[0])})}},load:function(){var t,i=b.params.slidesPerView;if("auto"===i&&(i=0),b.lazy.initialImageLoaded||(b.lazy.initialImageLoaded=!0),b.params.watchSlidesVisibility)b.wrapper.children("."+b.params.slideVisibleClass).each(function(){b.lazy.loadImageInSlide(e(this).index())});else if(i>1)for(t=b.activeIndex;t<b.activeIndex+i;t++)b.slides[t]&&b.lazy.loadImageInSlide(t);else b.lazy.loadImageInSlide(b.activeIndex);if(b.params.lazyLoadingInPrevNext)if(i>1||b.params.lazyLoadingInPrevNextAmount&&b.params.lazyLoadingInPrevNextAmount>1){var n=b.params.lazyLoadingInPrevNextAmount,a=i,r=Math.min(b.activeIndex+a+Math.max(n,a),b.slides.length),s=Math.max(b.activeIndex-Math.max(a,n),0);for(t=b.activeIndex+i;t<r;t++)b.slides[t]&&b.lazy.loadImageInSlide(t);for(t=s;t<b.activeIndex;t++)b.slides[t]&&b.lazy.loadImageInSlide(t)}else{var o=b.wrapper.children("."+b.params.slideNextClass);o.length>0&&b.lazy.loadImageInSlide(o.index());var l=b.wrapper.children("."+b.params.slidePrevClass);l.length>0&&b.lazy.loadImageInSlide(l.index())}},onTransitionStart:function(){b.params.lazyLoading&&(b.params.lazyLoadingOnTransitionStart||!b.params.lazyLoadingOnTransitionStart&&!b.lazy.initialImageLoaded)&&b.lazy.load()},onTransitionEnd:function(){b.params.lazyLoading&&!b.params.lazyLoadingOnTransitionStart&&b.lazy.load()}},b.scrollbar={isTouched:!1,setDragPosition:function(e){var t=b.scrollbar,i=(b.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY)-t.track.offset()[b.isHorizontal()?"left":"top"]-t.dragSize/2,n=-b.minTranslate()*t.moveDivider,a=-b.maxTranslate()*t.moveDivider;i<n?i=n:i>a&&(i=a),i=-i/t.moveDivider,b.updateProgress(i),b.setWrapperTranslate(i,!0)},dragStart:function(e){var t=b.scrollbar;t.isTouched=!0,e.preventDefault(),e.stopPropagation(),t.setDragPosition(e),clearTimeout(t.dragTimeout),t.track.transition(0),b.params.scrollbarHide&&t.track.css("opacity",1),b.wrapper.transition(100),t.drag.transition(100),b.emit("onScrollbarDragStart",b)},dragMove:function(e){var t=b.scrollbar;t.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),b.wrapper.transition(0),t.track.transition(0),t.drag.transition(0),b.emit("onScrollbarDragMove",b))},dragEnd:function(e){var t=b.scrollbar;t.isTouched&&(t.isTouched=!1,b.params.scrollbarHide&&(clearTimeout(t.dragTimeout),t.dragTimeout=setTimeout(function(){t.track.css("opacity",0),t.track.transition(400)},1e3)),b.emit("onScrollbarDragEnd",b),b.params.scrollbarSnapOnRelease&&b.slideReset())},draggableEvents:function(){return!1!==b.params.simulateTouch||b.support.touch?b.touchEvents:b.touchEventsDesktop}(),enableDraggable:function(){var t=b.scrollbar,i=b.support.touch?t.track:document;e(t.track).on(t.draggableEvents.start,t.dragStart),e(i).on(t.draggableEvents.move,t.dragMove),e(i).on(t.draggableEvents.end,t.dragEnd)},disableDraggable:function(){var t=b.scrollbar,i=b.support.touch?t.track:document;e(t.track).off(t.draggableEvents.start,t.dragStart),e(i).off(t.draggableEvents.move,t.dragMove),e(i).off(t.draggableEvents.end,t.dragEnd)},set:function(){if(b.params.scrollbar){var t=b.scrollbar;t.track=e(b.params.scrollbar),b.params.uniqueNavElements&&"string"==typeof b.params.scrollbar&&t.track.length>1&&1===b.container.find(b.params.scrollbar).length&&(t.track=b.container.find(b.params.scrollbar)),t.drag=t.track.find(".swiper-scrollbar-drag"),0===t.drag.length&&(t.drag=e('<div class="swiper-scrollbar-drag"></div>'),t.track.append(t.drag)),t.drag[0].style.width="",t.drag[0].style.height="",t.trackSize=b.isHorizontal()?t.track[0].offsetWidth:t.track[0].offsetHeight,t.divider=b.size/b.virtualSize,t.moveDivider=t.divider*(t.trackSize/b.size),t.dragSize=t.trackSize*t.divider,b.isHorizontal()?t.drag[0].style.width=t.dragSize+"px":t.drag[0].style.height=t.dragSize+"px",t.divider>=1?t.track[0].style.display="none":t.track[0].style.display="",b.params.scrollbarHide&&(t.track[0].style.opacity=0)}},setTranslate:function(){if(b.params.scrollbar){var e,t=b.scrollbar,i=(b.translate,t.dragSize);e=(t.trackSize-t.dragSize)*b.progress,b.rtl&&b.isHorizontal()?(e=-e)>0?(i=t.dragSize-e,e=0):-e+t.dragSize>t.trackSize&&(i=t.trackSize+e):e<0?(i=t.dragSize+e,e=0):e+t.dragSize>t.trackSize&&(i=t.trackSize-e),b.isHorizontal()?(b.support.transforms3d?t.drag.transform("translate3d("+e+"px, 0, 0)"):t.drag.transform("translateX("+e+"px)"),t.drag[0].style.width=i+"px"):(b.support.transforms3d?t.drag.transform("translate3d(0px, "+e+"px, 0)"):t.drag.transform("translateY("+e+"px)"),t.drag[0].style.height=i+"px"),b.params.scrollbarHide&&(clearTimeout(t.timeout),t.track[0].style.opacity=1,t.timeout=setTimeout(function(){t.track[0].style.opacity=0,t.track.transition(400)},1e3))}},setTransition:function(e){b.params.scrollbar&&b.scrollbar.drag.transition(e)}},b.controller={LinearSpline:function(e,t){var i=function(){var e,t,i;return function(n,a){for(t=-1,e=n.length;e-t>1;)n[i=e+t>>1]<=a?t=i:e=i;return e}}();this.x=e,this.y=t,this.lastIndex=e.length-1;var n,a;this.x.length;this.interpolate=function(e){return e?(a=i(this.x,e),n=a-1,(e-this.x[n])*(this.y[a]-this.y[n])/(this.x[a]-this.x[n])+this.y[n]):0}},getInterpolateFunction:function(e){b.controller.spline||(b.controller.spline=b.params.loop?new b.controller.LinearSpline(b.slidesGrid,e.slidesGrid):new b.controller.LinearSpline(b.snapGrid,e.snapGrid))},setTranslate:function(e,i){function n(t){e=t.rtl&&"horizontal"===t.params.direction?-b.translate:b.translate,"slide"===b.params.controlBy&&(b.controller.getInterpolateFunction(t),r=-b.controller.spline.interpolate(-e)),r&&"container"!==b.params.controlBy||(a=(t.maxTranslate()-t.minTranslate())/(b.maxTranslate()-b.minTranslate()),r=(e-b.minTranslate())*a+t.minTranslate()),b.params.controlInverse&&(r=t.maxTranslate()-r),t.updateProgress(r),t.setWrapperTranslate(r,!1,b),t.updateActiveIndex()}var a,r,s=b.params.control;if(Array.isArray(s))for(var o=0;o<s.length;o++)s[o]!==i&&s[o]instanceof t&&n(s[o]);else s instanceof t&&i!==s&&n(s)},setTransition:function(e,i){function n(t){t.setWrapperTransition(e,b),0!==e&&(t.onTransitionStart(),t.wrapper.transitionEnd(function(){r&&(t.params.loop&&"slide"===b.params.controlBy&&t.fixLoop(),t.onTransitionEnd())}))}var a,r=b.params.control;if(Array.isArray(r))for(a=0;a<r.length;a++)r[a]!==i&&r[a]instanceof t&&n(r[a]);else r instanceof t&&i!==r&&n(r)}},b.hashnav={onHashCange:function(e,t){var i=document.location.hash.replace("#","");i!==b.slides.eq(b.activeIndex).attr("data-hash")&&b.slideTo(b.wrapper.children("."+b.params.slideClass+'[data-hash="'+i+'"]').index())},attachEvents:function(t){var i=t?"off":"on";e(window)[i]("hashchange",b.hashnav.onHashCange)},setHash:function(){if(b.hashnav.initialized&&b.params.hashnav)if(b.params.replaceState&&window.history&&window.history.replaceState)window.history.replaceState(null,null,"#"+b.slides.eq(b.activeIndex).attr("data-hash")||"");else{var e=b.slides.eq(b.activeIndex),t=e.attr("data-hash")||e.attr("data-history");document.location.hash=t||""}},init:function(){if(b.params.hashnav&&!b.params.history){b.hashnav.initialized=!0;var e=document.location.hash.replace("#","");if(e)for(var t=0,i=b.slides.length;t<i;t++){var n=b.slides.eq(t);if((n.attr("data-hash")||n.attr("data-history"))===e&&!n.hasClass(b.params.slideDuplicateClass)){var a=n.index();b.slideTo(a,0,b.params.runCallbacksOnInit,!0)}}b.params.hashnavWatchState&&b.hashnav.attachEvents()}},destroy:function(){b.params.hashnavWatchState&&b.hashnav.attachEvents(!0)}},b.history={init:function(){if(b.params.history){if(!window.history||!window.history.pushState)return b.params.history=!1,void(b.params.hashnav=!0);b.history.initialized=!0,this.paths=this.getPathValues(),(this.paths.key||this.paths.value)&&(this.scrollToSlide(0,this.paths.value,b.params.runCallbacksOnInit),b.params.replaceState||window.addEventListener("popstate",this.setHistoryPopState))}},setHistoryPopState:function(){b.history.paths=b.history.getPathValues(),b.history.scrollToSlide(b.params.speed,b.history.paths.value,!1)},getPathValues:function(){var e=window.location.pathname.slice(1).split("/"),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){if(b.history.initialized&&b.params.history){var i=b.slides.eq(t),n=this.slugify(i.attr("data-history"));window.location.pathname.includes(e)||(n=e+"/"+n),b.params.replaceState?window.history.replaceState(null,null,n):window.history.pushState(null,null,n)}},slugify:function(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){if(t)for(var n=0,a=b.slides.length;n<a;n++){var r=b.slides.eq(n);if(this.slugify(r.attr("data-history"))===t&&!r.hasClass(b.params.slideDuplicateClass)){var s=r.index();b.slideTo(s,e,i)}}else b.slideTo(0,e,i)}},b.disableKeyboardControl=function(){b.params.keyboardControl=!1,e(document).off("keydown",l)},b.enableKeyboardControl=function(){b.params.keyboardControl=!0,e(document).on("keydown",l)},b.mousewheel={event:!1,lastScrollTime:(new window.Date).getTime()},b.params.mousewheelControl&&(b.mousewheel.event=navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e="onwheel"in document;if(!e){var t=document.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")&&(e=document.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel"),b.disableMousewheelControl=function(){if(!b.mousewheel.event)return!1;var t=b.container;return"container"!==b.params.mousewheelEventsTarged&&(t=e(b.params.mousewheelEventsTarged)),t.off(b.mousewheel.event,c),b.params.mousewheelControl=!1,!0},b.enableMousewheelControl=function(){if(!b.mousewheel.event)return!1;var t=b.container;return"container"!==b.params.mousewheelEventsTarged&&(t=e(b.params.mousewheelEventsTarged)),t.on(b.mousewheel.event,c),b.params.mousewheelControl=!0,!0},b.parallax={setTranslate:function(){b.container.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){d(this,b.progress)}),b.slides.each(function(){var t=e(this);t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){d(this,Math.min(Math.max(t[0].progress,-1),1))})})},setTransition:function(t){void 0===t&&(t=b.params.speed),b.container.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){var i=e(this),n=parseInt(i.attr("data-swiper-parallax-duration"),10)||t;0===t&&(n=0),i.transition(n)})}},b.zoom={scale:1,currentScale:1,isScaling:!1,gesture:{slide:void 0,slideWidth:void 0,slideHeight:void 0,image:void 0,imageWrap:void 0,zoomMax:b.params.zoomMax},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0},getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,n=e.targetTouches[1].pageX,a=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(n-t,2)+Math.pow(a-i,2))},onGestureStart:function(t){var i=b.zoom;if(!b.support.gestures){if("touchstart"!==t.type||"touchstart"===t.type&&t.targetTouches.length<2)return;i.gesture.scaleStart=i.getDistanceBetweenTouches(t)}i.gesture.slide&&i.gesture.slide.length||(i.gesture.slide=e(this),0===i.gesture.slide.length&&(i.gesture.slide=b.slides.eq(b.activeIndex)),i.gesture.image=i.gesture.slide.find("img, svg, canvas"),i.gesture.imageWrap=i.gesture.image.parent("."+b.params.zoomContainerClass),i.gesture.zoomMax=i.gesture.imageWrap.attr("data-swiper-zoom")||b.params.zoomMax,0!==i.gesture.imageWrap.length)?(i.gesture.image.transition(0),i.isScaling=!0):i.gesture.image=void 0},onGestureChange:function(e){var t=b.zoom;if(!b.support.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;t.gesture.scaleMove=t.getDistanceBetweenTouches(e)}t.gesture.image&&0!==t.gesture.image.length&&(b.support.gestures?t.scale=e.scale*t.currentScale:t.scale=t.gesture.scaleMove/t.gesture.scaleStart*t.currentScale,t.scale>t.gesture.zoomMax&&(t.scale=t.gesture.zoomMax-1+Math.pow(t.scale-t.gesture.zoomMax+1,.5)),t.scale<b.params.zoomMin&&(t.scale=b.params.zoomMin+1-Math.pow(b.params.zoomMin-t.scale+1,.5)),t.gesture.image.transform("translate3d(0,0,0) scale("+t.scale+")"))},onGestureEnd:function(e){var t=b.zoom;!b.support.gestures&&("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2)||t.gesture.image&&0!==t.gesture.image.length&&(t.scale=Math.max(Math.min(t.scale,t.gesture.zoomMax),b.params.zoomMin),t.gesture.image.transition(b.params.speed).transform("translate3d(0,0,0) scale("+t.scale+")"),t.currentScale=t.scale,t.isScaling=!1,1===t.scale&&(t.gesture.slide=void 0))},onTouchStart:function(e,t){var i=e.zoom;i.gesture.image&&0!==i.gesture.image.length&&(i.image.isTouched||("android"===e.device.os&&t.preventDefault(),i.image.isTouched=!0,i.image.touchesStart.x="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,i.image.touchesStart.y="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY))},onTouchMove:function(e){var t=b.zoom;if(t.gesture.image&&0!==t.gesture.image.length&&(b.allowClick=!1,t.image.isTouched&&t.gesture.slide)){t.image.isMoved||(t.image.width=t.gesture.image[0].offsetWidth,t.image.height=t.gesture.image[0].offsetHeight,t.image.startX=b.getTranslate(t.gesture.imageWrap[0],"x")||0,t.image.startY=b.getTranslate(t.gesture.imageWrap[0],"y")||0,t.gesture.slideWidth=t.gesture.slide[0].offsetWidth,t.gesture.slideHeight=t.gesture.slide[0].offsetHeight,t.gesture.imageWrap.transition(0),b.rtl&&(t.image.startX=-t.image.startX),b.rtl&&(t.image.startY=-t.image.startY));var i=t.image.width*t.scale,n=t.image.height*t.scale;if(!(i<t.gesture.slideWidth&&n<t.gesture.slideHeight)){if(t.image.minX=Math.min(t.gesture.slideWidth/2-i/2,0),t.image.maxX=-t.image.minX,t.image.minY=Math.min(t.gesture.slideHeight/2-n/2,0),t.image.maxY=-t.image.minY,t.image.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,t.image.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!t.image.isMoved&&!t.isScaling){if(b.isHorizontal()&&Math.floor(t.image.minX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x<t.image.touchesStart.x||Math.floor(t.image.maxX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x>t.image.touchesStart.x)return void(t.image.isTouched=!1);if(!b.isHorizontal()&&Math.floor(t.image.minY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y<t.image.touchesStart.y||Math.floor(t.image.maxY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y>t.image.touchesStart.y)return void(t.image.isTouched=!1)}e.preventDefault(),e.stopPropagation(),t.image.isMoved=!0,t.image.currentX=t.image.touchesCurrent.x-t.image.touchesStart.x+t.image.startX,t.image.currentY=t.image.touchesCurrent.y-t.image.touchesStart.y+t.image.startY,t.image.currentX<t.image.minX&&(t.image.currentX=t.image.minX+1-Math.pow(t.image.minX-t.image.currentX+1,.8)),t.image.currentX>t.image.maxX&&(t.image.currentX=t.image.maxX-1+Math.pow(t.image.currentX-t.image.maxX+1,.8)),t.image.currentY<t.image.minY&&(t.image.currentY=t.image.minY+1-Math.pow(t.image.minY-t.image.currentY+1,.8)),t.image.currentY>t.image.maxY&&(t.image.currentY=t.image.maxY-1+Math.pow(t.image.currentY-t.image.maxY+1,.8)),t.velocity.prevPositionX||(t.velocity.prevPositionX=t.image.touchesCurrent.x),t.velocity.prevPositionY||(t.velocity.prevPositionY=t.image.touchesCurrent.y),t.velocity.prevTime||(t.velocity.prevTime=Date.now()),t.velocity.x=(t.image.touchesCurrent.x-t.velocity.prevPositionX)/(Date.now()-t.velocity.prevTime)/2,t.velocity.y=(t.image.touchesCurrent.y-t.velocity.prevPositionY)/(Date.now()-t.velocity.prevTime)/2,Math.abs(t.image.touchesCurrent.x-t.velocity.prevPositionX)<2&&(t.velocity.x=0),Math.abs(t.image.touchesCurrent.y-t.velocity.prevPositionY)<2&&(t.velocity.y=0),t.velocity.prevPositionX=t.image.touchesCurrent.x,t.velocity.prevPositionY=t.image.touchesCurrent.y,t.velocity.prevTime=Date.now(),t.gesture.imageWrap.transform("translate3d("+t.image.currentX+"px, "+t.image.currentY+"px,0)")}}},onTouchEnd:function(e,t){var i=e.zoom;if(i.gesture.image&&0!==i.gesture.image.length){if(!i.image.isTouched||!i.image.isMoved)return i.image.isTouched=!1,void(i.image.isMoved=!1);i.image.isTouched=!1,i.image.isMoved=!1;var n=300,a=300,r=i.velocity.x*n,s=i.image.currentX+r,o=i.velocity.y*a,l=i.image.currentY+o;0!==i.velocity.x&&(n=Math.abs((s-i.image.currentX)/i.velocity.x)),0!==i.velocity.y&&(a=Math.abs((l-i.image.currentY)/i.velocity.y));var u=Math.max(n,a);i.image.currentX=s,i.image.currentY=l;var c=i.image.width*i.scale,d=i.image.height*i.scale;i.image.minX=Math.min(i.gesture.slideWidth/2-c/2,0),i.image.maxX=-i.image.minX,i.image.minY=Math.min(i.gesture.slideHeight/2-d/2,0),i.image.maxY=-i.image.minY,i.image.currentX=Math.max(Math.min(i.image.currentX,i.image.maxX),i.image.minX),i.image.currentY=Math.max(Math.min(i.image.currentY,i.image.maxY),i.image.minY),i.gesture.imageWrap.transition(u).transform("translate3d("+i.image.currentX+"px, "+i.image.currentY+"px,0)")}},onTransitionEnd:function(e){var t=e.zoom;t.gesture.slide&&e.previousIndex!==e.activeIndex&&(t.gesture.image.transform("translate3d(0,0,0) scale(1)"),t.gesture.imageWrap.transform("translate3d(0,0,0)"),t.gesture.slide=t.gesture.image=t.gesture.imageWrap=void 0,t.scale=t.currentScale=1)},toggleZoom:function(t,i){var n=t.zoom;if(n.gesture.slide||(n.gesture.slide=t.clickedSlide?e(t.clickedSlide):t.slides.eq(t.activeIndex),n.gesture.image=n.gesture.slide.find("img, svg, canvas"),n.gesture.imageWrap=n.gesture.image.parent("."+t.params.zoomContainerClass)),n.gesture.image&&0!==n.gesture.image.length){var a,r,s,o,l,u,c,d,p,h,f,m,g,v,y,w;void 0===n.image.touchesStart.x&&i?(a="touchend"===i.type?i.changedTouches[0].pageX:i.pageX,r="touchend"===i.type?i.changedTouches[0].pageY:i.pageY):(a=n.image.touchesStart.x,r=n.image.touchesStart.y),n.scale&&1!==n.scale?(n.scale=n.currentScale=1,n.gesture.imageWrap.transition(300).transform("translate3d(0,0,0)"),n.gesture.image.transition(300).transform("translate3d(0,0,0) scale(1)"),n.gesture.slide=void 0):(n.scale=n.currentScale=n.gesture.imageWrap.attr("data-swiper-zoom")||t.params.zoomMax,i?(y=n.gesture.slide[0].offsetWidth,w=n.gesture.slide[0].offsetHeight,s=n.gesture.slide.offset().left+y/2-a,o=n.gesture.slide.offset().top+w/2-r,c=n.gesture.image[0].offsetWidth,d=n.gesture.image[0].offsetHeight,p=c*n.scale,h=d*n.scale,g=-(f=Math.min(y/2-p/2,0)),v=-(m=Math.min(w/2-h/2,0)),l=s*n.scale,u=o*n.scale,l<f&&(l=f),l>g&&(l=g),u<m&&(u=m),u>v&&(u=v)):(l=0,u=0),n.gesture.imageWrap.transition(300).transform("translate3d("+l+"px, "+u+"px,0)"),n.gesture.image.transition(300).transform("translate3d(0,0,0) scale("+n.scale+")"))}},attachEvents:function(t){var i=t?"off":"on";if(b.params.zoom){b.slides;var n=!("touchstart"!==b.touchEvents.start||!b.support.passiveListener||!b.params.passiveListeners)&&{passive:!0,capture:!1};b.support.gestures?(b.slides[i]("gesturestart",b.zoom.onGestureStart,n),b.slides[i]("gesturechange",b.zoom.onGestureChange,n),b.slides[i]("gestureend",b.zoom.onGestureEnd,n)):"touchstart"===b.touchEvents.start&&(b.slides[i](b.touchEvents.start,b.zoom.onGestureStart,n),b.slides[i](b.touchEvents.move,b.zoom.onGestureChange,n),b.slides[i](b.touchEvents.end,b.zoom.onGestureEnd,n)),b[i]("touchStart",b.zoom.onTouchStart),b.slides.each(function(t,n){e(n).find("."+b.params.zoomContainerClass).length>0&&e(n)[i](b.touchEvents.move,b.zoom.onTouchMove)}),b[i]("touchEnd",b.zoom.onTouchEnd),b[i]("transitionEnd",b.zoom.onTransitionEnd),b.params.zoomToggle&&b.on("doubleTap",b.zoom.toggleZoom)}},init:function(){b.zoom.attachEvents()},destroy:function(){b.zoom.attachEvents(!0)}},b._plugins=[];for(var H in b.plugins){var R=b.plugins[H](b,b.params[H]);R&&b._plugins.push(R)}return b.callPlugins=function(e){for(var t=0;t<b._plugins.length;t++)e in b._plugins[t]&&b._plugins[t][e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},b.emitterEventListeners={},b.emit=function(e){b.params[e]&&b.params[e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);var t;if(b.emitterEventListeners[e])for(t=0;t<b.emitterEventListeners[e].length;t++)b.emitterEventListeners[e][t](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);b.callPlugins&&b.callPlugins(e,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},b.on=function(e,t){return e=p(e),b.emitterEventListeners[e]||(b.emitterEventListeners[e]=[]),b.emitterEventListeners[e].push(t),b},b.off=function(e,t){var i;if(e=p(e),void 0===t)return b.emitterEventListeners[e]=[],b;if(b.emitterEventListeners[e]&&0!==b.emitterEventListeners[e].length){for(i=0;i<b.emitterEventListeners[e].length;i++)b.emitterEventListeners[e][i]===t&&b.emitterEventListeners[e].splice(i,1);return b}},b.once=function(e,t){e=p(e);var i=function(){t(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]),b.off(e,i)};return b.on(e,i),b},b.a11y={makeFocusable:function(e){return e.attr("tabIndex","0"),e},addRole:function(e,t){return e.attr("role",t),e},addLabel:function(e,t){return e.attr("aria-label",t),e},disable:function(e){return e.attr("aria-disabled",!0),e},enable:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(t){13===t.keyCode&&(e(t.target).is(b.params.nextButton)?(b.onClickNext(t),b.isEnd?b.a11y.notify(b.params.lastSlideMessage):b.a11y.notify(b.params.nextSlideMessage)):e(t.target).is(b.params.prevButton)&&(b.onClickPrev(t),b.isBeginning?b.a11y.notify(b.params.firstSlideMessage):b.a11y.notify(b.params.prevSlideMessage)),e(t.target).is("."+b.params.bulletClass)&&e(t.target)[0].click())},liveRegion:e('<span class="'+b.params.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>'),notify:function(e){var t=b.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},init:function(){b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.a11y.makeFocusable(b.nextButton),b.a11y.addRole(b.nextButton,"button"),b.a11y.addLabel(b.nextButton,b.params.nextSlideMessage)),b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.a11y.makeFocusable(b.prevButton),b.a11y.addRole(b.prevButton,"button"),b.a11y.addLabel(b.prevButton,b.params.prevSlideMessage)),e(b.container).append(b.a11y.liveRegion)},initPagination:function(){b.params.pagination&&b.params.paginationClickable&&b.bullets&&b.bullets.length&&b.bullets.each(function(){var t=e(this);b.a11y.makeFocusable(t),b.a11y.addRole(t,"button"),b.a11y.addLabel(t,b.params.paginationBulletMessage.replace(/{{index}}/,t.index()+1))})},destroy:function(){b.a11y.liveRegion&&b.a11y.liveRegion.length>0&&b.a11y.liveRegion.remove()}},b.init=function(){b.params.loop&&b.createLoop(),b.updateContainerSize(),b.updateSlidesSize(),b.updatePagination(),b.params.scrollbar&&b.scrollbar&&(b.scrollbar.set(),b.params.scrollbarDraggable&&b.scrollbar.enableDraggable()),"slide"!==b.params.effect&&b.effects[b.params.effect]&&(b.params.loop||b.updateProgress(),b.effects[b.params.effect].setTranslate()),b.params.loop?b.slideTo(b.params.initialSlide+b.loopedSlides,0,b.params.runCallbacksOnInit):(b.slideTo(b.params.initialSlide,0,b.params.runCallbacksOnInit),0===b.params.initialSlide&&(b.parallax&&b.params.parallax&&b.parallax.setTranslate(),b.lazy&&b.params.lazyLoading&&(b.lazy.load(),b.lazy.initialImageLoaded=!0))),b.attachEvents(),b.params.observer&&b.support.observer&&b.initObservers(),b.params.preloadImages&&!b.params.lazyLoading&&b.preloadImages(),b.params.zoom&&b.zoom&&b.zoom.init(),b.params.autoplay&&b.startAutoplay(),b.params.keyboardControl&&b.enableKeyboardControl&&b.enableKeyboardControl(),b.params.mousewheelControl&&b.enableMousewheelControl&&b.enableMousewheelControl(),b.params.hashnavReplaceState&&(b.params.replaceState=b.params.hashnavReplaceState),b.params.history&&b.history&&b.history.init(),b.params.hashnav&&b.hashnav&&b.hashnav.init(),b.params.a11y&&b.a11y&&b.a11y.init(),b.emit("onInit",b)},b.cleanupStyles=function(){b.container.removeClass(b.classNames.join(" ")).removeAttr("style"),b.wrapper.removeAttr("style"),b.slides&&b.slides.length&&b.slides.removeClass([b.params.slideVisibleClass,b.params.slideActiveClass,b.params.slideNextClass,b.params.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-column").removeAttr("data-swiper-row"),b.paginationContainer&&b.paginationContainer.length&&b.paginationContainer.removeClass(b.params.paginationHiddenClass),b.bullets&&b.bullets.length&&b.bullets.removeClass(b.params.bulletActiveClass),b.params.prevButton&&e(b.params.prevButton).removeClass(b.params.buttonDisabledClass),b.params.nextButton&&e(b.params.nextButton).removeClass(b.params.buttonDisabledClass),b.params.scrollbar&&b.scrollbar&&(b.scrollbar.track&&b.scrollbar.track.length&&b.scrollbar.track.removeAttr("style"),b.scrollbar.drag&&b.scrollbar.drag.length&&b.scrollbar.drag.removeAttr("style"))},b.destroy=function(e,t){b.detachEvents(),b.stopAutoplay(),b.params.scrollbar&&b.scrollbar&&b.params.scrollbarDraggable&&b.scrollbar.disableDraggable(),b.params.loop&&b.destroyLoop(),t&&b.cleanupStyles(),b.disconnectObservers(),b.params.zoom&&b.zoom&&b.zoom.destroy(),b.params.keyboardControl&&b.disableKeyboardControl&&b.disableKeyboardControl(),b.params.mousewheelControl&&b.disableMousewheelControl&&b.disableMousewheelControl(),b.params.a11y&&b.a11y&&b.a11y.destroy(),b.params.history&&!b.params.replaceState&&window.removeEventListener("popstate",b.history.setHistoryPopState),b.params.hashnav&&b.hashnav&&b.hashnav.destroy(),b.emit("onDestroy"),!1!==e&&(b=null)},b.init(),b}};t.prototype={isSafari:function(){var e=window.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent),isArray:function(e){return"[object Array]"===Object.prototype.toString.apply(e)},browser:{ie:window.navigator.pointerEnabled||window.navigator.msPointerEnabled,ieTouch:window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>1||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>1,lteIE9:function(){var e=document.createElement("div");return e.innerHTML="\x3c!--[if lte IE 9]><i></i><![endif]--\x3e",1===e.getElementsByTagName("i").length}()},device:function(){var e=window.navigator.userAgent,t=e.match(/(Android);?[\s\/]+([\d.]+)?/),i=e.match(/(iPad).*OS\s([\d_]+)/),n=e.match(/(iPod)(.*OS\s([\d_]+))?/),a=!i&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);return{ios:i||a||n,android:t}}(),support:{touch:window.Modernizr&&!0===Modernizr.touch||function(){return!!("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch)}(),transforms3d:window.Modernizr&&!0===Modernizr.csstransforms3d||function(){var e=document.createElement("div").style;return"webkitPerspective"in e||"MozPerspective"in e||"OPerspective"in e||"MsPerspective"in e||"perspective"in e}(),flexbox:function(){for(var e=document.createElement("div").style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),i=0;i<t.length;i++)if(t[i]in e)return!0}(),observer:function(){return"MutationObserver"in window||"WebkitMutationObserver"in window}(),passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:function(){return"ongesturestart"in window}()},plugins:{}};for(var i=["jQuery","Zepto","Dom7"],n=0;n<i.length;n++)window[i[n]]&&function(e){e.fn.swiper=function(i){var n;return e(this).each(function(){var e=new t(this,i);n||(n=e)}),n}}(window[i[n]]);var a;(a="undefined"==typeof Dom7?window.Dom7||window.Zepto||window.jQuery:Dom7)&&("transitionEnd"in a.fn||(a.fn.transitionEnd=function(e){function t(r){if(r.target===this)for(e.call(this,r),i=0;i<n.length;i++)a.off(n[i],t)}var i,n=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],a=this;if(e)for(i=0;i<n.length;i++)a.on(n[i],t);return this}),"transform"in a.fn||(a.fn.transform=function(e){for(var t=0;t<this.length;t++){var i=this[t].style;i.webkitTransform=i.MsTransform=i.msTransform=i.MozTransform=i.OTransform=i.transform=e}return this}),"transition"in a.fn||(a.fn.transition=function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var i=this[t].style;i.webkitTransitionDuration=i.MsTransitionDuration=i.msTransitionDuration=i.MozTransitionDuration=i.OTransitionDuration=i.transitionDuration=e}return this}),"outerWidth"in a.fn||(a.fn.outerWidth=function(e){return this.length>0?e?this[0].offsetWidth+parseFloat(this.css("margin-right"))+parseFloat(this.css("margin-left")):this[0].offsetWidth:null})),window.Swiper=t}(),"undefined"!=typeof module?module.exports=window.Swiper:"function"==typeof define&&define.amd&&define([],function(){"use strict";return window.Swiper}),function(e,t,i,n){"use strict";function a(e,t,i){return setTimeout(u(e,i),t)}function r(e,t,i){return!!Array.isArray(e)&&(s(e,i[t],i),!0)}function s(e,t,i){var a;if(e)if(e.forEach)e.forEach(t,i);else if(e.length!==n)for(a=0;a<e.length;)t.call(i,e[a],a,e),a++;else for(a in e)e.hasOwnProperty(a)&&t.call(i,e[a],a,e)}function o(t,i,n){var a="DEPRECATED METHOD: "+i+"\n"+n+" AT \n";return function(){var i=new Error("get-stack-trace"),n=i&&i.stack?i.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",r=e.console&&(e.console.warn||e.console.log);return r&&r.call(e.console,a,n),t.apply(this,arguments)}}function l(e,t,i){var n,a=t.prototype;(n=e.prototype=Object.create(a)).constructor=e,n._super=a,i&&ce(n,i)}function u(e,t){return function(){return e.apply(t,arguments)}}function c(e,t){return typeof e==he?e.apply(t?t[0]||n:n,t):e}function d(e,t){return e===n?t:e}function p(e,t,i){s(g(t),function(t){e.addEventListener(t,i,!1)})}function h(e,t,i){s(g(t),function(t){e.removeEventListener(t,i,!1)})}function f(e,t){for(;e;){if(e==t)return!0;e=e.parentNode}return!1}function m(e,t){return e.indexOf(t)>-1}function g(e){return e.trim().split(/\s+/g)}function v(e,t,i){if(e.indexOf&&!i)return e.indexOf(t);for(var n=0;n<e.length;){if(i&&e[n][i]==t||!i&&e[n]===t)return n;n++}return-1}function y(e){return Array.prototype.slice.call(e,0)}function w(e,t,i){for(var n=[],a=[],r=0;r<e.length;){var s=t?e[r][t]:e[r];v(a,s)<0&&n.push(e[r]),a[r]=s,r++}return i&&(n=t?n.sort(function(e,i){return e[t]>i[t]}):n.sort()),n}function b(e,t){for(var i,a,r=t[0].toUpperCase()+t.slice(1),s=0;s<de.length;){if(i=de[s],(a=i?i+r:t)in e)return a;s++}return n}function x(){return we++}function C(t){var i=t.ownerDocument||t;return i.defaultView||i.parentWindow||e}function T(e,t){var i=this;this.manager=e,this.callback=t,this.element=e.element,this.target=e.options.inputTarget,this.domHandler=function(t){c(e.options.enable,[e])&&i.handler(t)},this.init()}function S(e){var t=e.options.inputClass;return new(t||(Ce?R:Te?q:xe?X:H))(e,k)}function k(e,t,i){var n=i.pointers.length,a=i.changedPointers.length,r=t&ke&&n-a==0,s=t&(Me|Le)&&n-a==0;i.isFirst=!!r,i.isFinal=!!s,r&&(e.session={}),i.eventType=t,E(e,i),e.emit("hammer.input",i),e.recognize(i),e.session.prevInput=i}function E(e,t){var i=e.session,n=t.pointers,a=n.length;i.firstInput||(i.firstInput=D(t)),a>1&&!i.firstMultiple?i.firstMultiple=D(t):1===a&&(i.firstMultiple=!1);var r=i.firstInput,s=i.firstMultiple,o=s?s.center:r.center,l=t.center=z(n);t.timeStamp=ge(),t.deltaTime=t.timeStamp-r.timeStamp,t.angle=I(o,l),t.distance=A(o,l),M(i,t),t.offsetDirection=F(t.deltaX,t.deltaY);var u=P(t.deltaTime,t.deltaX,t.deltaY);t.overallVelocityX=u.x,t.overallVelocityY=u.y,t.overallVelocity=me(u.x)>me(u.y)?u.x:u.y,t.scale=s?j(s.pointers,n):1,t.rotation=s?N(s.pointers,n):0,t.maxPointers=i.prevInput?t.pointers.length>i.prevInput.maxPointers?t.pointers.length:i.prevInput.maxPointers:t.pointers.length,L(i,t);var c=e.element;f(t.srcEvent.target,c)&&(c=t.srcEvent.target),t.target=c}function M(e,t){var i=t.center,n=e.offsetDelta||{},a=e.prevDelta||{},r=e.prevInput||{};t.eventType!==ke&&r.eventType!==Me||(a=e.prevDelta={x:r.deltaX||0,y:r.deltaY||0},n=e.offsetDelta={x:i.x,y:i.y}),t.deltaX=a.x+(i.x-n.x),t.deltaY=a.y+(i.y-n.y)}function L(e,t){var i,a,r,s,o=e.lastInterval||t,l=t.timeStamp-o.timeStamp;if(t.eventType!=Le&&(l>Se||o.velocity===n)){var u=t.deltaX-o.deltaX,c=t.deltaY-o.deltaY,d=P(l,u,c);a=d.x,r=d.y,i=me(d.x)>me(d.y)?d.x:d.y,s=F(u,c),e.lastInterval=t}else i=o.velocity,a=o.velocityX,r=o.velocityY,s=o.direction;t.velocity=i,t.velocityX=a,t.velocityY=r,t.direction=s}function D(e){for(var t=[],i=0;i<e.pointers.length;)t[i]={clientX:fe(e.pointers[i].clientX),clientY:fe(e.pointers[i].clientY)},i++;return{timeStamp:ge(),pointers:t,center:z(t),deltaX:e.deltaX,deltaY:e.deltaY}}function z(e){var t=e.length;if(1===t)return{x:fe(e[0].clientX),y:fe(e[0].clientY)};for(var i=0,n=0,a=0;a<t;)i+=e[a].clientX,n+=e[a].clientY,a++;return{x:fe(i/t),y:fe(n/t)}}function P(e,t,i){return{x:t/e||0,y:i/e||0}}function F(e,t){return e===t?De:me(e)>=me(t)?e<0?ze:Pe:t<0?Fe:Ae}function A(e,t,i){i||(i=He);var n=t[i[0]]-e[i[0]],a=t[i[1]]-e[i[1]];return Math.sqrt(n*n+a*a)}function I(e,t,i){i||(i=He);var n=t[i[0]]-e[i[0]],a=t[i[1]]-e[i[1]];return 180*Math.atan2(a,n)/Math.PI}function N(e,t){return I(t[1],t[0],Re)+I(e[1],e[0],Re)}function j(e,t){return A(t[0],t[1],Re)/A(e[0],e[1],Re)}function H(){this.evEl=Be,this.evWin=qe,this.pressed=!1,T.apply(this,arguments)}function R(){this.evEl=We,this.evWin=Ye,T.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function O(){this.evTarget=_e,this.evWin=Ve,this.started=!1,T.apply(this,arguments)}function B(e,t){var i=y(e.touches),n=y(e.changedTouches);return t&(Me|Le)&&(i=w(i.concat(n),"identifier",!0)),[i,n]}function q(){this.evTarget=Ue,this.targetIds={},T.apply(this,arguments)}function $(e,t){var i=y(e.touches),n=this.targetIds;if(t&(ke|Ee)&&1===i.length)return n[i[0].identifier]=!0,[i,i];var a,r,s=y(e.changedTouches),o=[],l=this.target;if(r=i.filter(function(e){return f(e.target,l)}),t===ke)for(a=0;a<r.length;)n[r[a].identifier]=!0,a++;for(a=0;a<s.length;)n[s[a].identifier]&&o.push(s[a]),t&(Me|Le)&&delete n[s[a].identifier],a++;return o.length?[w(r.concat(o),"identifier",!0),o]:void 0}function X(){T.apply(this,arguments);var e=u(this.handler,this);this.touch=new q(this.manager,e),this.mouse=new H(this.manager,e),this.primaryTouch=null,this.lastTouches=[]}function W(e,t){e&ke?(this.primaryTouch=t.changedPointers[0].identifier,Y.call(this,t)):e&(Me|Le)&&Y.call(this,t)}function Y(e){var t=e.changedPointers[0];if(t.identifier===this.primaryTouch){var i={x:t.clientX,y:t.clientY};this.lastTouches.push(i);var n=this.lastTouches,a=function(){var e=n.indexOf(i);e>-1&&n.splice(e,1)};setTimeout(a,Ke)}}function G(e){for(var t=e.srcEvent.clientX,i=e.srcEvent.clientY,n=0;n<this.lastTouches.length;n++){var a=this.lastTouches[n],r=Math.abs(t-a.x),s=Math.abs(i-a.y);if(r<=Ze&&s<=Ze)return!0}return!1}function _(e,t){this.manager=e,this.set(t)}function V(e){if(m(e,nt))return nt;var t=m(e,at),i=m(e,rt);return t&&i?nt:t||i?t?at:rt:m(e,it)?it:tt}function Q(e){this.options=ce({},this.defaults,e||{}),this.id=x(),this.manager=null,this.options.enable=d(this.options.enable,!0),this.state=ot,this.simultaneous={},this.requireFail=[]}function U(e){return e&pt?"cancel":e&ct?"end":e&ut?"move":e&lt?"start":""}function K(e){return e==Ae?"down":e==Fe?"up":e==ze?"left":e==Pe?"right":""}function Z(e,t){var i=t.manager;return i?i.get(e):e}function J(){Q.apply(this,arguments)}function ee(){J.apply(this,arguments),this.pX=null,this.pY=null}function te(){J.apply(this,arguments)}function ie(){Q.apply(this,arguments),this._timer=null,this._input=null}function ne(){J.apply(this,arguments)}function ae(){J.apply(this,arguments)}function re(){Q.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function se(e,t){return t=t||{},t.recognizers=d(t.recognizers,se.defaults.preset),new oe(e,t)}function oe(e,t){this.options=ce({},se.defaults,t||{}),this.options.inputTarget=this.options.inputTarget||e,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=e,this.input=S(this),this.touchAction=new _(this,this.options.touchAction),le(this,!0),s(this.options.recognizers,function(e){var t=this.add(new e[0](e[1]));e[2]&&t.recognizeWith(e[2]),e[3]&&t.requireFailure(e[3])},this)}function le(e,t){var i=e.element;if(i.style){var n;s(e.options.cssProps,function(a,r){n=b(i.style,r),t?(e.oldCssProps[n]=i.style[n],i.style[n]=a):i.style[n]=e.oldCssProps[n]||""}),t||(e.oldCssProps={})}}function ue(e,i){var n=t.createEvent("Event");n.initEvent(e,!0,!0),n.gesture=i,i.target.dispatchEvent(n)}var ce,de=["","webkit","Moz","MS","ms","o"],pe=t.createElement("div"),he="function",fe=Math.round,me=Math.abs,ge=Date.now;ce="function"!=typeof Object.assign?function(e){if(e===n||null===e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),i=1;i<arguments.length;i++){var a=arguments[i];if(a!==n&&null!==a)for(var r in a)a.hasOwnProperty(r)&&(t[r]=a[r])}return t}:Object.assign;var ve=o(function(e,t,i){for(var a=Object.keys(t),r=0;r<a.length;)(!i||i&&e[a[r]]===n)&&(e[a[r]]=t[a[r]]),r++;return e},"extend","Use `assign`."),ye=o(function(e,t){return ve(e,t,!0)},"merge","Use `assign`."),we=1,be=/mobile|tablet|ip(ad|hone|od)|android/i,xe="ontouchstart"in e,Ce=b(e,"PointerEvent")!==n,Te=xe&&be.test(navigator.userAgent),Se=25,ke=1,Ee=2,Me=4,Le=8,De=1,ze=2,Pe=4,Fe=8,Ae=16,Ie=ze|Pe,Ne=Fe|Ae,je=Ie|Ne,He=["x","y"],Re=["clientX","clientY"];T.prototype={handler:function(){},init:function(){this.evEl&&p(this.element,this.evEl,this.domHandler),this.evTarget&&p(this.target,this.evTarget,this.domHandler),this.evWin&&p(C(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&h(this.element,this.evEl,this.domHandler),this.evTarget&&h(this.target,this.evTarget,this.domHandler),this.evWin&&h(C(this.element),this.evWin,this.domHandler)}};var Oe={mousedown:ke,mousemove:Ee,mouseup:Me},Be="mousedown",qe="mousemove mouseup";l(H,T,{handler:function(e){var t=Oe[e.type];t&ke&&0===e.button&&(this.pressed=!0),t&Ee&&1!==e.which&&(t=Me),this.pressed&&(t&Me&&(this.pressed=!1),this.callback(this.manager,t,{pointers:[e],changedPointers:[e],pointerType:"mouse",srcEvent:e}))}});var $e={pointerdown:ke,pointermove:Ee,pointerup:Me,pointercancel:Le,pointerout:Le},Xe={2:"touch",3:"pen",4:"mouse",5:"kinect"},We="pointerdown",Ye="pointermove pointerup pointercancel";e.MSPointerEvent&&!e.PointerEvent&&(We="MSPointerDown",Ye="MSPointerMove MSPointerUp MSPointerCancel"),l(R,T,{handler:function(e){var t=this.store,i=!1,n=e.type.toLowerCase().replace("ms",""),a=$e[n],r=Xe[e.pointerType]||e.pointerType,s="touch"==r,o=v(t,e.pointerId,"pointerId");a&ke&&(0===e.button||s)?o<0&&(t.push(e),o=t.length-1):a&(Me|Le)&&(i=!0),o<0||(t[o]=e,this.callback(this.manager,a,{pointers:t,changedPointers:[e],pointerType:r,srcEvent:e}),i&&t.splice(o,1))}});var Ge={touchstart:ke,touchmove:Ee,touchend:Me,touchcancel:Le},_e="touchstart",Ve="touchstart touchmove touchend touchcancel";l(O,T,{handler:function(e){var t=Ge[e.type];if(t===ke&&(this.started=!0),this.started){var i=B.call(this,e,t);t&(Me|Le)&&i[0].length-i[1].length==0&&(this.started=!1),this.callback(this.manager,t,{pointers:i[0],changedPointers:i[1],pointerType:"touch",srcEvent:e})}}});var Qe={touchstart:ke,touchmove:Ee,touchend:Me,touchcancel:Le},Ue="touchstart touchmove touchend touchcancel";l(q,T,{handler:function(e){var t=Qe[e.type],i=$.call(this,e,t);i&&this.callback(this.manager,t,{pointers:i[0],changedPointers:i[1],pointerType:"touch",srcEvent:e})}});var Ke=2500,Ze=25;l(X,T,{handler:function(e,t,i){var n="touch"==i.pointerType,a="mouse"==i.pointerType;if(!(a&&i.sourceCapabilities&&i.sourceCapabilities.firesTouchEvents)){if(n)W.call(this,t,i);else if(a&&G.call(this,i))return;this.callback(e,t,i)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Je=b(pe.style,"touchAction"),et=Je!==n,tt="auto",it="manipulation",nt="none",at="pan-x",rt="pan-y",st=function(){if(!et)return!1;var t={},i=e.CSS&&e.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(n){t[n]=!i||e.CSS.supports("touch-action",n)}),t}();_.prototype={set:function(e){"compute"==e&&(e=this.compute()),et&&this.manager.element.style&&st[e]&&(this.manager.element.style[Je]=e),this.actions=e.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var e=[];return s(this.manager.recognizers,function(t){c(t.options.enable,[t])&&(e=e.concat(t.getTouchAction()))}),V(e.join(" "))},preventDefaults:function(e){var t=e.srcEvent,i=e.offsetDirection;if(this.manager.session.prevented)t.preventDefault();else{var n=this.actions,a=m(n,nt)&&!st[nt],r=m(n,rt)&&!st[rt],s=m(n,at)&&!st[at];if(a){var o=1===e.pointers.length,l=e.distance<2,u=e.deltaTime<250;if(o&&l&&u)return}if(!s||!r)return a||r&&i&Ie||s&&i&Ne?this.preventSrc(t):void 0}},preventSrc:function(e){this.manager.session.prevented=!0,e.preventDefault()}};var ot=1,lt=2,ut=4,ct=8,dt=ct,pt=16;Q.prototype={defaults:{},set:function(e){return ce(this.options,e),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(e){if(r(e,"recognizeWith",this))return this;var t=this.simultaneous;return e=Z(e,this),t[e.id]||(t[e.id]=e,e.recognizeWith(this)),this},dropRecognizeWith:function(e){return r(e,"dropRecognizeWith",this)?this:(e=Z(e,this),delete this.simultaneous[e.id],this)},requireFailure:function(e){if(r(e,"requireFailure",this))return this;var t=this.requireFail;return e=Z(e,this),-1===v(t,e)&&(t.push(e),e.requireFailure(this)),this},dropRequireFailure:function(e){if(r(e,"dropRequireFailure",this))return this;e=Z(e,this);var t=v(this.requireFail,e);return t>-1&&this.requireFail.splice(t,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(e){return!!this.simultaneous[e.id]},emit:function(e){function t(t){i.manager.emit(t,e)}var i=this,n=this.state;n<ct&&t(i.options.event+U(n)),t(i.options.event),e.additionalEvent&&t(e.additionalEvent),n>=ct&&t(i.options.event+U(n))},tryEmit:function(e){if(this.canEmit())return this.emit(e);this.state=32},canEmit:function(){for(var e=0;e<this.requireFail.length;){if(!(this.requireFail[e].state&(32|ot)))return!1;e++}return!0},recognize:function(e){var t=ce({},e);if(!c(this.options.enable,[this,t]))return this.reset(),void(this.state=32);this.state&(dt|pt|32)&&(this.state=ot),this.state=this.process(t),this.state&(lt|ut|ct|pt)&&this.tryEmit(t)},process:function(e){},getTouchAction:function(){},reset:function(){}},l(J,Q,{defaults:{pointers:1},attrTest:function(e){var t=this.options.pointers;return 0===t||e.pointers.length===t},process:function(e){var t=this.state,i=e.eventType,n=t&(lt|ut),a=this.attrTest(e);return n&&(i&Le||!a)?t|pt:n||a?i&Me?t|ct:t&lt?t|ut:lt:32}}),l(ee,J,{defaults:{event:"pan",threshold:10,pointers:1,direction:je},getTouchAction:function(){var e=this.options.direction,t=[];return e&Ie&&t.push(rt),e&Ne&&t.push(at),t},directionTest:function(e){var t=this.options,i=!0,n=e.distance,a=e.direction,r=e.deltaX,s=e.deltaY;return a&t.direction||(t.direction&Ie?(a=0===r?De:r<0?ze:Pe,i=r!=this.pX,n=Math.abs(e.deltaX)):(a=0===s?De:s<0?Fe:Ae,i=s!=this.pY,n=Math.abs(e.deltaY))),e.direction=a,i&&n>t.threshold&&a&t.direction},attrTest:function(e){return J.prototype.attrTest.call(this,e)&&(this.state&lt||!(this.state&lt)&&this.directionTest(e))},emit:function(e){this.pX=e.deltaX,this.pY=e.deltaY;var t=K(e.direction);t&&(e.additionalEvent=this.options.event+t),this._super.emit.call(this,e)}}),l(te,J,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[nt]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.scale-1)>this.options.threshold||this.state&lt)},emit:function(e){if(1!==e.scale){var t=e.scale<1?"in":"out";e.additionalEvent=this.options.event+t}this._super.emit.call(this,e)}}),l(ie,Q,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[tt]},process:function(e){var t=this.options,i=e.pointers.length===t.pointers,n=e.distance<t.threshold,r=e.deltaTime>t.time;if(this._input=e,!n||!i||e.eventType&(Me|Le)&&!r)this.reset();else if(e.eventType&ke)this.reset(),this._timer=a(function(){this.state=dt,this.tryEmit()},t.time,this);else if(e.eventType&Me)return dt;return 32},reset:function(){clearTimeout(this._timer)},emit:function(e){this.state===dt&&(e&&e.eventType&Me?this.manager.emit(this.options.event+"up",e):(this._input.timeStamp=ge(),this.manager.emit(this.options.event,this._input)))}}),l(ne,J,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[nt]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.rotation)>this.options.threshold||this.state&lt)}}),l(ae,J,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Ie|Ne,pointers:1},getTouchAction:function(){return ee.prototype.getTouchAction.call(this)},attrTest:function(e){var t,i=this.options.direction;return i&(Ie|Ne)?t=e.overallVelocity:i&Ie?t=e.overallVelocityX:i&Ne&&(t=e.overallVelocityY),this._super.attrTest.call(this,e)&&i&e.offsetDirection&&e.distance>this.options.threshold&&e.maxPointers==this.options.pointers&&me(t)>this.options.velocity&&e.eventType&Me},emit:function(e){var t=K(e.offsetDirection);t&&this.manager.emit(this.options.event+t,e),this.manager.emit(this.options.event,e)}}),l(re,Q,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[it]},process:function(e){var t=this.options,i=e.pointers.length===t.pointers,n=e.distance<t.threshold,r=e.deltaTime<t.time;if(this.reset(),e.eventType&ke&&0===this.count)return this.failTimeout();if(n&&r&&i){if(e.eventType!=Me)return this.failTimeout();var s=!this.pTime||e.timeStamp-this.pTime<t.interval,o=!this.pCenter||A(this.pCenter,e.center)<t.posThreshold;if(this.pTime=e.timeStamp,this.pCenter=e.center,o&&s?this.count+=1:this.count=1,this._input=e,0===this.count%t.taps)return this.hasRequireFailures()?(this._timer=a(function(){this.state=dt,this.tryEmit()},t.interval,this),lt):dt}return 32},failTimeout:function(){return this._timer=a(function(){this.state=32},this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==dt&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),se.VERSION="2.0.7",se.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[ne,{enable:!1}],[te,{enable:!1},["rotate"]],[ae,{direction:Ie}],[ee,{direction:Ie},["swipe"]],[re],[re,{event:"doubletap",taps:2},["tap"]],[ie]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};oe.prototype={set:function(e){return ce(this.options,e),e.touchAction&&this.touchAction.update(),e.inputTarget&&(this.input.destroy(),this.input.target=e.inputTarget,this.input.init()),this},stop:function(e){this.session.stopped=e?2:1},recognize:function(e){var t=this.session;if(!t.stopped){this.touchAction.preventDefaults(e);var i,n=this.recognizers,a=t.curRecognizer;(!a||a&&a.state&dt)&&(a=t.curRecognizer=null);for(var r=0;r<n.length;)i=n[r],2===t.stopped||a&&i!=a&&!i.canRecognizeWith(a)?i.reset():i.recognize(e),!a&&i.state&(lt|ut|ct)&&(a=t.curRecognizer=i),r++}},get:function(e){if(e instanceof Q)return e;for(var t=this.recognizers,i=0;i<t.length;i++)if(t[i].options.event==e)return t[i];return null},add:function(e){if(r(e,"add",this))return this;var t=this.get(e.options.event);return t&&this.remove(t),this.recognizers.push(e),e.manager=this,this.touchAction.update(),e},remove:function(e){if(r(e,"remove",this))return this;if(e=this.get(e)){var t=this.recognizers,i=v(t,e);-1!==i&&(t.splice(i,1),this.touchAction.update())}return this},on:function(e,t){if(e!==n&&t!==n){var i=this.handlers;return s(g(e),function(e){i[e]=i[e]||[],i[e].push(t)}),this}},off:function(e,t){if(e!==n){var i=this.handlers;return s(g(e),function(e){t?i[e]&&i[e].splice(v(i[e],t),1):delete i[e]}),this}},emit:function(e,t){this.options.domEvents&&ue(e,t);var i=this.handlers[e]&&this.handlers[e].slice();if(i&&i.length){t.type=e,t.preventDefault=function(){t.srcEvent.preventDefault()};for(var n=0;n<i.length;)i[n](t),n++}},destroy:function(){this.element&&le(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},ce(se,{INPUT_START:ke,INPUT_MOVE:Ee,INPUT_END:Me,INPUT_CANCEL:Le,STATE_POSSIBLE:ot,STATE_BEGAN:lt,STATE_CHANGED:ut,STATE_ENDED:ct,STATE_RECOGNIZED:dt,STATE_CANCELLED:pt,STATE_FAILED:32,DIRECTION_NONE:De,DIRECTION_LEFT:ze,DIRECTION_RIGHT:Pe,DIRECTION_UP:Fe,DIRECTION_DOWN:Ae,DIRECTION_HORIZONTAL:Ie,DIRECTION_VERTICAL:Ne,DIRECTION_ALL:je,Manager:oe,Input:T,TouchAction:_,TouchInput:q,MouseInput:H,PointerEventInput:R,TouchMouseInput:X,SingleTouchInput:O,Recognizer:Q,AttrRecognizer:J,Tap:re,Pan:ee,Swipe:ae,Pinch:te,Rotate:ne,Press:ie,on:p,off:h,each:s,merge:ye,extend:ve,assign:ce,inherit:l,bindFn:u,prefixed:b}),(void 0!==e?e:"undefined"!=typeof self?self:{}).Hammer=se,"function"==typeof define&&define.amd?define(function(){return se}):"undefined"!=typeof module&&module.exports?module.exports=se:e.Hammer=se}(window,document);var Base=function(){};Base.extend=function(e,t){"use strict";var i=Base.prototype.extend;Base._prototyping=!0;var n=new this;i.call(n,e),n.base=function(){},delete Base._prototyping;var a=n.constructor,r=n.constructor=function(){if(!Base._prototyping)if(this._constructing||this.constructor==r)this._constructing=!0,a.apply(this,arguments),delete this._constructing;else if(null!==arguments[0])return(arguments[0].extend||i).call(arguments[0],n)};return r.ancestor=this,r.extend=this.extend,r.forEach=this.forEach,r.implement=this.implement,r.prototype=n,r.toString=this.toString,r.valueOf=function(e){return"object"==e?r:a.valueOf()},i.call(r,t),"function"==typeof r.init&&r.init(),r},Base.prototype={extend:function(e,t){if(arguments.length>1){var i=this[e];if(i&&"function"==typeof t&&(!i.valueOf||i.valueOf()!=t.valueOf())&&/\bbase\b/.test(t)){var n=t.valueOf();(t=function(){var e=this.base||Base.prototype.base;this.base=i;var t=n.apply(this,arguments);return this.base=e,t}).valueOf=function(e){return"object"==e?t:n},t.toString=Base.toString}this[e]=t}else if(e){var a=Base.prototype.extend;Base._prototyping||"function"==typeof this||(a=this.extend||a);for(var r={toSource:null},s=["constructor","toString","valueOf"],o=Base._prototyping?0:1;l=s[o++];)e[l]!=r[l]&&a.call(this,l,e[l]);for(var l in e)r[l]||a.call(this,l,e[l])}return this}},Base=Base.extend({constructor:function(){this.extend(arguments[0])}},{ancestor:Object,version:"1.1",forEach:function(e,t,i){for(var n in e)void 0===this.prototype[n]&&t.call(i,e[n],n,e)},implement:function(){for(var e=0;e<arguments.length;e++)"function"==typeof arguments[e]?arguments[e](this.prototype):this.prototype.extend(arguments[e]);return this},toString:function(){return String(this.valueOf())}});var FlipClock;!function(e){"use strict";(FlipClock=function(e,t,i){return t instanceof Object&&t instanceof Date==!1&&(i=t,t=0),new FlipClock.Factory(e,t,i)}).Lang={},FlipClock.Base=Base.extend({buildDate:"2014-12-12",version:"0.7.7",constructor:function(t,i){"object"!=typeof t&&(t={}),"object"!=typeof i&&(i={}),this.setOptions(e.extend(!0,{},t,i))},callback:function(e){if("function"==typeof e){for(var t=[],i=1;i<=arguments.length;i++)arguments[i]&&t.push(arguments[i]);e.apply(this,t)}},log:function(e){window.console&&console.log&&console.log(e)},getOption:function(e){return!!this[e]&&this[e]},getOptions:function(){return this},setOption:function(e,t){this[e]=t},setOptions:function(e){for(var t in e)void 0!==e[t]&&this.setOption(t,e[t])}})}(jQuery),function(e){"use strict";FlipClock.Face=FlipClock.Base.extend({autoStart:!0,dividers:[],factory:!1,lists:[],constructor:function(e,t){this.dividers=[],this.lists=[],this.base(t),this.factory=e},build:function(){this.autoStart&&this.start()},createDivider:function(t,i,n){"boolean"!=typeof i&&i||(n=i,i=t);var a=['<span class="'+this.factory.classes.dot+' top"></span>','<span class="'+this.factory.classes.dot+' bottom"></span>'].join("");n&&(a=""),t=this.factory.localize(t);var r=['<span class="'+this.factory.classes.divider+" "+(i||"").toLowerCase()+'">','<span class="'+this.factory.classes.label+'">'+(t||"")+"</span>",a,"</span>"],s=e(r.join(""));return this.dividers.push(s),s},createList:function(e,t){"object"==typeof e&&(t=e,e=0);var i=new FlipClock.List(this.factory,e,t);return this.lists.push(i),i},reset:function(){this.factory.time=new FlipClock.Time(this.factory,this.factory.original?Math.round(this.factory.original):0,{minimumDigits:this.factory.minimumDigits}),this.flip(this.factory.original,!1)},appendDigitToClock:function(e){e.$el.append(!1)},addDigit:function(e){var t=this.createList(e,{classes:{active:this.factory.classes.active,before:this.factory.classes.before,flip:this.factory.classes.flip}});this.appendDigitToClock(t)},start:function(){},stop:function(){},autoIncrement:function(){this.factory.countdown?this.decrement():this.increment()},increment:function(){this.factory.time.addSecond()},decrement:function(){0==this.factory.time.getTimeSeconds()?this.factory.stop():this.factory.time.subSecond()},flip:function(t,i){var n=this;e.each(t,function(e,t){var a=n.lists[e];a?(i||t==a.digit||a.play(),a.select(t)):n.addDigit(t)})}})}(jQuery),function(e){"use strict";FlipClock.Factory=FlipClock.Base.extend({animationRate:1e3,autoStart:!0,callbacks:{destroy:!1,create:!1,init:!1,interval:!1,start:!1,stop:!1,reset:!1},classes:{active:"flip-clock-active",before:"flip-clock-before",divider:"flip-clock-divider",dot:"flip-clock-dot",label:"flip-clock-label",flip:"flip",play:"play",wrapper:"flip-clock-wrapper"},clockFace:"HourlyCounter",countdown:!1,defaultClockFace:"HourlyCounter",defaultLanguage:"english",$el:!1,face:!0,lang:!1,language:"english",minimumDigits:0,original:!1,running:!1,time:!1,timer:!1,$wrapper:!1,constructor:function(t,i,n){n||(n={}),this.lists=[],this.running=!1,this.base(n),this.$el=e(t).addClass(this.classes.wrapper),this.$wrapper=this.$el,this.original=i instanceof Date?i:i?Math.round(i):0,this.time=new FlipClock.Time(this,this.original,{minimumDigits:this.minimumDigits,animationRate:this.animationRate}),this.timer=new FlipClock.Timer(this,n),this.loadLanguage(this.language),this.loadClockFace(this.clockFace,n),this.autoStart&&this.start()},loadClockFace:function(e,t){var i,n=!1;return e=e.ucfirst()+"Face",this.face.stop&&(this.stop(),n=!0),this.$el.html(""),this.time.minimumDigits=this.minimumDigits,(i=FlipClock[e]?new FlipClock[e](this,t):new FlipClock[this.defaultClockFace+"Face"](this,t)).build(),this.face=i,n&&this.start(),this.face},loadLanguage:function(e){var t;return t=FlipClock.Lang[e.ucfirst()]?FlipClock.Lang[e.ucfirst()]:FlipClock.Lang[e]?FlipClock.Lang[e]:FlipClock.Lang[this.defaultLanguage],this.lang=t},localize:function(e,t){var i=this.lang;if(!e)return null;var n=e.toLowerCase();return"object"==typeof t&&(i=t),i&&i[n]?i[n]:e},start:function(e){var t=this;t.running||t.countdown&&!(t.countdown&&t.time.time>0)?t.log("Trying to start timer when countdown already at 0"):(t.face.start(t.time),t.timer.start(function(){t.flip(),"function"==typeof e&&e()}))},stop:function(e){this.face.stop(),this.timer.stop(e);for(var t in this.lists)this.lists.hasOwnProperty(t)&&this.lists[t].stop()},reset:function(e){this.timer.reset(e),this.face.reset()},setTime:function(e){this.time.time=e,this.flip(!0)},getTime:function(e){return this.time},setCountdown:function(e){var t=this.running;this.countdown=!!e,t&&(this.stop(),this.start())},flip:function(e){this.face.flip(!1,e)}})}(jQuery),function(e){"use strict";FlipClock.List=FlipClock.Base.extend({digit:0,classes:{active:"flip-clock-active",before:"flip-clock-before",flip:"flip"},factory:!1,$el:!1,$obj:!1,items:[],lastDigit:0,constructor:function(e,t,i){this.factory=e,this.digit=t,this.lastDigit=t,this.$el=this.createList(),this.$obj=this.$el,t>0&&this.select(t),this.factory.$el.append(this.$el)},select:function(e){if(void 0===e?e=this.digit:this.digit=e,this.digit!=this.lastDigit){var t=this.$el.find("."+this.classes.before).removeClass(this.classes.before);this.$el.find("."+this.classes.active).removeClass(this.classes.active).addClass(this.classes.before),this.appendListItem(this.classes.active,this.digit),t.remove(),this.lastDigit=this.digit}},play:function(){this.$el.addClass(this.factory.classes.play)},stop:function(){var e=this;setTimeout(function(){e.$el.removeClass(e.factory.classes.play)},this.factory.timer.interval)},createListItem:function(e,t){return['<li class="'+(e||"")+'">','<a href="#">','<div class="up">','<div class="shadow"></div>','<div class="inn">'+(t||"")+"</div>","</div>",'<div class="down">','<div class="shadow"></div>','<div class="inn">'+(t||"")+"</div>","</div>","</a>","</li>"].join("")},appendListItem:function(e,t){var i=this.createListItem(e,t);this.$el.append(i)},createList:function(){var t=this.getPrevDigit()?this.getPrevDigit():this.digit;return e(['<ul class="'+this.classes.flip+" "+(this.factory.running?this.factory.classes.play:"")+'">',this.createListItem(this.classes.before,t),this.createListItem(this.classes.active,this.digit),"</ul>"].join(""))},getNextDigit:function(){return 9==this.digit?0:this.digit+1},getPrevDigit:function(){return 0==this.digit?9:this.digit-1}})}(jQuery),function(e){"use strict";String.prototype.ucfirst=function(){return this.substr(0,1).toUpperCase()+this.substr(1)},e.fn.FlipClock=function(t,i){return new FlipClock(e(this),t,i)},e.fn.flipClock=function(t,i){return e.fn.FlipClock(t,i)}}(jQuery),function(e){"use strict";FlipClock.Time=FlipClock.Base.extend({time:0,factory:!1,minimumDigits:0,constructor:function(e,t,i){"object"!=typeof i&&(i={}),i.minimumDigits||(i.minimumDigits=e.minimumDigits),this.base(i),this.factory=e,t&&(this.time=t)},convertDigitsToArray:function(e){var t=[];e=e.toString();for(var i=0;i<e.length;i++)e[i].match(/^\d*$/g)&&t.push(e[i]);return t},digit:function(e){var t=this.toString(),i=t.length;return!!t[i-e]&&t[i-e]},digitize:function(t){var i=[];if(e.each(t,function(e,t){1==(t=t.toString()).length&&(t="0"+t);for(var n=0;n<t.length;n++)i.push(t.charAt(n))}),i.length>this.minimumDigits&&(this.minimumDigits=i.length),this.minimumDigits>i.length)for(var n=i.length;n<this.minimumDigits;n++)i.unshift("0");return i},getDateObject:function(){return this.time instanceof Date?this.time:new Date((new Date).getTime()+1e3*this.getTimeSeconds())},getDayCounter:function(e){var t=[this.getDays(),this.getHours(!0),this.getMinutes(!0)];return e&&t.push(this.getSeconds(!0)),this.digitize(t)},getDays:function(e){var t=this.getTimeSeconds()/60/60/24;return e&&(t%=7),Math.floor(t)},getHourCounter:function(){return this.digitize([this.getHours(),this.getMinutes(!0),this.getSeconds(!0)])},getHourly:function(){return this.getHourCounter()},getHours:function(e){var t=this.getTimeSeconds()/60/60;return e&&(t%=24),Math.floor(t)},getMilitaryTime:function(e,t){void 0===t&&(t=!0),e||(e=this.getDateObject());var i=[e.getHours(),e.getMinutes()];return!0===t&&i.push(e.getSeconds()),this.digitize(i)},getMinutes:function(e){var t=this.getTimeSeconds()/60;return e&&(t%=60),Math.floor(t)},getMinuteCounter:function(){return this.digitize([this.getMinutes(),this.getSeconds(!0)])},getTimeSeconds:function(e){return e||(e=new Date),this.time instanceof Date?this.factory.countdown?Math.max(this.time.getTime()/1e3-e.getTime()/1e3,0):e.getTime()/1e3-this.time.getTime()/1e3:this.time},getTime:function(e,t){void 0===t&&(t=!0),e||(e=this.getDateObject()),console.log(e);var i=e.getHours(),n=[i>12?i-12:0===i?12:i,e.getMinutes()];return!0===t&&n.push(e.getSeconds()),this.digitize(n)},getSeconds:function(e){var t=this.getTimeSeconds();return e&&(60==t?t=0:t%=60),Math.ceil(t)},getWeeks:function(e){var t=this.getTimeSeconds()/60/60/24/7;return e&&(t%=52),Math.floor(t)},removeLeadingZeros:function(t,i){var n=0,a=[];return e.each(i,function(e,r){e<t?n+=parseInt(i[e],10):a.push(i[e])}),0===n?a:i},addSeconds:function(e){this.time instanceof Date?this.time.setSeconds(this.time.getSeconds()+e):this.time+=e},addSecond:function(){this.addSeconds(1)},subSeconds:function(e){this.time instanceof Date?this.time.setSeconds(this.time.getSeconds()-e):this.time-=e},subSecond:function(){this.subSeconds(1)},toString:function(){return this.getTimeSeconds().toString()}})}(jQuery),function(e){"use strict";FlipClock.Timer=FlipClock.Base.extend({callbacks:{destroy:!1,create:!1,init:!1,interval:!1,start:!1,stop:!1,reset:!1},count:0,factory:!1,interval:1e3,animationRate:1e3,constructor:function(e,t){this.base(t),this.factory=e,this.callback(this.callbacks.init),this.callback(this.callbacks.create)},getElapsed:function(){return this.count*this.interval},getElapsedTime:function(){return new Date(this.time+this.getElapsed())},reset:function(e){clearInterval(this.timer),this.count=0,this._setInterval(e),this.callback(this.callbacks.reset)},start:function(e){this.factory.running=!0,this._createTimer(e),this.callback(this.callbacks.start)},stop:function(e){this.factory.running=!1,this._clearInterval(e),this.callback(this.callbacks.stop),this.callback(e)},_clearInterval:function(){clearInterval(this.timer)},_createTimer:function(e){this._setInterval(e)},_destroyTimer:function(e){this._clearInterval(),this.timer=!1,this.callback(e),this.callback(this.callbacks.destroy)},_interval:function(e){this.callback(this.callbacks.interval),this.callback(e),this.count++},_setInterval:function(e){var t=this;t._interval(e),t.timer=setInterval(function(){t._interval(e)},this.interval)}})}(jQuery),function(e){FlipClock.TwentyFourHourClockFace=FlipClock.Face.extend({constructor:function(e,t){this.base(e,t)},build:function(t){var i=this,n=this.factory.$el.find("ul");this.factory.time.time||(this.factory.original=new Date,this.factory.time=new FlipClock.Time(this.factory,this.factory.original)),(t=t||this.factory.time.getMilitaryTime(!1,this.showSeconds)).length>n.length&&e.each(t,function(e,t){i.createList(t)}),this.createDivider(),this.createDivider(),e(this.dividers[0]).insertBefore(this.lists[this.lists.length-2].$el),e(this.dividers[1]).insertBefore(this.lists[this.lists.length-4].$el),this.base()},flip:function(e,t){this.autoIncrement(),e=e||this.factory.time.getMilitaryTime(!1,this.showSeconds),this.base(e,t)}})}(jQuery),function(e){FlipClock.CounterFace=FlipClock.Face.extend({shouldAutoIncrement:!1,constructor:function(e,t){"object"!=typeof t&&(t={}),e.autoStart=!!t.autoStart,t.autoStart&&(this.shouldAutoIncrement=!0),e.increment=function(){e.countdown=!1,e.setTime(e.getTime().getTimeSeconds()+1)},e.decrement=function(){e.countdown=!0;var t=e.getTime().getTimeSeconds();t>0&&e.setTime(t-1)},e.setValue=function(t){e.setTime(t)},e.setCounter=function(t){e.setTime(t)},this.base(e,t)},build:function(){var t=this,i=this.factory.$el.find("ul"),n=this.factory.getTime().digitize([this.factory.getTime().time]);n.length>i.length&&e.each(n,function(e,i){t.createList(i).select(i)}),e.each(this.lists,function(e,t){t.play()}),this.base()},flip:function(e,t){this.shouldAutoIncrement&&this.autoIncrement(),e||(e=this.factory.getTime().digitize([this.factory.getTime().time])),this.base(e,t)},reset:function(){this.factory.time=new FlipClock.Time(this.factory,this.factory.original?Math.round(this.factory.original):0),this.flip()}})}(jQuery),function(e){FlipClock.DailyCounterFace=FlipClock.Face.extend({showSeconds:!0,constructor:function(e,t){this.base(e,t)},build:function(t){var i=this,n=this.factory.$el.find("ul"),a=0;(t=t||this.factory.time.getDayCounter(this.showSeconds)).length>n.length&&e.each(t,function(e,t){i.createList(t)}),this.showSeconds?e(this.createDivider("Seconds")).insertBefore(this.lists[this.lists.length-2].$el):a=2,e(this.createDivider("Minutes")).insertBefore(this.lists[this.lists.length-4+a].$el),e(this.createDivider("Hours")).insertBefore(this.lists[this.lists.length-6+a].$el),e(this.createDivider("Days",!0)).insertBefore(this.lists[0].$el),this.base()},flip:function(e,t){e||(e=this.factory.time.getDayCounter(this.showSeconds)),this.autoIncrement(),this.base(e,t)}})}(jQuery),function(e){FlipClock.HourlyCounterFace=FlipClock.Face.extend({constructor:function(e,t){this.base(e,t)},build:function(t,i){var n=this,a=this.factory.$el.find("ul");(i=i||this.factory.time.getHourCounter()).length>a.length&&e.each(i,function(e,t){n.createList(t)}),e(this.createDivider("Seconds")).insertBefore(this.lists[this.lists.length-2].$el),e(this.createDivider("Minutes")).insertBefore(this.lists[this.lists.length-4].$el),t||e(this.createDivider("Hours",!0)).insertBefore(this.lists[0].$el),this.base()},flip:function(e,t){e||(e=this.factory.time.getHourCounter()),this.autoIncrement(),this.base(e,t)},appendDigitToClock:function(e){this.base(e),this.dividers[0].insertAfter(this.dividers[0].next())}})}(jQuery),function(e){FlipClock.MinuteCounterFace=FlipClock.HourlyCounterFace.extend({clearExcessDigits:!1,constructor:function(e,t){this.base(e,t)},build:function(){this.base(!0,this.factory.time.getMinuteCounter())},flip:function(e,t){e||(e=this.factory.time.getMinuteCounter()),this.base(e,t)}})}(jQuery),function(e){FlipClock.TwelveHourClockFace=FlipClock.TwentyFourHourClockFace.extend({meridium:!1,meridiumText:"AM",build:function(){var t=this.factory.time.getTime(!1,this.showSeconds);this.base(t),this.meridiumText=this.getMeridium(),this.meridium=e(['<ul class="flip-clock-meridium">',"<li>",'<a href="#">'+this.meridiumText+"</a>","</li>","</ul>"].join("")),this.meridium.insertAfter(this.lists[this.lists.length-1].$el)},flip:function(e,t){this.meridiumText!=this.getMeridium()&&(this.meridiumText=this.getMeridium(),this.meridium.find("a").html(this.meridiumText)),this.base(this.factory.time.getTime(!1,this.showSeconds),t)},getMeridium:function(){return(new Date).getHours()>=12?"PM":"AM"},isPM:function(){return"PM"==this.getMeridium()},isAM:function(){return"AM"==this.getMeridium()}})}(jQuery),function(e){FlipClock.Lang.Arabic={years:"سنوات",months:"شهور",days:"أيام",hours:"ساعات",minutes:"دقائق",seconds:"ثواني"},FlipClock.Lang.ar=FlipClock.Lang.Arabic,FlipClock.Lang["ar-ar"]=FlipClock.Lang.Arabic,FlipClock.Lang.arabic=FlipClock.Lang.Arabic}(jQuery),function(e){FlipClock.Lang.Danish={years:"År",months:"Måneder",days:"Dage",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},FlipClock.Lang.da=FlipClock.Lang.Danish,FlipClock.Lang["da-dk"]=FlipClock.Lang.Danish,FlipClock.Lang.danish=FlipClock.Lang.Danish}(jQuery),function(e){FlipClock.Lang.German={years:"Jahre",months:"Monate",days:"Tage",hours:"Stunden",minutes:"Minuten",seconds:"Sekunden"},FlipClock.Lang.de=FlipClock.Lang.German,FlipClock.Lang["de-de"]=FlipClock.Lang.German,FlipClock.Lang.german=FlipClock.Lang.German}(jQuery),function(e){FlipClock.Lang.English={years:"Years",months:"Months",days:"Days",hours:"Hours",minutes:"Minutes",seconds:"Seconds"},FlipClock.Lang.en=FlipClock.Lang.English,FlipClock.Lang["en-us"]=FlipClock.Lang.English,FlipClock.Lang.english=FlipClock.Lang.English}(jQuery),function(e){FlipClock.Lang.Spanish={years:"A&#241;os",months:"Meses",days:"D&#205;as",hours:"Horas",minutes:"Minutos",seconds:"Segundo"},FlipClock.Lang.es=FlipClock.Lang.Spanish,FlipClock.Lang["es-es"]=FlipClock.Lang.Spanish,FlipClock.Lang.spanish=FlipClock.Lang.Spanish}(jQuery),function(e){FlipClock.Lang.Finnish={years:"Vuotta",months:"Kuukautta",days:"Päivää",hours:"Tuntia",minutes:"Minuuttia",seconds:"Sekuntia"},FlipClock.Lang.fi=FlipClock.Lang.Finnish,FlipClock.Lang["fi-fi"]=FlipClock.Lang.Finnish,FlipClock.Lang.finnish=FlipClock.Lang.Finnish}(jQuery),function(e){FlipClock.Lang.French={years:"Ans",months:"Mois",days:"Jours",hours:"Heures",minutes:"Minutes",seconds:"Secondes"},FlipClock.Lang.fr=FlipClock.Lang.French,FlipClock.Lang["fr-ca"]=FlipClock.Lang.French,FlipClock.Lang.french=FlipClock.Lang.French}(jQuery),function(e){FlipClock.Lang.Italian={years:"Anni",months:"Mesi",days:"Giorni",hours:"Ore",minutes:"Minuti",seconds:"Secondi"},FlipClock.Lang.it=FlipClock.Lang.Italian,FlipClock.Lang["it-it"]=FlipClock.Lang.Italian,FlipClock.Lang.italian=FlipClock.Lang.Italian}(jQuery),function(e){FlipClock.Lang.Latvian={years:"Gadi",months:"Mēneši",days:"Dienas",hours:"Stundas",minutes:"Minūtes",seconds:"Sekundes"},FlipClock.Lang.lv=FlipClock.Lang.Latvian,FlipClock.Lang["lv-lv"]=FlipClock.Lang.Latvian,FlipClock.Lang.latvian=FlipClock.Lang.Latvian}(jQuery),function(e){FlipClock.Lang.Dutch={years:"Jaren",months:"Maanden",days:"Dagen",hours:"Uren",minutes:"Minuten",seconds:"Seconden"},FlipClock.Lang.nl=FlipClock.Lang.Dutch,FlipClock.Lang["nl-be"]=FlipClock.Lang.Dutch,FlipClock.Lang.dutch=FlipClock.Lang.Dutch}(jQuery),function(e){FlipClock.Lang.Norwegian={years:"År",months:"Måneder",days:"Dager",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},FlipClock.Lang.no=FlipClock.Lang.Norwegian,FlipClock.Lang.nb=FlipClock.Lang.Norwegian,FlipClock.Lang["no-nb"]=FlipClock.Lang.Norwegian,FlipClock.Lang.norwegian=FlipClock.Lang.Norwegian}(jQuery),function(e){FlipClock.Lang.Portuguese={years:"Anos",months:"Meses",days:"Dias",hours:"Horas",minutes:"Minutos",seconds:"Segundos"},FlipClock.Lang.pt=FlipClock.Lang.Portuguese,FlipClock.Lang["pt-br"]=FlipClock.Lang.Portuguese,FlipClock.Lang.portuguese=FlipClock.Lang.Portuguese}(jQuery),function(e){FlipClock.Lang.Russian={years:"лет",months:"месяцев",days:"дней",hours:"часов",minutes:"минут",seconds:"секунд"},FlipClock.Lang.ru=FlipClock.Lang.Russian,FlipClock.Lang["ru-ru"]=FlipClock.Lang.Russian,FlipClock.Lang.russian=FlipClock.Lang.Russian}(jQuery),function(e){FlipClock.Lang.Swedish={years:"År",months:"Månader",days:"Dagar",hours:"Timmar",minutes:"Minuter",seconds:"Sekunder"},FlipClock.Lang.sv=FlipClock.Lang.Swedish,FlipClock.Lang["sv-se"]=FlipClock.Lang.Swedish,FlipClock.Lang.swedish=FlipClock.Lang.Swedish}(jQuery),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):jQuery)}(function(e){var t,i=navigator.userAgent,n=/iphone/i.test(i),a=/chrome/i.test(i),r=/android/i.test(i);e.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},autoclear:!0,dataName:"rawMaskFn",placeholder:"_"},e.fn.extend({caret:function(e,t){var i;if(0!==this.length&&!this.is(":hidden")&&this.get(0)===document.activeElement)return"number"==typeof e?(t="number"==typeof t?t:e,this.each(function(){this.setSelectionRange?this.setSelectionRange(e,t):this.createTextRange&&((i=this.createTextRange()).collapse(!0),i.moveEnd("character",t),i.moveStart("character",e),i.select())})):(this[0].setSelectionRange?(e=this[0].selectionStart,t=this[0].selectionEnd):document.selection&&document.selection.createRange&&(i=document.selection.createRange(),e=0-i.duplicate().moveStart("character",-1e5),t=e+i.text.length),{begin:e,end:t})},unmask:function(){return this.trigger("unmask")},mask:function(i,s){var o,l,u,c,d,p,h,f;if(!i&&this.length>0){var m=(o=e(this[0])).data(e.mask.dataName);return m?m():void 0}return s=e.extend({autoclear:e.mask.autoclear,placeholder:e.mask.placeholder,completed:null},s),l=e.mask.definitions,u=[],c=h=i.length,d=null,i=String(i),e.each(i.split(""),function(e,t){"?"==t?(h--,c=e):l[t]?(u.push(new RegExp(l[t])),null===d&&(d=u.length-1),e<c&&(p=u.length-1)):u.push(null)}),this.trigger("unmask").each(function(){function o(){if(s.completed){for(var e=d;e<=p;e++)if(u[e]&&L[e]===m(e))return;s.completed.call(M)}}function m(e){return e<s.placeholder.length?s.placeholder.charAt(e):s.placeholder.charAt(0)}function g(e){for(;++e<h&&!u[e];);return e}function v(e){for(;--e>=0&&!u[e];);return e}function y(e,t){var i,n;if(!(e<0)){for(i=e,n=g(t);i<h;i++)if(u[i]){if(!(n<h&&u[i].test(L[n])))break;L[i]=L[n],L[n]=m(n),n=g(n)}k(),M.caret(Math.max(d,e))}}function w(e){var t,i,n,a;for(t=e,i=m(e);t<h;t++)if(u[t]){if(n=g(t),a=L[t],L[t]=i,!(n<h&&u[n].test(a)))break;i=a}}function b(e){var t=M.val(),i=M.caret();if(f&&f.length&&f.length>t.length){for(E(!0);i.begin>0&&!u[i.begin-1];)i.begin--;if(0===i.begin)for(;i.begin<d&&!u[i.begin];)i.begin++;M.caret(i.begin,i.begin)}else{E(!0);var n=t.charAt(i.begin);i.begin<h&&(u[i.begin]?u[i.begin].test(n)&&i.begin++:u[++i.begin].test(n)&&i.begin++),M.caret(i.begin,i.begin)}o()}function x(e){E(),M.val()!=z&&M.change()}function C(e){if(!M.prop("readonly")){var t,i,a,r=e.which||e.keyCode;f=M.val(),8===r||46===r||n&&127===r?(i=(t=M.caret()).begin,(a=t.end)-i==0&&(i=46!==r?v(i):a=g(i-1),a=46===r?g(a):a),S(i,a),y(i,a-1),e.preventDefault()):13===r?x.call(this,e):27===r&&(M.val(z),M.caret(0,E()),e.preventDefault())}}function T(t){if(!M.prop("readonly")){var i,n,a,s=t.which||t.keyCode,l=M.caret();if(!(t.ctrlKey||t.altKey||t.metaKey||s<32)&&s&&13!==s){if(l.end-l.begin!=0&&(S(l.begin,l.end),y(l.begin,l.end-1)),(i=g(l.begin-1))<h&&(n=String.fromCharCode(s),u[i].test(n))){if(w(i),L[i]=n,k(),a=g(i),r){var c=function(){e.proxy(e.fn.caret,M,a)()};setTimeout(c,0)}else M.caret(a);l.begin<=p&&o()}t.preventDefault()}}}function S(e,t){var i;for(i=e;i<t&&i<h;i++)u[i]&&(L[i]=m(i))}function k(){M.val(L.join(""))}function E(e){var t,i,n,a=M.val(),r=-1;for(t=0,n=0;t<h;t++)if(u[t]){for(L[t]=m(t);n++<a.length;)if(i=a.charAt(n-1),u[t].test(i)){L[t]=i,r=t;break}if(n>a.length){S(t+1,h);break}}else L[t]===a.charAt(n)&&n++,t<c&&(r=t);return e?k():r+1<c?s.autoclear||L.join("")===D?(M.val()&&M.val(""),S(0,h)):k():(k(),M.val(M.val().substring(0,r+1))),c?t:d}var M=e(this),L=e.map(i.split(""),function(e,t){if("?"!=e)return l[e]?m(t):e}),D=L.join(""),z=M.val();M.data(e.mask.dataName,function(){return e.map(L,function(e,t){return u[t]&&e!=m(t)?e:null}).join("")}),M.one("unmask",function(){M.off(".mask").removeData(e.mask.dataName)}).on("focus.mask",function(){if(!M.prop("readonly")){clearTimeout(t);var e;z=M.val(),e=E(),t=setTimeout(function(){M.get(0)===document.activeElement&&(k(),e==i.replace("?","").length?M.caret(0,e):M.caret(e))},10)}}).on("blur.mask",x).on("keydown.mask",C).on("keypress.mask",T).on("input.mask paste.mask",function(){M.prop("readonly")||setTimeout(function(){var e=E(!0);M.caret(e),o()},0)}),a&&r&&M.off("input.mask").on("input.mask",b),E()})}})}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&module.exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){e.extend(e.fn,{validate:function(t){if(this.length){var i=e.data(this[0],"validator");return i||(this.attr("novalidate","novalidate"),i=new e.validator(t,this[0]),e.data(this[0],"validator",i),i.settings.onsubmit&&(this.on("click.validate",":submit",function(t){i.settings.submitHandler&&(i.submitButton=t.target),e(this).hasClass("cancel")&&(i.cancelSubmit=!0),void 0!==e(this).attr("formnovalidate")&&(i.cancelSubmit=!0)}),this.on("submit.validate",function(t){function n(){var n,a;return!i.settings.submitHandler||(i.submitButton&&(n=e("<input type='hidden'/>").attr("name",i.submitButton.name).val(e(i.submitButton).val()).appendTo(i.currentForm)),a=i.settings.submitHandler.call(i,i.currentForm,t),i.submitButton&&n.remove(),void 0!==a&&a)}return i.settings.debug&&t.preventDefault(),i.cancelSubmit?(i.cancelSubmit=!1,n()):i.form()?i.pendingRequest?(i.formSubmitted=!0,!1):n():(i.focusInvalid(),!1)})),i)}t&&t.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing.")},valid:function(){var t,i,n;return e(this[0]).is("form")?t=this.validate().form():(n=[],t=!0,i=e(this[0].form).validate(),this.each(function(){(t=i.element(this)&&t)||(n=n.concat(i.errorList))}),i.errorList=n),t},rules:function(t,i){var n,a,r,s,o,l,u=this[0];if(null!=u&&null!=u.form){if(t)switch(n=e.data(u.form,"validator").settings,a=n.rules,r=e.validator.staticRules(u),t){case"add":e.extend(r,e.validator.normalizeRule(i)),delete r.messages,a[u.name]=r,i.messages&&(n.messages[u.name]=e.extend(n.messages[u.name],i.messages));break;case"remove":return i?(l={},e.each(i.split(/\s/),function(t,i){l[i]=r[i],delete r[i],"required"===i&&e(u).removeAttr("aria-required")}),l):(delete a[u.name],r)}return(s=e.validator.normalizeRules(e.extend({},e.validator.classRules(u),e.validator.attributeRules(u),e.validator.dataRules(u),e.validator.staticRules(u)),u)).required&&(o=s.required,delete s.required,s=e.extend({required:o},s),e(u).attr("aria-required","true")),s.remote&&(o=s.remote,delete s.remote,s=e.extend(s,{remote:o})),s}}}),e.extend(e.expr.pseudos||e.expr[":"],{blank:function(t){return!e.trim(""+e(t).val())},filled:function(t){var i=e(t).val();return null!==i&&!!e.trim(""+i)},unchecked:function(t){return!e(t).prop("checked")}}),e.validator=function(t,i){this.settings=e.extend(!0,{},e.validator.defaults,t),this.currentForm=i,this.init()},e.validator.format=function(t,i){return 1===arguments.length?function(){var i=e.makeArray(arguments);return i.unshift(t),e.validator.format.apply(this,i)}:void 0===i?t:(arguments.length>2&&i.constructor!==Array&&(i=e.makeArray(arguments).slice(1)),i.constructor!==Array&&(i=[i]),e.each(i,function(e,i){t=t.replace(new RegExp("\\{"+e+"\\}","g"),function(){return i})}),t)},e.extend(e.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:e([]),errorLabelContainer:e([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(e){this.lastActive=e,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,e,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(e)))},onfocusout:function(e){this.checkable(e)||!(e.name in this.submitted)&&this.optional(e)||this.element(e)},onkeyup:function(t,i){var n=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===i.which&&""===this.elementValue(t)||-1!==e.inArray(i.keyCode,n)||(t.name in this.submitted||t.name in this.invalid)&&this.element(t)},onclick:function(e){e.name in this.submitted?this.element(e):e.parentNode.name in this.submitted&&this.element(e.parentNode)},highlight:function(t,i,n){"radio"===t.type?this.findByName(t.name).addClass(i).removeClass(n):e(t).addClass(i).removeClass(n)},unhighlight:function(t,i,n){"radio"===t.type?this.findByName(t.name).removeClass(i).addClass(n):e(t).removeClass(i).addClass(n)}},setDefaults:function(t){e.extend(e.validator.defaults,t)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:e.validator.format("Please enter no more than {0} characters."),minlength:e.validator.format("Please enter at least {0} characters."),rangelength:e.validator.format("Please enter a value between {0} and {1} characters long."),range:e.validator.format("Please enter a value between {0} and {1}."),max:e.validator.format("Please enter a value less than or equal to {0}."),min:e.validator.format("Please enter a value greater than or equal to {0}."),step:e.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){function t(t){!this.form&&this.hasAttribute("contenteditable")&&(this.form=e(this).closest("form")[0]);var i=e.data(this.form,"validator"),n="on"+t.type.replace(/^validate/,""),a=i.settings;a[n]&&!e(this).is(a.ignore)&&a[n].call(i,this,t)}this.labelContainer=e(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||e(this.currentForm),this.containers=e(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var i,n=this.groups={};e.each(this.settings.groups,function(t,i){"string"==typeof i&&(i=i.split(/\s/)),e.each(i,function(e,i){n[i]=t})}),i=this.settings.rules,e.each(i,function(t,n){i[t]=e.validator.normalizeRule(n)}),e(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",t).on("click.validate","select, option, [type='radio'], [type='checkbox']",t),this.settings.invalidHandler&&e(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler),e(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required","true")},form:function(){return this.checkForm(),e.extend(this.submitted,this.errorMap),this.invalid=e.extend({},this.errorMap),this.valid()||e(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var e=0,t=this.currentElements=this.elements();t[e];e++)this.check(t[e]);return this.valid()},element:function(t){var i,n,a=this.clean(t),r=this.validationTargetFor(a),s=this,o=!0;return void 0===r?delete this.invalid[a.name]:(this.prepareElement(r),this.currentElements=e(r),(n=this.groups[r.name])&&e.each(this.groups,function(e,t){t===n&&e!==r.name&&(a=s.validationTargetFor(s.clean(s.findByName(e))))&&a.name in s.invalid&&(s.currentElements.push(a),o=s.check(a)&&o)}),i=!1!==this.check(r),o=o&&i,this.invalid[r.name]=!i,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),e(t).attr("aria-invalid",!i)),o},showErrors:function(t){if(t){var i=this;e.extend(this.errorMap,t),this.errorList=e.map(this.errorMap,function(e,t){return{message:e,element:i.findByName(t)[0]}}),this.successList=e.grep(this.successList,function(e){return!(e.name in t)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){e.fn.resetForm&&e(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var t=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(t)},resetElements:function(e){var t;if(this.settings.unhighlight)for(t=0;e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,""),this.findByName(e[t].name).removeClass(this.settings.validClass);else e.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(e){var t,i=0;for(t in e)e[t]&&i++;return i},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(e){e.not(this.containers).text(""),this.addWrapper(e).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{e(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(e){}},findLastActive:function(){var t=this.lastActive;return t&&1===e.grep(this.errorList,function(e){return e.element.name===t.name}).length&&t},elements:function(){var t=this,i={};return e(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){var n=this.name||e(this).attr("name");return!n&&t.settings.debug&&window.console&&console.error("%o has no name assigned",this),this.hasAttribute("contenteditable")&&(this.form=e(this).closest("form")[0]),!(n in i||!t.objectLength(e(this).rules()))&&(i[n]=!0,!0)})},clean:function(t){return e(t)[0]},errors:function(){var t=this.settings.errorClass.split(" ").join(".");return e(this.settings.errorElement+"."+t,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=e([]),this.toHide=e([])},reset:function(){this.resetInternals(),this.currentElements=e([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(e){this.reset(),this.toHide=this.errorsFor(e)},elementValue:function(t){var i,n,a=e(t),r=t.type;return"radio"===r||"checkbox"===r?this.findByName(t.name).filter(":checked").val():"number"===r&&void 0!==t.validity?t.validity.badInput?"NaN":a.val():(i=t.hasAttribute("contenteditable")?a.text():a.val(),"file"===r?"C:\\fakepath\\"===i.substr(0,12)?i.substr(12):(n=i.lastIndexOf("/"))>=0?i.substr(n+1):(n=i.lastIndexOf("\\"),n>=0?i.substr(n+1):i):"string"==typeof i?i.replace(/\r/g,""):i)},check:function(t){t=this.validationTargetFor(this.clean(t));var i,n,a,r=e(t).rules(),s=e.map(r,function(e,t){return t}).length,o=!1,l=this.elementValue(t);if("function"==typeof r.normalizer){if("string"!=typeof(l=r.normalizer.call(t,l)))throw new TypeError("The normalizer should return a string value.");delete r.normalizer}for(n in r){a={method:n,parameters:r[n]};try{if("dependency-mismatch"===(i=e.validator.methods[n].call(this,l,t,a.parameters))&&1===s){o=!0;continue}if(o=!1,"pending"===i)return void(this.toHide=this.toHide.not(this.errorsFor(t)));if(!i)return this.formatAndAdd(t,a),!1}catch(e){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+t.id+", check the '"+a.method+"' method.",e),e instanceof TypeError&&(e.message+=".  Exception occurred when checking element "+t.id+", check the '"+a.method+"' method."),e}}if(!o)return this.objectLength(r)&&this.successList.push(t),!0},customDataMessage:function(t,i){return e(t).data("msg"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase())||e(t).data("msg")},customMessage:function(e,t){var i=this.settings.messages[e];return i&&(i.constructor===String?i:i[t])},findDefined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},defaultMessage:function(t,i){"string"==typeof i&&(i={method:i});var n=this.findDefined(this.customMessage(t.name,i.method),this.customDataMessage(t,i.method),!this.settings.ignoreTitle&&t.title||void 0,e.validator.messages[i.method],"<strong>Warning: No message defined for "+t.name+"</strong>"),a=/\$?\{(\d+)\}/g;return"function"==typeof n?n=n.call(this,i.parameters,t):a.test(n)&&(n=e.validator.format(n.replace(a,"{$1}"),i.parameters)),n},formatAndAdd:function(e,t){var i=this.defaultMessage(e,t);this.errorList.push({message:i,element:e,method:t.method}),this.errorMap[e.name]=i,this.submitted[e.name]=i},addWrapper:function(e){return this.settings.wrapper&&(e=e.add(e.parent(this.settings.wrapper))),e},defaultShowErrors:function(){var e,t,i;for(e=0;this.errorList[e];e++)i=this.errorList[e],this.settings.highlight&&this.settings.highlight.call(this,i.element,this.settings.errorClass,this.settings.validClass),this.showLabel(i.element,i.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(e=0;this.successList[e];e++)this.showLabel(this.successList[e]);if(this.settings.unhighlight)for(e=0,t=this.validElements();t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return e(this.errorList).map(function(){return this.element})},showLabel:function(t,i){var n,a,r,s,o=this.errorsFor(t),l=this.idOrName(t),u=e(t).attr("aria-describedby");o.length?(o.removeClass(this.settings.validClass).addClass(this.settings.errorClass),o.html(i)):(n=o=e("<"+this.settings.errorElement+">").attr("id",l+"-error").addClass(this.settings.errorClass).html(i||""),this.settings.wrapper&&(n=o.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(n):this.settings.errorPlacement?this.settings.errorPlacement.call(this,n,e(t)):n.insertAfter(t),o.is("label")?o.attr("for",l):0===o.parents("label[for='"+this.escapeCssMeta(l)+"']").length&&(r=o.attr("id"),u?u.match(new RegExp("\\b"+this.escapeCssMeta(r)+"\\b"))||(u+=" "+r):u=r,e(t).attr("aria-describedby",u),(a=this.groups[t.name])&&(s=this,e.each(s.groups,function(t,i){i===a&&e("[name='"+s.escapeCssMeta(t)+"']",s.currentForm).attr("aria-describedby",o.attr("id"))})))),!i&&this.settings.success&&(o.text(""),"string"==typeof this.settings.success?o.addClass(this.settings.success):this.settings.success(o,t)),this.toShow=this.toShow.add(o)},errorsFor:function(t){var i=this.escapeCssMeta(this.idOrName(t)),n=e(t).attr("aria-describedby"),a="label[for='"+i+"'], label[for='"+i+"'] *";return n&&(a=a+", #"+this.escapeCssMeta(n).replace(/\s+/g,", #")),this.errors().filter(a)},escapeCssMeta:function(e){return e.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(e){return this.groups[e.name]||(this.checkable(e)?e.name:e.id||e.name)},validationTargetFor:function(t){return this.checkable(t)&&(t=this.findByName(t.name)),e(t).not(this.settings.ignore)[0]},checkable:function(e){return/radio|checkbox/i.test(e.type)},findByName:function(t){return e(this.currentForm).find("[name='"+this.escapeCssMeta(t)+"']")},getLength:function(t,i){switch(i.nodeName.toLowerCase()){case"select":return e("option:selected",i).length;case"input":if(this.checkable(i))return this.findByName(i.name).filter(":checked").length}return t.length},depend:function(e,t){return!this.dependTypes[typeof e]||this.dependTypes[typeof e](e,t)},dependTypes:{boolean:function(e){return e},string:function(t,i){return!!e(t,i.form).length},function:function(e,t){return e(t)}},optional:function(t){var i=this.elementValue(t);return!e.validator.methods.required.call(this,i,t)&&"dependency-mismatch"},startRequest:function(t){this.pending[t.name]||(this.pendingRequest++,e(t).addClass(this.settings.pendingClass),this.pending[t.name]=!0)},stopRequest:function(t,i){--this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[t.name],e(t).removeClass(this.settings.pendingClass),i&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(e(this.currentForm).submit(),this.formSubmitted=!1):!i&&0===this.pendingRequest&&this.formSubmitted&&(e(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(t,i){return i="string"==typeof i&&i||"remote",e.data(t,"previousValue")||e.data(t,"previousValue",{old:null,valid:!0,message:this.defaultMessage(t,{method:i})})},destroy:function(){this.resetForm(),e(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(t,i){t.constructor===String?this.classRuleSettings[t]=i:e.extend(this.classRuleSettings,t)},classRules:function(t){var i={},n=e(t).attr("class");return n&&e.each(n.split(" "),function(){this in e.validator.classRuleSettings&&e.extend(i,e.validator.classRuleSettings[this])}),i},normalizeAttributeRule:function(e,t,i,n){/min|max|step/.test(i)&&(null===t||/number|range|text/.test(t))&&(n=Number(n),isNaN(n)&&(n=void 0)),n||0===n?e[i]=n:t===i&&"range"!==t&&(e[i]=!0)},attributeRules:function(t){var i,n,a={},r=e(t),s=t.getAttribute("type");for(i in e.validator.methods)"required"===i?(""===(n=t.getAttribute(i))&&(n=!0),n=!!n):n=r.attr(i),this.normalizeAttributeRule(a,s,i,n);return a.maxlength&&/-1|2147483647|524288/.test(a.maxlength)&&delete a.maxlength,a},dataRules:function(t){var i,n,a={},r=e(t),s=t.getAttribute("type");for(i in e.validator.methods)n=r.data("rule"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase()),this.normalizeAttributeRule(a,s,i,n);return a},staticRules:function(t){var i={},n=e.data(t.form,"validator");return n.settings.rules&&(i=e.validator.normalizeRule(n.settings.rules[t.name])||{}),i},normalizeRules:function(t,i){return e.each(t,function(n,a){if(!1!==a){if(a.param||a.depends){var r=!0;switch(typeof a.depends){case"string":r=!!e(a.depends,i.form).length;break;case"function":r=a.depends.call(i,i)}r?t[n]=void 0===a.param||a.param:(e.data(i.form,"validator").resetElements(e(i)),delete t[n])}}else delete t[n]}),e.each(t,function(n,a){t[n]=e.isFunction(a)&&"normalizer"!==n?a(i):a}),e.each(["minlength","maxlength"],function(){t[this]&&(t[this]=Number(t[this]))}),e.each(["rangelength","range"],function(){var i;t[this]&&(e.isArray(t[this])?t[this]=[Number(t[this][0]),Number(t[this][1])]:"string"==typeof t[this]&&(i=t[this].replace(/[\[\]]/g,"").split(/[\s,]+/),t[this]=[Number(i[0]),Number(i[1])]))}),e.validator.autoCreateRanges&&(null!=t.min&&null!=t.max&&(t.range=[t.min,t.max],delete t.min,delete t.max),null!=t.minlength&&null!=t.maxlength&&(t.rangelength=[t.minlength,t.maxlength],delete t.minlength,delete t.maxlength)),t},normalizeRule:function(t){if("string"==typeof t){var i={};e.each(t.split(/\s/),function(){i[this]=!0}),t=i}return t},addMethod:function(t,i,n){e.validator.methods[t]=i,e.validator.messages[t]=void 0!==n?n:e.validator.messages[t],i.length<3&&e.validator.addClassRules(t,e.validator.normalizeRule(t))},methods:{required:function(t,i,n){if(!this.depend(n,i))return"dependency-mismatch";if("select"===i.nodeName.toLowerCase()){var a=e(i).val();return a&&a.length>0}return this.checkable(i)?this.getLength(t,i)>0:t.length>0},email:function(e,t){return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)},url:function(e,t){return this.optional(t)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(e)},date:function(e,t){return this.optional(t)||!/Invalid|NaN/.test(new Date(e).toString())},dateISO:function(e,t){return this.optional(t)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(e)},number:function(e,t){return this.optional(t)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(e)},digits:function(e,t){return this.optional(t)||/^\d+$/.test(e)},minlength:function(t,i,n){var a=e.isArray(t)?t.length:this.getLength(t,i);return this.optional(i)||a>=n},maxlength:function(t,i,n){var a=e.isArray(t)?t.length:this.getLength(t,i);return this.optional(i)||a<=n},rangelength:function(t,i,n){var a=e.isArray(t)?t.length:this.getLength(t,i);return this.optional(i)||a>=n[0]&&a<=n[1]},min:function(e,t,i){return this.optional(t)||e>=i},max:function(e,t,i){return this.optional(t)||e<=i},range:function(e,t,i){return this.optional(t)||e>=i[0]&&e<=i[1]},step:function(t,i,n){var a,r=e(i).attr("type"),s="Step attribute on input type "+r+" is not supported.",o=["text","number","range"],l=new RegExp("\\b"+r+"\\b"),u=function(e){var t=(""+e).match(/(?:\.(\d+))?$/);return t&&t[1]?t[1].length:0},c=function(e){return Math.round(e*Math.pow(10,a))},d=!0;if(r&&!l.test(o.join()))throw new Error(s);return a=u(n),(u(t)>a||c(t)%c(n)!=0)&&(d=!1),this.optional(i)||d},equalTo:function(t,i,n){var a=e(n);return this.settings.onfocusout&&a.not(".validate-equalTo-blur").length&&a.addClass("validate-equalTo-blur").on("blur.validate-equalTo",function(){e(i).valid()}),t===a.val()},remote:function(t,i,n,a){if(this.optional(i))return"dependency-mismatch";a="string"==typeof a&&a||"remote";var r,s,o,l=this.previousValue(i,a);return this.settings.messages[i.name]||(this.settings.messages[i.name]={}),l.originalMessage=l.originalMessage||this.settings.messages[i.name][a],this.settings.messages[i.name][a]=l.message,n="string"==typeof n&&{url:n}||n,o=e.param(e.extend({data:t},n.data)),l.old===o?l.valid:(l.old=o,r=this,this.startRequest(i),s={},s[i.name]=t,e.ajax(e.extend(!0,{mode:"abort",port:"validate"+i.name,dataType:"json",data:s,context:r.currentForm,success:function(e){var n,s,o,u=!0===e||"true"===e;r.settings.messages[i.name][a]=l.originalMessage,u?(o=r.formSubmitted,r.resetInternals(),r.toHide=r.errorsFor(i),r.formSubmitted=o,r.successList.push(i),r.invalid[i.name]=!1,r.showErrors()):(n={},s=e||r.defaultMessage(i,{method:a,parameters:t}),n[i.name]=l.message=s,r.invalid[i.name]=!0,r.showErrors(n)),l.valid=u,r.stopRequest(i,u)}},n)),"pending")}}});var t,i={};return e.ajaxPrefilter?e.ajaxPrefilter(function(e,t,n){var a=e.port;"abort"===e.mode&&(i[a]&&i[a].abort(),i[a]=n)}):(t=e.ajax,e.ajax=function(n){var a=("mode"in n?n:e.ajaxSettings).mode,r=("port"in n?n:e.ajaxSettings).port;return"abort"===a?(i[r]&&i[r].abort(),i[r]=t.apply(this,arguments),i[r]):t.apply(this,arguments)}),e}),$(document).ready(function(){new Swiper(".js-sponsors-swiper",{loop:!0,pagination:".js-sponsors-swiper .swiper-pagination",paginationClickable:!0}),new Swiper(".js-speakers-swiper",{loop:!0,prevButton:".js-speakers-block-button-prev",nextButton:".js-speakers-block-button-next",pagination:".js-speakers-swiper .swiper-pagination",paginationClickable:!0}),new Swiper(".js-news-swiper",{loop:!0,prevButton:".js-news-block-button-prev",nextButton:".js-news-block-button-next",pagination:".js-news-swiper .swiper-pagination",paginationClickable:!0});$(".js-events-swiper").each(function(){$swiper=$(this),new Swiper($swiper,{loop:!0,pagination:$swiper.find(".swiper-pagination"),paginationClickable:!0})}),$(".js-flip-clock").each(function(){var e=+$(this).data("time-left");$(this).FlipClock(e,{countdown:!0,clockFace:"HourlyCounter",callbacks:{interval:function(){$("span.seconds").next().next().remove(),$("span.seconds").next().remove(),$("span.seconds").remove()}},language:"russian"})}),$("[data-maskedinput]").maskedinput(),$("[data-validate]").formValidation(),$(".js-smooth-scroll").click(function(){history.pushState(null,null,$(this).attr("href"));var e=window.location.hash;return $(e).length>0&&$("html, body").animate({scrollTop:$($.attr(this,"href")).offset().top-10},700),!1})}),$(document).ready(function(){var e=$(".js-events-block-content");$(".js-events-block-filter").click(function(){var t=$(this),i=t.attr("href");return t.hasClass("active")||(e.spin("large","#000"),$.ajax(i,{method:"GET",cache:!1}).done(function(i){$(".js-events-block-filter").removeClass("active"),t.addClass("active"),e.html(i)}).fail(function(e,t,i){alert("Ошибка загрузки данных. Пожалуйста, попробуйте ещё раз."),console.log(e),console.log(i)}).always(function(){e.spin(!1)})),!1})}),function(e){e.fn.formValidation=function(){this.each(function(){e(this).validate({errorPlacement:function(e,t){},highlight:function(t,i,n){e(t).closest(".form-group").find(".form-label").addClass("form-label-error").removeClass("form-label-valid"),e(t).closest(".form-control").addClass(i).removeClass(n),e(t).addClass(i).removeClass(n)},unhighlight:function(t,i,n){e(t).closest(".form-group").find(".form-label").removeClass("form-label-error").addClass("form-label-valid"),e(t).closest(".form-control").removeClass(i).addClass(n),e(t).removeClass(i).addClass(n)}})})}}(jQuery),function(e){e.fn.maskedinput=function(){this.each(function(){var t=e(this).data("maskedinput");e(this).mask(t)})}}(jQuery);var contactsMap;$(document).ready(function(){$(".js-mobile-menu-toggle").click(function(){return $(this).siblings("ul").hasClass("active")?($(this).removeClass("active"),$(this).siblings("ul").removeClass("active")):($(this).siblings("ul").addClass("active"),$(this).addClass("active")),!1})}),function(){function e(t,i,n){$(t.target).closest(i).length||(n(),$(document).off("click","body",e))}function t(){$(".js-offcanvas").addClass("active"),$(n).addClass("active"),$(document).on("click","body",function(t){e(t,a,i)})}function i(){$(".js-offcanvas, "+n).removeClass("active")}var n="#offcanvas",a="#offcanvas > .main-offcanvas";$(".js-offcanvas").click(function(){return $(this).hasClass("active")?i():t(),!1}),new Hammer(document.querySelector(n)).on("swipeleft",function(e){i()})}(),$(document).on("click","[data-side-modal]",function(e){var t=$(this).attr("href"),i=$(this).data("side-modal"),n=$(this).data("side-modal-class");return i?($modalContent=$(i).clone(),initSideModal($modalContent,n)):($("body").spin("large","#000"),$.ajax(t,{method:"GET",cache:!1}).done(function(e){$modalContent=e,initSideModal($modalContent,n)}).fail(function(e,t,i){alert("Ошибка загрузки данных. Пожалуйста, попробуйте перезагрузить страницу."),console.log(e),console.log(i)}).always(function(){$("body").spin(!1)})),!1});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
