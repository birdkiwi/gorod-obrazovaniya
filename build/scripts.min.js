function initContactsMap(e){"use strict";var t=document.getElementById("js-contacts-map"),n=t.dataset.mapData;(contactsMap=new e.Map(t,{center:t.dataset.mapCoords.split(","),zoom:t.dataset.mapZoom,controls:["smallMapDefaultSet"]})).behaviors.disable("scrollZoom");var i=e.templateLayoutFactory.createClass('<div class="contacts-map-balloon {{ properties.iconClasses }} {{ properties.iconHoverClasses }}"><div class="contacts-map-balloon-content">{{ properties.iconContent }}</div></div>');$.ajax(n,{method:"GET",cache:!1,dataType:"json"}).done(function(t){t.objects&&t.objects.forEach(function(t){var n=[-100,-70],a="",r={type:"Rectangle",coordinates:[[0,0],[200,70]]};t.type&&"main"===t.type&&(n=[-130,-130],a="contacts-map-balloon-main",r={type:"Rectangle",coordinates:[[0,0],[260,130]]});var s=new e.Placemark(t.coords,{iconContent:t.name,hintContent:t.name},{iconHoverClasses:"",iconLayout:i,iconOffset:n,hasBalloon:!1,iconShape:r});s.properties.set("iconClasses",a),s.events.add("mouseenter",function(e){s.properties.set("iconHoverClasses","contacts-map-balloon-hover")}),s.events.add("mouseleave",function(e){s.properties.set("iconHoverClasses","")}),t.description.length&&s.events.add("click",function(e){initSideModal(t.description,"side-modal-map-object"),e.stopPropagation()}),contactsMap.geoObjects.add(s)})}).fail(function(e,t,n){alert("Ошибка загрузки данных. Пожалуйста, попробуйте перезагрузить страницу."),console.log(e),console.log(n)})}function initSideModalWrapper(e){var t=$('<div class="side-modal-overlay"><div class="side-modal '+e+'"><a href="#" class="side-modal-close" data-side-modal-close></a><div class="side-modal-overflow"></div></div></div>'),n=$("body").children(".side-modal-overlay");return n.length&&n.remove(),$("body").append(t),$("body").children(".side-modal-overlay")}function initSideModal(e,t,n,i){var a=initSideModalWrapper(t);a.find(".side-modal-overflow").html(e),a.find("[data-masked-input]").maskedinput(),a.find("[data-validate]").formValidation(),a.find(".js-input-file").inputFile(),a.find(".js-input-photo").inputPhoto(),a.find(".js-datepicker").datePicker(),a.find(".js-input-region-city").inputRegionCity(),a.find("[data-form-ajax]").formAjax(),a.find(".js-avatar-crop").avatarCrop(),setTimeout(function(){a.addClass("active"),a.find("input").first().focus(),n||$(document).on("click","body",r),i||$(document).on("keyup",r)},200);var r=function(e){($(e.target).closest(".side-modal").length||$(e.target).is("input, label")||$(e.target).is("body"))&&27!==e.which||(a.removeClass("active"),$(document).off("click","body",r),i||$(document).off("keyup",r))};a.find("[data-side-modal-close]").click(function(){return n||$(document).off("click","body",r),i||$(document).off("keyup",r),a.removeClass("active"),!1})}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){var n=(t=t||ne).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function i(e){var t=!!e&&"length"in e&&e.length,n=fe.type(e);return"function"!==n&&!fe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function a(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function r(e,t,n){return fe.isFunction(t)?fe.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?fe.grep(e,function(e){return e===t!==n}):"string"!=typeof t?fe.grep(e,function(e){return oe.call(t,e)>-1!==n}):Se.test(t)?fe.filter(t,e,n):(t=fe.filter(t,e),fe.grep(e,function(e){return oe.call(t,e)>-1!==n&&1===e.nodeType}))}function s(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t={};return fe.each(e.match(Ee)||[],function(e,n){t[n]=!0}),t}function l(e){return e}function u(e){throw e}function c(e,t,n,i){var a;try{e&&fe.isFunction(a=e.promise)?a.call(e).done(t).fail(n):e&&fe.isFunction(a=e.then)?a.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}function d(){ne.removeEventListener("DOMContentLoaded",d),e.removeEventListener("load",d),fe.ready()}function h(){this.expando=fe.expando+h.uid++}function p(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Re.test(e)?JSON.parse(e):e)}function f(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Ne,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=p(n)}catch(e){}Le.set(e,t,n)}else n=void 0;return n}function m(e,t,n,i){var a,r=1,s=20,o=i?function(){return i.cur()}:function(){return fe.css(e,t,"")},l=o(),u=n&&n[3]||(fe.cssNumber[t]?"":"px"),c=(fe.cssNumber[t]||"px"!==u&&+l)&&je.exec(fe.css(e,t));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+l||1;do{c/=r=r||".5",fe.style(e,t,c+u)}while(r!==(r=o()/l)&&1!==r&&--s)}return n&&(c=+c||+l||0,a=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=a)),a}function g(e){var t,n=e.ownerDocument,i=e.nodeName,a=Be[i];return a||(t=n.body.appendChild(n.createElement(i)),a=fe.css(t,"display"),t.parentNode.removeChild(t),"none"===a&&(a="block"),Be[i]=a,a)}function v(e,t){for(var n,i,a=[],r=0,s=e.length;r<s;r++)(i=e[r]).style&&(n=i.style.display,t?("none"===n&&(a[r]=Oe.get(i,"display")||null,a[r]||(i.style.display="")),""===i.style.display&&We(i)&&(a[r]=g(i))):"none"!==n&&(a[r]="none",Oe.set(i,"display",n)));for(r=0;r<s;r++)null!=a[r]&&(e[r].style.display=a[r]);return e}function y(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&a(e,t)?fe.merge([e],n):n}function w(e,t){for(var n=0,i=e.length;n<i;n++)Oe.set(e[n],"globalEval",!t||Oe.get(t[n],"globalEval"))}function b(e,t,n,i,a){for(var r,s,o,l,u,c,d=t.createDocumentFragment(),h=[],p=0,f=e.length;p<f;p++)if((r=e[p])||0===r)if("object"===fe.type(r))fe.merge(h,r.nodeType?[r]:r);else if(Xe.test(r)){for(s=s||d.appendChild(t.createElement("div")),o=(Ge.exec(r)||["",""])[1].toLowerCase(),l=Ve[o]||Ve._default,s.innerHTML=l[1]+fe.htmlPrefilter(r)+l[2],c=l[0];c--;)s=s.lastChild;fe.merge(h,s.childNodes),(s=d.firstChild).textContent=""}else h.push(t.createTextNode(r));for(d.textContent="",p=0;r=h[p++];)if(i&&fe.inArray(r,i)>-1)a&&a.push(r);else if(u=fe.contains(r.ownerDocument,r),s=y(d.appendChild(r),"script"),u&&w(s),n)for(c=0;r=s[c++];)$e.test(r.type||"")&&n.push(r);return d}function x(){return!0}function C(){return!1}function T(){try{return ne.activeElement}catch(e){}}function S(e,t,n,i,a,r){var s,o;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(o in t)S(e,o,n,i,t[o],r);return e}if(null==i&&null==a?(a=n,i=n=void 0):null==a&&("string"==typeof n?(a=i,i=void 0):(a=i,i=n,n=void 0)),!1===a)a=C;else if(!a)return e;return 1===r&&(s=a,(a=function(e){return fe().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=fe.guid++)),e.each(function(){fe.event.add(this,t,a,i,n)})}function k(e,t){return a(e,"table")&&a(11!==t.nodeType?t:t.firstChild,"tr")?fe(">tbody",e)[0]||e:e}function M(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function _(e){var t=nt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function D(e,t){var n,i,a,r,s,o,l,u;if(1===t.nodeType){if(Oe.hasData(e)&&(r=Oe.access(e),s=Oe.set(t,r),u=r.events)){delete s.handle,s.events={};for(a in u)for(n=0,i=u[a].length;n<i;n++)fe.event.add(t,a,u[a][n])}Le.hasData(e)&&(o=Le.access(e),l=fe.extend({},o),Le.set(t,l))}}function E(e,t){var n=t.nodeName.toLowerCase();"input"===n&&qe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function P(e,t,i,a){t=re.apply([],t);var r,s,o,l,u,c,d=0,h=e.length,p=h-1,f=t[0],m=fe.isFunction(f);if(m||h>1&&"string"==typeof f&&!pe.checkClone&&tt.test(f))return e.each(function(n){var r=e.eq(n);m&&(t[0]=f.call(this,n,r.html())),P(r,t,i,a)});if(h&&(r=b(t,e[0].ownerDocument,!1,e,a),s=r.firstChild,1===r.childNodes.length&&(r=s),s||a)){for(l=(o=fe.map(y(r,"script"),M)).length;d<h;d++)u=r,d!==p&&(u=fe.clone(u,!0,!0),l&&fe.merge(o,y(u,"script"))),i.call(e[d],u,d);if(l)for(c=o[o.length-1].ownerDocument,fe.map(o,_),d=0;d<l;d++)u=o[d],$e.test(u.type||"")&&!Oe.access(u,"globalEval")&&fe.contains(c,u)&&(u.src?fe._evalUrl&&fe._evalUrl(u.src):n(u.textContent.replace(it,""),c))}return e}function z(e,t,n){for(var i,a=t?fe.filter(t,e):e,r=0;null!=(i=a[r]);r++)n||1!==i.nodeType||fe.cleanData(y(i)),i.parentNode&&(n&&fe.contains(i.ownerDocument,i)&&w(y(i,"script")),i.parentNode.removeChild(i));return e}function I(e,t,n){var i,a,r,s,o=e.style;return(n=n||st(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||fe.contains(e.ownerDocument,e)||(s=fe.style(e,t)),!pe.pixelMarginRight()&&rt.test(s)&&at.test(t)&&(i=o.width,a=o.minWidth,r=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=i,o.minWidth=a,o.maxWidth=r)),void 0!==s?s+"":s}function A(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function O(e){if(e in ht)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=dt.length;n--;)if((e=dt[n]+t)in ht)return e}function L(e){var t=fe.cssProps[e];return t||(t=fe.cssProps[e]=O(e)||e),t}function R(e,t,n){var i=je.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function N(e,t,n,i,a){var r,s=0;for(r=n===(i?"border":"content")?4:"width"===t?1:0;r<4;r+=2)"margin"===n&&(s+=fe.css(e,n+He[r],!0,a)),i?("content"===n&&(s-=fe.css(e,"padding"+He[r],!0,a)),"margin"!==n&&(s-=fe.css(e,"border"+He[r]+"Width",!0,a))):(s+=fe.css(e,"padding"+He[r],!0,a),"padding"!==n&&(s+=fe.css(e,"border"+He[r]+"Width",!0,a)));return s}function Y(e,t,n){var i,a=st(e),r=I(e,t,a),s="border-box"===fe.css(e,"boxSizing",!1,a);return rt.test(r)?r:(i=s&&(pe.boxSizingReliable()||r===e.style[t]),"auto"===r&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)]),(r=parseFloat(r)||0)+N(e,t,n||(s?"border":"content"),i,a)+"px")}function j(e,t,n,i,a){return new j.prototype.init(e,t,n,i,a)}function H(){ft&&(!1===ne.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(H):e.setTimeout(H,fe.fx.interval),fe.fx.tick())}function W(){return e.setTimeout(function(){pt=void 0}),pt=fe.now()}function F(e,t){var n,i=0,a={height:e};for(t=t?1:0;i<4;i+=2-t)a["margin"+(n=He[i])]=a["padding"+n]=e;return t&&(a.opacity=a.width=e),a}function B(e,t,n){for(var i,a=($.tweeners[t]||[]).concat($.tweeners["*"]),r=0,s=a.length;r<s;r++)if(i=a[r].call(n,t,e))return i}function q(e,t,n){var i,a,r,s,o,l,u,c,d="width"in t||"height"in t,h=this,p={},f=e.style,m=e.nodeType&&We(e),g=Oe.get(e,"fxshow");n.queue||(null==(s=fe._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,h.always(function(){h.always(function(){s.unqueued--,fe.queue(e,"fx").length||s.empty.fire()})}));for(i in t)if(a=t[i],mt.test(a)){if(delete t[i],r=r||"toggle"===a,a===(m?"hide":"show")){if("show"!==a||!g||void 0===g[i])continue;m=!0}p[i]=g&&g[i]||fe.style(e,i)}if((l=!fe.isEmptyObject(t))||!fe.isEmptyObject(p)){d&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(u=g&&g.display)&&(u=Oe.get(e,"display")),"none"===(c=fe.css(e,"display"))&&(u?c=u:(v([e],!0),u=e.style.display||u,c=fe.css(e,"display"),v([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===fe.css(e,"float")&&(l||(h.done(function(){f.display=u}),null==u&&(c=f.display,u="none"===c?"":c)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1;for(i in p)l||(g?"hidden"in g&&(m=g.hidden):g=Oe.access(e,"fxshow",{display:u}),r&&(g.hidden=!m),m&&v([e],!0),h.done(function(){m||v([e]),Oe.remove(e,"fxshow");for(i in p)fe.style(e,i,p[i])})),l=B(m?g[i]:0,i,h),i in g||(g[i]=l.start,m&&(l.end=l.start,l.start=0))}}function G(e,t){var n,i,a,r,s;for(n in e)if(i=fe.camelCase(n),a=t[i],r=e[n],Array.isArray(r)&&(a=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=fe.cssHooks[i])&&"expand"in s){r=s.expand(r),delete e[i];for(n in r)n in e||(e[n]=r[n],t[n]=a)}else t[i]=a}function $(e,t,n){var i,a,r=0,s=$.prefilters.length,o=fe.Deferred().always(function(){delete l.elem}),l=function(){if(a)return!1;for(var t=pt||W(),n=Math.max(0,u.startTime+u.duration-t),i=1-(n/u.duration||0),r=0,s=u.tweens.length;r<s;r++)u.tweens[r].run(i);return o.notifyWith(e,[u,i,n]),i<1&&s?n:(s||o.notifyWith(e,[u,1,0]),o.resolveWith(e,[u]),!1)},u=o.promise({elem:e,props:fe.extend({},t),opts:fe.extend(!0,{specialEasing:{},easing:fe.easing._default},n),originalProperties:t,originalOptions:n,startTime:pt||W(),duration:n.duration,tweens:[],createTween:function(t,n){var i=fe.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(a)return this;for(a=!0;n<i;n++)u.tweens[n].run(1);return t?(o.notifyWith(e,[u,1,0]),o.resolveWith(e,[u,t])):o.rejectWith(e,[u,t]),this}}),c=u.props;for(G(c,u.opts.specialEasing);r<s;r++)if(i=$.prefilters[r].call(u,e,c,u.opts))return fe.isFunction(i.stop)&&(fe._queueHooks(u.elem,u.opts.queue).stop=fe.proxy(i.stop,i)),i;return fe.map(c,B,u),fe.isFunction(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),fe.fx.timer(fe.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}function V(e){return(e.match(Ee)||[]).join(" ")}function X(e){return e.getAttribute&&e.getAttribute("class")||""}function U(e,t,n,i){var a;if(Array.isArray(t))fe.each(t,function(t,a){n||Mt.test(e)?i(e,a):U(e+"["+("object"==typeof a&&null!=a?t:"")+"]",a,n,i)});else if(n||"object"!==fe.type(t))i(e,t);else for(a in t)U(e+"["+a+"]",t[a],n,i)}function Z(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,a=0,r=t.toLowerCase().match(Ee)||[];if(fe.isFunction(n))for(;i=r[a++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Q(e,t,n,i){function a(o){var l;return r[o]=!0,fe.each(e[o]||[],function(e,o){var u=o(t,n,i);return"string"!=typeof u||s||r[u]?s?!(l=u):void 0:(t.dataTypes.unshift(u),a(u),!1)}),l}var r={},s=e===Yt;return a(t.dataTypes[0])||!r["*"]&&a("*")}function K(e,t){var n,i,a=fe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((a[n]?e:i||(i={}))[n]=t[n]);return i&&fe.extend(!0,e,i),e}function J(e,t,n){for(var i,a,r,s,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(a in o)if(o[a]&&o[a].test(i)){l.unshift(a);break}if(l[0]in n)r=l[0];else{for(a in n){if(!l[0]||e.converters[a+" "+l[0]]){r=a;break}s||(s=a)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}function ee(e,t,n,i){var a,r,s,o,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(r=c.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=c.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=u[l+" "+r]||u["* "+r]))for(a in u)if((o=a.split(" "))[1]===r&&(s=u[l+" "+o[0]]||u["* "+o[0]])){!0===s?s=u[a]:!0!==u[a]&&(r=o[0],c.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}var te=[],ne=e.document,ie=Object.getPrototypeOf,ae=te.slice,re=te.concat,se=te.push,oe=te.indexOf,le={},ue=le.toString,ce=le.hasOwnProperty,de=ce.toString,he=de.call(Object),pe={},fe=function(e,t){return new fe.fn.init(e,t)},me=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ge=/^-ms-/,ve=/-([a-z])/g,ye=function(e,t){return t.toUpperCase()};fe.fn=fe.prototype={jquery:"3.2.1",constructor:fe,length:0,toArray:function(){return ae.call(this)},get:function(e){return null==e?ae.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=fe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return fe.each(this,e)},map:function(e){return this.pushStack(fe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ae.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:se,sort:te.sort,splice:te.splice},fe.extend=fe.fn.extend=function(){var e,t,n,i,a,r,s=arguments[0]||{},o=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[o]||{},o++),"object"==typeof s||fe.isFunction(s)||(s={}),o===l&&(s=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)n=s[t],s!==(i=e[t])&&(u&&i&&(fe.isPlainObject(i)||(a=Array.isArray(i)))?(a?(a=!1,r=n&&Array.isArray(n)?n:[]):r=n&&fe.isPlainObject(n)?n:{},s[t]=fe.extend(u,r,i)):void 0!==i&&(s[t]=i));return s},fe.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===fe.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=fe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ue.call(e))&&(!(t=ie(e))||"function"==typeof(n=ce.call(t,"constructor")&&t.constructor)&&de.call(n)===he)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[ue.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(ge,"ms-").replace(ve,ye)},each:function(e,t){var n,a=0;if(i(e))for(n=e.length;a<n&&!1!==t.call(e[a],a,e[a]);a++);else for(a in e)if(!1===t.call(e[a],a,e[a]))break;return e},trim:function(e){return null==e?"":(e+"").replace(me,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(i(Object(e))?fe.merge(n,"string"==typeof e?[e]:e):se.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:oe.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,a=e.length;i<n;i++)e[a++]=t[i];return e.length=a,e},grep:function(e,t,n){for(var i=[],a=0,r=e.length,s=!n;a<r;a++)!t(e[a],a)!==s&&i.push(e[a]);return i},map:function(e,t,n){var a,r,s=0,o=[];if(i(e))for(a=e.length;s<a;s++)null!=(r=t(e[s],s,n))&&o.push(r);else for(s in e)null!=(r=t(e[s],s,n))&&o.push(r);return re.apply([],o)},guid:1,proxy:function(e,t){var n,i,a;if("string"==typeof t&&(n=e[t],t=e,e=n),fe.isFunction(e))return i=ae.call(arguments,2),a=function(){return e.apply(t||this,i.concat(ae.call(arguments)))},a.guid=e.guid=e.guid||fe.guid++,a},now:Date.now,support:pe}),"function"==typeof Symbol&&(fe.fn[Symbol.iterator]=te[Symbol.iterator]),fe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var we=function(e){function t(e,t,n,i){var a,r,s,o,l,c,h,p=t&&t.ownerDocument,f=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==f&&9!==f&&11!==f)return n;if(!i&&((t?t.ownerDocument||t:j)!==z&&P(t),t=t||z,A)){if(11!==f&&(l=me.exec(e)))if(a=l[1]){if(9===f){if(!(s=t.getElementById(a)))return n;if(s.id===a)return n.push(s),n}else if(p&&(s=p.getElementById(a))&&N(t,s)&&s.id===a)return n.push(s),n}else{if(l[2])return Z.apply(n,t.getElementsByTagName(e)),n;if((a=l[3])&&b.getElementsByClassName&&t.getElementsByClassName)return Z.apply(n,t.getElementsByClassName(a)),n}if(b.qsa&&!q[e+" "]&&(!O||!O.test(e))){if(1!==f)p=t,h=e;else if("object"!==t.nodeName.toLowerCase()){for((o=t.getAttribute("id"))?o=o.replace(we,be):t.setAttribute("id",o=Y),r=(c=S(e)).length;r--;)c[r]="#"+o+" "+d(c[r]);h=c.join(","),p=ge.test(e)&&u(t.parentNode)||t}if(h)try{return Z.apply(n,p.querySelectorAll(h)),n}catch(e){}finally{o===Y&&t.removeAttribute("id")}}}return M(e.replace(re,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>x.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[Y]=!0,e}function a(e){var t=z.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function r(e,t){for(var n=e.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=t}function s(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function o(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Ce(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return i(function(t){return t=+t,i(function(n,i){for(var a,r=e([],n.length,t),s=r.length;s--;)n[a=r[s]]&&(n[a]=!(i[a]=n[a]))})})}function u(e){return e&&void 0!==e.getElementsByTagName&&e}function c(){}function d(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function h(e,t,n){var i=t.dir,a=t.next,r=a||i,s=n&&"parentNode"===r,o=W++;return t.first?function(t,n,a){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,a);return!1}:function(t,n,l){var u,c,d,h=[H,o];if(l){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(d=t[Y]||(t[Y]={}),c=d[t.uniqueID]||(d[t.uniqueID]={}),a&&a===t.nodeName.toLowerCase())t=t[i]||t;else{if((u=c[r])&&u[0]===H&&u[1]===o)return h[2]=u[2];if(c[r]=h,h[2]=e(t,n,l))return!0}return!1}}function p(e){return e.length>1?function(t,n,i){for(var a=e.length;a--;)if(!e[a](t,n,i))return!1;return!0}:e[0]}function f(e,n,i){for(var a=0,r=n.length;a<r;a++)t(e,n[a],i);return i}function m(e,t,n,i,a){for(var r,s=[],o=0,l=e.length,u=null!=t;o<l;o++)(r=e[o])&&(n&&!n(r,i,a)||(s.push(r),u&&t.push(o)));return s}function g(e,t,n,a,r,s){return a&&!a[Y]&&(a=g(a)),r&&!r[Y]&&(r=g(r,s)),i(function(i,s,o,l){var u,c,d,h=[],p=[],g=s.length,v=i||f(t||"*",o.nodeType?[o]:o,[]),y=!e||!i&&t?v:m(v,h,e,o,l),w=n?r||(i?e:g||a)?[]:s:y;if(n&&n(y,w,o,l),a)for(u=m(w,p),a(u,[],o,l),c=u.length;c--;)(d=u[c])&&(w[p[c]]=!(y[p[c]]=d));if(i){if(r||e){if(r){for(u=[],c=w.length;c--;)(d=w[c])&&u.push(y[c]=d);r(null,w=[],u,l)}for(c=w.length;c--;)(d=w[c])&&(u=r?K(i,d):h[c])>-1&&(i[u]=!(s[u]=d))}}else w=m(w===s?w.splice(g,w.length):w),r?r(null,s,w,l):Z.apply(s,w)})}function v(e){for(var t,n,i,a=e.length,r=x.relative[e[0].type],s=r||x.relative[" "],o=r?1:0,l=h(function(e){return e===t},s,!0),u=h(function(e){return K(t,e)>-1},s,!0),c=[function(e,n,i){var a=!r&&(i||n!==_)||((t=n).nodeType?l(e,n,i):u(e,n,i));return t=null,a}];o<a;o++)if(n=x.relative[e[o].type])c=[h(p(c),n)];else{if((n=x.filter[e[o].type].apply(null,e[o].matches))[Y]){for(i=++o;i<a&&!x.relative[e[i].type];i++);return g(o>1&&p(c),o>1&&d(e.slice(0,o-1).concat({value:" "===e[o-2].type?"*":""})).replace(re,"$1"),n,o<i&&v(e.slice(o,i)),i<a&&v(e=e.slice(i)),i<a&&d(e))}c.push(n)}return p(c)}function y(e,n){var a=n.length>0,r=e.length>0,s=function(i,s,o,l,u){var c,d,h,p=0,f="0",g=i&&[],v=[],y=_,w=i||r&&x.find.TAG("*",u),b=H+=null==y?1:Math.random()||.1,C=w.length;for(u&&(_=s===z||s||u);f!==C&&null!=(c=w[f]);f++){if(r&&c){for(d=0,s||c.ownerDocument===z||(P(c),o=!A);h=e[d++];)if(h(c,s||z,o)){l.push(c);break}u&&(H=b)}a&&((c=!h&&c)&&p--,i&&g.push(c))}if(p+=f,a&&f!==p){for(d=0;h=n[d++];)h(g,v,s,o);if(i){if(p>0)for(;f--;)g[f]||v[f]||(v[f]=X.call(l));v=m(v)}Z.apply(l,v),u&&!i&&v.length>0&&p+n.length>1&&t.uniqueSort(l)}return u&&(H=b,_=y),g};return a?i(s):s}var w,b,x,C,T,S,k,M,_,D,E,P,z,I,A,O,L,R,N,Y="sizzle"+1*new Date,j=e.document,H=0,W=0,F=n(),B=n(),q=n(),G=function(e,t){return e===t&&(E=!0),0},$={}.hasOwnProperty,V=[],X=V.pop,U=V.push,Z=V.push,Q=V.slice,K=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ie=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",ae=new RegExp(ee+"+","g"),re=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),se=new RegExp("^"+ee+"*,"+ee+"*"),oe=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ue=new RegExp(ie),ce=new RegExp("^"+te+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+ie),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,pe=/^h\d$/i,fe=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ge=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},we=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,be=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},xe=function(){P()},Ce=h(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{Z.apply(V=Q.call(j.childNodes),j.childNodes),V[j.childNodes.length].nodeType}catch(e){Z={apply:V.length?function(e,t){U.apply(e,Q.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}b=t.support={},T=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},P=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:j;return i!==z&&9===i.nodeType&&i.documentElement?(z=i,I=z.documentElement,A=!T(z),j!==z&&(n=z.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xe,!1):n.attachEvent&&n.attachEvent("onunload",xe)),b.attributes=a(function(e){return e.className="i",!e.getAttribute("className")}),b.getElementsByTagName=a(function(e){return e.appendChild(z.createComment("")),!e.getElementsByTagName("*").length}),b.getElementsByClassName=fe.test(z.getElementsByClassName),b.getById=a(function(e){return I.appendChild(e).id=Y,!z.getElementsByName||!z.getElementsByName(Y).length}),b.getById?(x.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&A){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&A){var n,i,a,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(a=t.getElementsByName(e),i=0;r=a[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),x.find.TAG=b.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):b.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],a=0,r=t.getElementsByTagName(e);if("*"===e){for(;n=r[a++];)1===n.nodeType&&i.push(n);return i}return r},x.find.CLASS=b.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&A)return t.getElementsByClassName(e)},L=[],O=[],(b.qsa=fe.test(z.querySelectorAll))&&(a(function(e){I.appendChild(e).innerHTML="<a id='"+Y+"'></a><select id='"+Y+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&O.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||O.push("\\["+ee+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+Y+"-]").length||O.push("~="),e.querySelectorAll(":checked").length||O.push(":checked"),e.querySelectorAll("a#"+Y+"+*").length||O.push(".#.+[+~]")}),a(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=z.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&O.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&O.push(":enabled",":disabled"),I.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&O.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),O.push(",.*:")})),(b.matchesSelector=fe.test(R=I.matches||I.webkitMatchesSelector||I.mozMatchesSelector||I.oMatchesSelector||I.msMatchesSelector))&&a(function(e){b.disconnectedMatch=R.call(e,"*"),R.call(e,"[s!='']:x"),L.push("!=",ie)}),O=O.length&&new RegExp(O.join("|")),L=L.length&&new RegExp(L.join("|")),t=fe.test(I.compareDocumentPosition),N=t||fe.test(I.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},G=t?function(e,t){if(e===t)return E=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!b.sortDetached&&t.compareDocumentPosition(e)===n?e===z||e.ownerDocument===j&&N(j,e)?-1:t===z||t.ownerDocument===j&&N(j,t)?1:D?K(D,e)-K(D,t):0:4&n?-1:1)}:function(e,t){if(e===t)return E=!0,0;var n,i=0,a=e.parentNode,r=t.parentNode,o=[e],l=[t];if(!a||!r)return e===z?-1:t===z?1:a?-1:r?1:D?K(D,e)-K(D,t):0;if(a===r)return s(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;o[i]===l[i];)i++;return i?s(o[i],l[i]):o[i]===j?-1:l[i]===j?1:0},z):z},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==z&&P(e),n=n.replace(le,"='$1']"),b.matchesSelector&&A&&!q[n+" "]&&(!L||!L.test(n))&&(!O||!O.test(n)))try{var i=R.call(e,n);if(i||b.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,z,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==z&&P(e),N(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==z&&P(e);var n=x.attrHandle[t.toLowerCase()],i=n&&$.call(x.attrHandle,t.toLowerCase())?n(e,t,!A):void 0;return void 0!==i?i:b.attributes||!A?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.escape=function(e){return(e+"").replace(we,be)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,a=0;if(E=!b.detectDuplicates,D=!b.sortStable&&e.slice(0),e.sort(G),E){for(;t=e[a++];)t===e[a]&&(i=n.push(a));for(;i--;)e.splice(n[i],1)}return D=null,e},C=t.getText=function(e){var t,n="",i=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[i++];)n+=C(t);return n},(x=t.selectors={cacheLength:50,createPseudo:i,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ue.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=F[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&F(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(a){var r=t.attr(a,e);return null==r?"!="===n:!n||(r+="","="===n?r===i:"!="===n?r!==i:"^="===n?i&&0===r.indexOf(i):"*="===n?i&&r.indexOf(i)>-1:"$="===n?i&&r.slice(-i.length)===i:"~="===n?(" "+r.replace(ae," ")+" ").indexOf(i)>-1:"|="===n&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,a){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===t;return 1===i&&0===a?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,h,p,f,m=r!==s?"nextSibling":"previousSibling",g=t.parentNode,v=o&&t.nodeName.toLowerCase(),y=!l&&!o,w=!1;if(g){if(r){for(;m;){for(h=t;h=h[m];)if(o?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?g.firstChild:g.lastChild],s&&y){for(w=(p=(u=(c=(d=(h=g)[Y]||(h[Y]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===H&&u[1])&&u[2],h=p&&g.childNodes[p];h=++p&&h&&h[m]||(w=p=0)||f.pop();)if(1===h.nodeType&&++w&&h===t){c[e]=[H,p,w];break}}else if(y&&(w=p=(u=(c=(d=(h=t)[Y]||(h[Y]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===H&&u[1]),!1===w)for(;(h=++p&&h&&h[m]||(w=p=0)||f.pop())&&((o?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++w||(y&&((c=(d=h[Y]||(h[Y]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]=[H,w]),h!==t)););return(w-=a)===i||w%i==0&&w/i>=0}}},PSEUDO:function(e,n){var a,r=x.pseudos[e]||x.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return r[Y]?r(n):r.length>1?(a=[e,e,"",n],x.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,a=r(e,n),s=a.length;s--;)e[i=K(e,a[s])]=!(t[i]=a[s])}):function(e){return r(e,0,a)}):r}},pseudos:{not:i(function(e){var t=[],n=[],a=k(e.replace(re,"$1"));return a[Y]?i(function(e,t,n,i){for(var r,s=a(e,null,i,[]),o=e.length;o--;)(r=s[o])&&(e[o]=!(t[o]=r))}):function(e,i,r){return t[0]=e,a(t,null,r,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(ve,ye),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:i(function(e){return ce.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var n;do{if(n=A?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===I},focus:function(e){return e===z.activeElement&&(!z.hasFocus||z.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:o(!1),disabled:o(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return pe.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:l(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=x.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[w]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(w);for(w in{submit:!0,reset:!0})x.pseudos[w]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(w);return c.prototype=x.filters=x.pseudos,x.setFilters=new c,S=t.tokenize=function(e,n){var i,a,r,s,o,l,u,c=B[e+" "];if(c)return n?0:c.slice(0);for(o=e,l=[],u=x.preFilter;o;){i&&!(a=se.exec(o))||(a&&(o=o.slice(a[0].length)||o),l.push(r=[])),i=!1,(a=oe.exec(o))&&(i=a.shift(),r.push({value:i,type:a[0].replace(re," ")}),o=o.slice(i.length));for(s in x.filter)!(a=de[s].exec(o))||u[s]&&!(a=u[s](a))||(i=a.shift(),r.push({value:i,type:s,matches:a}),o=o.slice(i.length));if(!i)break}return n?o.length:o?t.error(e):B(e,l).slice(0)},k=t.compile=function(e,t){var n,i=[],a=[],r=q[e+" "];if(!r){for(t||(t=S(e)),n=t.length;n--;)(r=v(t[n]))[Y]?i.push(r):a.push(r);(r=q(e,y(a,i))).selector=e}return r},M=t.select=function(e,t,n,i){var a,r,s,o,l,c="function"==typeof e&&e,h=!i&&S(e=c.selector||e);if(n=n||[],1===h.length){if((r=h[0]=h[0].slice(0)).length>2&&"ID"===(s=r[0]).type&&9===t.nodeType&&A&&x.relative[r[1].type]){if(!(t=(x.find.ID(s.matches[0].replace(ve,ye),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(a=de.needsContext.test(e)?0:r.length;a--&&(s=r[a],!x.relative[o=s.type]);)if((l=x.find[o])&&(i=l(s.matches[0].replace(ve,ye),ge.test(r[0].type)&&u(t.parentNode)||t))){if(r.splice(a,1),!(e=i.length&&d(r)))return Z.apply(n,i),n;break}}return(c||k(e,h))(i,t,!A,n,!t||ge.test(e)&&u(t.parentNode)||t),n},b.sortStable=Y.split("").sort(G).join("")===Y,b.detectDuplicates=!!E,P(),b.sortDetached=a(function(e){return 1&e.compareDocumentPosition(z.createElement("fieldset"))}),a(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||r("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),b.attributes&&a(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||r("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),a(function(e){return null==e.getAttribute("disabled")})||r(J,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);fe.find=we,fe.expr=we.selectors,fe.expr[":"]=fe.expr.pseudos,fe.uniqueSort=fe.unique=we.uniqueSort,fe.text=we.getText,fe.isXMLDoc=we.isXML,fe.contains=we.contains,fe.escapeSelector=we.escape;var be=function(e,t,n){for(var i=[],a=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&fe(e).is(n))break;i.push(e)}return i},xe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Ce=fe.expr.match.needsContext,Te=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Se=/^.[^:#\[\.,]*$/;fe.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?fe.find.matchesSelector(i,e)?[i]:[]:fe.find.matches(e,fe.grep(t,function(e){return 1===e.nodeType}))},fe.fn.extend({find:function(e){var t,n,i=this.length,a=this;if("string"!=typeof e)return this.pushStack(fe(e).filter(function(){for(t=0;t<i;t++)if(fe.contains(a[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)fe.find(e,a[t],n);return i>1?fe.uniqueSort(n):n},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&Ce.test(e)?fe(e):e||[],!1).length}});var ke,Me=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(fe.fn.init=function(e,t,n){var i,a;if(!e)return this;if(n=n||ke,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Me.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof fe?t[0]:t,fe.merge(this,fe.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:ne,!0)),Te.test(i[1])&&fe.isPlainObject(t))for(i in t)fe.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(a=ne.getElementById(i[2]))&&(this[0]=a,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):fe.isFunction(e)?void 0!==n.ready?n.ready(e):e(fe):fe.makeArray(e,this)}).prototype=fe.fn,ke=fe(ne);var _e=/^(?:parents|prev(?:Until|All))/,De={children:!0,contents:!0,next:!0,prev:!0};fe.fn.extend({has:function(e){var t=fe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(fe.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,a=this.length,r=[],s="string"!=typeof e&&fe(e);if(!Ce.test(e))for(;i<a;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&fe.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?fe.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?oe.call(fe(e),this[0]):oe.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(fe.uniqueSort(fe.merge(this.get(),fe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),fe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return be(e,"parentNode")},parentsUntil:function(e,t,n){return be(e,"parentNode",n)},next:function(e){return s(e,"nextSibling")},prev:function(e){return s(e,"previousSibling")},nextAll:function(e){return be(e,"nextSibling")},prevAll:function(e){return be(e,"previousSibling")},nextUntil:function(e,t,n){return be(e,"nextSibling",n)},prevUntil:function(e,t,n){return be(e,"previousSibling",n)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return a(e,"iframe")?e.contentDocument:(a(e,"template")&&(e=e.content||e),fe.merge([],e.childNodes))}},function(e,t){fe.fn[e]=function(n,i){var a=fe.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(a=fe.filter(i,a)),this.length>1&&(De[e]||fe.uniqueSort(a),_e.test(e)&&a.reverse()),this.pushStack(a)}});var Ee=/[^\x20\t\r\n\f]+/g;fe.Callbacks=function(e){e="string"==typeof e?o(e):fe.extend({},e);var t,n,i,a,r=[],s=[],l=-1,u=function(){for(a=a||e.once,i=t=!0;s.length;l=-1)for(n=s.shift();++l<r.length;)!1===r[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=r.length,n=!1);e.memory||(n=!1),t=!1,a&&(r=n?[]:"")},c={add:function(){return r&&(n&&!t&&(l=r.length-1,s.push(n)),function t(n){fe.each(n,function(n,i){fe.isFunction(i)?e.unique&&c.has(i)||r.push(i):i&&i.length&&"string"!==fe.type(i)&&t(i)})}(arguments),n&&!t&&u()),this},remove:function(){return fe.each(arguments,function(e,t){for(var n;(n=fe.inArray(t,r,n))>-1;)r.splice(n,1),n<=l&&l--}),this},has:function(e){return e?fe.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return a=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return a=s=[],n||t||(r=n=""),this},locked:function(){return!!a},fireWith:function(e,n){return a||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},fe.extend({Deferred:function(t){var n=[["notify","progress",fe.Callbacks("memory"),fe.Callbacks("memory"),2],["resolve","done",fe.Callbacks("once memory"),fe.Callbacks("once memory"),0,"resolved"],["reject","fail",fe.Callbacks("once memory"),fe.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var e=arguments;return fe.Deferred(function(t){fe.each(n,function(n,i){var a=fe.isFunction(e[i[4]])&&e[i[4]];r[i[1]](function(){var e=a&&a.apply(this,arguments);e&&fe.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,a?[e]:arguments)})}),e=null}).promise()},then:function(t,i,a){function r(t,n,i,a){return function(){var o=this,c=arguments,d=function(){var e,d;if(!(t<s)){if((e=i.apply(o,c))===n.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,fe.isFunction(d)?a?d.call(e,r(s,n,l,a),r(s,n,u,a)):(s++,d.call(e,r(s,n,l,a),r(s,n,u,a),r(s,n,l,n.notifyWith))):(i!==l&&(o=void 0,c=[e]),(a||n.resolveWith)(o,c))}},h=a?d:function(){try{d()}catch(e){fe.Deferred.exceptionHook&&fe.Deferred.exceptionHook(e,h.stackTrace),t+1>=s&&(i!==u&&(o=void 0,c=[e]),n.rejectWith(o,c))}};t?h():(fe.Deferred.getStackHook&&(h.stackTrace=fe.Deferred.getStackHook()),e.setTimeout(h))}}var s=0;return fe.Deferred(function(e){n[0][3].add(r(0,e,fe.isFunction(a)?a:l,e.notifyWith)),n[1][3].add(r(0,e,fe.isFunction(t)?t:l)),n[2][3].add(r(0,e,fe.isFunction(i)?i:u))}).promise()},promise:function(e){return null!=e?fe.extend(e,a):a}},r={};return fe.each(n,function(e,t){var s=t[2],o=t[5];a[t[1]]=s.add,o&&s.add(function(){i=o},n[3-e][2].disable,n[0][2].lock),s.add(t[3].fire),r[t[0]]=function(){return r[t[0]+"With"](this===r?void 0:this,arguments),this},r[t[0]+"With"]=s.fireWith}),a.promise(r),t&&t.call(r,r),r},when:function(e){var t=arguments.length,n=t,i=Array(n),a=ae.call(arguments),r=fe.Deferred(),s=function(e){return function(n){i[e]=this,a[e]=arguments.length>1?ae.call(arguments):n,--t||r.resolveWith(i,a)}};if(t<=1&&(c(e,r.done(s(n)).resolve,r.reject,!t),"pending"===r.state()||fe.isFunction(a[n]&&a[n].then)))return r.then();for(;n--;)c(a[n],s(n),r.reject);return r.promise()}});var Pe=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;fe.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Pe.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},fe.readyException=function(t){e.setTimeout(function(){throw t})};var ze=fe.Deferred();fe.fn.ready=function(e){return ze.then(e).catch(function(e){fe.readyException(e)}),this},fe.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--fe.readyWait:fe.isReady)||(fe.isReady=!0,!0!==e&&--fe.readyWait>0||ze.resolveWith(ne,[fe]))}}),fe.ready.then=ze.then,"complete"===ne.readyState||"loading"!==ne.readyState&&!ne.documentElement.doScroll?e.setTimeout(fe.ready):(ne.addEventListener("DOMContentLoaded",d),e.addEventListener("load",d));var Ie=function(e,t,n,i,a,r,s){var o=0,l=e.length,u=null==n;if("object"===fe.type(n)){a=!0;for(o in n)Ie(e,t,o,n[o],!0,r,s)}else if(void 0!==i&&(a=!0,fe.isFunction(i)||(s=!0),u&&(s?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(fe(e),n)})),t))for(;o<l;o++)t(e[o],n,s?i:i.call(e[o],o,t(e[o],n)));return a?e:u?t.call(e):l?t(e[0],n):r},Ae=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};h.uid=1,h.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Ae(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,a=this.cache(e);if("string"==typeof t)a[fe.camelCase(t)]=n;else for(i in t)a[fe.camelCase(i)]=t[i];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][fe.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(fe.camelCase):(t=fe.camelCase(t))in i?[t]:t.match(Ee)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||fe.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!fe.isEmptyObject(t)}};var Oe=new h,Le=new h,Re=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ne=/[A-Z]/g;fe.extend({hasData:function(e){return Le.hasData(e)||Oe.hasData(e)},data:function(e,t,n){return Le.access(e,t,n)},removeData:function(e,t){Le.remove(e,t)},_data:function(e,t,n){return Oe.access(e,t,n)},_removeData:function(e,t){Oe.remove(e,t)}}),fe.fn.extend({data:function(e,t){var n,i,a,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(a=Le.get(r),1===r.nodeType&&!Oe.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=fe.camelCase(i.slice(5)),f(r,i,a[i]));Oe.set(r,"hasDataAttrs",!0)}return a}return"object"==typeof e?this.each(function(){Le.set(this,e)}):Ie(this,function(t){var n;if(r&&void 0===t){if(void 0!==(n=Le.get(r,e)))return n;if(void 0!==(n=f(r,e)))return n}else this.each(function(){Le.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Le.remove(this,e)})}}),fe.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Oe.get(e,t),n&&(!i||Array.isArray(n)?i=Oe.access(e,t,fe.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=fe.queue(e,t),i=n.length,a=n.shift(),r=fe._queueHooks(e,t),s=function(){fe.dequeue(e,t)};"inprogress"===a&&(a=n.shift(),i--),a&&("fx"===t&&n.unshift("inprogress"),delete r.stop,a.call(e,s,r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Oe.get(e,n)||Oe.access(e,n,{empty:fe.Callbacks("once memory").add(function(){Oe.remove(e,[t+"queue",n])})})}}),fe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?fe.queue(this[0],e):void 0===t?this:this.each(function(){var n=fe.queue(this,e,t);fe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&fe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){fe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,a=fe.Deferred(),r=this,s=this.length,o=function(){--i||a.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Oe.get(r[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(o));return o(),a.promise(t)}});var Ye=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,je=new RegExp("^(?:([+-])=|)("+Ye+")([a-z%]*)$","i"),He=["Top","Right","Bottom","Left"],We=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&fe.contains(e.ownerDocument,e)&&"none"===fe.css(e,"display")},Fe=function(e,t,n,i){var a,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];a=n.apply(e,i||[]);for(r in t)e.style[r]=s[r];return a},Be={};fe.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){We(this)?fe(this).show():fe(this).hide()})}});var qe=/^(?:checkbox|radio)$/i,Ge=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,$e=/^$|\/(?:java|ecma)script/i,Ve={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ve.optgroup=Ve.option,Ve.tbody=Ve.tfoot=Ve.colgroup=Ve.caption=Ve.thead,Ve.th=Ve.td;var Xe=/<|&#?\w+;/;!function(){var e=ne.createDocumentFragment().appendChild(ne.createElement("div")),t=ne.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),pe.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",pe.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Ue=ne.documentElement,Ze=/^key/,Qe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ke=/^([^.]*)(?:\.(.+)|)/;fe.event={global:{},add:function(e,t,n,i,a){var r,s,o,l,u,c,d,h,p,f,m,g=Oe.get(e);if(g)for(n.handler&&(n=(r=n).handler,a=r.selector),a&&fe.find.matchesSelector(Ue,a),n.guid||(n.guid=fe.guid++),(l=g.events)||(l=g.events={}),(s=g.handle)||(s=g.handle=function(t){return void 0!==fe&&fe.event.triggered!==t.type?fe.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(Ee)||[""]).length;u--;)p=m=(o=Ke.exec(t[u])||[])[1],f=(o[2]||"").split(".").sort(),p&&(d=fe.event.special[p]||{},p=(a?d.delegateType:d.bindType)||p,d=fe.event.special[p]||{},c=fe.extend({type:p,origType:m,data:i,handler:n,guid:n.guid,selector:a,needsContext:a&&fe.expr.match.needsContext.test(a),namespace:f.join(".")},r),(h=l[p])||((h=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,f,s)||e.addEventListener&&e.addEventListener(p,s)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),a?h.splice(h.delegateCount++,0,c):h.push(c),fe.event.global[p]=!0)},remove:function(e,t,n,i,a){var r,s,o,l,u,c,d,h,p,f,m,g=Oe.hasData(e)&&Oe.get(e);if(g&&(l=g.events)){for(u=(t=(t||"").match(Ee)||[""]).length;u--;)if(o=Ke.exec(t[u])||[],p=m=o[1],f=(o[2]||"").split(".").sort(),p){for(d=fe.event.special[p]||{},h=l[p=(i?d.delegateType:d.bindType)||p]||[],o=o[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=h.length;r--;)c=h[r],!a&&m!==c.origType||n&&n.guid!==c.guid||o&&!o.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(h.splice(r,1),c.selector&&h.delegateCount--,d.remove&&d.remove.call(e,c));s&&!h.length&&(d.teardown&&!1!==d.teardown.call(e,f,g.handle)||fe.removeEvent(e,p,g.handle),delete l[p])}else for(p in l)fe.event.remove(e,p+t[u],n,i,!0);fe.isEmptyObject(l)&&Oe.remove(e,"handle events")}},dispatch:function(e){var t,n,i,a,r,s,o=fe.event.fix(e),l=new Array(arguments.length),u=(Oe.get(this,"events")||{})[o.type]||[],c=fe.event.special[o.type]||{};for(l[0]=o,t=1;t<arguments.length;t++)l[t]=arguments[t];if(o.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,o)){for(s=fe.event.handlers.call(this,o,u),t=0;(a=s[t++])&&!o.isPropagationStopped();)for(o.currentTarget=a.elem,n=0;(r=a.handlers[n++])&&!o.isImmediatePropagationStopped();)o.rnamespace&&!o.rnamespace.test(r.namespace)||(o.handleObj=r,o.data=r.data,void 0!==(i=((fe.event.special[r.origType]||{}).handle||r.handler).apply(a.elem,l))&&!1===(o.result=i)&&(o.preventDefault(),o.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,o),o.result}},handlers:function(e,t){var n,i,a,r,s,o=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[a=(i=t[n]).selector+" "]&&(s[a]=i.needsContext?fe(a,this).index(u)>-1:fe.find(a,this,null,[u]).length),s[a]&&r.push(i);r.length&&o.push({elem:u,handlers:r})}return u=this,l<t.length&&o.push({elem:u,handlers:t.slice(l)}),o},addProp:function(e,t){Object.defineProperty(fe.Event.prototype,e,{enumerable:!0,configurable:!0,get:fe.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[fe.expando]?e:new fe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==T()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===T()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&a(this,"input"))return this.click(),!1},_default:function(e){return a(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},fe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},fe.Event=function(e,t){if(!(this instanceof fe.Event))return new fe.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?x:C,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&fe.extend(this,t),this.timeStamp=e&&e.timeStamp||fe.now(),this[fe.expando]=!0},fe.Event.prototype={constructor:fe.Event,isDefaultPrevented:C,isPropagationStopped:C,isImmediatePropagationStopped:C,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=x,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=x,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=x,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},fe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ze.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Qe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},fe.event.addProp),fe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){fe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,a=e.relatedTarget,r=e.handleObj;return a&&(a===i||fe.contains(i,a))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),fe.fn.extend({on:function(e,t,n,i){return S(this,e,t,n,i)},one:function(e,t,n,i){return S(this,e,t,n,i,1)},off:function(e,t,n){var i,a;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,fe(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(a in e)this.off(a,t,e[a]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=C),this.each(function(){fe.event.remove(this,e,n,t)})}});var Je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,et=/<script|<style|<link/i,tt=/checked\s*(?:[^=]|=\s*.checked.)/i,nt=/^true\/(.*)/,it=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;fe.extend({htmlPrefilter:function(e){return e.replace(Je,"<$1></$2>")},clone:function(e,t,n){var i,a,r,s,o=e.cloneNode(!0),l=fe.contains(e.ownerDocument,e);if(!(pe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||fe.isXMLDoc(e)))for(s=y(o),i=0,a=(r=y(e)).length;i<a;i++)E(r[i],s[i]);if(t)if(n)for(r=r||y(e),s=s||y(o),i=0,a=r.length;i<a;i++)D(r[i],s[i]);else D(e,o);return(s=y(o,"script")).length>0&&w(s,!l&&y(e,"script")),o},cleanData:function(e){for(var t,n,i,a=fe.event.special,r=0;void 0!==(n=e[r]);r++)if(Ae(n)){if(t=n[Oe.expando]){if(t.events)for(i in t.events)a[i]?fe.event.remove(n,i):fe.removeEvent(n,i,t.handle);n[Oe.expando]=void 0}n[Le.expando]&&(n[Le.expando]=void 0)}}}),fe.fn.extend({detach:function(e){return z(this,e,!0)},remove:function(e){return z(this,e)},text:function(e){return Ie(this,function(e){return void 0===e?fe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return P(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||k(this,e).appendChild(e)})},prepend:function(){return P(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=k(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return P(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return P(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(fe.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return fe.clone(this,e,t)})},html:function(e){return Ie(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!et.test(e)&&!Ve[(Ge.exec(e)||["",""])[1].toLowerCase()]){e=fe.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(fe.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return P(this,arguments,function(t){var n=this.parentNode;fe.inArray(this,e)<0&&(fe.cleanData(y(this)),n&&n.replaceChild(t,this))},e)}}),fe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){fe.fn[e]=function(e){for(var n,i=[],a=fe(e),r=a.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),fe(a[s])[t](n),se.apply(i,n.get());return this.pushStack(i)}});var at=/^margin/,rt=new RegExp("^("+Ye+")(?!px)[a-z%]+$","i"),st=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(o){o.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",o.innerHTML="",Ue.appendChild(s);var t=e.getComputedStyle(o);n="1%"!==t.top,r="2px"===t.marginLeft,i="4px"===t.width,o.style.marginRight="50%",a="4px"===t.marginRight,Ue.removeChild(s),o=null}}var n,i,a,r,s=ne.createElement("div"),o=ne.createElement("div");o.style&&(o.style.backgroundClip="content-box",o.cloneNode(!0).style.backgroundClip="",pe.clearCloneStyle="content-box"===o.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(o),fe.extend(pe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),a},reliableMarginLeft:function(){return t(),r}}))}();var ot=/^(none|table(?!-c[ea]).+)/,lt=/^--/,ut={position:"absolute",visibility:"hidden",display:"block"},ct={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","Moz","ms"],ht=ne.createElement("div").style;fe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=I(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,r,s,o=fe.camelCase(t),l=lt.test(t),u=e.style;if(l||(t=L(o)),s=fe.cssHooks[t]||fe.cssHooks[o],void 0===n)return s&&"get"in s&&void 0!==(a=s.get(e,!1,i))?a:u[t];"string"===(r=typeof n)&&(a=je.exec(n))&&a[1]&&(n=m(e,t,a),r="number"),null!=n&&n===n&&("number"===r&&(n+=a&&a[3]||(fe.cssNumber[o]?"":"px")),pe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,i){var a,r,s,o=fe.camelCase(t);return lt.test(t)||(t=L(o)),(s=fe.cssHooks[t]||fe.cssHooks[o])&&"get"in s&&(a=s.get(e,!0,n)),void 0===a&&(a=I(e,t,i)),"normal"===a&&t in ct&&(a=ct[t]),""===n||n?(r=parseFloat(a),!0===n||isFinite(r)?r||0:a):a}}),fe.each(["height","width"],function(e,t){fe.cssHooks[t]={get:function(e,n,i){if(n)return!ot.test(fe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Y(e,t,i):Fe(e,ut,function(){return Y(e,t,i)})},set:function(e,n,i){var a,r=i&&st(e),s=i&&N(e,t,i,"border-box"===fe.css(e,"boxSizing",!1,r),r);return s&&(a=je.exec(n))&&"px"!==(a[3]||"px")&&(e.style[t]=n,n=fe.css(e,t)),R(e,n,s)}}}),fe.cssHooks.marginLeft=A(pe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(I(e,"marginLeft"))||e.getBoundingClientRect().left-Fe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),fe.each({margin:"",padding:"",border:"Width"},function(e,t){fe.cssHooks[e+t]={expand:function(n){for(var i=0,a={},r="string"==typeof n?n.split(" "):[n];i<4;i++)a[e+He[i]+t]=r[i]||r[i-2]||r[0];return a}},at.test(e)||(fe.cssHooks[e+t].set=R)}),fe.fn.extend({css:function(e,t){return Ie(this,function(e,t,n){var i,a,r={},s=0;if(Array.isArray(t)){for(i=st(e),a=t.length;s<a;s++)r[t[s]]=fe.css(e,t[s],!1,i);return r}return void 0!==n?fe.style(e,t,n):fe.css(e,t)},e,t,arguments.length>1)}}),fe.Tween=j,j.prototype={constructor:j,init:function(e,t,n,i,a,r){this.elem=e,this.prop=n,this.easing=a||fe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(fe.cssNumber[n]?"":"px")},cur:function(){var e=j.propHooks[this.prop];return e&&e.get?e.get(this):j.propHooks._default.get(this)},run:function(e){var t,n=j.propHooks[this.prop];return this.options.duration?this.pos=t=fe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):j.propHooks._default.set(this),this}},j.prototype.init.prototype=j.prototype,j.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=fe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){fe.fx.step[e.prop]?fe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[fe.cssProps[e.prop]]&&!fe.cssHooks[e.prop]?e.elem[e.prop]=e.now:fe.style(e.elem,e.prop,e.now+e.unit)}}},j.propHooks.scrollTop=j.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},fe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},fe.fx=j.prototype.init,fe.fx.step={};var pt,ft,mt=/^(?:toggle|show|hide)$/,gt=/queueHooks$/;fe.Animation=fe.extend($,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return m(n.elem,e,je.exec(t),n),n}]},tweener:function(e,t){fe.isFunction(e)?(t=e,e=["*"]):e=e.match(Ee);for(var n,i=0,a=e.length;i<a;i++)n=e[i],$.tweeners[n]=$.tweeners[n]||[],$.tweeners[n].unshift(t)},prefilters:[q],prefilter:function(e,t){t?$.prefilters.unshift(e):$.prefilters.push(e)}}),fe.speed=function(e,t,n){var i=e&&"object"==typeof e?fe.extend({},e):{complete:n||!n&&t||fe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!fe.isFunction(t)&&t};return fe.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in fe.fx.speeds?i.duration=fe.fx.speeds[i.duration]:i.duration=fe.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){fe.isFunction(i.old)&&i.old.call(this),i.queue&&fe.dequeue(this,i.queue)},i},fe.fn.extend({fadeTo:function(e,t,n,i){return this.filter(We).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var a=fe.isEmptyObject(e),r=fe.speed(t,n,i),s=function(){var t=$(this,fe.extend({},e),r);(a||Oe.get(this,"finish"))&&t.stop(!0)};return s.finish=s,a||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,a=null!=e&&e+"queueHooks",r=fe.timers,s=Oe.get(this);if(a)s[a]&&s[a].stop&&i(s[a]);else for(a in s)s[a]&&s[a].stop&&gt.test(a)&&i(s[a]);for(a=r.length;a--;)r[a].elem!==this||null!=e&&r[a].queue!==e||(r[a].anim.stop(n),t=!1,r.splice(a,1));!t&&n||fe.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Oe.get(this),i=n[e+"queue"],a=n[e+"queueHooks"],r=fe.timers,s=i?i.length:0;for(n.finish=!0,fe.queue(this,e,[]),a&&a.stop&&a.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),fe.each(["toggle","show","hide"],function(e,t){var n=fe.fn[t];fe.fn[t]=function(e,i,a){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(F(t,!0),e,i,a)}}),fe.each({slideDown:F("show"),slideUp:F("hide"),slideToggle:F("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){fe.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),fe.timers=[],fe.fx.tick=function(){var e,t=0,n=fe.timers;for(pt=fe.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||fe.fx.stop(),pt=void 0},fe.fx.timer=function(e){fe.timers.push(e),fe.fx.start()},fe.fx.interval=13,fe.fx.start=function(){ft||(ft=!0,H())},fe.fx.stop=function(){ft=null},fe.fx.speeds={slow:600,fast:200,_default:400},fe.fn.delay=function(t,n){return t=fe.fx?fe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var a=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(a)}})},function(){var e=ne.createElement("input"),t=ne.createElement("select").appendChild(ne.createElement("option"));e.type="checkbox",pe.checkOn=""!==e.value,pe.optSelected=t.selected,(e=ne.createElement("input")).value="t",e.type="radio",pe.radioValue="t"===e.value}();var vt,yt=fe.expr.attrHandle;fe.fn.extend({attr:function(e,t){return Ie(this,fe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){fe.removeAttr(this,e)})}}),fe.extend({attr:function(e,t,n){var i,a,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?fe.prop(e,t,n):(1===r&&fe.isXMLDoc(e)||(a=fe.attrHooks[t.toLowerCase()]||(fe.expr.match.bool.test(t)?vt:void 0)),void 0!==n?null===n?void fe.removeAttr(e,t):a&&"set"in a&&void 0!==(i=a.set(e,n,t))?i:(e.setAttribute(t,n+""),n):a&&"get"in a&&null!==(i=a.get(e,t))?i:(i=fe.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!pe.radioValue&&"radio"===t&&a(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,a=t&&t.match(Ee);if(a&&1===e.nodeType)for(;n=a[i++];)e.removeAttribute(n)}}),vt={set:function(e,t,n){return!1===t?fe.removeAttr(e,n):e.setAttribute(n,n),n}},fe.each(fe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=yt[t]||fe.find.attr;yt[t]=function(e,t,i){var a,r,s=t.toLowerCase();return i||(r=yt[s],yt[s]=a,a=null!=n(e,t,i)?s:null,yt[s]=r),a}});var wt=/^(?:input|select|textarea|button)$/i,bt=/^(?:a|area)$/i;fe.fn.extend({prop:function(e,t){return Ie(this,fe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[fe.propFix[e]||e]})}}),fe.extend({prop:function(e,t,n){var i,a,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&fe.isXMLDoc(e)||(t=fe.propFix[t]||t,a=fe.propHooks[t]),void 0!==n?a&&"set"in a&&void 0!==(i=a.set(e,n,t))?i:e[t]=n:a&&"get"in a&&null!==(i=a.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=fe.find.attr(e,"tabindex");return t?parseInt(t,10):wt.test(e.nodeName)||bt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),pe.optSelected||(fe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),fe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){fe.propFix[this.toLowerCase()]=this}),fe.fn.extend({addClass:function(e){var t,n,i,a,r,s,o,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).addClass(e.call(this,t,X(this)))});if("string"==typeof e&&e)for(t=e.match(Ee)||[];n=this[l++];)if(a=X(n),i=1===n.nodeType&&" "+V(a)+" "){for(s=0;r=t[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");a!==(o=V(i))&&n.setAttribute("class",o)}return this},removeClass:function(e){var t,n,i,a,r,s,o,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).removeClass(e.call(this,t,X(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Ee)||[];n=this[l++];)if(a=X(n),i=1===n.nodeType&&" "+V(a)+" "){for(s=0;r=t[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");a!==(o=V(i))&&n.setAttribute("class",o)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):fe.isFunction(e)?this.each(function(n){fe(this).toggleClass(e.call(this,n,X(this),t),t)}):this.each(function(){var t,i,a,r;if("string"===n)for(i=0,a=fe(this),r=e.match(Ee)||[];t=r[i++];)a.hasClass(t)?a.removeClass(t):a.addClass(t);else void 0!==e&&"boolean"!==n||((t=X(this))&&Oe.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Oe.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+V(X(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;fe.fn.extend({val:function(e){var t,n,i,a=this[0];{if(arguments.length)return i=fe.isFunction(e),this.each(function(n){var a;1===this.nodeType&&(null==(a=i?e.call(this,n,fe(this).val()):e)?a="":"number"==typeof a?a+="":Array.isArray(a)&&(a=fe.map(a,function(e){return null==e?"":e+""})),(t=fe.valHooks[this.type]||fe.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,a,"value")||(this.value=a))});if(a)return(t=fe.valHooks[a.type]||fe.valHooks[a.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(a,"value"))?n:(n=a.value,"string"==typeof n?n.replace(xt,""):null==n?"":n)}}}),fe.extend({valHooks:{option:{get:function(e){var t=fe.find.attr(e,"value");return null!=t?t:V(fe.text(e))}},select:{get:function(e){var t,n,i,r=e.options,s=e.selectedIndex,o="select-one"===e.type,l=o?null:[],u=o?s+1:r.length;for(i=s<0?u:o?s:0;i<u;i++)if(((n=r[i]).selected||i===s)&&!n.disabled&&(!n.parentNode.disabled||!a(n.parentNode,"optgroup"))){if(t=fe(n).val(),o)return t;l.push(t)}return l},set:function(e,t){for(var n,i,a=e.options,r=fe.makeArray(t),s=a.length;s--;)((i=a[s]).selected=fe.inArray(fe.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),fe.each(["radio","checkbox"],function(){fe.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=fe.inArray(fe(e).val(),t)>-1}},pe.checkOn||(fe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Ct=/^(?:focusinfocus|focusoutblur)$/;fe.extend(fe.event,{trigger:function(t,n,i,a){var r,s,o,l,u,c,d,h=[i||ne],p=ce.call(t,"type")?t.type:t,f=ce.call(t,"namespace")?t.namespace.split("."):[];if(s=o=i=i||ne,3!==i.nodeType&&8!==i.nodeType&&!Ct.test(p+fe.event.triggered)&&(p.indexOf(".")>-1&&(p=(f=p.split(".")).shift(),f.sort()),u=p.indexOf(":")<0&&"on"+p,t=t[fe.expando]?t:new fe.Event(p,"object"==typeof t&&t),t.isTrigger=a?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:fe.makeArray(n,[t]),d=fe.event.special[p]||{},a||!d.trigger||!1!==d.trigger.apply(i,n))){if(!a&&!d.noBubble&&!fe.isWindow(i)){for(l=d.delegateType||p,Ct.test(l+p)||(s=s.parentNode);s;s=s.parentNode)h.push(s),o=s;o===(i.ownerDocument||ne)&&h.push(o.defaultView||o.parentWindow||e)}for(r=0;(s=h[r++])&&!t.isPropagationStopped();)t.type=r>1?l:d.bindType||p,(c=(Oe.get(s,"events")||{})[t.type]&&Oe.get(s,"handle"))&&c.apply(s,n),(c=u&&s[u])&&c.apply&&Ae(s)&&(t.result=c.apply(s,n),!1===t.result&&t.preventDefault());return t.type=p,a||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),n)||!Ae(i)||u&&fe.isFunction(i[p])&&!fe.isWindow(i)&&((o=i[u])&&(i[u]=null),fe.event.triggered=p,i[p](),fe.event.triggered=void 0,o&&(i[u]=o)),t.result}},simulate:function(e,t,n){var i=fe.extend(new fe.Event,n,{type:e,isSimulated:!0});fe.event.trigger(i,null,t)}}),fe.fn.extend({trigger:function(e,t){return this.each(function(){fe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return fe.event.trigger(e,t,n,!0)}}),fe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){fe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),fe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),pe.focusin="onfocusin"in e,pe.focusin||fe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){fe.event.simulate(t,e.target,fe.event.fix(e))};fe.event.special[t]={setup:function(){var i=this.ownerDocument||this,a=Oe.access(i,t);a||i.addEventListener(e,n,!0),Oe.access(i,t,(a||0)+1)},teardown:function(){var i=this.ownerDocument||this,a=Oe.access(i,t)-1;a?Oe.access(i,t,a):(i.removeEventListener(e,n,!0),Oe.remove(i,t))}}});var Tt=e.location,St=fe.now(),kt=/\?/;fe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||fe.error("Invalid XML: "+t),n};var Mt=/\[\]$/,_t=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,Et=/^(?:input|select|textarea|keygen)/i;fe.param=function(e,t){var n,i=[],a=function(e,t){var n=fe.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!fe.isPlainObject(e))fe.each(e,function(){a(this.name,this.value)});else for(n in e)U(n,e[n],t,a);return i.join("&")},fe.fn.extend({serialize:function(){return fe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=fe.prop(this,"elements");return e?fe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!fe(this).is(":disabled")&&Et.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!qe.test(e))}).map(function(e,t){var n=fe(this).val();return null==n?null:Array.isArray(n)?fe.map(n,function(e){return{name:t.name,value:e.replace(_t,"\r\n")}}):{name:t.name,value:n.replace(_t,"\r\n")}}).get()}});var Pt=/%20/g,zt=/#.*$/,It=/([?&])_=[^&]*/,At=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ot=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Lt=/^(?:GET|HEAD)$/,Rt=/^\/\//,Nt={},Yt={},jt="*/".concat("*"),Ht=ne.createElement("a");Ht.href=Tt.href,fe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Tt.href,type:"GET",isLocal:Ot.test(Tt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":jt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":fe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?K(K(e,fe.ajaxSettings),t):K(fe.ajaxSettings,e)},ajaxPrefilter:Z(Nt),ajaxTransport:Z(Yt),ajax:function(t,n){function i(t,n,i,o){var u,h,p,b,x,C=n;c||(c=!0,l&&e.clearTimeout(l),a=void 0,s=o||"",T.readyState=t>0?4:0,u=t>=200&&t<300||304===t,i&&(b=J(f,T,i)),b=ee(f,b,T,u),u?(f.ifModified&&((x=T.getResponseHeader("Last-Modified"))&&(fe.lastModified[r]=x),(x=T.getResponseHeader("etag"))&&(fe.etag[r]=x)),204===t||"HEAD"===f.type?C="nocontent":304===t?C="notmodified":(C=b.state,h=b.data,u=!(p=b.error))):(p=C,!t&&C||(C="error",t<0&&(t=0))),T.status=t,T.statusText=(n||C)+"",u?v.resolveWith(m,[h,C,T]):v.rejectWith(m,[T,C,p]),T.statusCode(w),w=void 0,d&&g.trigger(u?"ajaxSuccess":"ajaxError",[T,f,u?h:p]),y.fireWith(m,[T,C]),d&&(g.trigger("ajaxComplete",[T,f]),--fe.active||fe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var a,r,s,o,l,u,c,d,h,p,f=fe.ajaxSetup({},n),m=f.context||f,g=f.context&&(m.nodeType||m.jquery)?fe(m):fe.event,v=fe.Deferred(),y=fe.Callbacks("once memory"),w=f.statusCode||{},b={},x={},C="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(c){if(!o)for(o={};t=At.exec(s);)o[t[1].toLowerCase()]=t[2];t=o[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?s:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||C;return a&&a.abort(t),i(0,t),this}};if(v.promise(T),f.url=((t||f.url||Tt.href)+"").replace(Rt,Tt.protocol+"//"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(Ee)||[""],null==f.crossDomain){u=ne.createElement("a");try{u.href=f.url,u.href=u.href,f.crossDomain=Ht.protocol+"//"+Ht.host!=u.protocol+"//"+u.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=fe.param(f.data,f.traditional)),Q(Nt,f,n,T),c)return T;(d=fe.event&&f.global)&&0==fe.active++&&fe.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Lt.test(f.type),r=f.url.replace(zt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Pt,"+")):(p=f.url.slice(r.length),f.data&&(r+=(kt.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(r=r.replace(It,"$1"),p=(kt.test(r)?"&":"?")+"_="+St+++p),f.url=r+p),f.ifModified&&(fe.lastModified[r]&&T.setRequestHeader("If-Modified-Since",fe.lastModified[r]),fe.etag[r]&&T.setRequestHeader("If-None-Match",fe.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||n.contentType)&&T.setRequestHeader("Content-Type",f.contentType),T.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+jt+"; q=0.01":""):f.accepts["*"]);for(h in f.headers)T.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(!1===f.beforeSend.call(m,T,f)||c))return T.abort();if(C="abort",y.add(f.complete),T.done(f.success),T.fail(f.error),a=Q(Yt,f,n,T)){if(T.readyState=1,d&&g.trigger("ajaxSend",[T,f]),c)return T;f.async&&f.timeout>0&&(l=e.setTimeout(function(){T.abort("timeout")},f.timeout));try{c=!1,a.send(b,i)}catch(e){if(c)throw e;i(-1,e)}}else i(-1,"No Transport");return T},getJSON:function(e,t,n){return fe.get(e,t,n,"json")},getScript:function(e,t){return fe.get(e,void 0,t,"script")}}),fe.each(["get","post"],function(e,t){fe[t]=function(e,n,i,a){return fe.isFunction(n)&&(a=a||i,i=n,n=void 0),fe.ajax(fe.extend({url:e,type:t,dataType:a,data:n,success:i},fe.isPlainObject(e)&&e))}}),fe._evalUrl=function(e){return fe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},fe.fn.extend({wrapAll:function(e){var t;return this[0]&&(fe.isFunction(e)&&(e=e.call(this[0])),t=fe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return fe.isFunction(e)?this.each(function(t){fe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=fe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=fe.isFunction(e);return this.each(function(n){fe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){fe(this).replaceWith(this.childNodes)}),this}}),fe.expr.pseudos.hidden=function(e){return!fe.expr.pseudos.visible(e)},fe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},fe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},Ft=fe.ajaxSettings.xhr();pe.cors=!!Ft&&"withCredentials"in Ft,pe.ajax=Ft=!!Ft,fe.ajaxTransport(function(t){var n,i;if(pe.cors||Ft&&!t.crossDomain)return{send:function(a,r){var s,o=t.xhr();if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)o[s]=t.xhrFields[s];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||a["X-Requested-With"]||(a["X-Requested-With"]="XMLHttpRequest");for(s in a)o.setRequestHeader(s,a[s]);n=function(e){return function(){n&&(n=i=o.onload=o.onerror=o.onabort=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?r(0,"error"):r(o.status,o.statusText):r(Wt[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=n(),i=o.onerror=n("error"),void 0!==o.onabort?o.onabort=i:o.onreadystatechange=function(){4===o.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{o.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),fe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),fe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return fe.globalEval(e),e}}}),fe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),fe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,a){t=fe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&a("error"===e.type?404:200,e.type)}),ne.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Bt=[],qt=/(=)\?(?=&|$)|\?\?/;fe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Bt.pop()||fe.expando+"_"+St++;return this[e]=!0,e}}),fe.ajaxPrefilter("json jsonp",function(t,n,i){var a,r,s,o=!1!==t.jsonp&&(qt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&qt.test(t.data)&&"data");if(o||"jsonp"===t.dataTypes[0])return a=t.jsonpCallback=fe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,o?t[o]=t[o].replace(qt,"$1"+a):!1!==t.jsonp&&(t.url+=(kt.test(t.url)?"&":"?")+t.jsonp+"="+a),t.converters["script json"]=function(){return s||fe.error(a+" was not called"),s[0]},t.dataTypes[0]="json",r=e[a],e[a]=function(){s=arguments},i.always(function(){void 0===r?fe(e).removeProp(a):e[a]=r,t[a]&&(t.jsonpCallback=n.jsonpCallback,Bt.push(a)),s&&fe.isFunction(r)&&r(s[0]),s=r=void 0}),"script"}),pe.createHTMLDocument=function(){var e=ne.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),fe.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,a,r;return t||(pe.createHTMLDocument?((i=(t=ne.implementation.createHTMLDocument("")).createElement("base")).href=ne.location.href,t.head.appendChild(i)):t=ne),a=Te.exec(e),r=!n&&[],a?[t.createElement(a[1])]:(a=b([e],t,r),r&&r.length&&fe(r).remove(),fe.merge([],a.childNodes))},fe.fn.load=function(e,t,n){var i,a,r,s=this,o=e.indexOf(" ");return o>-1&&(i=V(e.slice(o)),e=e.slice(0,o)),fe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(a="POST"),s.length>0&&fe.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?fe("<div>").append(fe.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},fe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){fe.fn[t]=function(e){return this.on(t,e)}}),fe.expr.pseudos.animated=function(e){return fe.grep(fe.timers,function(t){return e===t.elem}).length},fe.offset={setOffset:function(e,t,n){var i,a,r,s,o,l,u=fe.css(e,"position"),c=fe(e),d={};"static"===u&&(e.style.position="relative"),o=c.offset(),r=fe.css(e,"top"),l=fe.css(e,"left"),("absolute"===u||"fixed"===u)&&(r+l).indexOf("auto")>-1?(s=(i=c.position()).top,a=i.left):(s=parseFloat(r)||0,a=parseFloat(l)||0),fe.isFunction(t)&&(t=t.call(e,n,fe.extend({},o))),null!=t.top&&(d.top=t.top-o.top+s),null!=t.left&&(d.left=t.left-o.left+a),"using"in t?t.using.call(e,d):c.css(d)}},fe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){fe.offset.setOffset(this,e,t)});var t,n,i,a,r=this[0];if(r)return r.getClientRects().length?(i=r.getBoundingClientRect(),t=r.ownerDocument,n=t.documentElement,a=t.defaultView,{top:i.top+a.pageYOffset-n.clientTop,left:i.left+a.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===fe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),a(e[0],"html")||(i=e.offset()),i={top:i.top+fe.css(e[0],"borderTopWidth",!0),left:i.left+fe.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-fe.css(n,"marginTop",!0),left:t.left-i.left-fe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===fe.css(e,"position");)e=e.offsetParent;return e||Ue})}}),fe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;fe.fn[e]=function(i){return Ie(this,function(e,i,a){var r;if(fe.isWindow(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===a)return r?r[t]:e[i];r?r.scrollTo(n?r.pageXOffset:a,n?a:r.pageYOffset):e[i]=a},e,i,arguments.length)}}),fe.each(["top","left"],function(e,t){fe.cssHooks[t]=A(pe.pixelPosition,function(e,n){if(n)return n=I(e,t),rt.test(n)?fe(e).position()[t]+"px":n})}),fe.each({Height:"height",Width:"width"},function(e,t){fe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){fe.fn[i]=function(a,r){var s=arguments.length&&(n||"boolean"!=typeof a),o=n||(!0===a||!0===r?"margin":"border");return Ie(this,function(t,n,a){var r;return fe.isWindow(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===a?fe.css(t,n,o):fe.style(t,n,a,o)},t,s?a:void 0,s)}})}),fe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),fe.holdReady=function(e){e?fe.readyWait++:fe.ready(!0)},fe.isArray=Array.isArray,fe.parseJSON=JSON.parse,fe.nodeName=a,"function"==typeof define&&define.amd&&define("jquery",[],function(){return fe});var Gt=e.jQuery,$t=e.$;return fe.noConflict=function(t){return e.$===fe&&(e.$=$t),t&&e.jQuery===fe&&(e.jQuery=Gt),fe},t||(e.jQuery=e.$=fe),fe}),function(e,t){"object"==typeof module&&module.exports?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Spinner=t()}(this,function(){"use strict";function e(e,t){var n,i=document.createElement(e||"div");for(n in t)i[n]=t[n];return i}function t(e){for(var t=1,n=arguments.length;t<n;t++)e.appendChild(arguments[t]);return e}function n(e,t,n,i){var a=["opacity",t,~~(100*e),n,i].join("-"),r=.01+n/i*100,s=Math.max(1-(1-e)/t*(100-r),e),o=l.substring(0,l.indexOf("Animation")).toLowerCase(),c=o&&"-"+o+"-"||"";return d[a]||(u.insertRule("@"+c+"keyframes "+a+"{0%{opacity:"+s+"}"+r+"%{opacity:"+e+"}"+(r+.01)+"%{opacity:1}"+(r+t)%100+"%{opacity:"+e+"}100%{opacity:"+s+"}}",u.cssRules.length),d[a]=1),a}function i(e,t){var n,i,a=e.style;if(t=t.charAt(0).toUpperCase()+t.slice(1),void 0!==a[t])return t;for(i=0;i<c.length;i++)if(n=c[i]+t,void 0!==a[n])return n}function a(e,t){for(var n in t)e.style[i(e,n)||n]=t[n];return e}function r(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)void 0===e[i]&&(e[i]=n[i])}return e}function s(e,t){return"string"==typeof e?e:e[t%e.length]}function o(e){this.opts=r(e||{},o.defaults,h)}var l,u,c=["webkit","Moz","ms","O"],d={},h={lines:12,length:7,width:5,radius:10,scale:1,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:100,fps:20,zIndex:2e9,className:"spinner",top:"50%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};if(o.defaults={},r(o.prototype,{spin:function(t){this.stop();var n=this,i=n.opts,r=n.el=e(null,{className:i.className});if(a(r,{position:i.position,width:0,zIndex:i.zIndex,left:i.left,top:i.top}),t&&t.insertBefore(r,t.firstChild||null),r.setAttribute("role","progressbar"),n.lines(r,n.opts),!l){var s,o=0,u=(i.lines-1)*(1-i.direction)/2,c=i.fps,d=c/i.speed,h=(1-i.opacity)/(d*i.trail/100),p=d/i.lines;!function e(){o++;for(var t=0;t<i.lines;t++)s=Math.max(1-(o+(i.lines-t)*p)%d*h,i.opacity),n.opacity(r,t*i.direction+u,s,i);n.timeout=n.el&&setTimeout(e,~~(1e3/c))}()}return n},stop:function(){var e=this.el;return e&&(clearTimeout(this.timeout),e.parentNode&&e.parentNode.removeChild(e),this.el=void 0),this},lines:function(i,r){function o(t,n){return a(e(),{position:"absolute",width:r.scale*(r.length+r.width)+"px",height:r.scale*r.width+"px",background:t,boxShadow:n,transformOrigin:"left",transform:"rotate("+~~(360/r.lines*c+r.rotate)+"deg) translate("+r.scale*r.radius+"px,0)",borderRadius:(r.corners*r.scale*r.width>>1)+"px"})}for(var u,c=0,d=(r.lines-1)*(1-r.direction)/2;c<r.lines;c++)u=a(e(),{position:"absolute",top:1+~(r.scale*r.width/2)+"px",transform:r.hwaccel?"translate3d(0,0,0)":"",opacity:r.opacity,animation:l&&n(r.opacity,r.trail,d+c*r.direction,r.lines)+" "+1/r.speed+"s linear infinite"}),r.shadow&&t(u,a(o("#000","0 0 4px #000"),{top:"2px"})),t(i,t(u,o(s(r.color,c),"0 0 1px rgba(0,0,0,.1)")));return i},opacity:function(e,t,n){t<e.childNodes.length&&(e.childNodes[t].style.opacity=n)}}),"undefined"!=typeof document){u=function(){var n=e("style",{type:"text/css"});return t(document.getElementsByTagName("head")[0],n),n.sheet||n.styleSheet}();var p=a(e("group"),{behavior:"url(#default#VML)"});!i(p,"transform")&&p.adj?function(){function n(t,n){return e("<"+t+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',n)}u.addRule(".spin-vml","behavior:url(#default#VML)"),o.prototype.lines=function(e,i){function r(){return a(n("group",{coordsize:c+" "+c,coordorigin:-u+" "+-u}),{width:c,height:c})}function o(e,o,l){t(h,t(a(r(),{rotation:360/i.lines*e+"deg",left:~~o}),t(a(n("roundrect",{arcsize:i.corners}),{width:u,height:i.scale*i.width,left:i.scale*i.radius,top:-i.scale*i.width>>1,filter:l}),n("fill",{color:s(i.color,e),opacity:i.opacity}),n("stroke",{opacity:0}))))}var l,u=i.scale*(i.length+i.width),c=2*i.scale*u,d=-(i.width+i.length)*i.scale*2+"px",h=a(r(),{position:"absolute",top:d,left:d});if(i.shadow)for(l=1;l<=i.lines;l++)o(l,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(l=1;l<=i.lines;l++)o(l);return t(e,h)},o.prototype.opacity=function(e,t,n,i){var a=e.firstChild;i=i.shadow&&i.lines||0,a&&t+i<a.childNodes.length&&(a=(a=(a=a.childNodes[t+i])&&a.firstChild)&&a.firstChild)&&(a.opacity=n)}}():l=i(p,"animation")}return o}),function(e){if("object"==typeof exports)e(require("jquery"),require("spin.js"));else if("function"==typeof define&&define.amd)define(["jquery","spin"],e);else{if(!window.Spinner)throw new Error("Spin.js not present");e(window.jQuery,window.Spinner)}}(function(e,t){e.fn.spin=function(n,i){return this.each(function(){var a=e(this),r=a.data();r.spinner&&(r.spinner.stop(),delete r.spinner),!1!==n&&(n=e.extend({color:i||a.css("color")},e.fn.spin.presets[n]||n),r.spinner=new t(n).spin(this))})},e.fn.spin.presets={tiny:{lines:8,length:2,width:2,radius:3},small:{lines:8,length:4,width:3,radius:5},large:{lines:10,length:8,width:4,radius:8}}}),function(){"use strict";var e,t=function(n,i){function a(e){return Math.floor(e)}function r(){var e=b.params.autoplay,t=b.slides.eq(b.activeIndex);t.attr("data-swiper-autoplay")&&(e=t.attr("data-swiper-autoplay")||b.params.autoplay),b.autoplayTimeoutId=setTimeout(function(){b.params.loop?(b.fixLoop(),b._slideNext(),b.emit("onAutoplay",b)):b.isEnd?i.autoplayStopOnLast?b.stopAutoplay():(b._slideTo(0),b.emit("onAutoplay",b)):(b._slideNext(),b.emit("onAutoplay",b))},e)}function s(t,n){var i=e(t.target);if(!i.is(n))if("string"==typeof n)i=i.parents(n);else if(n.nodeType){var a;return i.parents().each(function(e,t){t===n&&(a=n)}),a?n:void 0}if(0!==i.length)return i[0]}function o(e,t){t=t||{};var n=new(window.MutationObserver||window.WebkitMutationObserver)(function(e){e.forEach(function(e){b.onResize(!0),b.emit("onObserverUpdate",b,e)})});n.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),b.observers.push(n)}function l(e){e.originalEvent&&(e=e.originalEvent);var t=e.keyCode||e.charCode;if(!b.params.allowSwipeToNext&&(b.isHorizontal()&&39===t||!b.isHorizontal()&&40===t))return!1;if(!b.params.allowSwipeToPrev&&(b.isHorizontal()&&37===t||!b.isHorizontal()&&38===t))return!1;if(!(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey||document.activeElement&&document.activeElement.nodeName&&("input"===document.activeElement.nodeName.toLowerCase()||"textarea"===document.activeElement.nodeName.toLowerCase()))){if(37===t||39===t||38===t||40===t){var n=!1;if(b.container.parents("."+b.params.slideClass).length>0&&0===b.container.parents("."+b.params.slideActiveClass).length)return;var i={left:window.pageXOffset,top:window.pageYOffset},a=window.innerWidth,r=window.innerHeight,s=b.container.offset();b.rtl&&(s.left=s.left-b.container[0].scrollLeft);for(var o=[[s.left,s.top],[s.left+b.width,s.top],[s.left,s.top+b.height],[s.left+b.width,s.top+b.height]],l=0;l<o.length;l++){var u=o[l];u[0]>=i.left&&u[0]<=i.left+a&&u[1]>=i.top&&u[1]<=i.top+r&&(n=!0)}if(!n)return}b.isHorizontal()?(37!==t&&39!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),(39===t&&!b.rtl||37===t&&b.rtl)&&b.slideNext(),(37===t&&!b.rtl||39===t&&b.rtl)&&b.slidePrev()):(38!==t&&40!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),40===t&&b.slideNext(),38===t&&b.slidePrev()),b.emit("onKeyPress",b,t)}}function u(e){var t=0,n=0,i=0,a=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),i=10*t,a=10*n,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(i=e.deltaX),(i||a)&&e.deltaMode&&(1===e.deltaMode?(i*=40,a*=40):(i*=800,a*=800)),i&&!t&&(t=i<1?-1:1),a&&!n&&(n=a<1?-1:1),{spinX:t,spinY:n,pixelX:i,pixelY:a}}function c(e){e.originalEvent&&(e=e.originalEvent);var t=0,n=b.rtl?-1:1,i=u(e);if(b.params.mousewheelForceToAxis)if(b.isHorizontal()){if(!(Math.abs(i.pixelX)>Math.abs(i.pixelY)))return;t=i.pixelX*n}else{if(!(Math.abs(i.pixelY)>Math.abs(i.pixelX)))return;t=i.pixelY}else t=Math.abs(i.pixelX)>Math.abs(i.pixelY)?-i.pixelX*n:-i.pixelY;if(0!==t){if(b.params.mousewheelInvert&&(t=-t),b.params.freeMode){var a=b.getWrapperTranslate()+t*b.params.mousewheelSensitivity,r=b.isBeginning,s=b.isEnd;if(a>=b.minTranslate()&&(a=b.minTranslate()),a<=b.maxTranslate()&&(a=b.maxTranslate()),b.setWrapperTransition(0),b.setWrapperTranslate(a),b.updateProgress(),b.updateActiveIndex(),(!r&&b.isBeginning||!s&&b.isEnd)&&b.updateClasses(),b.params.freeModeSticky?(clearTimeout(b.mousewheel.timeout),b.mousewheel.timeout=setTimeout(function(){b.slideReset()},300)):b.params.lazyLoading&&b.lazy&&b.lazy.load(),b.emit("onScroll",b,e),b.params.autoplay&&b.params.autoplayDisableOnInteraction&&b.stopAutoplay(),0===a||a===b.maxTranslate())return}else{if((new window.Date).getTime()-b.mousewheel.lastScrollTime>60)if(t<0)if(b.isEnd&&!b.params.loop||b.animating){if(b.params.mousewheelReleaseOnEdges)return!0}else b.slideNext(),b.emit("onScroll",b,e);else if(b.isBeginning&&!b.params.loop||b.animating){if(b.params.mousewheelReleaseOnEdges)return!0}else b.slidePrev(),b.emit("onScroll",b,e);b.mousewheel.lastScrollTime=(new window.Date).getTime()}return e.preventDefault?e.preventDefault():e.returnValue=!1,!1}}function d(t,n){t=e(t);var i,a,r,s=b.rtl?-1:1;i=t.attr("data-swiper-parallax")||"0",a=t.attr("data-swiper-parallax-x"),r=t.attr("data-swiper-parallax-y"),a||r?(a=a||"0",r=r||"0"):b.isHorizontal()?(a=i,r="0"):(r=i,a="0"),a=a.indexOf("%")>=0?parseInt(a,10)*n*s+"%":a*n*s+"px",r=r.indexOf("%")>=0?parseInt(r,10)*n+"%":r*n+"px",t.transform("translate3d("+a+", "+r+",0px)")}function h(e){return 0!==e.indexOf("on")&&(e=e[0]!==e[0].toUpperCase()?"on"+e[0].toUpperCase()+e.substring(1):"on"+e),e}if(!(this instanceof t))return new t(n,i);var p={direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,autoplay:!1,autoplayDisableOnInteraction:!0,autoplayStopOnLast:!1,iOSEdgeSwipeDetection:!1,iOSEdgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",coverflow:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0},flip:{slideShadows:!0,limitRotation:!0},cube:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94},fade:{crossFade:!1},parallax:!1,zoom:!1,zoomMax:3,zoomMin:1,zoomToggle:!0,scrollbar:null,scrollbarHide:!0,scrollbarDraggable:!1,scrollbarSnapOnRelease:!1,keyboardControl:!1,mousewheelControl:!1,mousewheelReleaseOnEdges:!1,mousewheelInvert:!1,mousewheelForceToAxis:!1,mousewheelSensitivity:1,mousewheelEventsTarged:"container",hashnav:!1,hashnavWatchState:!1,history:!1,replaceState:!1,breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,onlyExternal:!1,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,pagination:null,paginationElement:"span",paginationClickable:!1,paginationHide:!1,paginationBulletRender:null,paginationProgressRender:null,paginationFractionRender:null,paginationCustomRender:null,paginationType:"bullets",resistance:!0,resistanceRatio:.85,nextButton:null,prevButton:null,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,lazyLoading:!1,lazyLoadingInPrevNext:!1,lazyLoadingInPrevNextAmount:1,lazyLoadingOnTransitionStart:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,control:void 0,controlInverse:!1,controlBy:"slide",normalizeSlideIndex:!0,allowSwipeToPrev:!0,allowSwipeToNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",buttonDisabledClass:"swiper-button-disabled",paginationCurrentClass:"swiper-pagination-current",paginationTotalClass:"swiper-pagination-total",paginationHiddenClass:"swiper-pagination-hidden",paginationProgressbarClass:"swiper-pagination-progressbar",paginationClickableClass:"swiper-pagination-clickable",paginationModifierClass:"swiper-pagination-",lazyLoadingClass:"swiper-lazy",lazyStatusLoadingClass:"swiper-lazy-loading",lazyStatusLoadedClass:"swiper-lazy-loaded",lazyPreloaderClass:"swiper-lazy-preloader",notificationClass:"swiper-notification",preloaderClass:"preloader",zoomContainerClass:"swiper-zoom-container",observer:!1,observeParents:!1,a11y:!1,prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",runCallbacksOnInit:!0},f=i&&i.virtualTranslate;i=i||{};var m={};for(var g in i)if("object"!=typeof i[g]||null===i[g]||(i[g].nodeType||i[g]===window||i[g]===document||"undefined"!=typeof Dom7&&i[g]instanceof Dom7||"undefined"!=typeof jQuery&&i[g]instanceof jQuery))m[g]=i[g];else{m[g]={};for(var v in i[g])m[g][v]=i[g][v]}for(var y in p)if(void 0===i[y])i[y]=p[y];else if("object"==typeof i[y])for(var w in p[y])void 0===i[y][w]&&(i[y][w]=p[y][w]);var b=this;if(b.params=i,b.originalParams=m,b.classNames=[],void 0!==e&&"undefined"!=typeof Dom7&&(e=Dom7),(void 0!==e||(e="undefined"==typeof Dom7?window.Dom7||window.Zepto||window.jQuery:Dom7))&&(b.$=e,b.currentBreakpoint=void 0,b.getActiveBreakpoint=function(){if(!b.params.breakpoints)return!1;var e,t=!1,n=[];for(e in b.params.breakpoints)b.params.breakpoints.hasOwnProperty(e)&&n.push(e);n.sort(function(e,t){return parseInt(e,10)>parseInt(t,10)});for(var i=0;i<n.length;i++)(e=n[i])>=window.innerWidth&&!t&&(t=e);return t||"max"},b.setBreakpoint=function(){var e=b.getActiveBreakpoint();if(e&&b.currentBreakpoint!==e){var t=e in b.params.breakpoints?b.params.breakpoints[e]:b.originalParams,n=b.params.loop&&t.slidesPerView!==b.params.slidesPerView;for(var i in t)b.params[i]=t[i];b.currentBreakpoint=e,n&&b.destroyLoop&&b.reLoop(!0)}},b.params.breakpoints&&b.setBreakpoint(),b.container=e(n),0!==b.container.length)){if(b.container.length>1){var x=[];return b.container.each(function(){x.push(new t(this,i))}),x}b.container[0].swiper=b,b.container.data("swiper",b),b.classNames.push(b.params.containerModifierClass+b.params.direction),b.params.freeMode&&b.classNames.push(b.params.containerModifierClass+"free-mode"),b.support.flexbox||(b.classNames.push(b.params.containerModifierClass+"no-flexbox"),b.params.slidesPerColumn=1),b.params.autoHeight&&b.classNames.push(b.params.containerModifierClass+"autoheight"),(b.params.parallax||b.params.watchSlidesVisibility)&&(b.params.watchSlidesProgress=!0),b.params.touchReleaseOnEdges&&(b.params.resistanceRatio=0),["cube","coverflow","flip"].indexOf(b.params.effect)>=0&&(b.support.transforms3d?(b.params.watchSlidesProgress=!0,b.classNames.push(b.params.containerModifierClass+"3d")):b.params.effect="slide"),"slide"!==b.params.effect&&b.classNames.push(b.params.containerModifierClass+b.params.effect),"cube"===b.params.effect&&(b.params.resistanceRatio=0,b.params.slidesPerView=1,b.params.slidesPerColumn=1,b.params.slidesPerGroup=1,b.params.centeredSlides=!1,b.params.spaceBetween=0,b.params.virtualTranslate=!0),"fade"!==b.params.effect&&"flip"!==b.params.effect||(b.params.slidesPerView=1,b.params.slidesPerColumn=1,b.params.slidesPerGroup=1,b.params.watchSlidesProgress=!0,b.params.spaceBetween=0,void 0===f&&(b.params.virtualTranslate=!0)),b.params.grabCursor&&b.support.touch&&(b.params.grabCursor=!1),b.wrapper=b.container.children("."+b.params.wrapperClass),b.params.pagination&&(b.paginationContainer=e(b.params.pagination),b.params.uniqueNavElements&&"string"==typeof b.params.pagination&&b.paginationContainer.length>1&&1===b.container.find(b.params.pagination).length&&(b.paginationContainer=b.container.find(b.params.pagination)),"bullets"===b.params.paginationType&&b.params.paginationClickable?b.paginationContainer.addClass(b.params.paginationModifierClass+"clickable"):b.params.paginationClickable=!1,b.paginationContainer.addClass(b.params.paginationModifierClass+b.params.paginationType)),(b.params.nextButton||b.params.prevButton)&&(b.params.nextButton&&(b.nextButton=e(b.params.nextButton),b.params.uniqueNavElements&&"string"==typeof b.params.nextButton&&b.nextButton.length>1&&1===b.container.find(b.params.nextButton).length&&(b.nextButton=b.container.find(b.params.nextButton))),b.params.prevButton&&(b.prevButton=e(b.params.prevButton),b.params.uniqueNavElements&&"string"==typeof b.params.prevButton&&b.prevButton.length>1&&1===b.container.find(b.params.prevButton).length&&(b.prevButton=b.container.find(b.params.prevButton)))),b.isHorizontal=function(){return"horizontal"===b.params.direction},b.rtl=b.isHorizontal()&&("rtl"===b.container[0].dir.toLowerCase()||"rtl"===b.container.css("direction")),b.rtl&&b.classNames.push(b.params.containerModifierClass+"rtl"),b.rtl&&(b.wrongRTL="-webkit-box"===b.wrapper.css("display")),b.params.slidesPerColumn>1&&b.classNames.push(b.params.containerModifierClass+"multirow"),b.device.android&&b.classNames.push(b.params.containerModifierClass+"android"),b.container.addClass(b.classNames.join(" ")),b.translate=0,b.progress=0,b.velocity=0,b.lockSwipeToNext=function(){b.params.allowSwipeToNext=!1,!1===b.params.allowSwipeToPrev&&b.params.grabCursor&&b.unsetGrabCursor()},b.lockSwipeToPrev=function(){b.params.allowSwipeToPrev=!1,!1===b.params.allowSwipeToNext&&b.params.grabCursor&&b.unsetGrabCursor()},b.lockSwipes=function(){b.params.allowSwipeToNext=b.params.allowSwipeToPrev=!1,b.params.grabCursor&&b.unsetGrabCursor()},b.unlockSwipeToNext=function(){b.params.allowSwipeToNext=!0,!0===b.params.allowSwipeToPrev&&b.params.grabCursor&&b.setGrabCursor()},b.unlockSwipeToPrev=function(){b.params.allowSwipeToPrev=!0,!0===b.params.allowSwipeToNext&&b.params.grabCursor&&b.setGrabCursor()},b.unlockSwipes=function(){b.params.allowSwipeToNext=b.params.allowSwipeToPrev=!0,b.params.grabCursor&&b.setGrabCursor()},b.setGrabCursor=function(e){b.container[0].style.cursor="move",b.container[0].style.cursor=e?"-webkit-grabbing":"-webkit-grab",b.container[0].style.cursor=e?"-moz-grabbin":"-moz-grab",b.container[0].style.cursor=e?"grabbing":"grab"},b.unsetGrabCursor=function(){b.container[0].style.cursor=""},b.params.grabCursor&&b.setGrabCursor(),b.imagesToLoad=[],b.imagesLoaded=0,b.loadImage=function(e,t,n,i,a,r){function s(){r&&r()}var o;e.complete&&a?s():t?((o=new window.Image).onload=s,o.onerror=s,i&&(o.sizes=i),n&&(o.srcset=n),t&&(o.src=t)):s()},b.preloadImages=function(){function e(){void 0!==b&&null!==b&&b&&(void 0!==b.imagesLoaded&&b.imagesLoaded++,b.imagesLoaded===b.imagesToLoad.length&&(b.params.updateOnImagesReady&&b.update(),b.emit("onImagesReady",b)))}b.imagesToLoad=b.container.find("img");for(var t=0;t<b.imagesToLoad.length;t++)b.loadImage(b.imagesToLoad[t],b.imagesToLoad[t].currentSrc||b.imagesToLoad[t].getAttribute("src"),b.imagesToLoad[t].srcset||b.imagesToLoad[t].getAttribute("srcset"),b.imagesToLoad[t].sizes||b.imagesToLoad[t].getAttribute("sizes"),!0,e)},b.autoplayTimeoutId=void 0,b.autoplaying=!1,b.autoplayPaused=!1,b.startAutoplay=function(){return void 0===b.autoplayTimeoutId&&(!!b.params.autoplay&&(!b.autoplaying&&(b.autoplaying=!0,b.emit("onAutoplayStart",b),void r())))},b.stopAutoplay=function(e){b.autoplayTimeoutId&&(b.autoplayTimeoutId&&clearTimeout(b.autoplayTimeoutId),b.autoplaying=!1,b.autoplayTimeoutId=void 0,b.emit("onAutoplayStop",b))},b.pauseAutoplay=function(e){b.autoplayPaused||(b.autoplayTimeoutId&&clearTimeout(b.autoplayTimeoutId),b.autoplayPaused=!0,0===e?(b.autoplayPaused=!1,r()):b.wrapper.transitionEnd(function(){b&&(b.autoplayPaused=!1,b.autoplaying?r():b.stopAutoplay())}))},b.minTranslate=function(){return-b.snapGrid[0]},b.maxTranslate=function(){return-b.snapGrid[b.snapGrid.length-1]},b.updateAutoHeight=function(){var e,t=[],n=0;if("auto"!==b.params.slidesPerView&&b.params.slidesPerView>1)for(e=0;e<Math.ceil(b.params.slidesPerView);e++){var i=b.activeIndex+e;if(i>b.slides.length)break;t.push(b.slides.eq(i)[0])}else t.push(b.slides.eq(b.activeIndex)[0]);for(e=0;e<t.length;e++)if(void 0!==t[e]){var a=t[e].offsetHeight;n=a>n?a:n}n&&b.wrapper.css("height",n+"px")},b.updateContainerSize=function(){var e,t;e=void 0!==b.params.width?b.params.width:b.container[0].clientWidth,t=void 0!==b.params.height?b.params.height:b.container[0].clientHeight,0===e&&b.isHorizontal()||0===t&&!b.isHorizontal()||(e=e-parseInt(b.container.css("padding-left"),10)-parseInt(b.container.css("padding-right"),10),t=t-parseInt(b.container.css("padding-top"),10)-parseInt(b.container.css("padding-bottom"),10),b.width=e,b.height=t,b.size=b.isHorizontal()?b.width:b.height)},b.updateSlidesSize=function(){b.slides=b.wrapper.children("."+b.params.slideClass),b.snapGrid=[],b.slidesGrid=[],b.slidesSizesGrid=[];var e,t=b.params.spaceBetween,n=-b.params.slidesOffsetBefore,i=0,r=0;if(void 0!==b.size){"string"==typeof t&&t.indexOf("%")>=0&&(t=parseFloat(t.replace("%",""))/100*b.size),b.virtualSize=-t,b.rtl?b.slides.css({marginLeft:"",marginTop:""}):b.slides.css({marginRight:"",marginBottom:""});var s;b.params.slidesPerColumn>1&&(s=Math.floor(b.slides.length/b.params.slidesPerColumn)===b.slides.length/b.params.slidesPerColumn?b.slides.length:Math.ceil(b.slides.length/b.params.slidesPerColumn)*b.params.slidesPerColumn,"auto"!==b.params.slidesPerView&&"row"===b.params.slidesPerColumnFill&&(s=Math.max(s,b.params.slidesPerView*b.params.slidesPerColumn)));var o,l=b.params.slidesPerColumn,u=s/l,c=u-(b.params.slidesPerColumn*u-b.slides.length);for(e=0;e<b.slides.length;e++){o=0;var d=b.slides.eq(e);if(b.params.slidesPerColumn>1){var h,p,f;"column"===b.params.slidesPerColumnFill?(f=e-(p=Math.floor(e/l))*l,(p>c||p===c&&f===l-1)&&++f>=l&&(f=0,p++),h=p+f*s/l,d.css({"-webkit-box-ordinal-group":h,"-moz-box-ordinal-group":h,"-ms-flex-order":h,"-webkit-order":h,order:h})):p=e-(f=Math.floor(e/u))*u,d.css("margin-"+(b.isHorizontal()?"top":"left"),0!==f&&b.params.spaceBetween&&b.params.spaceBetween+"px").attr("data-swiper-column",p).attr("data-swiper-row",f)}"none"!==d.css("display")&&("auto"===b.params.slidesPerView?(o=b.isHorizontal()?d.outerWidth(!0):d.outerHeight(!0),b.params.roundLengths&&(o=a(o))):(o=(b.size-(b.params.slidesPerView-1)*t)/b.params.slidesPerView,b.params.roundLengths&&(o=a(o)),b.isHorizontal()?b.slides[e].style.width=o+"px":b.slides[e].style.height=o+"px"),b.slides[e].swiperSlideSize=o,b.slidesSizesGrid.push(o),b.params.centeredSlides?(n=n+o/2+i/2+t,0===i&&0!==e&&(n=n-b.size/2-t),0===e&&(n=n-b.size/2-t),Math.abs(n)<.001&&(n=0),r%b.params.slidesPerGroup==0&&b.snapGrid.push(n),b.slidesGrid.push(n)):(r%b.params.slidesPerGroup==0&&b.snapGrid.push(n),b.slidesGrid.push(n),n=n+o+t),b.virtualSize+=o+t,i=o,r++)}b.virtualSize=Math.max(b.virtualSize,b.size)+b.params.slidesOffsetAfter;var m;if(b.rtl&&b.wrongRTL&&("slide"===b.params.effect||"coverflow"===b.params.effect)&&b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}),b.support.flexbox&&!b.params.setWrapperSize||(b.isHorizontal()?b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}):b.wrapper.css({height:b.virtualSize+b.params.spaceBetween+"px"})),b.params.slidesPerColumn>1&&(b.virtualSize=(o+b.params.spaceBetween)*s,b.virtualSize=Math.ceil(b.virtualSize/b.params.slidesPerColumn)-b.params.spaceBetween,b.isHorizontal()?b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}):b.wrapper.css({height:b.virtualSize+b.params.spaceBetween+"px"}),b.params.centeredSlides)){for(m=[],e=0;e<b.snapGrid.length;e++)b.snapGrid[e]<b.virtualSize+b.snapGrid[0]&&m.push(b.snapGrid[e]);b.snapGrid=m}if(!b.params.centeredSlides){for(m=[],e=0;e<b.snapGrid.length;e++)b.snapGrid[e]<=b.virtualSize-b.size&&m.push(b.snapGrid[e]);b.snapGrid=m,Math.floor(b.virtualSize-b.size)-Math.floor(b.snapGrid[b.snapGrid.length-1])>1&&b.snapGrid.push(b.virtualSize-b.size)}0===b.snapGrid.length&&(b.snapGrid=[0]),0!==b.params.spaceBetween&&(b.isHorizontal()?b.rtl?b.slides.css({marginLeft:t+"px"}):b.slides.css({marginRight:t+"px"}):b.slides.css({marginBottom:t+"px"})),b.params.watchSlidesProgress&&b.updateSlidesOffset()}},b.updateSlidesOffset=function(){for(var e=0;e<b.slides.length;e++)b.slides[e].swiperSlideOffset=b.isHorizontal()?b.slides[e].offsetLeft:b.slides[e].offsetTop},b.currentSlidesPerView=function(){var e,t,n=1;if(b.params.centeredSlides){var i,a=b.slides[b.activeIndex].swiperSlideSize;for(e=b.activeIndex+1;e<b.slides.length;e++)b.slides[e]&&!i&&(n++,(a+=b.slides[e].swiperSlideSize)>b.size&&(i=!0));for(t=b.activeIndex-1;t>=0;t--)b.slides[t]&&!i&&(n++,(a+=b.slides[t].swiperSlideSize)>b.size&&(i=!0))}else for(e=b.activeIndex+1;e<b.slides.length;e++)b.slidesGrid[e]-b.slidesGrid[b.activeIndex]<b.size&&n++;return n},b.updateSlidesProgress=function(e){if(void 0===e&&(e=b.translate||0),0!==b.slides.length){void 0===b.slides[0].swiperSlideOffset&&b.updateSlidesOffset();var t=-e;b.rtl&&(t=e),b.slides.removeClass(b.params.slideVisibleClass);for(var n=0;n<b.slides.length;n++){var i=b.slides[n],a=(t+(b.params.centeredSlides?b.minTranslate():0)-i.swiperSlideOffset)/(i.swiperSlideSize+b.params.spaceBetween);if(b.params.watchSlidesVisibility){var r=-(t-i.swiperSlideOffset),s=r+b.slidesSizesGrid[n];(r>=0&&r<b.size||s>0&&s<=b.size||r<=0&&s>=b.size)&&b.slides.eq(n).addClass(b.params.slideVisibleClass)}i.progress=b.rtl?-a:a}}},b.updateProgress=function(e){void 0===e&&(e=b.translate||0);var t=b.maxTranslate()-b.minTranslate(),n=b.isBeginning,i=b.isEnd;0===t?(b.progress=0,b.isBeginning=b.isEnd=!0):(b.progress=(e-b.minTranslate())/t,b.isBeginning=b.progress<=0,b.isEnd=b.progress>=1),b.isBeginning&&!n&&b.emit("onReachBeginning",b),b.isEnd&&!i&&b.emit("onReachEnd",b),b.params.watchSlidesProgress&&b.updateSlidesProgress(e),b.emit("onProgress",b,b.progress)},b.updateActiveIndex=function(){var e,t,n,i=b.rtl?b.translate:-b.translate;for(t=0;t<b.slidesGrid.length;t++)void 0!==b.slidesGrid[t+1]?i>=b.slidesGrid[t]&&i<b.slidesGrid[t+1]-(b.slidesGrid[t+1]-b.slidesGrid[t])/2?e=t:i>=b.slidesGrid[t]&&i<b.slidesGrid[t+1]&&(e=t+1):i>=b.slidesGrid[t]&&(e=t);b.params.normalizeSlideIndex&&(e<0||void 0===e)&&(e=0),(n=Math.floor(e/b.params.slidesPerGroup))>=b.snapGrid.length&&(n=b.snapGrid.length-1),e!==b.activeIndex&&(b.snapIndex=n,b.previousIndex=b.activeIndex,b.activeIndex=e,b.updateClasses(),b.updateRealIndex())},b.updateRealIndex=function(){b.realIndex=parseInt(b.slides.eq(b.activeIndex).attr("data-swiper-slide-index")||b.activeIndex,10)},b.updateClasses=function(){b.slides.removeClass(b.params.slideActiveClass+" "+b.params.slideNextClass+" "+b.params.slidePrevClass+" "+b.params.slideDuplicateActiveClass+" "+b.params.slideDuplicateNextClass+" "+b.params.slideDuplicatePrevClass);var t=b.slides.eq(b.activeIndex);t.addClass(b.params.slideActiveClass),i.loop&&(t.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+b.realIndex+'"]').addClass(b.params.slideDuplicateActiveClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+b.realIndex+'"]').addClass(b.params.slideDuplicateActiveClass));var n=t.next("."+b.params.slideClass).addClass(b.params.slideNextClass);b.params.loop&&0===n.length&&(n=b.slides.eq(0)).addClass(b.params.slideNextClass);var a=t.prev("."+b.params.slideClass).addClass(b.params.slidePrevClass);if(b.params.loop&&0===a.length&&(a=b.slides.eq(-1)).addClass(b.params.slidePrevClass),i.loop&&(n.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicateNextClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicateNextClass),a.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+a.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicatePrevClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+a.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicatePrevClass)),b.paginationContainer&&b.paginationContainer.length>0){var r,s=b.params.loop?Math.ceil((b.slides.length-2*b.loopedSlides)/b.params.slidesPerGroup):b.snapGrid.length;if(b.params.loop?((r=Math.ceil((b.activeIndex-b.loopedSlides)/b.params.slidesPerGroup))>b.slides.length-1-2*b.loopedSlides&&(r-=b.slides.length-2*b.loopedSlides),r>s-1&&(r-=s),r<0&&"bullets"!==b.params.paginationType&&(r=s+r)):r=void 0!==b.snapIndex?b.snapIndex:b.activeIndex||0,"bullets"===b.params.paginationType&&b.bullets&&b.bullets.length>0&&(b.bullets.removeClass(b.params.bulletActiveClass),b.paginationContainer.length>1?b.bullets.each(function(){e(this).index()===r&&e(this).addClass(b.params.bulletActiveClass)}):b.bullets.eq(r).addClass(b.params.bulletActiveClass)),"fraction"===b.params.paginationType&&(b.paginationContainer.find("."+b.params.paginationCurrentClass).text(r+1),b.paginationContainer.find("."+b.params.paginationTotalClass).text(s)),"progress"===b.params.paginationType){var o=(r+1)/s,l=o,u=1;b.isHorizontal()||(u=o,l=1),b.paginationContainer.find("."+b.params.paginationProgressbarClass).transform("translate3d(0,0,0) scaleX("+l+") scaleY("+u+")").transition(b.params.speed)}"custom"===b.params.paginationType&&b.params.paginationCustomRender&&(b.paginationContainer.html(b.params.paginationCustomRender(b,r+1,s)),b.emit("onPaginationRendered",b,b.paginationContainer[0]))}b.params.loop||(b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.isBeginning?(b.prevButton.addClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.disable(b.prevButton)):(b.prevButton.removeClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.enable(b.prevButton))),b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.isEnd?(b.nextButton.addClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.disable(b.nextButton)):(b.nextButton.removeClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.enable(b.nextButton))))},b.updatePagination=function(){if(b.params.pagination&&b.paginationContainer&&b.paginationContainer.length>0){var e="";if("bullets"===b.params.paginationType){for(var t=b.params.loop?Math.ceil((b.slides.length-2*b.loopedSlides)/b.params.slidesPerGroup):b.snapGrid.length,n=0;n<t;n++)b.params.paginationBulletRender?e+=b.params.paginationBulletRender(b,n,b.params.bulletClass):e+="<"+b.params.paginationElement+' class="'+b.params.bulletClass+'"></'+b.params.paginationElement+">";b.paginationContainer.html(e),b.bullets=b.paginationContainer.find("."+b.params.bulletClass),b.params.paginationClickable&&b.params.a11y&&b.a11y&&b.a11y.initPagination()}"fraction"===b.params.paginationType&&(e=b.params.paginationFractionRender?b.params.paginationFractionRender(b,b.params.paginationCurrentClass,b.params.paginationTotalClass):'<span class="'+b.params.paginationCurrentClass+'"></span> / <span class="'+b.params.paginationTotalClass+'"></span>',b.paginationContainer.html(e)),"progress"===b.params.paginationType&&(e=b.params.paginationProgressRender?b.params.paginationProgressRender(b,b.params.paginationProgressbarClass):'<span class="'+b.params.paginationProgressbarClass+'"></span>',b.paginationContainer.html(e)),"custom"!==b.params.paginationType&&b.emit("onPaginationRendered",b,b.paginationContainer[0])}},b.update=function(e){function t(){b.rtl,b.translate;n=Math.min(Math.max(b.translate,b.maxTranslate()),b.minTranslate()),b.setWrapperTranslate(n),b.updateActiveIndex(),b.updateClasses()}if(b){b.updateContainerSize(),b.updateSlidesSize(),b.updateProgress(),b.updatePagination(),b.updateClasses(),b.params.scrollbar&&b.scrollbar&&b.scrollbar.set();var n;if(e){b.controller&&b.controller.spline&&(b.controller.spline=void 0),b.params.freeMode?(t(),b.params.autoHeight&&b.updateAutoHeight()):(("auto"===b.params.slidesPerView||b.params.slidesPerView>1)&&b.isEnd&&!b.params.centeredSlides?b.slideTo(b.slides.length-1,0,!1,!0):b.slideTo(b.activeIndex,0,!1,!0))||t()}else b.params.autoHeight&&b.updateAutoHeight()}},b.onResize=function(e){b.params.onBeforeResize&&b.params.onBeforeResize(b),b.params.breakpoints&&b.setBreakpoint();var t=b.params.allowSwipeToPrev,n=b.params.allowSwipeToNext;b.params.allowSwipeToPrev=b.params.allowSwipeToNext=!0,b.updateContainerSize(),b.updateSlidesSize(),("auto"===b.params.slidesPerView||b.params.freeMode||e)&&b.updatePagination(),b.params.scrollbar&&b.scrollbar&&b.scrollbar.set(),b.controller&&b.controller.spline&&(b.controller.spline=void 0);var i=!1;if(b.params.freeMode){var a=Math.min(Math.max(b.translate,b.maxTranslate()),b.minTranslate());b.setWrapperTranslate(a),b.updateActiveIndex(),b.updateClasses(),b.params.autoHeight&&b.updateAutoHeight()}else b.updateClasses(),i=("auto"===b.params.slidesPerView||b.params.slidesPerView>1)&&b.isEnd&&!b.params.centeredSlides?b.slideTo(b.slides.length-1,0,!1,!0):b.slideTo(b.activeIndex,0,!1,!0);b.params.lazyLoading&&!i&&b.lazy&&b.lazy.load(),b.params.allowSwipeToPrev=t,b.params.allowSwipeToNext=n,b.params.onAfterResize&&b.params.onAfterResize(b)},b.touchEventsDesktop={start:"mousedown",move:"mousemove",end:"mouseup"},window.navigator.pointerEnabled?b.touchEventsDesktop={start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled&&(b.touchEventsDesktop={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}),b.touchEvents={start:b.support.touch||!b.params.simulateTouch?"touchstart":b.touchEventsDesktop.start,move:b.support.touch||!b.params.simulateTouch?"touchmove":b.touchEventsDesktop.move,end:b.support.touch||!b.params.simulateTouch?"touchend":b.touchEventsDesktop.end},(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&("container"===b.params.touchEventsTarget?b.container:b.wrapper).addClass("swiper-wp8-"+b.params.direction),b.initEvents=function(e){var t=e?"off":"on",n=e?"removeEventListener":"addEventListener",a="container"===b.params.touchEventsTarget?b.container[0]:b.wrapper[0],r=b.support.touch?a:document,s=!!b.params.nested;if(b.browser.ie)a[n](b.touchEvents.start,b.onTouchStart,!1),r[n](b.touchEvents.move,b.onTouchMove,s),r[n](b.touchEvents.end,b.onTouchEnd,!1);else{if(b.support.touch){var o=!("touchstart"!==b.touchEvents.start||!b.support.passiveListener||!b.params.passiveListeners)&&{passive:!0,capture:!1};a[n](b.touchEvents.start,b.onTouchStart,o),a[n](b.touchEvents.move,b.onTouchMove,s),a[n](b.touchEvents.end,b.onTouchEnd,o)}(i.simulateTouch&&!b.device.ios&&!b.device.android||i.simulateTouch&&!b.support.touch&&b.device.ios)&&(a[n]("mousedown",b.onTouchStart,!1),document[n]("mousemove",b.onTouchMove,s),document[n]("mouseup",b.onTouchEnd,!1))}window[n]("resize",b.onResize),b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.nextButton[t]("click",b.onClickNext),b.params.a11y&&b.a11y&&b.nextButton[t]("keydown",b.a11y.onEnterKey)),b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.prevButton[t]("click",b.onClickPrev),b.params.a11y&&b.a11y&&b.prevButton[t]("keydown",b.a11y.onEnterKey)),b.params.pagination&&b.params.paginationClickable&&(b.paginationContainer[t]("click","."+b.params.bulletClass,b.onClickIndex),b.params.a11y&&b.a11y&&b.paginationContainer[t]("keydown","."+b.params.bulletClass,b.a11y.onEnterKey)),(b.params.preventClicks||b.params.preventClicksPropagation)&&a[n]("click",b.preventClicks,!0)},b.attachEvents=function(){b.initEvents()},b.detachEvents=function(){b.initEvents(!0)},b.allowClick=!0,b.preventClicks=function(e){b.allowClick||(b.params.preventClicks&&e.preventDefault(),b.params.preventClicksPropagation&&b.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))},b.onClickNext=function(e){e.preventDefault(),b.isEnd&&!b.params.loop||b.slideNext()},b.onClickPrev=function(e){e.preventDefault(),b.isBeginning&&!b.params.loop||b.slidePrev()},b.onClickIndex=function(t){t.preventDefault();var n=e(this).index()*b.params.slidesPerGroup;b.params.loop&&(n+=b.loopedSlides),b.slideTo(n)},b.updateClickedSlide=function(t){var n=s(t,"."+b.params.slideClass),i=!1;if(n)for(var a=0;a<b.slides.length;a++)b.slides[a]===n&&(i=!0);if(!n||!i)return b.clickedSlide=void 0,void(b.clickedIndex=void 0);if(b.clickedSlide=n,b.clickedIndex=e(n).index(),b.params.slideToClickedSlide&&void 0!==b.clickedIndex&&b.clickedIndex!==b.activeIndex){var r,o=b.clickedIndex,l="auto"===b.params.slidesPerView?b.currentSlidesPerView():b.params.slidesPerView;if(b.params.loop){if(b.animating)return;r=parseInt(e(b.clickedSlide).attr("data-swiper-slide-index"),10),b.params.centeredSlides?o<b.loopedSlides-l/2||o>b.slides.length-b.loopedSlides+l/2?(b.fixLoop(),o=b.wrapper.children("."+b.params.slideClass+'[data-swiper-slide-index="'+r+'"]:not(.'+b.params.slideDuplicateClass+")").eq(0).index(),setTimeout(function(){b.slideTo(o)},0)):b.slideTo(o):o>b.slides.length-l?(b.fixLoop(),o=b.wrapper.children("."+b.params.slideClass+'[data-swiper-slide-index="'+r+'"]:not(.'+b.params.slideDuplicateClass+")").eq(0).index(),setTimeout(function(){b.slideTo(o)},0)):b.slideTo(o)}else b.slideTo(o)}};var C,T,S,k,M,_,D,E,P,z,I="input, select, textarea, button, video",A=Date.now(),O=[];b.animating=!1,b.touches={startX:0,startY:0,currentX:0,currentY:0,diff:0};var L,R;b.onTouchStart=function(t){if(t.originalEvent&&(t=t.originalEvent),(L="touchstart"===t.type)||!("which"in t)||3!==t.which)if(b.params.noSwiping&&s(t,"."+b.params.noSwipingClass))b.allowClick=!0;else if(!b.params.swipeHandler||s(t,b.params.swipeHandler)){var n=b.touches.currentX="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,i=b.touches.currentY="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY;if(!(b.device.ios&&b.params.iOSEdgeSwipeDetection&&n<=b.params.iOSEdgeSwipeThreshold)){if(C=!0,T=!1,S=!0,M=void 0,R=void 0,b.touches.startX=n,b.touches.startY=i,k=Date.now(),b.allowClick=!0,b.updateContainerSize(),b.swipeDirection=void 0,b.params.threshold>0&&(E=!1),"touchstart"!==t.type){var a=!0;e(t.target).is(I)&&(a=!1),document.activeElement&&e(document.activeElement).is(I)&&document.activeElement.blur(),a&&t.preventDefault()}b.emit("onTouchStart",b,t)}}},b.onTouchMove=function(t){if(t.originalEvent&&(t=t.originalEvent),!L||"mousemove"!==t.type){if(t.preventedByNestedSwiper)return b.touches.startX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,void(b.touches.startY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY);if(b.params.onlyExternal)return b.allowClick=!1,void(C&&(b.touches.startX=b.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,b.touches.startY=b.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,k=Date.now()));if(L&&b.params.touchReleaseOnEdges&&!b.params.loop)if(b.isHorizontal()){if(b.touches.currentX<b.touches.startX&&b.translate<=b.maxTranslate()||b.touches.currentX>b.touches.startX&&b.translate>=b.minTranslate())return}else if(b.touches.currentY<b.touches.startY&&b.translate<=b.maxTranslate()||b.touches.currentY>b.touches.startY&&b.translate>=b.minTranslate())return;if(L&&document.activeElement&&t.target===document.activeElement&&e(t.target).is(I))return T=!0,void(b.allowClick=!1);if(S&&b.emit("onTouchMove",b,t),!(t.targetTouches&&t.targetTouches.length>1)){if(b.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,b.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,void 0===M){var n;b.isHorizontal()&&b.touches.currentY===b.touches.startY||!b.isHorizontal()&&b.touches.currentX===b.touches.startX?M=!1:(n=180*Math.atan2(Math.abs(b.touches.currentY-b.touches.startY),Math.abs(b.touches.currentX-b.touches.startX))/Math.PI,M=b.isHorizontal()?n>b.params.touchAngle:90-n>b.params.touchAngle)}if(M&&b.emit("onTouchMoveOpposite",b,t),void 0===R&&(b.touches.currentX===b.touches.startX&&b.touches.currentY===b.touches.startY||(R=!0)),C)if(M)C=!1;else if(R){b.allowClick=!1,b.emit("onSliderMove",b,t),t.preventDefault(),b.params.touchMoveStopPropagation&&!b.params.nested&&t.stopPropagation(),T||(i.loop&&b.fixLoop(),D=b.getWrapperTranslate(),b.setWrapperTransition(0),b.animating&&b.wrapper.trigger("webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd"),b.params.autoplay&&b.autoplaying&&(b.params.autoplayDisableOnInteraction?b.stopAutoplay():b.pauseAutoplay()),z=!1,!b.params.grabCursor||!0!==b.params.allowSwipeToNext&&!0!==b.params.allowSwipeToPrev||b.setGrabCursor(!0)),T=!0;var a=b.touches.diff=b.isHorizontal()?b.touches.currentX-b.touches.startX:b.touches.currentY-b.touches.startY;a*=b.params.touchRatio,b.rtl&&(a=-a),b.swipeDirection=a>0?"prev":"next",_=a+D;var r=!0;if(a>0&&_>b.minTranslate()?(r=!1,b.params.resistance&&(_=b.minTranslate()-1+Math.pow(-b.minTranslate()+D+a,b.params.resistanceRatio))):a<0&&_<b.maxTranslate()&&(r=!1,b.params.resistance&&(_=b.maxTranslate()+1-Math.pow(b.maxTranslate()-D-a,b.params.resistanceRatio))),r&&(t.preventedByNestedSwiper=!0),!b.params.allowSwipeToNext&&"next"===b.swipeDirection&&_<D&&(_=D),!b.params.allowSwipeToPrev&&"prev"===b.swipeDirection&&_>D&&(_=D),b.params.threshold>0){if(!(Math.abs(a)>b.params.threshold||E))return void(_=D);if(!E)return E=!0,b.touches.startX=b.touches.currentX,b.touches.startY=b.touches.currentY,_=D,void(b.touches.diff=b.isHorizontal()?b.touches.currentX-b.touches.startX:b.touches.currentY-b.touches.startY)}b.params.followFinger&&((b.params.freeMode||b.params.watchSlidesProgress)&&b.updateActiveIndex(),b.params.freeMode&&(0===O.length&&O.push({position:b.touches[b.isHorizontal()?"startX":"startY"],time:k}),O.push({position:b.touches[b.isHorizontal()?"currentX":"currentY"],time:(new window.Date).getTime()})),b.updateProgress(_),b.setWrapperTranslate(_))}}}},b.onTouchEnd=function(t){if(t.originalEvent&&(t=t.originalEvent),S&&b.emit("onTouchEnd",b,t),S=!1,C){b.params.grabCursor&&T&&C&&(!0===b.params.allowSwipeToNext||!0===b.params.allowSwipeToPrev)&&b.setGrabCursor(!1);var n=Date.now(),i=n-k;if(b.allowClick&&(b.updateClickedSlide(t),b.emit("onTap",b,t),i<300&&n-A>300&&(P&&clearTimeout(P),P=setTimeout(function(){b&&(b.params.paginationHide&&b.paginationContainer.length>0&&!e(t.target).hasClass(b.params.bulletClass)&&b.paginationContainer.toggleClass(b.params.paginationHiddenClass),b.emit("onClick",b,t))},300)),i<300&&n-A<300&&(P&&clearTimeout(P),b.emit("onDoubleTap",b,t))),A=Date.now(),setTimeout(function(){b&&(b.allowClick=!0)},0),C&&T&&b.swipeDirection&&0!==b.touches.diff&&_!==D){C=T=!1;var a;if(a=b.params.followFinger?b.rtl?b.translate:-b.translate:-_,b.params.freeMode){if(a<-b.minTranslate())return void b.slideTo(b.activeIndex);if(a>-b.maxTranslate())return void(b.slides.length<b.snapGrid.length?b.slideTo(b.snapGrid.length-1):b.slideTo(b.slides.length-1));if(b.params.freeModeMomentum){if(O.length>1){var r=O.pop(),s=O.pop(),o=r.position-s.position,l=r.time-s.time;b.velocity=o/l,b.velocity=b.velocity/2,Math.abs(b.velocity)<b.params.freeModeMinimumVelocity&&(b.velocity=0),(l>150||(new window.Date).getTime()-r.time>300)&&(b.velocity=0)}else b.velocity=0;b.velocity=b.velocity*b.params.freeModeMomentumVelocityRatio,O.length=0;var u=1e3*b.params.freeModeMomentumRatio,c=b.velocity*u,d=b.translate+c;b.rtl&&(d=-d);var h,p=!1,f=20*Math.abs(b.velocity)*b.params.freeModeMomentumBounceRatio;if(d<b.maxTranslate())b.params.freeModeMomentumBounce?(d+b.maxTranslate()<-f&&(d=b.maxTranslate()-f),h=b.maxTranslate(),p=!0,z=!0):d=b.maxTranslate();else if(d>b.minTranslate())b.params.freeModeMomentumBounce?(d-b.minTranslate()>f&&(d=b.minTranslate()+f),h=b.minTranslate(),p=!0,z=!0):d=b.minTranslate();else if(b.params.freeModeSticky){var m,g=0;for(g=0;g<b.snapGrid.length;g+=1)if(b.snapGrid[g]>-d){m=g;break}d=Math.abs(b.snapGrid[m]-d)<Math.abs(b.snapGrid[m-1]-d)||"next"===b.swipeDirection?b.snapGrid[m]:b.snapGrid[m-1],b.rtl||(d=-d)}if(0!==b.velocity)u=b.rtl?Math.abs((-d-b.translate)/b.velocity):Math.abs((d-b.translate)/b.velocity);else if(b.params.freeModeSticky)return void b.slideReset();b.params.freeModeMomentumBounce&&p?(b.updateProgress(h),b.setWrapperTransition(u),b.setWrapperTranslate(d),b.onTransitionStart(),b.animating=!0,b.wrapper.transitionEnd(function(){b&&z&&(b.emit("onMomentumBounce",b),b.setWrapperTransition(b.params.speed),b.setWrapperTranslate(h),b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd()}))})):b.velocity?(b.updateProgress(d),b.setWrapperTransition(u),b.setWrapperTranslate(d),b.onTransitionStart(),b.animating||(b.animating=!0,b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd()}))):b.updateProgress(d),b.updateActiveIndex()}(!b.params.freeModeMomentum||i>=b.params.longSwipesMs)&&(b.updateProgress(),b.updateActiveIndex())}else{var v,y=0,w=b.slidesSizesGrid[0];for(v=0;v<b.slidesGrid.length;v+=b.params.slidesPerGroup)void 0!==b.slidesGrid[v+b.params.slidesPerGroup]?a>=b.slidesGrid[v]&&a<b.slidesGrid[v+b.params.slidesPerGroup]&&(y=v,w=b.slidesGrid[v+b.params.slidesPerGroup]-b.slidesGrid[v]):a>=b.slidesGrid[v]&&(y=v,w=b.slidesGrid[b.slidesGrid.length-1]-b.slidesGrid[b.slidesGrid.length-2]);var x=(a-b.slidesGrid[y])/w;if(i>b.params.longSwipesMs){if(!b.params.longSwipes)return void b.slideTo(b.activeIndex);"next"===b.swipeDirection&&(x>=b.params.longSwipesRatio?b.slideTo(y+b.params.slidesPerGroup):b.slideTo(y)),"prev"===b.swipeDirection&&(x>1-b.params.longSwipesRatio?b.slideTo(y+b.params.slidesPerGroup):b.slideTo(y))}else{if(!b.params.shortSwipes)return void b.slideTo(b.activeIndex);"next"===b.swipeDirection&&b.slideTo(y+b.params.slidesPerGroup),"prev"===b.swipeDirection&&b.slideTo(y)}}}else C=T=!1}},b._slideTo=function(e,t){return b.slideTo(e,t,!0,!0)},b.slideTo=function(e,t,n,i){void 0===n&&(n=!0),void 0===e&&(e=0),e<0&&(e=0),b.snapIndex=Math.floor(e/b.params.slidesPerGroup),b.snapIndex>=b.snapGrid.length&&(b.snapIndex=b.snapGrid.length-1);var a=-b.snapGrid[b.snapIndex];if(b.params.autoplay&&b.autoplaying&&(i||!b.params.autoplayDisableOnInteraction?b.pauseAutoplay(t):b.stopAutoplay()),b.updateProgress(a),b.params.normalizeSlideIndex)for(var r=0;r<b.slidesGrid.length;r++)-Math.floor(100*a)>=Math.floor(100*b.slidesGrid[r])&&(e=r);return!(!b.params.allowSwipeToNext&&a<b.translate&&a<b.minTranslate())&&(!(!b.params.allowSwipeToPrev&&a>b.translate&&a>b.maxTranslate()&&(b.activeIndex||0)!==e)&&(void 0===t&&(t=b.params.speed),b.previousIndex=b.activeIndex||0,b.activeIndex=e,b.updateRealIndex(),b.rtl&&-a===b.translate||!b.rtl&&a===b.translate?(b.params.autoHeight&&b.updateAutoHeight(),b.updateClasses(),"slide"!==b.params.effect&&b.setWrapperTranslate(a),!1):(b.updateClasses(),b.onTransitionStart(n),0===t||b.browser.lteIE9?(b.setWrapperTranslate(a),b.setWrapperTransition(0),b.onTransitionEnd(n)):(b.setWrapperTranslate(a),b.setWrapperTransition(t),b.animating||(b.animating=!0,b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd(n)}))),!0)))},b.onTransitionStart=function(e){void 0===e&&(e=!0),b.params.autoHeight&&b.updateAutoHeight(),b.lazy&&b.lazy.onTransitionStart(),e&&(b.emit("onTransitionStart",b),b.activeIndex!==b.previousIndex&&(b.emit("onSlideChangeStart",b),b.activeIndex>b.previousIndex?b.emit("onSlideNextStart",b):b.emit("onSlidePrevStart",b)))},b.onTransitionEnd=function(e){b.animating=!1,b.setWrapperTransition(0),void 0===e&&(e=!0),b.lazy&&b.lazy.onTransitionEnd(),e&&(b.emit("onTransitionEnd",b),b.activeIndex!==b.previousIndex&&(b.emit("onSlideChangeEnd",b),b.activeIndex>b.previousIndex?b.emit("onSlideNextEnd",b):b.emit("onSlidePrevEnd",b))),b.params.history&&b.history&&b.history.setHistory(b.params.history,b.activeIndex),b.params.hashnav&&b.hashnav&&b.hashnav.setHash()},b.slideNext=function(e,t,n){if(b.params.loop){if(b.animating)return!1;b.fixLoop();b.container[0].clientLeft;return b.slideTo(b.activeIndex+b.params.slidesPerGroup,t,e,n)}return b.slideTo(b.activeIndex+b.params.slidesPerGroup,t,e,n)},b._slideNext=function(e){return b.slideNext(!0,e,!0)},b.slidePrev=function(e,t,n){if(b.params.loop){if(b.animating)return!1;b.fixLoop();b.container[0].clientLeft;return b.slideTo(b.activeIndex-1,t,e,n)}return b.slideTo(b.activeIndex-1,t,e,n)},b._slidePrev=function(e){return b.slidePrev(!0,e,!0)},b.slideReset=function(e,t,n){return b.slideTo(b.activeIndex,t,e)},b.disableTouchControl=function(){return b.params.onlyExternal=!0,!0},b.enableTouchControl=function(){return b.params.onlyExternal=!1,!0},b.setWrapperTransition=function(e,t){b.wrapper.transition(e),"slide"!==b.params.effect&&b.effects[b.params.effect]&&b.effects[b.params.effect].setTransition(e),b.params.parallax&&b.parallax&&b.parallax.setTransition(e),b.params.scrollbar&&b.scrollbar&&b.scrollbar.setTransition(e),b.params.control&&b.controller&&b.controller.setTransition(e,t),b.emit("onSetTransition",b,e)},b.setWrapperTranslate=function(e,t,n){var i=0,r=0;b.isHorizontal()?i=b.rtl?-e:e:r=e,b.params.roundLengths&&(i=a(i),r=a(r)),b.params.virtualTranslate||(b.support.transforms3d?b.wrapper.transform("translate3d("+i+"px, "+r+"px, 0px)"):b.wrapper.transform("translate("+i+"px, "+r+"px)")),b.translate=b.isHorizontal()?i:r;var s=b.maxTranslate()-b.minTranslate();(0===s?0:(e-b.minTranslate())/s)!==b.progress&&b.updateProgress(e),t&&b.updateActiveIndex(),"slide"!==b.params.effect&&b.effects[b.params.effect]&&b.effects[b.params.effect].setTranslate(b.translate),b.params.parallax&&b.parallax&&b.parallax.setTranslate(b.translate),b.params.scrollbar&&b.scrollbar&&b.scrollbar.setTranslate(b.translate),b.params.control&&b.controller&&b.controller.setTranslate(b.translate,n),b.emit("onSetTranslate",b,b.translate)},b.getTranslate=function(e,t){var n,i,a,r;return void 0===t&&(t="x"),b.params.virtualTranslate?b.rtl?-b.translate:b.translate:(a=window.getComputedStyle(e,null),window.WebKitCSSMatrix?((i=a.transform||a.webkitTransform).split(",").length>6&&(i=i.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),r=new window.WebKitCSSMatrix("none"===i?"":i)):n=(r=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(i=window.WebKitCSSMatrix?r.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(i=window.WebKitCSSMatrix?r.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),b.rtl&&i&&(i=-i),i||0)},b.getWrapperTranslate=function(e){return void 0===e&&(e=b.isHorizontal()?"x":"y"),b.getTranslate(b.wrapper[0],e)},b.observers=[],b.initObservers=function(){if(b.params.observeParents)for(var e=b.container.parents(),t=0;t<e.length;t++)o(e[t]);o(b.container[0],{childList:!1}),o(b.wrapper[0],{attributes:!1})},b.disconnectObservers=function(){for(var e=0;e<b.observers.length;e++)b.observers[e].disconnect();b.observers=[]},b.createLoop=function(){b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass).remove();var t=b.wrapper.children("."+b.params.slideClass);"auto"!==b.params.slidesPerView||b.params.loopedSlides||(b.params.loopedSlides=t.length),b.loopedSlides=parseInt(b.params.loopedSlides||b.params.slidesPerView,10),b.loopedSlides=b.loopedSlides+b.params.loopAdditionalSlides,b.loopedSlides>t.length&&(b.loopedSlides=t.length);var n,i=[],a=[];for(t.each(function(n,r){var s=e(this);n<b.loopedSlides&&a.push(r),n<t.length&&n>=t.length-b.loopedSlides&&i.push(r),s.attr("data-swiper-slide-index",n)}),n=0;n<a.length;n++)b.wrapper.append(e(a[n].cloneNode(!0)).addClass(b.params.slideDuplicateClass));for(n=i.length-1;n>=0;n--)b.wrapper.prepend(e(i[n].cloneNode(!0)).addClass(b.params.slideDuplicateClass))},b.destroyLoop=function(){b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass).remove(),b.slides.removeAttr("data-swiper-slide-index")},b.reLoop=function(e){var t=b.activeIndex-b.loopedSlides;b.destroyLoop(),b.createLoop(),b.updateSlidesSize(),e&&b.slideTo(t+b.loopedSlides,0,!1)},b.fixLoop=function(){var e;b.activeIndex<b.loopedSlides?(e=b.slides.length-3*b.loopedSlides+b.activeIndex,e+=b.loopedSlides,b.slideTo(e,0,!1,!0)):("auto"===b.params.slidesPerView&&b.activeIndex>=2*b.loopedSlides||b.activeIndex>b.slides.length-2*b.params.slidesPerView)&&(e=-b.slides.length+b.activeIndex+b.loopedSlides,e+=b.loopedSlides,b.slideTo(e,0,!1,!0))},b.appendSlide=function(e){if(b.params.loop&&b.destroyLoop(),"object"==typeof e&&e.length)for(var t=0;t<e.length;t++)e[t]&&b.wrapper.append(e[t]);else b.wrapper.append(e);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0)},b.prependSlide=function(e){b.params.loop&&b.destroyLoop();var t=b.activeIndex+1;if("object"==typeof e&&e.length){for(var n=0;n<e.length;n++)e[n]&&b.wrapper.prepend(e[n]);t=b.activeIndex+e.length}else b.wrapper.prepend(e);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0),b.slideTo(t,0,!1)},b.removeSlide=function(e){b.params.loop&&(b.destroyLoop(),b.slides=b.wrapper.children("."+b.params.slideClass));var t,n=b.activeIndex;if("object"==typeof e&&e.length){for(var i=0;i<e.length;i++)t=e[i],b.slides[t]&&b.slides.eq(t).remove(),t<n&&n--;n=Math.max(n,0)}else t=e,b.slides[t]&&b.slides.eq(t).remove(),t<n&&n--,n=Math.max(n,0);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0),b.params.loop?b.slideTo(n+b.loopedSlides,0,!1):b.slideTo(n,0,!1)},b.removeAllSlides=function(){for(var e=[],t=0;t<b.slides.length;t++)e.push(t);b.removeSlide(e)},b.effects={fade:{setTranslate:function(){for(var e=0;e<b.slides.length;e++){var t=b.slides.eq(e),n=-t[0].swiperSlideOffset;b.params.virtualTranslate||(n-=b.translate);var i=0;b.isHorizontal()||(i=n,n=0);var a=b.params.fade.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:a}).transform("translate3d("+n+"px, "+i+"px, 0px)")}},setTransition:function(e){if(b.slides.transition(e),b.params.virtualTranslate&&0!==e){var t=!1;b.slides.transitionEnd(function(){if(!t&&b){t=!0,b.animating=!1;for(var e=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],n=0;n<e.length;n++)b.wrapper.trigger(e[n])}})}}},flip:{setTranslate:function(){for(var t=0;t<b.slides.length;t++){var n=b.slides.eq(t),i=n[0].progress;b.params.flip.limitRotation&&(i=Math.max(Math.min(n[0].progress,1),-1));var a=-180*i,r=0,s=-n[0].swiperSlideOffset,o=0;if(b.isHorizontal()?b.rtl&&(a=-a):(o=s,s=0,r=-a,a=0),n[0].style.zIndex=-Math.abs(Math.round(i))+b.slides.length,b.params.flip.slideShadows){var l=b.isHorizontal()?n.find(".swiper-slide-shadow-left"):n.find(".swiper-slide-shadow-top"),u=b.isHorizontal()?n.find(".swiper-slide-shadow-right"):n.find(".swiper-slide-shadow-bottom");0===l.length&&(l=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),n.append(l)),0===u.length&&(u=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),n.append(u)),l.length&&(l[0].style.opacity=Math.max(-i,0)),u.length&&(u[0].style.opacity=Math.max(i,0))}n.transform("translate3d("+s+"px, "+o+"px, 0px) rotateX("+r+"deg) rotateY("+a+"deg)")}},setTransition:function(t){if(b.slides.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t),b.params.virtualTranslate&&0!==t){var n=!1;b.slides.eq(b.activeIndex).transitionEnd(function(){if(!n&&b&&e(this).hasClass(b.params.slideActiveClass)){n=!0,b.animating=!1;for(var t=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],i=0;i<t.length;i++)b.wrapper.trigger(t[i])}})}}},cube:{setTranslate:function(){var t,n=0;b.params.cube.shadow&&(b.isHorizontal()?(0===(t=b.wrapper.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),b.wrapper.append(t)),t.css({height:b.width+"px"})):0===(t=b.container.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),b.container.append(t)));for(var i=0;i<b.slides.length;i++){var a=b.slides.eq(i),r=90*i,s=Math.floor(r/360);b.rtl&&(r=-r,s=Math.floor(-r/360));var o=Math.max(Math.min(a[0].progress,1),-1),l=0,u=0,c=0;i%4==0?(l=4*-s*b.size,c=0):(i-1)%4==0?(l=0,c=4*-s*b.size):(i-2)%4==0?(l=b.size+4*s*b.size,c=b.size):(i-3)%4==0&&(l=-b.size,c=3*b.size+4*b.size*s),b.rtl&&(l=-l),b.isHorizontal()||(u=l,l=0);var d="rotateX("+(b.isHorizontal()?0:-r)+"deg) rotateY("+(b.isHorizontal()?r:0)+"deg) translate3d("+l+"px, "+u+"px, "+c+"px)";if(o<=1&&o>-1&&(n=90*i+90*o,b.rtl&&(n=90*-i-90*o)),a.transform(d),b.params.cube.slideShadows){var h=b.isHorizontal()?a.find(".swiper-slide-shadow-left"):a.find(".swiper-slide-shadow-top"),p=b.isHorizontal()?a.find(".swiper-slide-shadow-right"):a.find(".swiper-slide-shadow-bottom");0===h.length&&(h=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),a.append(h)),0===p.length&&(p=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),a.append(p)),h.length&&(h[0].style.opacity=Math.max(-o,0)),p.length&&(p[0].style.opacity=Math.max(o,0))}}if(b.wrapper.css({"-webkit-transform-origin":"50% 50% -"+b.size/2+"px","-moz-transform-origin":"50% 50% -"+b.size/2+"px","-ms-transform-origin":"50% 50% -"+b.size/2+"px","transform-origin":"50% 50% -"+b.size/2+"px"}),b.params.cube.shadow)if(b.isHorizontal())t.transform("translate3d(0px, "+(b.width/2+b.params.cube.shadowOffset)+"px, "+-b.width/2+"px) rotateX(90deg) rotateZ(0deg) scale("+b.params.cube.shadowScale+")");else{var f=Math.abs(n)-90*Math.floor(Math.abs(n)/90),m=1.5-(Math.sin(2*f*Math.PI/360)/2+Math.cos(2*f*Math.PI/360)/2),g=b.params.cube.shadowScale,v=b.params.cube.shadowScale/m,y=b.params.cube.shadowOffset;t.transform("scale3d("+g+", 1, "+v+") translate3d(0px, "+(b.height/2+y)+"px, "+-b.height/2/v+"px) rotateX(-90deg)")}var w=b.isSafari||b.isUiWebView?-b.size/2:0;b.wrapper.transform("translate3d(0px,0,"+w+"px) rotateX("+(b.isHorizontal()?0:n)+"deg) rotateY("+(b.isHorizontal()?-n:0)+"deg)")},setTransition:function(e){b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),b.params.cube.shadow&&!b.isHorizontal()&&b.container.find(".swiper-cube-shadow").transition(e)}},coverflow:{setTranslate:function(){for(var t=b.translate,n=b.isHorizontal()?-t+b.width/2:-t+b.height/2,i=b.isHorizontal()?b.params.coverflow.rotate:-b.params.coverflow.rotate,a=b.params.coverflow.depth,r=0,s=b.slides.length;r<s;r++){var o=b.slides.eq(r),l=b.slidesSizesGrid[r],u=(n-o[0].swiperSlideOffset-l/2)/l*b.params.coverflow.modifier,c=b.isHorizontal()?i*u:0,d=b.isHorizontal()?0:i*u,h=-a*Math.abs(u),p=b.isHorizontal()?0:b.params.coverflow.stretch*u,f=b.isHorizontal()?b.params.coverflow.stretch*u:0;Math.abs(f)<.001&&(f=0),Math.abs(p)<.001&&(p=0),Math.abs(h)<.001&&(h=0),Math.abs(c)<.001&&(c=0),Math.abs(d)<.001&&(d=0);var m="translate3d("+f+"px,"+p+"px,"+h+"px)  rotateX("+d+"deg) rotateY("+c+"deg)";if(o.transform(m),o[0].style.zIndex=1-Math.abs(Math.round(u)),b.params.coverflow.slideShadows){var g=b.isHorizontal()?o.find(".swiper-slide-shadow-left"):o.find(".swiper-slide-shadow-top"),v=b.isHorizontal()?o.find(".swiper-slide-shadow-right"):o.find(".swiper-slide-shadow-bottom");0===g.length&&(g=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),o.append(g)),0===v.length&&(v=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),o.append(v)),g.length&&(g[0].style.opacity=u>0?u:0),v.length&&(v[0].style.opacity=-u>0?-u:0)}}b.browser.ie&&(b.wrapper[0].style.perspectiveOrigin=n+"px 50%")},setTransition:function(e){b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}}},b.lazy={initialImageLoaded:!1,loadImageInSlide:function(t,n){if(void 0!==t&&(void 0===n&&(n=!0),0!==b.slides.length)){var i=b.slides.eq(t),a=i.find("."+b.params.lazyLoadingClass+":not(."+b.params.lazyStatusLoadedClass+"):not(."+b.params.lazyStatusLoadingClass+")");!i.hasClass(b.params.lazyLoadingClass)||i.hasClass(b.params.lazyStatusLoadedClass)||i.hasClass(b.params.lazyStatusLoadingClass)||(a=a.add(i[0])),0!==a.length&&a.each(function(){var t=e(this);t.addClass(b.params.lazyStatusLoadingClass);var a=t.attr("data-background"),r=t.attr("data-src"),s=t.attr("data-srcset"),o=t.attr("data-sizes");b.loadImage(t[0],r||a,s,o,!1,function(){if(void 0!==b&&null!==b&&b){if(a?(t.css("background-image",'url("'+a+'")'),t.removeAttr("data-background")):(s&&(t.attr("srcset",s),t.removeAttr("data-srcset")),o&&(t.attr("sizes",o),t.removeAttr("data-sizes")),r&&(t.attr("src",r),t.removeAttr("data-src"))),t.addClass(b.params.lazyStatusLoadedClass).removeClass(b.params.lazyStatusLoadingClass),i.find("."+b.params.lazyPreloaderClass+", ."+b.params.preloaderClass).remove(),b.params.loop&&n){var e=i.attr("data-swiper-slide-index");if(i.hasClass(b.params.slideDuplicateClass)){var l=b.wrapper.children('[data-swiper-slide-index="'+e+'"]:not(.'+b.params.slideDuplicateClass+")");b.lazy.loadImageInSlide(l.index(),!1)}else{var u=b.wrapper.children("."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');b.lazy.loadImageInSlide(u.index(),!1)}}b.emit("onLazyImageReady",b,i[0],t[0])}}),b.emit("onLazyImageLoad",b,i[0],t[0])})}},load:function(){var t,n=b.params.slidesPerView;if("auto"===n&&(n=0),b.lazy.initialImageLoaded||(b.lazy.initialImageLoaded=!0),b.params.watchSlidesVisibility)b.wrapper.children("."+b.params.slideVisibleClass).each(function(){b.lazy.loadImageInSlide(e(this).index())});else if(n>1)for(t=b.activeIndex;t<b.activeIndex+n;t++)b.slides[t]&&b.lazy.loadImageInSlide(t);else b.lazy.loadImageInSlide(b.activeIndex);if(b.params.lazyLoadingInPrevNext)if(n>1||b.params.lazyLoadingInPrevNextAmount&&b.params.lazyLoadingInPrevNextAmount>1){var i=b.params.lazyLoadingInPrevNextAmount,a=n,r=Math.min(b.activeIndex+a+Math.max(i,a),b.slides.length),s=Math.max(b.activeIndex-Math.max(a,i),0);for(t=b.activeIndex+n;t<r;t++)b.slides[t]&&b.lazy.loadImageInSlide(t);for(t=s;t<b.activeIndex;t++)b.slides[t]&&b.lazy.loadImageInSlide(t)}else{var o=b.wrapper.children("."+b.params.slideNextClass);o.length>0&&b.lazy.loadImageInSlide(o.index());var l=b.wrapper.children("."+b.params.slidePrevClass);l.length>0&&b.lazy.loadImageInSlide(l.index())}},onTransitionStart:function(){b.params.lazyLoading&&(b.params.lazyLoadingOnTransitionStart||!b.params.lazyLoadingOnTransitionStart&&!b.lazy.initialImageLoaded)&&b.lazy.load()},onTransitionEnd:function(){b.params.lazyLoading&&!b.params.lazyLoadingOnTransitionStart&&b.lazy.load()}},b.scrollbar={isTouched:!1,setDragPosition:function(e){var t=b.scrollbar,n=(b.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY)-t.track.offset()[b.isHorizontal()?"left":"top"]-t.dragSize/2,i=-b.minTranslate()*t.moveDivider,a=-b.maxTranslate()*t.moveDivider;n<i?n=i:n>a&&(n=a),n=-n/t.moveDivider,b.updateProgress(n),b.setWrapperTranslate(n,!0)},dragStart:function(e){var t=b.scrollbar;t.isTouched=!0,e.preventDefault(),e.stopPropagation(),t.setDragPosition(e),clearTimeout(t.dragTimeout),t.track.transition(0),b.params.scrollbarHide&&t.track.css("opacity",1),b.wrapper.transition(100),t.drag.transition(100),b.emit("onScrollbarDragStart",b)},dragMove:function(e){var t=b.scrollbar;t.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),b.wrapper.transition(0),t.track.transition(0),t.drag.transition(0),b.emit("onScrollbarDragMove",b))},dragEnd:function(e){var t=b.scrollbar;t.isTouched&&(t.isTouched=!1,b.params.scrollbarHide&&(clearTimeout(t.dragTimeout),t.dragTimeout=setTimeout(function(){t.track.css("opacity",0),t.track.transition(400)},1e3)),b.emit("onScrollbarDragEnd",b),b.params.scrollbarSnapOnRelease&&b.slideReset())},draggableEvents:function(){return!1!==b.params.simulateTouch||b.support.touch?b.touchEvents:b.touchEventsDesktop}(),enableDraggable:function(){var t=b.scrollbar,n=b.support.touch?t.track:document;e(t.track).on(t.draggableEvents.start,t.dragStart),e(n).on(t.draggableEvents.move,t.dragMove),e(n).on(t.draggableEvents.end,t.dragEnd)},disableDraggable:function(){var t=b.scrollbar,n=b.support.touch?t.track:document;e(t.track).off(t.draggableEvents.start,t.dragStart),e(n).off(t.draggableEvents.move,t.dragMove),e(n).off(t.draggableEvents.end,t.dragEnd)},set:function(){if(b.params.scrollbar){var t=b.scrollbar;t.track=e(b.params.scrollbar),b.params.uniqueNavElements&&"string"==typeof b.params.scrollbar&&t.track.length>1&&1===b.container.find(b.params.scrollbar).length&&(t.track=b.container.find(b.params.scrollbar)),t.drag=t.track.find(".swiper-scrollbar-drag"),0===t.drag.length&&(t.drag=e('<div class="swiper-scrollbar-drag"></div>'),t.track.append(t.drag)),t.drag[0].style.width="",t.drag[0].style.height="",t.trackSize=b.isHorizontal()?t.track[0].offsetWidth:t.track[0].offsetHeight,t.divider=b.size/b.virtualSize,t.moveDivider=t.divider*(t.trackSize/b.size),t.dragSize=t.trackSize*t.divider,b.isHorizontal()?t.drag[0].style.width=t.dragSize+"px":t.drag[0].style.height=t.dragSize+"px",t.divider>=1?t.track[0].style.display="none":t.track[0].style.display="",b.params.scrollbarHide&&(t.track[0].style.opacity=0)}},setTranslate:function(){if(b.params.scrollbar){var e,t=b.scrollbar,n=(b.translate,t.dragSize);e=(t.trackSize-t.dragSize)*b.progress,b.rtl&&b.isHorizontal()?(e=-e)>0?(n=t.dragSize-e,e=0):-e+t.dragSize>t.trackSize&&(n=t.trackSize+e):e<0?(n=t.dragSize+e,e=0):e+t.dragSize>t.trackSize&&(n=t.trackSize-e),b.isHorizontal()?(b.support.transforms3d?t.drag.transform("translate3d("+e+"px, 0, 0)"):t.drag.transform("translateX("+e+"px)"),t.drag[0].style.width=n+"px"):(b.support.transforms3d?t.drag.transform("translate3d(0px, "+e+"px, 0)"):t.drag.transform("translateY("+e+"px)"),t.drag[0].style.height=n+"px"),b.params.scrollbarHide&&(clearTimeout(t.timeout),t.track[0].style.opacity=1,t.timeout=setTimeout(function(){t.track[0].style.opacity=0,t.track.transition(400)},1e3))}},setTransition:function(e){b.params.scrollbar&&b.scrollbar.drag.transition(e)}},b.controller={LinearSpline:function(e,t){var n=function(){var e,t,n;return function(i,a){for(t=-1,e=i.length;e-t>1;)i[n=e+t>>1]<=a?t=n:e=n;return e}}();this.x=e,this.y=t,this.lastIndex=e.length-1;var i,a;this.x.length;this.interpolate=function(e){return e?(a=n(this.x,e),i=a-1,(e-this.x[i])*(this.y[a]-this.y[i])/(this.x[a]-this.x[i])+this.y[i]):0}},getInterpolateFunction:function(e){b.controller.spline||(b.controller.spline=b.params.loop?new b.controller.LinearSpline(b.slidesGrid,e.slidesGrid):new b.controller.LinearSpline(b.snapGrid,e.snapGrid))},setTranslate:function(e,n){function i(t){e=t.rtl&&"horizontal"===t.params.direction?-b.translate:b.translate,"slide"===b.params.controlBy&&(b.controller.getInterpolateFunction(t),r=-b.controller.spline.interpolate(-e)),r&&"container"!==b.params.controlBy||(a=(t.maxTranslate()-t.minTranslate())/(b.maxTranslate()-b.minTranslate()),r=(e-b.minTranslate())*a+t.minTranslate()),b.params.controlInverse&&(r=t.maxTranslate()-r),t.updateProgress(r),t.setWrapperTranslate(r,!1,b),t.updateActiveIndex()}var a,r,s=b.params.control;if(Array.isArray(s))for(var o=0;o<s.length;o++)s[o]!==n&&s[o]instanceof t&&i(s[o]);else s instanceof t&&n!==s&&i(s)},setTransition:function(e,n){function i(t){t.setWrapperTransition(e,b),0!==e&&(t.onTransitionStart(),t.wrapper.transitionEnd(function(){r&&(t.params.loop&&"slide"===b.params.controlBy&&t.fixLoop(),t.onTransitionEnd())}))}var a,r=b.params.control;if(Array.isArray(r))for(a=0;a<r.length;a++)r[a]!==n&&r[a]instanceof t&&i(r[a]);else r instanceof t&&n!==r&&i(r)}},b.hashnav={onHashCange:function(e,t){var n=document.location.hash.replace("#","");n!==b.slides.eq(b.activeIndex).attr("data-hash")&&b.slideTo(b.wrapper.children("."+b.params.slideClass+'[data-hash="'+n+'"]').index())},attachEvents:function(t){var n=t?"off":"on";e(window)[n]("hashchange",b.hashnav.onHashCange)},setHash:function(){if(b.hashnav.initialized&&b.params.hashnav)if(b.params.replaceState&&window.history&&window.history.replaceState)window.history.replaceState(null,null,"#"+b.slides.eq(b.activeIndex).attr("data-hash")||"");else{var e=b.slides.eq(b.activeIndex),t=e.attr("data-hash")||e.attr("data-history");document.location.hash=t||""}},init:function(){if(b.params.hashnav&&!b.params.history){b.hashnav.initialized=!0;var e=document.location.hash.replace("#","");if(e)for(var t=0,n=b.slides.length;t<n;t++){var i=b.slides.eq(t);if((i.attr("data-hash")||i.attr("data-history"))===e&&!i.hasClass(b.params.slideDuplicateClass)){var a=i.index();b.slideTo(a,0,b.params.runCallbacksOnInit,!0)}}b.params.hashnavWatchState&&b.hashnav.attachEvents()}},destroy:function(){b.params.hashnavWatchState&&b.hashnav.attachEvents(!0)}},b.history={init:function(){if(b.params.history){if(!window.history||!window.history.pushState)return b.params.history=!1,void(b.params.hashnav=!0);b.history.initialized=!0,this.paths=this.getPathValues(),(this.paths.key||this.paths.value)&&(this.scrollToSlide(0,this.paths.value,b.params.runCallbacksOnInit),b.params.replaceState||window.addEventListener("popstate",this.setHistoryPopState))}},setHistoryPopState:function(){b.history.paths=b.history.getPathValues(),b.history.scrollToSlide(b.params.speed,b.history.paths.value,!1)},getPathValues:function(){var e=window.location.pathname.slice(1).split("/"),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){if(b.history.initialized&&b.params.history){var n=b.slides.eq(t),i=this.slugify(n.attr("data-history"));window.location.pathname.includes(e)||(i=e+"/"+i),b.params.replaceState?window.history.replaceState(null,null,i):window.history.pushState(null,null,i)}},slugify:function(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,n){if(t)for(var i=0,a=b.slides.length;i<a;i++){var r=b.slides.eq(i);if(this.slugify(r.attr("data-history"))===t&&!r.hasClass(b.params.slideDuplicateClass)){var s=r.index();b.slideTo(s,e,n)}}else b.slideTo(0,e,n)}},b.disableKeyboardControl=function(){b.params.keyboardControl=!1,e(document).off("keydown",l)},b.enableKeyboardControl=function(){b.params.keyboardControl=!0,e(document).on("keydown",l)},b.mousewheel={event:!1,lastScrollTime:(new window.Date).getTime()},b.params.mousewheelControl&&(b.mousewheel.event=navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e="onwheel"in document;if(!e){var t=document.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")&&(e=document.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel"),b.disableMousewheelControl=function(){if(!b.mousewheel.event)return!1;var t=b.container;return"container"!==b.params.mousewheelEventsTarged&&(t=e(b.params.mousewheelEventsTarged)),t.off(b.mousewheel.event,c),b.params.mousewheelControl=!1,!0},b.enableMousewheelControl=function(){if(!b.mousewheel.event)return!1;var t=b.container;return"container"!==b.params.mousewheelEventsTarged&&(t=e(b.params.mousewheelEventsTarged)),t.on(b.mousewheel.event,c),b.params.mousewheelControl=!0,!0},b.parallax={setTranslate:function(){b.container.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){d(this,b.progress)}),b.slides.each(function(){var t=e(this);t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){d(this,Math.min(Math.max(t[0].progress,-1),1))})})},setTransition:function(t){void 0===t&&(t=b.params.speed),b.container.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){var n=e(this),i=parseInt(n.attr("data-swiper-parallax-duration"),10)||t;0===t&&(i=0),n.transition(i)})}},b.zoom={scale:1,currentScale:1,isScaling:!1,gesture:{slide:void 0,slideWidth:void 0,slideHeight:void 0,image:void 0,imageWrap:void 0,zoomMax:b.params.zoomMax},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0},getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,n=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,a=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(i-t,2)+Math.pow(a-n,2))},onGestureStart:function(t){var n=b.zoom;if(!b.support.gestures){if("touchstart"!==t.type||"touchstart"===t.type&&t.targetTouches.length<2)return;n.gesture.scaleStart=n.getDistanceBetweenTouches(t)}n.gesture.slide&&n.gesture.slide.length||(n.gesture.slide=e(this),0===n.gesture.slide.length&&(n.gesture.slide=b.slides.eq(b.activeIndex)),n.gesture.image=n.gesture.slide.find("img, svg, canvas"),n.gesture.imageWrap=n.gesture.image.parent("."+b.params.zoomContainerClass),n.gesture.zoomMax=n.gesture.imageWrap.attr("data-swiper-zoom")||b.params.zoomMax,0!==n.gesture.imageWrap.length)?(n.gesture.image.transition(0),n.isScaling=!0):n.gesture.image=void 0},onGestureChange:function(e){var t=b.zoom;if(!b.support.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;t.gesture.scaleMove=t.getDistanceBetweenTouches(e)}t.gesture.image&&0!==t.gesture.image.length&&(b.support.gestures?t.scale=e.scale*t.currentScale:t.scale=t.gesture.scaleMove/t.gesture.scaleStart*t.currentScale,t.scale>t.gesture.zoomMax&&(t.scale=t.gesture.zoomMax-1+Math.pow(t.scale-t.gesture.zoomMax+1,.5)),t.scale<b.params.zoomMin&&(t.scale=b.params.zoomMin+1-Math.pow(b.params.zoomMin-t.scale+1,.5)),t.gesture.image.transform("translate3d(0,0,0) scale("+t.scale+")"))},onGestureEnd:function(e){var t=b.zoom;!b.support.gestures&&("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2)||t.gesture.image&&0!==t.gesture.image.length&&(t.scale=Math.max(Math.min(t.scale,t.gesture.zoomMax),b.params.zoomMin),t.gesture.image.transition(b.params.speed).transform("translate3d(0,0,0) scale("+t.scale+")"),t.currentScale=t.scale,t.isScaling=!1,1===t.scale&&(t.gesture.slide=void 0))},onTouchStart:function(e,t){var n=e.zoom;n.gesture.image&&0!==n.gesture.image.length&&(n.image.isTouched||("android"===e.device.os&&t.preventDefault(),n.image.isTouched=!0,n.image.touchesStart.x="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,n.image.touchesStart.y="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY))},onTouchMove:function(e){var t=b.zoom;if(t.gesture.image&&0!==t.gesture.image.length&&(b.allowClick=!1,t.image.isTouched&&t.gesture.slide)){t.image.isMoved||(t.image.width=t.gesture.image[0].offsetWidth,t.image.height=t.gesture.image[0].offsetHeight,t.image.startX=b.getTranslate(t.gesture.imageWrap[0],"x")||0,t.image.startY=b.getTranslate(t.gesture.imageWrap[0],"y")||0,t.gesture.slideWidth=t.gesture.slide[0].offsetWidth,t.gesture.slideHeight=t.gesture.slide[0].offsetHeight,t.gesture.imageWrap.transition(0),b.rtl&&(t.image.startX=-t.image.startX),b.rtl&&(t.image.startY=-t.image.startY));var n=t.image.width*t.scale,i=t.image.height*t.scale;if(!(n<t.gesture.slideWidth&&i<t.gesture.slideHeight)){if(t.image.minX=Math.min(t.gesture.slideWidth/2-n/2,0),t.image.maxX=-t.image.minX,t.image.minY=Math.min(t.gesture.slideHeight/2-i/2,0),t.image.maxY=-t.image.minY,t.image.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,t.image.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!t.image.isMoved&&!t.isScaling){if(b.isHorizontal()&&Math.floor(t.image.minX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x<t.image.touchesStart.x||Math.floor(t.image.maxX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x>t.image.touchesStart.x)return void(t.image.isTouched=!1);if(!b.isHorizontal()&&Math.floor(t.image.minY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y<t.image.touchesStart.y||Math.floor(t.image.maxY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y>t.image.touchesStart.y)return void(t.image.isTouched=!1)}e.preventDefault(),e.stopPropagation(),t.image.isMoved=!0,t.image.currentX=t.image.touchesCurrent.x-t.image.touchesStart.x+t.image.startX,t.image.currentY=t.image.touchesCurrent.y-t.image.touchesStart.y+t.image.startY,t.image.currentX<t.image.minX&&(t.image.currentX=t.image.minX+1-Math.pow(t.image.minX-t.image.currentX+1,.8)),t.image.currentX>t.image.maxX&&(t.image.currentX=t.image.maxX-1+Math.pow(t.image.currentX-t.image.maxX+1,.8)),t.image.currentY<t.image.minY&&(t.image.currentY=t.image.minY+1-Math.pow(t.image.minY-t.image.currentY+1,.8)),t.image.currentY>t.image.maxY&&(t.image.currentY=t.image.maxY-1+Math.pow(t.image.currentY-t.image.maxY+1,.8)),t.velocity.prevPositionX||(t.velocity.prevPositionX=t.image.touchesCurrent.x),t.velocity.prevPositionY||(t.velocity.prevPositionY=t.image.touchesCurrent.y),t.velocity.prevTime||(t.velocity.prevTime=Date.now()),t.velocity.x=(t.image.touchesCurrent.x-t.velocity.prevPositionX)/(Date.now()-t.velocity.prevTime)/2,t.velocity.y=(t.image.touchesCurrent.y-t.velocity.prevPositionY)/(Date.now()-t.velocity.prevTime)/2,Math.abs(t.image.touchesCurrent.x-t.velocity.prevPositionX)<2&&(t.velocity.x=0),Math.abs(t.image.touchesCurrent.y-t.velocity.prevPositionY)<2&&(t.velocity.y=0),t.velocity.prevPositionX=t.image.touchesCurrent.x,t.velocity.prevPositionY=t.image.touchesCurrent.y,t.velocity.prevTime=Date.now(),t.gesture.imageWrap.transform("translate3d("+t.image.currentX+"px, "+t.image.currentY+"px,0)")}}},onTouchEnd:function(e,t){var n=e.zoom;if(n.gesture.image&&0!==n.gesture.image.length){if(!n.image.isTouched||!n.image.isMoved)return n.image.isTouched=!1,void(n.image.isMoved=!1);n.image.isTouched=!1,n.image.isMoved=!1;var i=300,a=300,r=n.velocity.x*i,s=n.image.currentX+r,o=n.velocity.y*a,l=n.image.currentY+o;0!==n.velocity.x&&(i=Math.abs((s-n.image.currentX)/n.velocity.x)),0!==n.velocity.y&&(a=Math.abs((l-n.image.currentY)/n.velocity.y));var u=Math.max(i,a);n.image.currentX=s,n.image.currentY=l;var c=n.image.width*n.scale,d=n.image.height*n.scale;n.image.minX=Math.min(n.gesture.slideWidth/2-c/2,0),n.image.maxX=-n.image.minX,n.image.minY=Math.min(n.gesture.slideHeight/2-d/2,0),n.image.maxY=-n.image.minY,n.image.currentX=Math.max(Math.min(n.image.currentX,n.image.maxX),n.image.minX),n.image.currentY=Math.max(Math.min(n.image.currentY,n.image.maxY),n.image.minY),n.gesture.imageWrap.transition(u).transform("translate3d("+n.image.currentX+"px, "+n.image.currentY+"px,0)")}},onTransitionEnd:function(e){var t=e.zoom;t.gesture.slide&&e.previousIndex!==e.activeIndex&&(t.gesture.image.transform("translate3d(0,0,0) scale(1)"),t.gesture.imageWrap.transform("translate3d(0,0,0)"),t.gesture.slide=t.gesture.image=t.gesture.imageWrap=void 0,t.scale=t.currentScale=1)},toggleZoom:function(t,n){var i=t.zoom;if(i.gesture.slide||(i.gesture.slide=t.clickedSlide?e(t.clickedSlide):t.slides.eq(t.activeIndex),i.gesture.image=i.gesture.slide.find("img, svg, canvas"),i.gesture.imageWrap=i.gesture.image.parent("."+t.params.zoomContainerClass)),i.gesture.image&&0!==i.gesture.image.length){var a,r,s,o,l,u,c,d,h,p,f,m,g,v,y,w;void 0===i.image.touchesStart.x&&n?(a="touchend"===n.type?n.changedTouches[0].pageX:n.pageX,r="touchend"===n.type?n.changedTouches[0].pageY:n.pageY):(a=i.image.touchesStart.x,r=i.image.touchesStart.y),i.scale&&1!==i.scale?(i.scale=i.currentScale=1,i.gesture.imageWrap.transition(300).transform("translate3d(0,0,0)"),i.gesture.image.transition(300).transform("translate3d(0,0,0) scale(1)"),i.gesture.slide=void 0):(i.scale=i.currentScale=i.gesture.imageWrap.attr("data-swiper-zoom")||t.params.zoomMax,n?(y=i.gesture.slide[0].offsetWidth,w=i.gesture.slide[0].offsetHeight,s=i.gesture.slide.offset().left+y/2-a,o=i.gesture.slide.offset().top+w/2-r,c=i.gesture.image[0].offsetWidth,d=i.gesture.image[0].offsetHeight,h=c*i.scale,p=d*i.scale,g=-(f=Math.min(y/2-h/2,0)),v=-(m=Math.min(w/2-p/2,0)),l=s*i.scale,u=o*i.scale,l<f&&(l=f),l>g&&(l=g),u<m&&(u=m),u>v&&(u=v)):(l=0,u=0),i.gesture.imageWrap.transition(300).transform("translate3d("+l+"px, "+u+"px,0)"),i.gesture.image.transition(300).transform("translate3d(0,0,0) scale("+i.scale+")"))}},attachEvents:function(t){var n=t?"off":"on";if(b.params.zoom){b.slides;var i=!("touchstart"!==b.touchEvents.start||!b.support.passiveListener||!b.params.passiveListeners)&&{passive:!0,capture:!1};b.support.gestures?(b.slides[n]("gesturestart",b.zoom.onGestureStart,i),b.slides[n]("gesturechange",b.zoom.onGestureChange,i),b.slides[n]("gestureend",b.zoom.onGestureEnd,i)):"touchstart"===b.touchEvents.start&&(b.slides[n](b.touchEvents.start,b.zoom.onGestureStart,i),b.slides[n](b.touchEvents.move,b.zoom.onGestureChange,i),b.slides[n](b.touchEvents.end,b.zoom.onGestureEnd,i)),b[n]("touchStart",b.zoom.onTouchStart),b.slides.each(function(t,i){e(i).find("."+b.params.zoomContainerClass).length>0&&e(i)[n](b.touchEvents.move,b.zoom.onTouchMove)}),b[n]("touchEnd",b.zoom.onTouchEnd),b[n]("transitionEnd",b.zoom.onTransitionEnd),b.params.zoomToggle&&b.on("doubleTap",b.zoom.toggleZoom)}},init:function(){b.zoom.attachEvents()},destroy:function(){b.zoom.attachEvents(!0)}},b._plugins=[];for(var N in b.plugins){var Y=b.plugins[N](b,b.params[N]);Y&&b._plugins.push(Y)}return b.callPlugins=function(e){for(var t=0;t<b._plugins.length;t++)e in b._plugins[t]&&b._plugins[t][e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},b.emitterEventListeners={},b.emit=function(e){b.params[e]&&b.params[e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);var t;if(b.emitterEventListeners[e])for(t=0;t<b.emitterEventListeners[e].length;t++)b.emitterEventListeners[e][t](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);b.callPlugins&&b.callPlugins(e,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},b.on=function(e,t){return e=h(e),b.emitterEventListeners[e]||(b.emitterEventListeners[e]=[]),b.emitterEventListeners[e].push(t),b},b.off=function(e,t){var n;if(e=h(e),void 0===t)return b.emitterEventListeners[e]=[],b;if(b.emitterEventListeners[e]&&0!==b.emitterEventListeners[e].length){for(n=0;n<b.emitterEventListeners[e].length;n++)b.emitterEventListeners[e][n]===t&&b.emitterEventListeners[e].splice(n,1);return b}},b.once=function(e,t){e=h(e);var n=function(){t(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]),b.off(e,n)};return b.on(e,n),b},b.a11y={makeFocusable:function(e){return e.attr("tabIndex","0"),e},addRole:function(e,t){return e.attr("role",t),e},addLabel:function(e,t){return e.attr("aria-label",t),e},disable:function(e){return e.attr("aria-disabled",!0),e},enable:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(t){13===t.keyCode&&(e(t.target).is(b.params.nextButton)?(b.onClickNext(t),b.isEnd?b.a11y.notify(b.params.lastSlideMessage):b.a11y.notify(b.params.nextSlideMessage)):e(t.target).is(b.params.prevButton)&&(b.onClickPrev(t),b.isBeginning?b.a11y.notify(b.params.firstSlideMessage):b.a11y.notify(b.params.prevSlideMessage)),e(t.target).is("."+b.params.bulletClass)&&e(t.target)[0].click())},liveRegion:e('<span class="'+b.params.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>'),notify:function(e){var t=b.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},init:function(){b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.a11y.makeFocusable(b.nextButton),b.a11y.addRole(b.nextButton,"button"),b.a11y.addLabel(b.nextButton,b.params.nextSlideMessage)),b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.a11y.makeFocusable(b.prevButton),b.a11y.addRole(b.prevButton,"button"),b.a11y.addLabel(b.prevButton,b.params.prevSlideMessage)),e(b.container).append(b.a11y.liveRegion)},initPagination:function(){b.params.pagination&&b.params.paginationClickable&&b.bullets&&b.bullets.length&&b.bullets.each(function(){var t=e(this);b.a11y.makeFocusable(t),b.a11y.addRole(t,"button"),b.a11y.addLabel(t,b.params.paginationBulletMessage.replace(/{{index}}/,t.index()+1))})},destroy:function(){b.a11y.liveRegion&&b.a11y.liveRegion.length>0&&b.a11y.liveRegion.remove()}},b.init=function(){b.params.loop&&b.createLoop(),b.updateContainerSize(),b.updateSlidesSize(),b.updatePagination(),b.params.scrollbar&&b.scrollbar&&(b.scrollbar.set(),b.params.scrollbarDraggable&&b.scrollbar.enableDraggable()),"slide"!==b.params.effect&&b.effects[b.params.effect]&&(b.params.loop||b.updateProgress(),b.effects[b.params.effect].setTranslate()),b.params.loop?b.slideTo(b.params.initialSlide+b.loopedSlides,0,b.params.runCallbacksOnInit):(b.slideTo(b.params.initialSlide,0,b.params.runCallbacksOnInit),0===b.params.initialSlide&&(b.parallax&&b.params.parallax&&b.parallax.setTranslate(),b.lazy&&b.params.lazyLoading&&(b.lazy.load(),b.lazy.initialImageLoaded=!0))),b.attachEvents(),b.params.observer&&b.support.observer&&b.initObservers(),b.params.preloadImages&&!b.params.lazyLoading&&b.preloadImages(),b.params.zoom&&b.zoom&&b.zoom.init(),b.params.autoplay&&b.startAutoplay(),b.params.keyboardControl&&b.enableKeyboardControl&&b.enableKeyboardControl(),b.params.mousewheelControl&&b.enableMousewheelControl&&b.enableMousewheelControl(),b.params.hashnavReplaceState&&(b.params.replaceState=b.params.hashnavReplaceState),b.params.history&&b.history&&b.history.init(),b.params.hashnav&&b.hashnav&&b.hashnav.init(),b.params.a11y&&b.a11y&&b.a11y.init(),b.emit("onInit",b)},b.cleanupStyles=function(){b.container.removeClass(b.classNames.join(" ")).removeAttr("style"),b.wrapper.removeAttr("style"),b.slides&&b.slides.length&&b.slides.removeClass([b.params.slideVisibleClass,b.params.slideActiveClass,b.params.slideNextClass,b.params.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-column").removeAttr("data-swiper-row"),b.paginationContainer&&b.paginationContainer.length&&b.paginationContainer.removeClass(b.params.paginationHiddenClass),b.bullets&&b.bullets.length&&b.bullets.removeClass(b.params.bulletActiveClass),b.params.prevButton&&e(b.params.prevButton).removeClass(b.params.buttonDisabledClass),b.params.nextButton&&e(b.params.nextButton).removeClass(b.params.buttonDisabledClass),b.params.scrollbar&&b.scrollbar&&(b.scrollbar.track&&b.scrollbar.track.length&&b.scrollbar.track.removeAttr("style"),b.scrollbar.drag&&b.scrollbar.drag.length&&b.scrollbar.drag.removeAttr("style"))},b.destroy=function(e,t){b.detachEvents(),b.stopAutoplay(),b.params.scrollbar&&b.scrollbar&&b.params.scrollbarDraggable&&b.scrollbar.disableDraggable(),b.params.loop&&b.destroyLoop(),t&&b.cleanupStyles(),b.disconnectObservers(),b.params.zoom&&b.zoom&&b.zoom.destroy(),b.params.keyboardControl&&b.disableKeyboardControl&&b.disableKeyboardControl(),b.params.mousewheelControl&&b.disableMousewheelControl&&b.disableMousewheelControl(),b.params.a11y&&b.a11y&&b.a11y.destroy(),b.params.history&&!b.params.replaceState&&window.removeEventListener("popstate",b.history.setHistoryPopState),b.params.hashnav&&b.hashnav&&b.hashnav.destroy(),b.emit("onDestroy"),!1!==e&&(b=null)},b.init(),b}};t.prototype={isSafari:function(){var e=window.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent),isArray:function(e){return"[object Array]"===Object.prototype.toString.apply(e)},browser:{ie:window.navigator.pointerEnabled||window.navigator.msPointerEnabled,ieTouch:window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>1||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>1,lteIE9:function(){var e=document.createElement("div");return e.innerHTML="\x3c!--[if lte IE 9]><i></i><![endif]--\x3e",1===e.getElementsByTagName("i").length}()},device:function(){var e=window.navigator.userAgent,t=e.match(/(Android);?[\s\/]+([\d.]+)?/),n=e.match(/(iPad).*OS\s([\d_]+)/),i=e.match(/(iPod)(.*OS\s([\d_]+))?/),a=!n&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);return{ios:n||a||i,android:t}}(),support:{touch:window.Modernizr&&!0===Modernizr.touch||function(){return!!("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch)}(),transforms3d:window.Modernizr&&!0===Modernizr.csstransforms3d||function(){var e=document.createElement("div").style;return"webkitPerspective"in e||"MozPerspective"in e||"OPerspective"in e||"MsPerspective"in e||"perspective"in e}(),flexbox:function(){for(var e=document.createElement("div").style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),n=0;n<t.length;n++)if(t[n]in e)return!0}(),observer:function(){return"MutationObserver"in window||"WebkitMutationObserver"in window}(),passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:function(){return"ongesturestart"in window}()},plugins:{}};for(var n=["jQuery","Zepto","Dom7"],i=0;i<n.length;i++)window[n[i]]&&function(e){e.fn.swiper=function(n){var i;return e(this).each(function(){var e=new t(this,n);i||(i=e)}),i}}(window[n[i]]);var a;(a="undefined"==typeof Dom7?window.Dom7||window.Zepto||window.jQuery:Dom7)&&("transitionEnd"in a.fn||(a.fn.transitionEnd=function(e){function t(r){if(r.target===this)for(e.call(this,r),n=0;n<i.length;n++)a.off(i[n],t)}var n,i=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],a=this;if(e)for(n=0;n<i.length;n++)a.on(i[n],t);return this}),"transform"in a.fn||(a.fn.transform=function(e){for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransform=n.MsTransform=n.msTransform=n.MozTransform=n.OTransform=n.transform=e}return this}),"transition"in a.fn||(a.fn.transition=function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransitionDuration=n.MsTransitionDuration=n.msTransitionDuration=n.MozTransitionDuration=n.OTransitionDuration=n.transitionDuration=e}return this}),"outerWidth"in a.fn||(a.fn.outerWidth=function(e){return this.length>0?e?this[0].offsetWidth+parseFloat(this.css("margin-right"))+parseFloat(this.css("margin-left")):this[0].offsetWidth:null})),window.Swiper=t}(),"undefined"!=typeof module?module.exports=window.Swiper:"function"==typeof define&&define.amd&&define([],function(){"use strict";return window.Swiper}),function(e,t,n,i){"use strict";function a(e,t,n){return setTimeout(u(e,n),t)}function r(e,t,n){return!!Array.isArray(e)&&(s(e,n[t],n),!0)}function s(e,t,n){var a;if(e)if(e.forEach)e.forEach(t,n);else if(e.length!==i)for(a=0;a<e.length;)t.call(n,e[a],a,e),a++;else for(a in e)e.hasOwnProperty(a)&&t.call(n,e[a],a,e)}function o(t,n,i){var a="DEPRECATED METHOD: "+n+"\n"+i+" AT \n";return function(){var n=new Error("get-stack-trace"),i=n&&n.stack?n.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",r=e.console&&(e.console.warn||e.console.log);return r&&r.call(e.console,a,i),t.apply(this,arguments)}}function l(e,t,n){var i,a=t.prototype;(i=e.prototype=Object.create(a)).constructor=e,i._super=a,n&&ce(i,n)}function u(e,t){return function(){return e.apply(t,arguments)}}function c(e,t){return typeof e==pe?e.apply(t?t[0]||i:i,t):e}function d(e,t){return e===i?t:e}function h(e,t,n){s(g(t),function(t){e.addEventListener(t,n,!1)})}function p(e,t,n){s(g(t),function(t){e.removeEventListener(t,n,!1)})}function f(e,t){for(;e;){if(e==t)return!0;e=e.parentNode}return!1}function m(e,t){return e.indexOf(t)>-1}function g(e){return e.trim().split(/\s+/g)}function v(e,t,n){if(e.indexOf&&!n)return e.indexOf(t);for(var i=0;i<e.length;){if(n&&e[i][n]==t||!n&&e[i]===t)return i;i++}return-1}function y(e){return Array.prototype.slice.call(e,0)}function w(e,t,n){for(var i=[],a=[],r=0;r<e.length;){var s=t?e[r][t]:e[r];v(a,s)<0&&i.push(e[r]),a[r]=s,r++}return n&&(i=t?i.sort(function(e,n){return e[t]>n[t]}):i.sort()),i}function b(e,t){for(var n,a,r=t[0].toUpperCase()+t.slice(1),s=0;s<de.length;){if(n=de[s],(a=n?n+r:t)in e)return a;s++}return i}function x(){return we++}function C(t){var n=t.ownerDocument||t;return n.defaultView||n.parentWindow||e}function T(e,t){var n=this;this.manager=e,this.callback=t,this.element=e.element,this.target=e.options.inputTarget,this.domHandler=function(t){c(e.options.enable,[e])&&n.handler(t)},this.init()}function S(e){var t=e.options.inputClass;return new(t||(Ce?Y:Te?W:xe?B:N))(e,k)}function k(e,t,n){var i=n.pointers.length,a=n.changedPointers.length,r=t&ke&&i-a==0,s=t&(_e|De)&&i-a==0;n.isFirst=!!r,n.isFinal=!!s,r&&(e.session={}),n.eventType=t,M(e,n),e.emit("hammer.input",n),e.recognize(n),e.session.prevInput=n}function M(e,t){var n=e.session,i=t.pointers,a=i.length;n.firstInput||(n.firstInput=E(t)),a>1&&!n.firstMultiple?n.firstMultiple=E(t):1===a&&(n.firstMultiple=!1);var r=n.firstInput,s=n.firstMultiple,o=s?s.center:r.center,l=t.center=P(i);t.timeStamp=ge(),t.deltaTime=t.timeStamp-r.timeStamp,t.angle=O(o,l),t.distance=A(o,l),_(n,t),t.offsetDirection=I(t.deltaX,t.deltaY);var u=z(t.deltaTime,t.deltaX,t.deltaY);t.overallVelocityX=u.x,t.overallVelocityY=u.y,t.overallVelocity=me(u.x)>me(u.y)?u.x:u.y,t.scale=s?R(s.pointers,i):1,t.rotation=s?L(s.pointers,i):0,t.maxPointers=n.prevInput?t.pointers.length>n.prevInput.maxPointers?t.pointers.length:n.prevInput.maxPointers:t.pointers.length,D(n,t);var c=e.element;f(t.srcEvent.target,c)&&(c=t.srcEvent.target),t.target=c}function _(e,t){var n=t.center,i=e.offsetDelta||{},a=e.prevDelta||{},r=e.prevInput||{};t.eventType!==ke&&r.eventType!==_e||(a=e.prevDelta={x:r.deltaX||0,y:r.deltaY||0},i=e.offsetDelta={x:n.x,y:n.y}),t.deltaX=a.x+(n.x-i.x),t.deltaY=a.y+(n.y-i.y)}function D(e,t){var n,a,r,s,o=e.lastInterval||t,l=t.timeStamp-o.timeStamp;if(t.eventType!=De&&(l>Se||o.velocity===i)){var u=t.deltaX-o.deltaX,c=t.deltaY-o.deltaY,d=z(l,u,c);a=d.x,r=d.y,n=me(d.x)>me(d.y)?d.x:d.y,s=I(u,c),e.lastInterval=t}else n=o.velocity,a=o.velocityX,r=o.velocityY,s=o.direction;t.velocity=n,t.velocityX=a,t.velocityY=r,t.direction=s}function E(e){for(var t=[],n=0;n<e.pointers.length;)t[n]={clientX:fe(e.pointers[n].clientX),clientY:fe(e.pointers[n].clientY)},n++;return{timeStamp:ge(),pointers:t,center:P(t),deltaX:e.deltaX,deltaY:e.deltaY}}function P(e){var t=e.length;if(1===t)return{x:fe(e[0].clientX),y:fe(e[0].clientY)};for(var n=0,i=0,a=0;a<t;)n+=e[a].clientX,i+=e[a].clientY,a++;return{x:fe(n/t),y:fe(i/t)}}function z(e,t,n){return{x:t/e||0,y:n/e||0}}function I(e,t){return e===t?Ee:me(e)>=me(t)?e<0?Pe:ze:t<0?Ie:Ae}function A(e,t,n){n||(n=Ne);var i=t[n[0]]-e[n[0]],a=t[n[1]]-e[n[1]];return Math.sqrt(i*i+a*a)}function O(e,t,n){n||(n=Ne);var i=t[n[0]]-e[n[0]],a=t[n[1]]-e[n[1]];return 180*Math.atan2(a,i)/Math.PI}function L(e,t){return O(t[1],t[0],Ye)+O(e[1],e[0],Ye)}function R(e,t){return A(t[0],t[1],Ye)/A(e[0],e[1],Ye)}function N(){this.evEl=He,this.evWin=We,this.pressed=!1,T.apply(this,arguments)}function Y(){this.evEl=qe,this.evWin=Ge,T.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function j(){this.evTarget=Ve,this.evWin=Xe,this.started=!1,T.apply(this,arguments)}function H(e,t){var n=y(e.touches),i=y(e.changedTouches);return t&(_e|De)&&(n=w(n.concat(i),"identifier",!0)),[n,i]}function W(){this.evTarget=Ze,this.targetIds={},T.apply(this,arguments)}function F(e,t){var n=y(e.touches),i=this.targetIds;if(t&(ke|Me)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var a,r,s=y(e.changedTouches),o=[],l=this.target;if(r=n.filter(function(e){return f(e.target,l)}),t===ke)for(a=0;a<r.length;)i[r[a].identifier]=!0,a++;for(a=0;a<s.length;)i[s[a].identifier]&&o.push(s[a]),t&(_e|De)&&delete i[s[a].identifier],a++;return o.length?[w(r.concat(o),"identifier",!0),o]:void 0}function B(){T.apply(this,arguments);var e=u(this.handler,this);this.touch=new W(this.manager,e),this.mouse=new N(this.manager,e),this.primaryTouch=null,this.lastTouches=[]}function q(e,t){e&ke?(this.primaryTouch=t.changedPointers[0].identifier,G.call(this,t)):e&(_e|De)&&G.call(this,t)}function G(e){var t=e.changedPointers[0];if(t.identifier===this.primaryTouch){var n={x:t.clientX,y:t.clientY};this.lastTouches.push(n);var i=this.lastTouches,a=function(){var e=i.indexOf(n);e>-1&&i.splice(e,1)};setTimeout(a,Qe)}}function $(e){for(var t=e.srcEvent.clientX,n=e.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var a=this.lastTouches[i],r=Math.abs(t-a.x),s=Math.abs(n-a.y);if(r<=Ke&&s<=Ke)return!0}return!1}function V(e,t){this.manager=e,this.set(t)}function X(e){if(m(e,it))return it;var t=m(e,at),n=m(e,rt);return t&&n?it:t||n?t?at:rt:m(e,nt)?nt:tt}function U(e){this.options=ce({},this.defaults,e||{}),this.id=x(),this.manager=null,this.options.enable=d(this.options.enable,!0),this.state=ot,this.simultaneous={},this.requireFail=[]}function Z(e){return e&ht?"cancel":e&ct?"end":e&ut?"move":e&lt?"start":""}function Q(e){return e==Ae?"down":e==Ie?"up":e==Pe?"left":e==ze?"right":""}function K(e,t){var n=t.manager;return n?n.get(e):e}function J(){U.apply(this,arguments)}function ee(){J.apply(this,arguments),this.pX=null,this.pY=null}function te(){J.apply(this,arguments)}function ne(){U.apply(this,arguments),this._timer=null,this._input=null}function ie(){J.apply(this,arguments)}function ae(){J.apply(this,arguments)}function re(){U.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function se(e,t){return t=t||{},t.recognizers=d(t.recognizers,se.defaults.preset),new oe(e,t)}function oe(e,t){this.options=ce({},se.defaults,t||{}),this.options.inputTarget=this.options.inputTarget||e,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=e,this.input=S(this),this.touchAction=new V(this,this.options.touchAction),le(this,!0),s(this.options.recognizers,function(e){var t=this.add(new e[0](e[1]));e[2]&&t.recognizeWith(e[2]),e[3]&&t.requireFailure(e[3])},this)}function le(e,t){var n=e.element;if(n.style){var i;s(e.options.cssProps,function(a,r){i=b(n.style,r),t?(e.oldCssProps[i]=n.style[i],n.style[i]=a):n.style[i]=e.oldCssProps[i]||""}),t||(e.oldCssProps={})}}function ue(e,n){var i=t.createEvent("Event");i.initEvent(e,!0,!0),i.gesture=n,n.target.dispatchEvent(i)}var ce,de=["","webkit","Moz","MS","ms","o"],he=t.createElement("div"),pe="function",fe=Math.round,me=Math.abs,ge=Date.now;ce="function"!=typeof Object.assign?function(e){if(e===i||null===e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var a=arguments[n];if(a!==i&&null!==a)for(var r in a)a.hasOwnProperty(r)&&(t[r]=a[r])}return t}:Object.assign;var ve=o(function(e,t,n){for(var a=Object.keys(t),r=0;r<a.length;)(!n||n&&e[a[r]]===i)&&(e[a[r]]=t[a[r]]),r++;return e},"extend","Use `assign`."),ye=o(function(e,t){return ve(e,t,!0)},"merge","Use `assign`."),we=1,be=/mobile|tablet|ip(ad|hone|od)|android/i,xe="ontouchstart"in e,Ce=b(e,"PointerEvent")!==i,Te=xe&&be.test(navigator.userAgent),Se=25,ke=1,Me=2,_e=4,De=8,Ee=1,Pe=2,ze=4,Ie=8,Ae=16,Oe=Pe|ze,Le=Ie|Ae,Re=Oe|Le,Ne=["x","y"],Ye=["clientX","clientY"];T.prototype={handler:function(){},init:function(){this.evEl&&h(this.element,this.evEl,this.domHandler),this.evTarget&&h(this.target,this.evTarget,this.domHandler),this.evWin&&h(C(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&p(this.element,this.evEl,this.domHandler),this.evTarget&&p(this.target,this.evTarget,this.domHandler),this.evWin&&p(C(this.element),this.evWin,this.domHandler)}};var je={mousedown:ke,mousemove:Me,mouseup:_e},He="mousedown",We="mousemove mouseup";l(N,T,{handler:function(e){var t=je[e.type];t&ke&&0===e.button&&(this.pressed=!0),t&Me&&1!==e.which&&(t=_e),this.pressed&&(t&_e&&(this.pressed=!1),this.callback(this.manager,t,{pointers:[e],changedPointers:[e],pointerType:"mouse",srcEvent:e}))}});var Fe={pointerdown:ke,pointermove:Me,pointerup:_e,pointercancel:De,pointerout:De},Be={2:"touch",3:"pen",4:"mouse",5:"kinect"},qe="pointerdown",Ge="pointermove pointerup pointercancel";e.MSPointerEvent&&!e.PointerEvent&&(qe="MSPointerDown",Ge="MSPointerMove MSPointerUp MSPointerCancel"),l(Y,T,{handler:function(e){var t=this.store,n=!1,i=e.type.toLowerCase().replace("ms",""),a=Fe[i],r=Be[e.pointerType]||e.pointerType,s="touch"==r,o=v(t,e.pointerId,"pointerId");a&ke&&(0===e.button||s)?o<0&&(t.push(e),o=t.length-1):a&(_e|De)&&(n=!0),o<0||(t[o]=e,this.callback(this.manager,a,{pointers:t,changedPointers:[e],pointerType:r,srcEvent:e}),n&&t.splice(o,1))}});var $e={touchstart:ke,touchmove:Me,touchend:_e,touchcancel:De},Ve="touchstart",Xe="touchstart touchmove touchend touchcancel";l(j,T,{handler:function(e){var t=$e[e.type];if(t===ke&&(this.started=!0),this.started){var n=H.call(this,e,t);t&(_e|De)&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:e})}}});var Ue={touchstart:ke,touchmove:Me,touchend:_e,touchcancel:De},Ze="touchstart touchmove touchend touchcancel";l(W,T,{handler:function(e){var t=Ue[e.type],n=F.call(this,e,t);n&&this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:e})}});var Qe=2500,Ke=25;l(B,T,{handler:function(e,t,n){var i="touch"==n.pointerType,a="mouse"==n.pointerType;if(!(a&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(i)q.call(this,t,n);else if(a&&$.call(this,n))return;this.callback(e,t,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Je=b(he.style,"touchAction"),et=Je!==i,tt="auto",nt="manipulation",it="none",at="pan-x",rt="pan-y",st=function(){if(!et)return!1;var t={},n=e.CSS&&e.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(i){t[i]=!n||e.CSS.supports("touch-action",i)}),t}();V.prototype={set:function(e){"compute"==e&&(e=this.compute()),et&&this.manager.element.style&&st[e]&&(this.manager.element.style[Je]=e),this.actions=e.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var e=[];return s(this.manager.recognizers,function(t){c(t.options.enable,[t])&&(e=e.concat(t.getTouchAction()))}),X(e.join(" "))},preventDefaults:function(e){var t=e.srcEvent,n=e.offsetDirection;if(this.manager.session.prevented)t.preventDefault();else{var i=this.actions,a=m(i,it)&&!st[it],r=m(i,rt)&&!st[rt],s=m(i,at)&&!st[at];if(a){var o=1===e.pointers.length,l=e.distance<2,u=e.deltaTime<250;if(o&&l&&u)return}if(!s||!r)return a||r&&n&Oe||s&&n&Le?this.preventSrc(t):void 0}},preventSrc:function(e){this.manager.session.prevented=!0,e.preventDefault()}};var ot=1,lt=2,ut=4,ct=8,dt=ct,ht=16;U.prototype={defaults:{},set:function(e){return ce(this.options,e),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(e){if(r(e,"recognizeWith",this))return this;var t=this.simultaneous;return e=K(e,this),t[e.id]||(t[e.id]=e,e.recognizeWith(this)),this},dropRecognizeWith:function(e){return r(e,"dropRecognizeWith",this)?this:(e=K(e,this),delete this.simultaneous[e.id],this)},requireFailure:function(e){if(r(e,"requireFailure",this))return this;var t=this.requireFail;return e=K(e,this),-1===v(t,e)&&(t.push(e),e.requireFailure(this)),this},dropRequireFailure:function(e){if(r(e,"dropRequireFailure",this))return this;e=K(e,this);var t=v(this.requireFail,e);return t>-1&&this.requireFail.splice(t,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(e){return!!this.simultaneous[e.id]},emit:function(e){function t(t){n.manager.emit(t,e)}var n=this,i=this.state;i<ct&&t(n.options.event+Z(i)),t(n.options.event),e.additionalEvent&&t(e.additionalEvent),i>=ct&&t(n.options.event+Z(i))},tryEmit:function(e){if(this.canEmit())return this.emit(e);this.state=32},canEmit:function(){for(var e=0;e<this.requireFail.length;){if(!(this.requireFail[e].state&(32|ot)))return!1;e++}return!0},recognize:function(e){var t=ce({},e);if(!c(this.options.enable,[this,t]))return this.reset(),void(this.state=32);this.state&(dt|ht|32)&&(this.state=ot),this.state=this.process(t),this.state&(lt|ut|ct|ht)&&this.tryEmit(t)},process:function(e){},getTouchAction:function(){},reset:function(){}},l(J,U,{defaults:{pointers:1},attrTest:function(e){var t=this.options.pointers;return 0===t||e.pointers.length===t},process:function(e){var t=this.state,n=e.eventType,i=t&(lt|ut),a=this.attrTest(e);return i&&(n&De||!a)?t|ht:i||a?n&_e?t|ct:t&lt?t|ut:lt:32}}),l(ee,J,{defaults:{event:"pan",threshold:10,pointers:1,direction:Re},getTouchAction:function(){var e=this.options.direction,t=[];return e&Oe&&t.push(rt),e&Le&&t.push(at),t},directionTest:function(e){var t=this.options,n=!0,i=e.distance,a=e.direction,r=e.deltaX,s=e.deltaY;return a&t.direction||(t.direction&Oe?(a=0===r?Ee:r<0?Pe:ze,n=r!=this.pX,i=Math.abs(e.deltaX)):(a=0===s?Ee:s<0?Ie:Ae,n=s!=this.pY,i=Math.abs(e.deltaY))),e.direction=a,n&&i>t.threshold&&a&t.direction},attrTest:function(e){return J.prototype.attrTest.call(this,e)&&(this.state&lt||!(this.state&lt)&&this.directionTest(e))},emit:function(e){this.pX=e.deltaX,this.pY=e.deltaY;var t=Q(e.direction);t&&(e.additionalEvent=this.options.event+t),this._super.emit.call(this,e)}}),l(te,J,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[it]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.scale-1)>this.options.threshold||this.state&lt)},emit:function(e){if(1!==e.scale){var t=e.scale<1?"in":"out";e.additionalEvent=this.options.event+t}this._super.emit.call(this,e)}}),l(ne,U,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[tt]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,r=e.deltaTime>t.time;if(this._input=e,!i||!n||e.eventType&(_e|De)&&!r)this.reset();else if(e.eventType&ke)this.reset(),this._timer=a(function(){this.state=dt,this.tryEmit()},t.time,this);else if(e.eventType&_e)return dt;return 32},reset:function(){clearTimeout(this._timer)},emit:function(e){this.state===dt&&(e&&e.eventType&_e?this.manager.emit(this.options.event+"up",e):(this._input.timeStamp=ge(),this.manager.emit(this.options.event,this._input)))}}),l(ie,J,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[it]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.rotation)>this.options.threshold||this.state&lt)}}),l(ae,J,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Oe|Le,pointers:1},getTouchAction:function(){return ee.prototype.getTouchAction.call(this)},attrTest:function(e){var t,n=this.options.direction;return n&(Oe|Le)?t=e.overallVelocity:n&Oe?t=e.overallVelocityX:n&Le&&(t=e.overallVelocityY),this._super.attrTest.call(this,e)&&n&e.offsetDirection&&e.distance>this.options.threshold&&e.maxPointers==this.options.pointers&&me(t)>this.options.velocity&&e.eventType&_e},emit:function(e){var t=Q(e.offsetDirection);t&&this.manager.emit(this.options.event+t,e),this.manager.emit(this.options.event,e)}}),l(re,U,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[nt]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,r=e.deltaTime<t.time;if(this.reset(),e.eventType&ke&&0===this.count)return this.failTimeout();if(i&&r&&n){if(e.eventType!=_e)return this.failTimeout();var s=!this.pTime||e.timeStamp-this.pTime<t.interval,o=!this.pCenter||A(this.pCenter,e.center)<t.posThreshold;if(this.pTime=e.timeStamp,this.pCenter=e.center,o&&s?this.count+=1:this.count=1,this._input=e,0===this.count%t.taps)return this.hasRequireFailures()?(this._timer=a(function(){this.state=dt,this.tryEmit()},t.interval,this),lt):dt}return 32},failTimeout:function(){return this._timer=a(function(){this.state=32},this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==dt&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),se.VERSION="2.0.7",se.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[ie,{enable:!1}],[te,{enable:!1},["rotate"]],[ae,{direction:Oe}],[ee,{direction:Oe},["swipe"]],[re],[re,{event:"doubletap",taps:2},["tap"]],[ne]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};oe.prototype={set:function(e){return ce(this.options,e),e.touchAction&&this.touchAction.update(),e.inputTarget&&(this.input.destroy(),this.input.target=e.inputTarget,this.input.init()),this},stop:function(e){this.session.stopped=e?2:1},recognize:function(e){var t=this.session;if(!t.stopped){this.touchAction.preventDefaults(e);var n,i=this.recognizers,a=t.curRecognizer;(!a||a&&a.state&dt)&&(a=t.curRecognizer=null);for(var r=0;r<i.length;)n=i[r],2===t.stopped||a&&n!=a&&!n.canRecognizeWith(a)?n.reset():n.recognize(e),!a&&n.state&(lt|ut|ct)&&(a=t.curRecognizer=n),r++}},get:function(e){if(e instanceof U)return e;for(var t=this.recognizers,n=0;n<t.length;n++)if(t[n].options.event==e)return t[n];return null},add:function(e){if(r(e,"add",this))return this;var t=this.get(e.options.event);return t&&this.remove(t),this.recognizers.push(e),e.manager=this,this.touchAction.update(),e},remove:function(e){if(r(e,"remove",this))return this;if(e=this.get(e)){var t=this.recognizers,n=v(t,e);-1!==n&&(t.splice(n,1),this.touchAction.update())}return this},on:function(e,t){if(e!==i&&t!==i){var n=this.handlers;return s(g(e),function(e){n[e]=n[e]||[],n[e].push(t)}),this}},off:function(e,t){if(e!==i){var n=this.handlers;return s(g(e),function(e){t?n[e]&&n[e].splice(v(n[e],t),1):delete n[e]}),this}},emit:function(e,t){this.options.domEvents&&ue(e,t);var n=this.handlers[e]&&this.handlers[e].slice();if(n&&n.length){t.type=e,t.preventDefault=function(){t.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](t),i++}},destroy:function(){this.element&&le(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},ce(se,{INPUT_START:ke,INPUT_MOVE:Me,INPUT_END:_e,INPUT_CANCEL:De,STATE_POSSIBLE:ot,STATE_BEGAN:lt,STATE_CHANGED:ut,STATE_ENDED:ct,STATE_RECOGNIZED:dt,STATE_CANCELLED:ht,STATE_FAILED:32,DIRECTION_NONE:Ee,DIRECTION_LEFT:Pe,DIRECTION_RIGHT:ze,DIRECTION_UP:Ie,DIRECTION_DOWN:Ae,DIRECTION_HORIZONTAL:Oe,DIRECTION_VERTICAL:Le,DIRECTION_ALL:Re,Manager:oe,Input:T,TouchAction:V,TouchInput:W,MouseInput:N,PointerEventInput:Y,TouchMouseInput:B,SingleTouchInput:j,Recognizer:U,AttrRecognizer:J,Tap:re,Pan:ee,Swipe:ae,Pinch:te,Rotate:ie,Press:ne,on:h,off:p,each:s,merge:ye,extend:ve,assign:ce,inherit:l,bindFn:u,prefixed:b}),(void 0!==e?e:"undefined"!=typeof self?self:{}).Hammer=se,"function"==typeof define&&define.amd?define(function(){return se}):"undefined"!=typeof module&&module.exports?module.exports=se:e.Hammer=se}(window,document),function(e,t,n){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e(require("jquery")):e(t||n)}(function(e){var t=function(t,n,i){var a={invalid:[],getCaret:function(){try{var e,n=0,i=t.get(0),r=document.selection,s=i.selectionStart;return r&&-1===navigator.appVersion.indexOf("MSIE 10")?((e=r.createRange()).moveStart("character",-a.val().length),n=e.text.length):(s||"0"===s)&&(n=s),n}catch(e){}},setCaret:function(e){try{if(t.is(":focus")){var n,i=t.get(0);i.setSelectionRange?i.setSelectionRange(e,e):((n=i.createTextRange()).collapse(!0),n.moveEnd("character",e),n.moveStart("character",e),n.select())}}catch(e){}},events:function(){t.on("keydown.mask",function(e){t.data("mask-keycode",e.keyCode||e.which),t.data("mask-previus-value",t.val()),t.data("mask-previus-caret-pos",a.getCaret()),a.maskDigitPosMapOld=a.maskDigitPosMap}).on(e.jMaskGlobals.useInput?"input.mask":"keyup.mask",a.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){t.keydown().keyup()},100)}).on("change.mask",function(){t.data("changed",!0)}).on("blur.mask",function(){o===a.val()||t.data("changed")||t.trigger("change"),t.data("changed",!1)}).on("blur.mask",function(){o=a.val()}).on("focus.mask",function(t){!0===i.selectOnFocus&&e(t.target).select()}).on("focusout.mask",function(){i.clearIfNotMatch&&!r.test(a.val())&&a.val("")})},getRegexMask:function(){for(var e,t,i,a,r,o,l=[],u=0;u<n.length;u++)(e=s.translation[n.charAt(u)])?(t=e.pattern.toString().replace(/.{1}$|^.{1}/g,""),i=e.optional,(a=e.recursive)?(l.push(n.charAt(u)),r={digit:n.charAt(u),pattern:t}):l.push(i||a?t+"?":t)):l.push(n.charAt(u).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return o=l.join(""),r&&(o=o.replace(new RegExp("("+r.digit+"(.*"+r.digit+")?)"),"($1)?").replace(new RegExp(r.digit,"g"),r.pattern)),new RegExp(o)},destroyEvents:function(){t.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(e){var n,i=t.is("input")?"val":"text";return arguments.length>0?(t[i]()!==e&&t[i](e),n=t):n=t[i](),n},calculateCaretPosition:function(){var e=t.data("mask-previus-value")||"",n=a.getMasked(),i=a.getCaret();if(e!==n){var r=t.data("mask-previus-caret-pos")||0,s=n.length,o=e.length,l=0,u=0,c=0,d=0,h=0;for(h=i;h<s&&a.maskDigitPosMap[h];h++)u++;for(h=i-1;h>=0&&a.maskDigitPosMap[h];h--)l++;for(h=i-1;h>=0;h--)a.maskDigitPosMap[h]&&c++;for(h=r-1;h>=0;h--)a.maskDigitPosMapOld[h]&&d++;if(i>o)i=s;else if(r>=i&&r!==o){if(!a.maskDigitPosMapOld[i]){var p=i;i-=d-c,i-=l,a.maskDigitPosMap[i]&&(i=p)}}else i>r&&(i+=c-d,i+=u)}return i},behaviour:function(n){n=n||window.event,a.invalid=[];var i=t.data("mask-keycode");if(-1===e.inArray(i,s.byPassKeys)){var r=a.getMasked(),o=a.getCaret();return setTimeout(function(){a.setCaret(a.calculateCaretPosition())},10),a.val(r),a.setCaret(o),a.callbacks(n)}},getMasked:function(e,t){var r,o,l=[],u=void 0===t?a.val():t+"",c=0,d=n.length,h=0,p=u.length,f=1,m="push",g=-1,v=0,y=[];i.reverse?(m="unshift",f=-1,r=0,c=d-1,h=p-1,o=function(){return c>-1&&h>-1}):(r=d-1,o=function(){return c<d&&h<p});for(var w;o();){var b=n.charAt(c),x=u.charAt(h),C=s.translation[b];C?(x.match(C.pattern)?(l[m](x),C.recursive&&(-1===g?g=c:c===r&&(c=g-f),r===g&&(c-=f)),c+=f):x===w?(v--,w=void 0):C.optional?(c+=f,h-=f):C.fallback?(l[m](C.fallback),c+=f,h-=f):a.invalid.push({p:h,v:x,e:C.pattern}),h+=f):(e||l[m](b),x===b?(y.push(h),h+=f):(w=b,y.push(h+v),v++),c+=f)}var T=n.charAt(r);d!==p+1||s.translation[T]||l.push(T);var S=l.join("");return a.mapMaskdigitPositions(S,y,p),S},mapMaskdigitPositions:function(e,t,n){var r=i.reverse?e.length-n:0;a.maskDigitPosMap={};for(var s=0;s<t.length;s++)a.maskDigitPosMap[t[s]+r]=1},callbacks:function(e){var r=a.val(),s=r!==o,l=[r,e,t,i],u=function(e,t,n){"function"==typeof i[e]&&t&&i[e].apply(this,n)};u("onChange",!0===s,l),u("onKeyPress",!0===s,l),u("onComplete",r.length===n.length,l),u("onInvalid",a.invalid.length>0,[r,e,t,a.invalid,i])}};t=e(t);var r,s=this,o=a.val();n="function"==typeof n?n(a.val(),void 0,t,i):n,s.mask=n,s.options=i,s.remove=function(){var e=a.getCaret();return a.destroyEvents(),a.val(s.getCleanVal()),a.setCaret(e),t},s.getCleanVal=function(){return a.getMasked(!0)},s.getMaskedVal=function(e){return a.getMasked(!1,e)},s.init=function(o){if(o=o||!1,i=i||{},s.clearIfNotMatch=e.jMaskGlobals.clearIfNotMatch,s.byPassKeys=e.jMaskGlobals.byPassKeys,s.translation=e.extend({},e.jMaskGlobals.translation,i.translation),s=e.extend(!0,{},s,i),r=a.getRegexMask(),o)a.events(),a.val(a.getMasked());else{i.placeholder&&t.attr("placeholder",i.placeholder),t.data("mask")&&t.attr("autocomplete","off");for(var l=0,u=!0;l<n.length;l++){var c=s.translation[n.charAt(l)];if(c&&c.recursive){u=!1;break}}u&&t.attr("maxlength",n.length),a.destroyEvents(),a.events();var d=a.getCaret();a.val(a.getMasked()),a.setCaret(d)}},s.init(!t.is("input"))};e.maskWatchers={};var n=function(){var n=e(this),a={},r=n.attr("data-mask");if(n.attr("data-mask-reverse")&&(a.reverse=!0),n.attr("data-mask-clearifnotmatch")&&(a.clearIfNotMatch=!0),"true"===n.attr("data-mask-selectonfocus")&&(a.selectOnFocus=!0),i(n,r,a))return n.data("mask",new t(this,r,a))},i=function(t,n,i){i=i||{};var a=e(t).data("mask"),r=JSON.stringify,s=e(t).val()||e(t).text();try{return"function"==typeof n&&(n=n(s)),"object"!=typeof a||r(a.options)!==r(i)||a.mask!==n}catch(e){}};e.fn.mask=function(n,a){a=a||{};var r=this.selector,s=e.jMaskGlobals,o=s.watchInterval,l=a.watchInputs||s.watchInputs,u=function(){if(i(this,n,a))return e(this).data("mask",new t(this,n,a))};return e(this).each(u),r&&""!==r&&l&&(clearInterval(e.maskWatchers[r]),e.maskWatchers[r]=setInterval(function(){e(document).find(r).each(u)},o)),this},e.fn.masked=function(e){return this.data("mask").getMaskedVal(e)},e.fn.unmask=function(){return clearInterval(e.maskWatchers[this.selector]),delete e.maskWatchers[this.selector],this.each(function(){var t=e(this).data("mask");t&&t.remove().removeData("mask")})},e.fn.cleanVal=function(){return this.data("mask").getCleanVal()},e.applyDataMask=function(t){((t=t||e.jMaskGlobals.maskElements)instanceof e?t:e(t)).filter(e.jMaskGlobals.dataMaskAttr).each(n)};var a={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&function(e){var t,n=document.createElement("div");return e="on"+e,(t=e in n)||(n.setAttribute(e,"return;"),t="function"==typeof n[e]),n=null,t}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};e.jMaskGlobals=e.jMaskGlobals||{},(a=e.jMaskGlobals=e.extend(!0,{},a,e.jMaskGlobals)).dataMask&&e.applyDataMask(),setInterval(function(){e.jMaskGlobals.watchDataMask&&e.applyDataMask()},a.watchInterval)},window.jQuery,window.Zepto),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&module.exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){e.extend(e.fn,{validate:function(t){if(this.length){var n=e.data(this[0],"validator");return n||(this.attr("novalidate","novalidate"),n=new e.validator(t,this[0]),e.data(this[0],"validator",n),n.settings.onsubmit&&(this.on("click.validate",":submit",function(t){n.settings.submitHandler&&(n.submitButton=t.target),e(this).hasClass("cancel")&&(n.cancelSubmit=!0),void 0!==e(this).attr("formnovalidate")&&(n.cancelSubmit=!0)}),this.on("submit.validate",function(t){function i(){var i,a;return!n.settings.submitHandler||(n.submitButton&&(i=e("<input type='hidden'/>").attr("name",n.submitButton.name).val(e(n.submitButton).val()).appendTo(n.currentForm)),a=n.settings.submitHandler.call(n,n.currentForm,t),n.submitButton&&i.remove(),void 0!==a&&a)}return n.settings.debug&&t.preventDefault(),n.cancelSubmit?(n.cancelSubmit=!1,i()):n.form()?n.pendingRequest?(n.formSubmitted=!0,!1):i():(n.focusInvalid(),!1)})),n)}t&&t.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing.")},valid:function(){var t,n,i;return e(this[0]).is("form")?t=this.validate().form():(i=[],t=!0,n=e(this[0].form).validate(),this.each(function(){(t=n.element(this)&&t)||(i=i.concat(n.errorList))}),n.errorList=i),t},rules:function(t,n){var i,a,r,s,o,l,u=this[0];if(null!=u&&null!=u.form){if(t)switch(i=e.data(u.form,"validator").settings,a=i.rules,r=e.validator.staticRules(u),t){case"add":e.extend(r,e.validator.normalizeRule(n)),delete r.messages,a[u.name]=r,n.messages&&(i.messages[u.name]=e.extend(i.messages[u.name],n.messages));break;case"remove":return n?(l={},e.each(n.split(/\s/),function(t,n){l[n]=r[n],delete r[n],"required"===n&&e(u).removeAttr("aria-required")}),l):(delete a[u.name],r)}return(s=e.validator.normalizeRules(e.extend({},e.validator.classRules(u),e.validator.attributeRules(u),e.validator.dataRules(u),e.validator.staticRules(u)),u)).required&&(o=s.required,delete s.required,s=e.extend({required:o},s),e(u).attr("aria-required","true")),s.remote&&(o=s.remote,delete s.remote,s=e.extend(s,{remote:o})),s}}}),e.extend(e.expr.pseudos||e.expr[":"],{blank:function(t){return!e.trim(""+e(t).val())},filled:function(t){var n=e(t).val();return null!==n&&!!e.trim(""+n)},unchecked:function(t){return!e(t).prop("checked")}}),e.validator=function(t,n){this.settings=e.extend(!0,{},e.validator.defaults,t),this.currentForm=n,this.init()},e.validator.format=function(t,n){return 1===arguments.length?function(){var n=e.makeArray(arguments);return n.unshift(t),e.validator.format.apply(this,n)}:void 0===n?t:(arguments.length>2&&n.constructor!==Array&&(n=e.makeArray(arguments).slice(1)),n.constructor!==Array&&(n=[n]),e.each(n,function(e,n){t=t.replace(new RegExp("\\{"+e+"\\}","g"),function(){return n})}),t)},e.extend(e.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:e([]),errorLabelContainer:e([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(e){this.lastActive=e,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,e,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(e)))},onfocusout:function(e){this.checkable(e)||!(e.name in this.submitted)&&this.optional(e)||this.element(e)},onkeyup:function(t,n){var i=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===n.which&&""===this.elementValue(t)||-1!==e.inArray(n.keyCode,i)||(t.name in this.submitted||t.name in this.invalid)&&this.element(t)},onclick:function(e){e.name in this.submitted?this.element(e):e.parentNode.name in this.submitted&&this.element(e.parentNode)},highlight:function(t,n,i){"radio"===t.type?this.findByName(t.name).addClass(n).removeClass(i):e(t).addClass(n).removeClass(i)},unhighlight:function(t,n,i){"radio"===t.type?this.findByName(t.name).removeClass(n).addClass(i):e(t).removeClass(n).addClass(i)}},setDefaults:function(t){e.extend(e.validator.defaults,t)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:e.validator.format("Please enter no more than {0} characters."),minlength:e.validator.format("Please enter at least {0} characters."),rangelength:e.validator.format("Please enter a value between {0} and {1} characters long."),range:e.validator.format("Please enter a value between {0} and {1}."),max:e.validator.format("Please enter a value less than or equal to {0}."),min:e.validator.format("Please enter a value greater than or equal to {0}."),step:e.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){function t(t){!this.form&&this.hasAttribute("contenteditable")&&(this.form=e(this).closest("form")[0]);var n=e.data(this.form,"validator"),i="on"+t.type.replace(/^validate/,""),a=n.settings;a[i]&&!e(this).is(a.ignore)&&a[i].call(n,this,t)}this.labelContainer=e(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||e(this.currentForm),this.containers=e(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var n,i=this.groups={};e.each(this.settings.groups,function(t,n){"string"==typeof n&&(n=n.split(/\s/)),e.each(n,function(e,n){i[n]=t})}),n=this.settings.rules,e.each(n,function(t,i){n[t]=e.validator.normalizeRule(i)}),e(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",t).on("click.validate","select, option, [type='radio'], [type='checkbox']",t),this.settings.invalidHandler&&e(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler),e(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required","true")},form:function(){return this.checkForm(),e.extend(this.submitted,this.errorMap),this.invalid=e.extend({},this.errorMap),this.valid()||e(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var e=0,t=this.currentElements=this.elements();t[e];e++)this.check(t[e]);return this.valid()},element:function(t){var n,i,a=this.clean(t),r=this.validationTargetFor(a),s=this,o=!0;return void 0===r?delete this.invalid[a.name]:(this.prepareElement(r),this.currentElements=e(r),(i=this.groups[r.name])&&e.each(this.groups,function(e,t){t===i&&e!==r.name&&(a=s.validationTargetFor(s.clean(s.findByName(e))))&&a.name in s.invalid&&(s.currentElements.push(a),o=s.check(a)&&o)}),n=!1!==this.check(r),o=o&&n,this.invalid[r.name]=!n,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),e(t).attr("aria-invalid",!n)),o},showErrors:function(t){if(t){var n=this;e.extend(this.errorMap,t),this.errorList=e.map(this.errorMap,function(e,t){return{message:e,element:n.findByName(t)[0]}}),this.successList=e.grep(this.successList,function(e){return!(e.name in t)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){e.fn.resetForm&&e(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var t=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(t)},resetElements:function(e){var t;if(this.settings.unhighlight)for(t=0;e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,""),this.findByName(e[t].name).removeClass(this.settings.validClass);else e.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(e){var t,n=0;for(t in e)e[t]&&n++;return n},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(e){e.not(this.containers).text(""),this.addWrapper(e).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{e(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(e){}},findLastActive:function(){var t=this.lastActive;return t&&1===e.grep(this.errorList,function(e){return e.element.name===t.name}).length&&t},elements:function(){var t=this,n={};return e(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){var i=this.name||e(this).attr("name");return!i&&t.settings.debug&&window.console&&console.error("%o has no name assigned",this),this.hasAttribute("contenteditable")&&(this.form=e(this).closest("form")[0]),!(i in n||!t.objectLength(e(this).rules()))&&(n[i]=!0,!0)})},clean:function(t){return e(t)[0]},errors:function(){var t=this.settings.errorClass.split(" ").join(".");return e(this.settings.errorElement+"."+t,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=e([]),this.toHide=e([])},reset:function(){this.resetInternals(),this.currentElements=e([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(e){this.reset(),this.toHide=this.errorsFor(e)},elementValue:function(t){var n,i,a=e(t),r=t.type;return"radio"===r||"checkbox"===r?this.findByName(t.name).filter(":checked").val():"number"===r&&void 0!==t.validity?t.validity.badInput?"NaN":a.val():(n=t.hasAttribute("contenteditable")?a.text():a.val(),"file"===r?"C:\\fakepath\\"===n.substr(0,12)?n.substr(12):(i=n.lastIndexOf("/"))>=0?n.substr(i+1):(i=n.lastIndexOf("\\"),i>=0?n.substr(i+1):n):"string"==typeof n?n.replace(/\r/g,""):n)},check:function(t){t=this.validationTargetFor(this.clean(t));var n,i,a,r=e(t).rules(),s=e.map(r,function(e,t){return t}).length,o=!1,l=this.elementValue(t);if("function"==typeof r.normalizer){if("string"!=typeof(l=r.normalizer.call(t,l)))throw new TypeError("The normalizer should return a string value.");delete r.normalizer}for(i in r){a={method:i,parameters:r[i]};try{if("dependency-mismatch"===(n=e.validator.methods[i].call(this,l,t,a.parameters))&&1===s){o=!0;continue}if(o=!1,"pending"===n)return void(this.toHide=this.toHide.not(this.errorsFor(t)));if(!n)return this.formatAndAdd(t,a),!1}catch(e){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+t.id+", check the '"+a.method+"' method.",e),e instanceof TypeError&&(e.message+=".  Exception occurred when checking element "+t.id+", check the '"+a.method+"' method."),e}}if(!o)return this.objectLength(r)&&this.successList.push(t),!0},customDataMessage:function(t,n){return e(t).data("msg"+n.charAt(0).toUpperCase()+n.substring(1).toLowerCase())||e(t).data("msg")},customMessage:function(e,t){var n=this.settings.messages[e];return n&&(n.constructor===String?n:n[t])},findDefined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},defaultMessage:function(t,n){"string"==typeof n&&(n={method:n});var i=this.findDefined(this.customMessage(t.name,n.method),this.customDataMessage(t,n.method),!this.settings.ignoreTitle&&t.title||void 0,e.validator.messages[n.method],"<strong>Warning: No message defined for "+t.name+"</strong>"),a=/\$?\{(\d+)\}/g;return"function"==typeof i?i=i.call(this,n.parameters,t):a.test(i)&&(i=e.validator.format(i.replace(a,"{$1}"),n.parameters)),i},formatAndAdd:function(e,t){var n=this.defaultMessage(e,t);this.errorList.push({message:n,element:e,method:t.method}),this.errorMap[e.name]=n,this.submitted[e.name]=n},addWrapper:function(e){return this.settings.wrapper&&(e=e.add(e.parent(this.settings.wrapper))),e},defaultShowErrors:function(){var e,t,n;for(e=0;this.errorList[e];e++)n=this.errorList[e],this.settings.highlight&&this.settings.highlight.call(this,n.element,this.settings.errorClass,this.settings.validClass),this.showLabel(n.element,n.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(e=0;this.successList[e];e++)this.showLabel(this.successList[e]);if(this.settings.unhighlight)for(e=0,t=this.validElements();t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return e(this.errorList).map(function(){return this.element})},showLabel:function(t,n){var i,a,r,s,o=this.errorsFor(t),l=this.idOrName(t),u=e(t).attr("aria-describedby");o.length?(o.removeClass(this.settings.validClass).addClass(this.settings.errorClass),o.html(n)):(i=o=e("<"+this.settings.errorElement+">").attr("id",l+"-error").addClass(this.settings.errorClass).html(n||""),this.settings.wrapper&&(i=o.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(i):this.settings.errorPlacement?this.settings.errorPlacement.call(this,i,e(t)):i.insertAfter(t),o.is("label")?o.attr("for",l):0===o.parents("label[for='"+this.escapeCssMeta(l)+"']").length&&(r=o.attr("id"),u?u.match(new RegExp("\\b"+this.escapeCssMeta(r)+"\\b"))||(u+=" "+r):u=r,e(t).attr("aria-describedby",u),(a=this.groups[t.name])&&(s=this,e.each(s.groups,function(t,n){n===a&&e("[name='"+s.escapeCssMeta(t)+"']",s.currentForm).attr("aria-describedby",o.attr("id"))})))),!n&&this.settings.success&&(o.text(""),"string"==typeof this.settings.success?o.addClass(this.settings.success):this.settings.success(o,t)),this.toShow=this.toShow.add(o)},errorsFor:function(t){var n=this.escapeCssMeta(this.idOrName(t)),i=e(t).attr("aria-describedby"),a="label[for='"+n+"'], label[for='"+n+"'] *";return i&&(a=a+", #"+this.escapeCssMeta(i).replace(/\s+/g,", #")),this.errors().filter(a)},escapeCssMeta:function(e){return e.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(e){return this.groups[e.name]||(this.checkable(e)?e.name:e.id||e.name)},validationTargetFor:function(t){return this.checkable(t)&&(t=this.findByName(t.name)),e(t).not(this.settings.ignore)[0]},checkable:function(e){return/radio|checkbox/i.test(e.type)},findByName:function(t){return e(this.currentForm).find("[name='"+this.escapeCssMeta(t)+"']")},getLength:function(t,n){switch(n.nodeName.toLowerCase()){case"select":return e("option:selected",n).length;case"input":if(this.checkable(n))return this.findByName(n.name).filter(":checked").length}return t.length},depend:function(e,t){return!this.dependTypes[typeof e]||this.dependTypes[typeof e](e,t)},dependTypes:{boolean:function(e){return e},string:function(t,n){return!!e(t,n.form).length},function:function(e,t){return e(t)}},optional:function(t){var n=this.elementValue(t);return!e.validator.methods.required.call(this,n,t)&&"dependency-mismatch"},startRequest:function(t){this.pending[t.name]||(this.pendingRequest++,e(t).addClass(this.settings.pendingClass),this.pending[t.name]=!0)},stopRequest:function(t,n){--this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[t.name],e(t).removeClass(this.settings.pendingClass),n&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(e(this.currentForm).submit(),this.formSubmitted=!1):!n&&0===this.pendingRequest&&this.formSubmitted&&(e(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(t,n){return n="string"==typeof n&&n||"remote",e.data(t,"previousValue")||e.data(t,"previousValue",{old:null,valid:!0,message:this.defaultMessage(t,{method:n})})},destroy:function(){this.resetForm(),e(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(t,n){t.constructor===String?this.classRuleSettings[t]=n:e.extend(this.classRuleSettings,t)},classRules:function(t){var n={},i=e(t).attr("class");return i&&e.each(i.split(" "),function(){this in e.validator.classRuleSettings&&e.extend(n,e.validator.classRuleSettings[this])}),n},normalizeAttributeRule:function(e,t,n,i){/min|max|step/.test(n)&&(null===t||/number|range|text/.test(t))&&(i=Number(i),isNaN(i)&&(i=void 0)),i||0===i?e[n]=i:t===n&&"range"!==t&&(e[n]=!0)},attributeRules:function(t){var n,i,a={},r=e(t),s=t.getAttribute("type");for(n in e.validator.methods)"required"===n?(""===(i=t.getAttribute(n))&&(i=!0),i=!!i):i=r.attr(n),this.normalizeAttributeRule(a,s,n,i);return a.maxlength&&/-1|2147483647|524288/.test(a.maxlength)&&delete a.maxlength,a},dataRules:function(t){var n,i,a={},r=e(t),s=t.getAttribute("type");for(n in e.validator.methods)i=r.data("rule"+n.charAt(0).toUpperCase()+n.substring(1).toLowerCase()),this.normalizeAttributeRule(a,s,n,i);return a},staticRules:function(t){var n={},i=e.data(t.form,"validator");return i.settings.rules&&(n=e.validator.normalizeRule(i.settings.rules[t.name])||{}),n},normalizeRules:function(t,n){return e.each(t,function(i,a){if(!1!==a){if(a.param||a.depends){var r=!0;switch(typeof a.depends){case"string":r=!!e(a.depends,n.form).length;break;case"function":r=a.depends.call(n,n)}r?t[i]=void 0===a.param||a.param:(e.data(n.form,"validator").resetElements(e(n)),delete t[i])}}else delete t[i]}),e.each(t,function(i,a){t[i]=e.isFunction(a)&&"normalizer"!==i?a(n):a}),e.each(["minlength","maxlength"],function(){t[this]&&(t[this]=Number(t[this]))}),e.each(["rangelength","range"],function(){var n;t[this]&&(e.isArray(t[this])?t[this]=[Number(t[this][0]),Number(t[this][1])]:"string"==typeof t[this]&&(n=t[this].replace(/[\[\]]/g,"").split(/[\s,]+/),t[this]=[Number(n[0]),Number(n[1])]))}),e.validator.autoCreateRanges&&(null!=t.min&&null!=t.max&&(t.range=[t.min,t.max],delete t.min,delete t.max),null!=t.minlength&&null!=t.maxlength&&(t.rangelength=[t.minlength,t.maxlength],delete t.minlength,delete t.maxlength)),t},normalizeRule:function(t){if("string"==typeof t){var n={};e.each(t.split(/\s/),function(){n[this]=!0}),t=n}return t},addMethod:function(t,n,i){e.validator.methods[t]=n,e.validator.messages[t]=void 0!==i?i:e.validator.messages[t],n.length<3&&e.validator.addClassRules(t,e.validator.normalizeRule(t))},methods:{required:function(t,n,i){if(!this.depend(i,n))return"dependency-mismatch";if("select"===n.nodeName.toLowerCase()){var a=e(n).val();return a&&a.length>0}return this.checkable(n)?this.getLength(t,n)>0:t.length>0},email:function(e,t){return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)},url:function(e,t){return this.optional(t)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(e)},date:function(e,t){return this.optional(t)||!/Invalid|NaN/.test(new Date(e).toString())},dateISO:function(e,t){return this.optional(t)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(e)},number:function(e,t){return this.optional(t)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(e)},digits:function(e,t){return this.optional(t)||/^\d+$/.test(e)},minlength:function(t,n,i){var a=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||a>=i},maxlength:function(t,n,i){var a=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||a<=i},rangelength:function(t,n,i){var a=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||a>=i[0]&&a<=i[1]},min:function(e,t,n){return this.optional(t)||e>=n},max:function(e,t,n){return this.optional(t)||e<=n},range:function(e,t,n){return this.optional(t)||e>=n[0]&&e<=n[1]},step:function(t,n,i){var a,r=e(n).attr("type"),s="Step attribute on input type "+r+" is not supported.",o=["text","number","range"],l=new RegExp("\\b"+r+"\\b"),u=function(e){var t=(""+e).match(/(?:\.(\d+))?$/);return t&&t[1]?t[1].length:0},c=function(e){return Math.round(e*Math.pow(10,a))},d=!0;if(r&&!l.test(o.join()))throw new Error(s);return a=u(i),(u(t)>a||c(t)%c(i)!=0)&&(d=!1),this.optional(n)||d},equalTo:function(t,n,i){var a=e(i);return this.settings.onfocusout&&a.not(".validate-equalTo-blur").length&&a.addClass("validate-equalTo-blur").on("blur.validate-equalTo",function(){e(n).valid()}),t===a.val()},remote:function(t,n,i,a){if(this.optional(n))return"dependency-mismatch";a="string"==typeof a&&a||"remote";var r,s,o,l=this.previousValue(n,a);return this.settings.messages[n.name]||(this.settings.messages[n.name]={}),l.originalMessage=l.originalMessage||this.settings.messages[n.name][a],this.settings.messages[n.name][a]=l.message,i="string"==typeof i&&{url:i}||i,o=e.param(e.extend({data:t},i.data)),l.old===o?l.valid:(l.old=o,r=this,this.startRequest(n),s={},s[n.name]=t,e.ajax(e.extend(!0,{mode:"abort",port:"validate"+n.name,dataType:"json",data:s,context:r.currentForm,success:function(e){var i,s,o,u=!0===e||"true"===e;r.settings.messages[n.name][a]=l.originalMessage,u?(o=r.formSubmitted,r.resetInternals(),r.toHide=r.errorsFor(n),r.formSubmitted=o,r.successList.push(n),r.invalid[n.name]=!1,r.showErrors()):(i={},s=e||r.defaultMessage(n,{method:a,parameters:t}),i[n.name]=l.message=s,r.invalid[n.name]=!0,r.showErrors(i)),l.valid=u,r.stopRequest(n,u)}},i)),"pending")}}});var t,n={};return e.ajaxPrefilter?e.ajaxPrefilter(function(e,t,i){var a=e.port;"abort"===e.mode&&(n[a]&&n[a].abort(),n[a]=i)}):(t=e.ajax,e.ajax=function(i){var a=("mode"in i?i:e.ajaxSettings).mode,r=("port"in i?i:e.ajaxSettings).port;return"abort"===a?(n[r]&&n[r].abort(),n[r]=t.apply(this,arguments),n[r]):t.apply(this,arguments)}),e}),function(e,t){"function"==typeof define&&define.amd?define(["exports"],t):t("object"==typeof exports&&"string"!=typeof exports.nodeName?exports:e.commonJsStrict={})}(this,function(e){function t(e){if(e in F)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=W.length;n--;)if((e=W[n]+t)in F)return e}function n(e,t){e=e||{};for(var i in t)t[i]&&t[i].constructor&&t[i].constructor===Object?(e[i]=e[i]||{},n(e[i],t[i])):e[i]=t[i];return e}function i(e){if("createEvent"in document){var t=document.createEvent("HTMLEvents");t.initEvent("change",!1,!0),e.dispatchEvent(t)}else e.fireEvent("onchange")}function a(e,t,n){if("string"==typeof t){var i=t;(t={})[i]=n}for(var a in t)e.style[a]=t[a]}function r(e,t){e.classList?e.classList.add(t):e.className+=" "+t}function s(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(t,"")}function o(e){return parseInt(e,10)}function l(e,t){var n=t||new Image;return n.style.opacity=0,new Promise(function(t){n.src===e?t(n):(n.removeAttribute("crossOrigin"),e.match(/^https?:\/\/|^\/\//)&&n.setAttribute("crossOrigin","anonymous"),n.onload=function(){setTimeout(function(){t(n)},1)},n.src=e)})}function u(e,t){window.EXIF||t(0),EXIF.getData(e,function(){var e=EXIF.getTag(this,"Orientation");t(e)})}function c(e,t,n){var i=t.width,a=t.height,r=e.getContext("2d");switch(e.width=t.width,e.height=t.height,r.save(),n){case 2:r.translate(i,0),r.scale(-1,1);break;case 3:r.translate(i,a),r.rotate(180*Math.PI/180);break;case 4:r.translate(0,a),r.scale(1,-1);break;case 5:e.width=a,e.height=i,r.rotate(90*Math.PI/180),r.scale(1,-1);break;case 6:e.width=a,e.height=i,r.rotate(90*Math.PI/180),r.translate(0,-a);break;case 7:e.width=a,e.height=i,r.rotate(-90*Math.PI/180),r.translate(-i,a),r.scale(1,-1);break;case 8:e.width=a,e.height=i,r.translate(0,i),r.rotate(-90*Math.PI/180)}r.drawImage(t,0,0,i,a),r.restore()}function d(){var e,t,n,i,s,o=this,l=o.options.viewport.type?"cr-vp-"+o.options.viewport.type:null;o.options.useCanvas=o.options.enableOrientation||h.call(o),o.data={},o.elements={},e=o.elements.boundary=document.createElement("div"),t=o.elements.viewport=document.createElement("div"),o.elements.img=document.createElement("img"),n=o.elements.overlay=document.createElement("div"),o.options.useCanvas?(o.elements.canvas=document.createElement("canvas"),o.elements.preview=o.elements.canvas):o.elements.preview=o.elements.img,r(e,"cr-boundary"),i=o.options.boundary.width,s=o.options.boundary.height,a(e,{width:i+(isNaN(i)?"":"px"),height:s+(isNaN(s)?"":"px")}),r(t,"cr-viewport"),l&&r(t,l),a(t,{width:o.options.viewport.width+"px",height:o.options.viewport.height+"px"}),t.setAttribute("tabindex",0),r(o.elements.preview,"cr-image"),r(n,"cr-overlay"),o.element.appendChild(e),e.appendChild(o.elements.preview),e.appendChild(t),e.appendChild(n),r(o.element,"croppie-container"),o.options.customClass&&r(o.element,o.options.customClass),y.call(this),o.options.enableZoom&&f.call(o)}function h(){return this.options.enableExif&&window.EXIF}function p(e){if(this.options.enableZoom){var t=this.elements.zoomer,n=z(e,4);t.value=Math.max(t.min,Math.min(t.max,n))}}function f(){function e(){m.call(n,{value:parseFloat(a.value),origin:new G(n.elements.preview),viewportRect:n.elements.viewport.getBoundingClientRect(),transform:q.parse(n.elements.preview)})}function t(t){var i,a;i=t.wheelDelta?t.wheelDelta/1200:t.deltaY?t.deltaY/1060:t.detail?t.detail/-60:0,a=n._currentZoom+i*n._currentZoom,t.preventDefault(),p.call(n,a),e.call(n)}var n=this,i=n.elements.zoomerWrap=document.createElement("div"),a=n.elements.zoomer=document.createElement("input");r(i,"cr-slider-wrap"),r(a,"cr-slider"),a.type="range",a.step="0.0001",a.value=1,a.style.display=n.options.showZoomer?"":"none",n.element.appendChild(i),i.appendChild(a),n._currentZoom=1,n.elements.zoomer.addEventListener("input",e),n.elements.zoomer.addEventListener("change",e),n.options.mouseWheelZoom&&(n.elements.boundary.addEventListener("mousewheel",t),n.elements.boundary.addEventListener("DOMMouseScroll",t))}function m(e){function t(){var e={};e[j]=i.toString(),e[Y]=s.toString(),a(n.elements.preview,e)}var n=this,i=e?e.transform:q.parse(n.elements.preview),r=e?e.viewportRect:n.elements.viewport.getBoundingClientRect(),s=e?e.origin:new G(n.elements.preview);if(n._currentZoom=e?e.value:n._currentZoom,i.scale=n._currentZoom,t(),n.options.enforceBoundary){var o=g.call(n,r),l=o.translate,u=o.origin;i.x>=l.maxX&&(s.x=u.minX,i.x=l.maxX),i.x<=l.minX&&(s.x=u.maxX,i.x=l.minX),i.y>=l.maxY&&(s.y=u.minY,i.y=l.maxY),i.y<=l.minY&&(s.y=u.maxY,i.y=l.minY)}t(),$.call(n),b.call(n)}function g(e){var t=this,n=t._currentZoom,i=e.width,a=e.height,r=t.elements.boundary.clientWidth/2,s=t.elements.boundary.clientHeight/2,o=t.elements.preview.getBoundingClientRect(),l=o.width,u=o.height,c=i/2,d=a/2,h=-1*(c/n-r),p=-1*(d/n-s),f=1/n*c,m=1/n*d;return{translate:{maxX:h,minX:h-(l*(1/n)-i*(1/n)),maxY:p,minY:p-(u*(1/n)-a*(1/n))},origin:{maxX:l*(1/n)-f,minX:f,maxY:u*(1/n)-m,minY:m}}}function v(){var e=this,t=e._currentZoom,n=e.elements.preview.getBoundingClientRect(),i=e.elements.viewport.getBoundingClientRect(),r=q.parse(e.elements.preview.style[j]),s=new G(e.elements.preview),o=i.top-n.top+i.height/2,l=i.left-n.left+i.width/2,u={},c={};u.y=o/t,u.x=l/t,c.y=(u.y-s.y)*(1-t),c.x=(u.x-s.x)*(1-t),r.x-=c.x,r.y-=c.y;var d={};d[Y]=u.x+"px "+u.y+"px",d[j]=r.toString(),a(e.elements.preview,d)}function y(){function e(e,t){var n=f.elements.preview.getBoundingClientRect(),i=h.y+t,a=h.x+e;f.options.enforceBoundary?(d.top>n.top+t&&d.bottom<n.bottom+t&&(h.y=i),d.left>n.left+e&&d.right<n.right+e&&(h.x=a)):(h.y=i,h.x=a)}function t(e){var t=37,i=38,a=39,r=40;if(!e.shiftKey||e.keyCode!=i&&e.keyCode!=r){if(e.keyCode>=37&&e.keyCode<=40){e.preventDefault();var s=function(e){switch(e){case t:return[1,0];case i:return[0,1];case a:return[-1,0];case r:return[0,-1]}}(e.keyCode);h=q.parse(f.elements.preview),document.body.style[H]="none",d=f.elements.viewport.getBoundingClientRect(),n(s)}}else{var o=0;o=e.keyCode==i?parseFloat(f.elements.zoomer.value,10)+parseFloat(f.elements.zoomer.step,10):parseFloat(f.elements.zoomer.value,10)-parseFloat(f.elements.zoomer.step,10),f.setZoom(o)}}function n(t){var n={};e(t[0],t[1]),n[j]=h.toString(),a(f.elements.preview,n),w.call(f),document.body.style[H]="",v.call(f),b.call(f),c=0}function r(e){if(e.preventDefault(),!m){if(m=!0,l=e.pageX,u=e.pageY,e.touches){var t=e.touches[0];l=t.pageX,u=t.pageY}h=q.parse(f.elements.preview),window.addEventListener("mousemove",s),window.addEventListener("touchmove",s),window.addEventListener("mouseup",o),window.addEventListener("touchend",o),document.body.style[H]="none",d=f.elements.viewport.getBoundingClientRect()}}function s(t){t.preventDefault();var n=t.pageX,r=t.pageY;if(t.touches){var s=t.touches[0];n=s.pageX,r=s.pageY}var o=n-l,d=r-u,m={};if("touchmove"==t.type&&t.touches.length>1){var g=t.touches[0],v=t.touches[1],y=Math.sqrt((g.pageX-v.pageX)*(g.pageX-v.pageX)+(g.pageY-v.pageY)*(g.pageY-v.pageY));c||(c=y/f._currentZoom);var b=y/c;return p.call(f,b),void i(f.elements.zoomer)}e(o,d),m[j]=h.toString(),a(f.elements.preview,m),w.call(f),u=r,l=n}function o(){m=!1,window.removeEventListener("mousemove",s),window.removeEventListener("touchmove",s),window.removeEventListener("mouseup",o),window.removeEventListener("touchend",o),document.body.style[H]="",v.call(f),b.call(f),c=0}var l,u,c,d,h,f=this,m=!1;f.elements.overlay.addEventListener("mousedown",r),f.elements.viewport.addEventListener("keydown",t),f.elements.overlay.addEventListener("touchstart",r)}function w(){var e=this,t=e.elements.boundary.getBoundingClientRect(),n=e.elements.preview.getBoundingClientRect();a(e.elements.overlay,{width:n.width+"px",height:n.height+"px",top:n.top-t.top+"px",left:n.left-t.left+"px"})}function b(){var e=this,t=e.get();if(x.call(e))if(e.options.update.call(e,t),e.$&&"undefined"==typeof Prototype)e.$(e.element).trigger("update",t);else{var n;window.CustomEvent?n=new CustomEvent("update",{detail:t}):(n=document.createEvent("CustomEvent")).initCustomEvent("update",!0,!0,t),e.element.dispatchEvent(n)}}function x(){return this.elements.preview.offsetHeight>0&&this.elements.preview.offsetWidth>0}function C(){var e,t,n,r,s,o=this,l=0,u=1.5,c=1,d={},h=o.elements.preview,f=o.elements.zoomer,m=new q(0,0,c),g=new G;if(x.call(o)&&!o.data.bound){if(o.data.bound=!0,d[j]=m.toString(),d[Y]=g.toString(),d.opacity=1,a(h,d),e=h.getBoundingClientRect(),t=o.elements.viewport.getBoundingClientRect(),n=o.elements.boundary.getBoundingClientRect(),o._originalImageWidth=e.width,o._originalImageHeight=e.height,o.options.enableZoom){o.options.enforceBoundary&&(r=t.width/e.width,s=t.height/e.height,l=Math.max(r,s)),l>=u&&(u=l+1),f.min=z(l,4),f.max=z(u,4);var y=Math.max(n.width/e.width,n.height/e.height);c=null!==o.data.boundZoom?o.data.boundZoom:y,p.call(o,c),i(f)}else o._currentZoom=c;m.scale=o._currentZoom,d[j]=m.toString(),a(h,d),o.data.points.length?T.call(o,o.data.points):S.call(o),v.call(o),w.call(o)}}function T(e){if(4!=e.length)throw"Croppie - Invalid number of points supplied: "+e;var t=this,n=e[2]-e[0],i=t.elements.viewport.getBoundingClientRect(),r=t.elements.boundary.getBoundingClientRect(),s={left:i.left-r.left,top:i.top-r.top},o=i.width/n,l=e[1],u=e[0],c=-1*e[1]+s.top,d=-1*e[0]+s.left,h={};h[Y]=u+"px "+l+"px",h[j]=new q(d,c,o).toString(),a(t.elements.preview,h),p.call(t,o),t._currentZoom=o}function S(){var e=this,t=e.elements.preview.getBoundingClientRect(),n=e.elements.viewport.getBoundingClientRect(),i=e.elements.boundary.getBoundingClientRect(),r=n.left-i.left,s=n.top-i.top,o=r-(t.width-n.width)/2,l=s-(t.height-n.height)/2,u=new q(o,l,e._currentZoom);a(e.elements.preview,j,u.toString())}function k(e){var t=this,n=t.elements.canvas,i=t.elements.img,a=n.getContext("2d"),r=h.call(t),e=t.options.enableOrientation&&e;a.clearRect(0,0,n.width,n.height),n.width=i.width,n.height=i.height,r?u(i,function(t){c(n,i,o(t,10)),e&&c(n,i,e)}):e&&c(n,i,e)}function M(e){var t=this,n=e.points,i=o(n[0]),a=o(n[1]),r=o(n[2]),s=o(n[3]),l=r-i,u=s-a,c=e.circle,d=document.createElement("canvas"),h=d.getContext("2d"),p=l,f=u,m=0,g=0,v=p,y=f,w=1;return e.outputWidth&&e.outputHeight&&(v=e.outputWidth,y=e.outputHeight,w=v/p),d.width=v,d.height=y,e.backgroundColor&&(h.fillStyle=e.backgroundColor,h.fillRect(0,0,p,f)),i<0&&(m=Math.abs(i),i=0),a<0&&(g=Math.abs(a),a=0),r>t._originalImageWidth&&(p=l=t._originalImageWidth-i),s>t._originalImageHeight&&(f=u=t._originalImageHeight-a),1!==w&&(m*=w,g*=w,p*=w,f*=w),h.drawImage(this.elements.preview,i,a,l,u,m,g,p,f),c&&(h.fillStyle="#fff",h.globalCompositeOperation="destination-in",h.beginPath(),h.arc(p/2,f/2,p/2,0,2*Math.PI,!0),h.closePath(),h.fill()),d}function _(e){var t=e.points,n=document.createElement("div"),i=document.createElement("img"),s=t[2]-t[0],o=t[3]-t[1];return r(n,"croppie-result"),n.appendChild(i),a(i,{left:-1*t[0]+"px",top:-1*t[1]+"px"}),i.src=e.url,a(n,{width:s+"px",height:o+"px"}),n}function D(e){return M.call(this,e).toDataURL(e.format,e.quality)}function E(e){var t=this;return new Promise(function(n,i){M.call(t,e).toBlob(function(e){n(e)},e.format,e.quality)})}function P(e,t){var n,i=this,a=[],r=null;if("string"==typeof e)n=e,e={};else if(Array.isArray(e))a=e.slice();else{if(void 0===e&&i.data.url)return C.call(i),b.call(i),null;n=e.url,a=e.points||[],r=void 0===e.zoom?null:e.zoom}return i.data.bound=!1,i.data.url=n||i.data.url,i.data.boundZoom=r,l(n,i.elements.img).then(function(n){if(a.length)i.options.relative&&(a=[a[0]*n.naturalWidth/100,a[1]*n.naturalHeight/100,a[2]*n.naturalWidth/100,a[3]*n.naturalHeight/100]),i.data.points=a.map(function(e){return parseFloat(e)});else{var r,s,o=n.naturalWidth,l=n.naturalHeight,u=i.elements.viewport.getBoundingClientRect(),c=u.width/u.height;o/l>c?r=(s=l)*c:s=(r=o)/c;var d=(o-r)/2,h=(l-s)/2,p=d+r,f=h+s;i.data.points=[d,h,p,f]}i.options.useCanvas&&(i.elements.img.exifdata=null,k.call(i,e.orientation||1)),C.call(i),b.call(i),t&&t()})}function z(e,t){return parseFloat(e).toFixed(t||0)}function I(){var e=this,t=e.elements.preview.getBoundingClientRect(),n=e.elements.viewport.getBoundingClientRect(),i=n.left-t.left,a=n.top-t.top,r=(n.width-e.elements.viewport.offsetWidth)/2,s=(n.height-e.elements.viewport.offsetHeight)/2,o=i+e.elements.viewport.offsetWidth+r,l=a+e.elements.viewport.offsetHeight+s,u=e._currentZoom;(u===1/0||isNaN(u))&&(u=1);var c=e.options.enforceBoundary?0:Number.NEGATIVE_INFINITY;return i=Math.max(c,i/u),a=Math.max(c,a/u),o=Math.max(c,o/u),l=Math.max(c,l/u),{points:[z(i),z(a),z(o),z(l)],zoom:u}}function A(e){var t=this,i=I.call(t),a=n(V,n({},e)),r="string"==typeof e?e:a.type||"base64",s=a.size,o=a.format,l=a.quality,u=a.backgroundColor,c="boolean"==typeof a.circle?a.circle:"circle"===t.options.viewport.type,d=t.elements.viewport.getBoundingClientRect(),h=d.width/d.height;return"viewport"===s?(i.outputWidth=d.width,i.outputHeight=d.height):"object"==typeof s&&(s.width&&s.height?(i.outputWidth=s.width,i.outputHeight=s.height):s.width?(i.outputWidth=s.width,i.outputHeight=s.width/h):s.height&&(i.outputWidth=s.height*h,i.outputHeight=s.height)),X.indexOf(o)>-1&&(i.format="image/"+o,i.quality=l),i.circle=c,i.url=t.data.url,i.backgroundColor=u,new Promise(function(e,n){switch(r.toLowerCase()){case"rawcanvas":e(M.call(t,i));break;case"canvas":case"base64":e(D.call(t,i));break;case"blob":E.call(t,i).then(e);break;default:e(_.call(t,i))}})}function O(){C.call(this)}function L(e){if(!this.options.useCanvas)throw"Croppie: Cannot rotate without enableOrientation";var t=this,n=t.elements.canvas,i=(t.elements.img,document.createElement("canvas")),a=1;i.width=n.width,i.height=n.height,i.getContext("2d").drawImage(n,0,0),90!==e&&-270!==e||(a=6),-90!==e&&270!==e||(a=8),180!==e&&-180!==e||(a=3),c(n,i,a),m.call(t)}function R(){var e=this;e.element.removeChild(e.elements.boundary),s(e.element,"croppie-container"),e.options.enableZoom&&e.element.removeChild(e.elements.zoomerWrap),delete e.elements}function N(e,t){if(this.element=e,this.options=n(n({},N.defaults),t),"img"===this.element.tagName.toLowerCase()){var i=this.element;r(i,"cr-original-image");var a=document.createElement("div");this.element.parentNode.appendChild(a),a.appendChild(i),this.element=a,this.options.url=this.options.url||i.src}if(d.call(this),this.options.url){var s={url:this.options.url,points:this.options.points};delete this.options.url,delete this.options.points,P.call(this,s)}}"function"!=typeof Promise&&function(e){function t(e,t){return function(){e.apply(t,arguments)}}function n(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=null,this._value=null,this._deferreds=[],l(e,t(a,this),t(r,this))}function i(e){var t=this;return null===this._state?void this._deferreds.push(e):void c(function(){var n=t._state?e.onFulfilled:e.onRejected;if(null!==n){var i;try{i=n(t._value)}catch(t){return void e.reject(t)}e.resolve(i)}else(t._state?e.resolve:e.reject)(t._value)})}function a(e){try{if(e===this)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if("function"==typeof n)return void l(t(n,e),t(a,this),t(r,this))}this._state=!0,this._value=e,s.call(this)}catch(e){r.call(this,e)}}function r(e){this._state=!1,this._value=e,s.call(this)}function s(){for(var e=0,t=this._deferreds.length;t>e;e++)i.call(this,this._deferreds[e]);this._deferreds=null}function o(e,t,n,i){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.resolve=n,this.reject=i}function l(e,t,n){var i=!1;try{e(function(e){i||(i=!0,t(e))},function(e){i||(i=!0,n(e))})}catch(e){if(i)return;i=!0,n(e)}}var u=setTimeout,c="function"==typeof setImmediate&&setImmediate||function(e){u(e,1)},d=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};n.prototype.catch=function(e){return this.then(null,e)},n.prototype.then=function(e,t){var a=this;return new n(function(n,r){i.call(a,new o(e,t,n,r))})},n.all=function(){var e=Array.prototype.slice.call(1===arguments.length&&d(arguments[0])?arguments[0]:arguments);return new n(function(t,n){function i(r,s){try{if(s&&("object"==typeof s||"function"==typeof s)){var o=s.then;if("function"==typeof o)return void o.call(s,function(e){i(r,e)},n)}e[r]=s,0==--a&&t(e)}catch(e){n(e)}}if(0===e.length)return t([]);for(var a=e.length,r=0;r<e.length;r++)i(r,e[r])})},n.resolve=function(e){return e&&"object"==typeof e&&e.constructor===n?e:new n(function(t){t(e)})},n.reject=function(e){return new n(function(t,n){n(e)})},n.race=function(e){return new n(function(t,n){for(var i=0,a=e.length;a>i;i++)e[i].then(t,n)})},n._setImmediateFn=function(e){c=e},"undefined"!=typeof module&&module.exports?module.exports=n:e.Promise||(e.Promise=n)}(this),"function"!=typeof window.CustomEvent&&function(){function e(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n}e.prototype=window.Event.prototype,window.CustomEvent=e}(),HTMLCanvasElement.prototype.toBlob||Object.defineProperty(HTMLCanvasElement.prototype,"toBlob",{value:function(e,t,n){for(var i=atob(this.toDataURL(t,n).split(",")[1]),a=i.length,r=new Uint8Array(a),s=0;s<a;s++)r[s]=i.charCodeAt(s);e(new Blob([r],{type:t||"image/png"}))}});var Y,j,H,W=["Webkit","Moz","ms"],F=document.createElement("div").style;j=t("transform"),Y=t("transformOrigin"),H=t("userSelect");var B={translate3d:{suffix:", 0px"},translate:{suffix:""}},q=function(e,t,n){this.x=parseFloat(e),this.y=parseFloat(t),this.scale=parseFloat(n)};q.parse=function(e){return e.style?q.parse(e.style[j]):e.indexOf("matrix")>-1||e.indexOf("none")>-1?q.fromMatrix(e):q.fromString(e)},q.fromMatrix=function(e){var t=e.substring(7).split(",");return t.length&&"none"!==e||(t=[1,0,0,1,0,0]),new q(o(t[4]),o(t[5]),parseFloat(t[0]))},q.fromString=function(e){var t=e.split(") "),n=t[0].substring(N.globals.translate.length+1).split(","),i=t.length>1?t[1].substring(6):1,a=n.length>1?n[0]:0,r=n.length>1?n[1]:0;return new q(a,r,i)},q.prototype.toString=function(){var e=B[N.globals.translate].suffix||"";return N.globals.translate+"("+this.x+"px, "+this.y+"px"+e+") scale("+this.scale+")"};var G=function(e){if(!e||!e.style[Y])return this.x=0,void(this.y=0);var t=e.style[Y].split(" ");this.x=parseFloat(t[0]),this.y=parseFloat(t[1])};G.prototype.toString=function(){return this.x+"px "+this.y+"px"};var $=function(e,t,n){var i;return function(){var a=this,r=arguments,s=function(){i=null,n||e.apply(a,r)},o=n&&!i;clearTimeout(i),i=setTimeout(s,t),o&&e.apply(a,r)}}(w,500),V={type:"canvas",format:"png",quality:1},X=["jpeg","webp","png"];if(window.jQuery){var U=window.jQuery;U.fn.croppie=function(e){if("string"===typeof e){var t=Array.prototype.slice.call(arguments,1),n=U(this).data("croppie");return"get"===e?n.get():"result"===e?n.result.apply(n,t):"bind"===e?n.bind.apply(n,t):this.each(function(){var n=U(this).data("croppie");if(n){var i=n[e];if(!U.isFunction(i))throw"Croppie "+e+" method not found";i.apply(n,t),"destroy"===e&&U(this).removeData("croppie")}})}return this.each(function(){var t=new N(this,e);t.$=U,U(this).data("croppie",t)})}}N.defaults={viewport:{width:100,height:100,type:"square"},boundary:{},orientationControls:{enabled:!0,leftClass:"",rightClass:""},customClass:"",showZoomer:!0,enableZoom:!0,mouseWheelZoom:!0,enableExif:!1,enforceBoundary:!0,enableOrientation:!1,update:function(){}},N.globals={translate:"translate3d"},n(N.prototype,{bind:function(e,t){return P.call(this,e,t)},get:function(){var e=I.call(this),t=e.points;return this.options.relative&&(t[0]/=this.elements.img.naturalWidth/100,t[1]/=this.elements.img.naturalHeight/100,t[2]/=this.elements.img.naturalWidth/100,t[3]/=this.elements.img.naturalHeight/100),e},result:function(e){return A.call(this,e)},refresh:function(){return O.call(this)},setZoom:function(e){p.call(this,e),i(this.elements.zoomer)},rotate:function(e){L.call(this,e)},destroy:function(){return R.call(this)}}),e.Croppie=window.Croppie=N,"object"==typeof module&&module.exports&&(module.exports=N)}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.moment=t()}(this,function(){"use strict";function e(){return yi.apply(null,arguments)}function t(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function n(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function i(e){var t;for(t in e)return!1;return!0}function a(e){return void 0===e}function r(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function s(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function o(e,t){var n,i=[];for(n=0;n<e.length;++n)i.push(t(e[n],n));return i}function l(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function u(e,t){for(var n in t)l(t,n)&&(e[n]=t[n]);return l(t,"toString")&&(e.toString=t.toString),l(t,"valueOf")&&(e.valueOf=t.valueOf),e}function c(e,t,n,i){return vt(e,t,n,i,!0).utc()}function d(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}}function h(e){return null==e._pf&&(e._pf=d()),e._pf}function p(e){if(null==e._isValid){var t=h(e),n=bi.call(t.parsedDateParts,function(e){return null!=e}),i=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(i=i&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return i;e._isValid=i}return e._isValid}function f(e){var t=c(NaN);return null!=e?u(h(t),e):h(t).userInvalidated=!0,t}function m(e,t){var n,i,r;if(a(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),a(t._i)||(e._i=t._i),a(t._f)||(e._f=t._f),a(t._l)||(e._l=t._l),a(t._strict)||(e._strict=t._strict),a(t._tzm)||(e._tzm=t._tzm),a(t._isUTC)||(e._isUTC=t._isUTC),a(t._offset)||(e._offset=t._offset),a(t._pf)||(e._pf=h(t)),a(t._locale)||(e._locale=t._locale),xi.length>0)for(n=0;n<xi.length;n++)a(r=t[i=xi[n]])||(e[i]=r);return e}function g(t){m(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===Ci&&(Ci=!0,e.updateOffset(this),Ci=!1)}function v(e){return e instanceof g||null!=e&&null!=e._isAMomentObject}function y(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function w(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=y(t)),n}function b(e,t,n){var i,a=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),s=0;for(i=0;i<a;i++)(n&&e[i]!==t[i]||!n&&w(e[i])!==w(t[i]))&&s++;return s+r}function x(t){!1===e.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function C(t,n){var i=!0;return u(function(){if(null!=e.deprecationHandler&&e.deprecationHandler(null,t),i){for(var a,r=[],s=0;s<arguments.length;s++){if(a="","object"==typeof arguments[s]){a+="\n["+s+"] ";for(var o in arguments[0])a+=o+": "+arguments[0][o]+", ";a=a.slice(0,-2)}else a=arguments[s];r.push(a)}x(t+"\nArguments: "+Array.prototype.slice.call(r).join("")+"\n"+(new Error).stack),i=!1}return n.apply(this,arguments)},n)}function T(t,n){null!=e.deprecationHandler&&e.deprecationHandler(t,n),Ti[t]||(x(n),Ti[t]=!0)}function S(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function k(e){var t,n;for(n in e)S(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)}function M(e,t){var i,a=u({},e);for(i in t)l(t,i)&&(n(e[i])&&n(t[i])?(a[i]={},u(a[i],e[i]),u(a[i],t[i])):null!=t[i]?a[i]=t[i]:delete a[i]);for(i in e)l(e,i)&&!l(t,i)&&n(e[i])&&(a[i]=u({},a[i]));return a}function _(e){null!=e&&this.set(e)}function D(e,t,n){var i=this._calendar[e]||this._calendar.sameElse;return S(i)?i.call(t,n):i}function E(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function P(){return this._invalidDate}function z(e){return this._ordinal.replace("%d",e)}function I(e,t,n,i){var a=this._relativeTime[n];return S(a)?a(e,t,n,i):a.replace(/%d/i,e)}function A(e,t){var n=this._relativeTime[e>0?"future":"past"];return S(n)?n(t):n.replace(/%s/i,t)}function O(e,t){var n=e.toLowerCase();zi[n]=zi[n+"s"]=zi[t]=e}function L(e){return"string"==typeof e?zi[e]||zi[e.toLowerCase()]:void 0}function R(e){var t,n,i={};for(n in e)l(e,n)&&(t=L(n))&&(i[t]=e[n]);return i}function N(e,t){Ii[e]=t}function Y(e){var t=[];for(var n in e)t.push({unit:n,priority:Ii[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}function j(t,n){return function(i){return null!=i?(W(this,t,i),e.updateOffset(this,n),this):H(this,t)}}function H(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function W(e,t,n){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+t](n)}function F(e){return e=L(e),S(this[e])?this[e]():this}function B(e,t){if("object"==typeof e)for(var n=Y(e=R(e)),i=0;i<n.length;i++)this[n[i].unit](e[n[i].unit]);else if(e=L(e),S(this[e]))return this[e](t);return this}function q(e,t,n){var i=""+Math.abs(e),a=t-i.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+i}function G(e,t,n,i){var a=i;"string"==typeof i&&(a=function(){return this[i]()}),e&&(Ri[e]=a),t&&(Ri[t[0]]=function(){return q(a.apply(this,arguments),t[1],t[2])}),n&&(Ri[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function $(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function V(e){var t,n,i=e.match(Ai);for(t=0,n=i.length;t<n;t++)Ri[i[t]]?i[t]=Ri[i[t]]:i[t]=$(i[t]);return function(t){var a,r="";for(a=0;a<n;a++)r+=S(i[a])?i[a].call(t,e):i[a];return r}}function X(e,t){return e.isValid()?(t=U(t,e.localeData()),Li[t]=Li[t]||V(t),Li[t](e)):e.localeData().invalidDate()}function U(e,t){function n(e){return t.longDateFormat(e)||e}var i=5;for(Oi.lastIndex=0;i>=0&&Oi.test(e);)e=e.replace(Oi,n),Oi.lastIndex=0,i-=1;return e}function Z(e,t,n){ea[e]=S(t)?t:function(e,i){return e&&n?n:t}}function Q(e,t){return l(ea,e)?ea[e](t._strict,t._locale):new RegExp(K(e))}function K(e){return J(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,i,a){return t||n||i||a}))}function J(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ee(e,t){var n,i=t;for("string"==typeof e&&(e=[e]),r(t)&&(i=function(e,n){n[t]=w(e)}),n=0;n<e.length;n++)ta[e[n]]=i}function te(e,t){ee(e,function(e,n,i,a){i._w=i._w||{},t(e,i._w,i,a)})}function ne(e,t,n){null!=t&&l(ta,e)&&ta[e](t,n._a,n,e)}function ie(e,t){return new Date(Date.UTC(e,t+1,0)).getUTCDate()}function ae(e,n){return e?t(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||ha).test(n)?"format":"standalone"][e.month()]:t(this._months)?this._months:this._months.standalone}function re(e,n){return e?t(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[ha.test(n)?"format":"standalone"][e.month()]:t(this._monthsShort)?this._monthsShort:this._monthsShort.standalone}function se(e,t,n){var i,a,r,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],i=0;i<12;++i)r=c([2e3,i]),this._shortMonthsParse[i]=this.monthsShort(r,"").toLocaleLowerCase(),this._longMonthsParse[i]=this.months(r,"").toLocaleLowerCase();return n?"MMM"===t?(a=da.call(this._shortMonthsParse,s),-1!==a?a:null):(a=da.call(this._longMonthsParse,s),-1!==a?a:null):"MMM"===t?-1!==(a=da.call(this._shortMonthsParse,s))?a:(a=da.call(this._longMonthsParse,s),-1!==a?a:null):-1!==(a=da.call(this._longMonthsParse,s))?a:(a=da.call(this._shortMonthsParse,s),-1!==a?a:null)}function oe(e,t,n){var i,a,r;if(this._monthsParseExact)return se.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;i<12;i++){if(a=c([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(r="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[i]=new RegExp(r.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[i].test(e))return i;if(n&&"MMM"===t&&this._shortMonthsParse[i].test(e))return i;if(!n&&this._monthsParse[i].test(e))return i}}function le(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=w(t);else if(t=e.localeData().monthsParse(t),!r(t))return e;return n=Math.min(e.date(),ie(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function ue(t){return null!=t?(le(this,t),e.updateOffset(this,!0),this):H(this,"Month")}function ce(){return ie(this.year(),this.month())}function de(e){return this._monthsParseExact?(l(this,"_monthsRegex")||pe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(l(this,"_monthsShortRegex")||(this._monthsShortRegex=ma),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)}function he(e){return this._monthsParseExact?(l(this,"_monthsRegex")||pe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(l(this,"_monthsRegex")||(this._monthsRegex=ga),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)}function pe(){function e(e,t){return t.length-e.length}var t,n,i=[],a=[],r=[];for(t=0;t<12;t++)n=c([2e3,t]),i.push(this.monthsShort(n,"")),a.push(this.months(n,"")),r.push(this.months(n,"")),r.push(this.monthsShort(n,""));for(i.sort(e),a.sort(e),r.sort(e),t=0;t<12;t++)i[t]=J(i[t]),a[t]=J(a[t]);for(t=0;t<24;t++)r[t]=J(r[t]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")","i")}function fe(e){return me(e)?366:365}function me(e){return e%4==0&&e%100!=0||e%400==0}function ge(){return me(this.year())}function ve(e,t,n,i,a,r,s){var o=new Date(e,t,n,i,a,r,s);return e<100&&e>=0&&isFinite(o.getFullYear())&&o.setFullYear(e),o}function ye(e){var t=new Date(Date.UTC.apply(null,arguments));return e<100&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function we(e,t,n){var i=7+t-n;return-((7+ye(e,0,i).getUTCDay()-t)%7)+i-1}function be(e,t,n,i,a){var r,s,o=1+7*(t-1)+(7+n-i)%7+we(e,i,a);return o<=0?s=fe(r=e-1)+o:o>fe(e)?(r=e+1,s=o-fe(e)):(r=e,s=o),{year:r,dayOfYear:s}}function xe(e,t,n){var i,a,r=we(e.year(),t,n),s=Math.floor((e.dayOfYear()-r-1)/7)+1;return s<1?i=s+Ce(a=e.year()-1,t,n):s>Ce(e.year(),t,n)?(i=s-Ce(e.year(),t,n),a=e.year()+1):(a=e.year(),i=s),{week:i,year:a}}function Ce(e,t,n){var i=we(e,t,n),a=we(e+1,t,n);return(fe(e)-i+a)/7}function Te(e){return xe(e,this._week.dow,this._week.doy).week}function Se(){return this._week.dow}function ke(){return this._week.doy}function Me(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")}function _e(e){var t=xe(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")}function De(e,t){return"string"!=typeof e?e:isNaN(e)?(e=t.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function Ee(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}function Pe(e,n){return e?t(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(n)?"format":"standalone"][e.day()]:t(this._weekdays)?this._weekdays:this._weekdays.standalone}function ze(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort}function Ie(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin}function Ae(e,t,n){var i,a,r,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],i=0;i<7;++i)r=c([2e3,1]).day(i),this._minWeekdaysParse[i]=this.weekdaysMin(r,"").toLocaleLowerCase(),this._shortWeekdaysParse[i]=this.weekdaysShort(r,"").toLocaleLowerCase(),this._weekdaysParse[i]=this.weekdays(r,"").toLocaleLowerCase();return n?"dddd"===t?(a=da.call(this._weekdaysParse,s),-1!==a?a:null):"ddd"===t?(a=da.call(this._shortWeekdaysParse,s),-1!==a?a:null):(a=da.call(this._minWeekdaysParse,s),-1!==a?a:null):"dddd"===t?-1!==(a=da.call(this._weekdaysParse,s))?a:-1!==(a=da.call(this._shortWeekdaysParse,s))?a:(a=da.call(this._minWeekdaysParse,s),-1!==a?a:null):"ddd"===t?-1!==(a=da.call(this._shortWeekdaysParse,s))?a:-1!==(a=da.call(this._weekdaysParse,s))?a:(a=da.call(this._minWeekdaysParse,s),-1!==a?a:null):-1!==(a=da.call(this._minWeekdaysParse,s))?a:-1!==(a=da.call(this._weekdaysParse,s))?a:(a=da.call(this._shortWeekdaysParse,s),-1!==a?a:null)}function Oe(e,t,n){var i,a,r;if(this._weekdaysParseExact)return Ae.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),i=0;i<7;i++){if(a=c([2e3,1]).day(i),n&&!this._fullWeekdaysParse[i]&&(this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(a,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(a,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(a,"").replace(".",".?")+"$","i")),this._weekdaysParse[i]||(r="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[i]=new RegExp(r.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[i].test(e))return i;if(n&&"ddd"===t&&this._shortWeekdaysParse[i].test(e))return i;if(n&&"dd"===t&&this._minWeekdaysParse[i].test(e))return i;if(!n&&this._weekdaysParse[i].test(e))return i}}function Le(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=De(e,this.localeData()),this.add(e-t,"d")):t}function Re(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")}function Ne(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=Ee(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7}function Ye(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||We.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(l(this,"_weekdaysRegex")||(this._weekdaysRegex=Ca),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)}function je(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||We.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(l(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ta),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function He(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||We.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(l(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Sa),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function We(){function e(e,t){return t.length-e.length}var t,n,i,a,r,s=[],o=[],l=[],u=[];for(t=0;t<7;t++)n=c([2e3,1]).day(t),i=this.weekdaysMin(n,""),a=this.weekdaysShort(n,""),r=this.weekdays(n,""),s.push(i),o.push(a),l.push(r),u.push(i),u.push(a),u.push(r);for(s.sort(e),o.sort(e),l.sort(e),u.sort(e),t=0;t<7;t++)o[t]=J(o[t]),l[t]=J(l[t]),u[t]=J(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function Fe(){return this.hours()%12||12}function Be(){return this.hours()||24}function qe(e,t){G(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function Ge(e,t){return t._meridiemParse}function $e(e){return"p"===(e+"").toLowerCase().charAt(0)}function Ve(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"}function Xe(e){return e?e.toLowerCase().replace("_","-"):e}function Ue(e){for(var t,n,i,a,r=0;r<e.length;){for(t=(a=Xe(e[r]).split("-")).length,n=(n=Xe(e[r+1]))?n.split("-"):null;t>0;){if(i=Ze(a.slice(0,t).join("-")))return i;if(n&&n.length>=t&&b(a,n,!0)>=t-1)break;t--}r++}return null}function Ze(e){var t=null;if(!Ea[e]&&"undefined"!=typeof module&&module&&module.exports)try{t=ka._abbr,require("./locale/"+e),Qe(t)}catch(e){}return Ea[e]}function Qe(e,t){var n;return e&&(n=a(t)?et(e):Ke(e,t))&&(ka=n),ka._abbr}function Ke(e,t){if(null!==t){var n=Da;if(t.abbr=e,null!=Ea[e])T("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=Ea[e]._config;else if(null!=t.parentLocale){if(null==Ea[t.parentLocale])return Pa[t.parentLocale]||(Pa[t.parentLocale]=[]),Pa[t.parentLocale].push({name:e,config:t}),null;n=Ea[t.parentLocale]._config}return Ea[e]=new _(M(n,t)),Pa[e]&&Pa[e].forEach(function(e){Ke(e.name,e.config)}),Qe(e),Ea[e]}return delete Ea[e],null}function Je(e,t){if(null!=t){var n,i=Da;null!=Ea[e]&&(i=Ea[e]._config),(n=new _(t=M(i,t))).parentLocale=Ea[e],Ea[e]=n,Qe(e)}else null!=Ea[e]&&(null!=Ea[e].parentLocale?Ea[e]=Ea[e].parentLocale:null!=Ea[e]&&delete Ea[e]);return Ea[e]}function et(e){var n;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return ka;if(!t(e)){if(n=Ze(e))return n;e=[e]}return Ue(e)}function tt(){return Mi(Ea)}function nt(e){var t,n=e._a;return n&&-2===h(e).overflow&&(t=n[ia]<0||n[ia]>11?ia:n[aa]<1||n[aa]>ie(n[na],n[ia])?aa:n[ra]<0||n[ra]>24||24===n[ra]&&(0!==n[sa]||0!==n[oa]||0!==n[la])?ra:n[sa]<0||n[sa]>59?sa:n[oa]<0||n[oa]>59?oa:n[la]<0||n[la]>999?la:-1,h(e)._overflowDayOfYear&&(t<na||t>aa)&&(t=aa),h(e)._overflowWeeks&&-1===t&&(t=ua),h(e)._overflowWeekday&&-1===t&&(t=ca),h(e).overflow=t),e}function it(e){var t,n,i,a,r,s,o=e._i,l=za.exec(o)||Ia.exec(o);if(l){for(h(e).iso=!0,t=0,n=Oa.length;t<n;t++)if(Oa[t][1].exec(l[1])){a=Oa[t][0],i=!1!==Oa[t][2];break}if(null==a)return void(e._isValid=!1);if(l[3]){for(t=0,n=La.length;t<n;t++)if(La[t][1].exec(l[3])){r=(l[2]||" ")+La[t][0];break}if(null==r)return void(e._isValid=!1)}if(!i&&null!=r)return void(e._isValid=!1);if(l[4]){if(!Aa.exec(l[4]))return void(e._isValid=!1);s="Z"}e._f=a+(r||"")+(s||""),ct(e)}else e._isValid=!1}function at(e){var t,n,i,a,r,s,o,l,u={" GMT":" +0000"," EDT":" -0400"," EST":" -0500"," CDT":" -0500"," CST":" -0600"," MDT":" -0600"," MST":" -0700"," PDT":" -0700"," PST":" -0800"};if(t=e._i.replace(/\([^\)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s|\s$/g,""),n=Na.exec(t)){if(i=n[1]?"ddd"+(5===n[1].length?", ":" "):"",a="D MMM "+(n[2].length>10?"YYYY ":"YY "),r="HH:mm"+(n[4]?":ss":""),n[1]){var c=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"][new Date(n[2]).getDay()];if(n[1].substr(0,3)!==c)return h(e).weekdayMismatch=!0,void(e._isValid=!1)}switch(n[5].length){case 2:o=0===l?" +0000":((l="YXWVUTSRQPONZABCDEFGHIKLM".indexOf(n[5][1].toUpperCase())-12)<0?" -":" +")+(""+l).replace(/^-?/,"0").match(/..$/)[0]+"00";break;case 4:o=u[n[5]];break;default:o=u[" GMT"]}n[5]=o,e._i=n.splice(1).join(""),s=" ZZ",e._f=i+a+r+s,ct(e),h(e).rfc2822=!0}else e._isValid=!1}function rt(t){var n=Ra.exec(t._i);null===n?(it(t),!1===t._isValid&&(delete t._isValid,at(t),!1===t._isValid&&(delete t._isValid,e.createFromInputFallback(t)))):t._d=new Date(+n[1])}function st(e,t,n){return null!=e?e:null!=t?t:n}function ot(t){var n=new Date(e.now());return t._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function lt(e){var t,n,i,a,r=[];if(!e._d){for(i=ot(e),e._w&&null==e._a[aa]&&null==e._a[ia]&&ut(e),null!=e._dayOfYear&&(a=st(e._a[na],i[na]),(e._dayOfYear>fe(a)||0===e._dayOfYear)&&(h(e)._overflowDayOfYear=!0),n=ye(a,0,e._dayOfYear),e._a[ia]=n.getUTCMonth(),e._a[aa]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=r[t]=i[t];for(;t<7;t++)e._a[t]=r[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[ra]&&0===e._a[sa]&&0===e._a[oa]&&0===e._a[la]&&(e._nextDay=!0,e._a[ra]=0),e._d=(e._useUTC?ye:ve).apply(null,r),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[ra]=24)}}function ut(e){var t,n,i,a,r,s,o,l;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)r=1,s=4,n=st(t.GG,e._a[na],xe(yt(),1,4).year),i=st(t.W,1),((a=st(t.E,1))<1||a>7)&&(l=!0);else{r=e._locale._week.dow,s=e._locale._week.doy;var u=xe(yt(),r,s);n=st(t.gg,e._a[na],u.year),i=st(t.w,u.week),null!=t.d?((a=t.d)<0||a>6)&&(l=!0):null!=t.e?(a=t.e+r,(t.e<0||t.e>6)&&(l=!0)):a=r}i<1||i>Ce(n,r,s)?h(e)._overflowWeeks=!0:null!=l?h(e)._overflowWeekday=!0:(o=be(n,i,a,r,s),e._a[na]=o.year,e._dayOfYear=o.dayOfYear)}function ct(t){if(t._f!==e.ISO_8601)if(t._f!==e.RFC_2822){t._a=[],h(t).empty=!0;var n,i,a,r,s,o=""+t._i,l=o.length,u=0;for(a=U(t._f,t._locale).match(Ai)||[],n=0;n<a.length;n++)r=a[n],(i=(o.match(Q(r,t))||[])[0])&&((s=o.substr(0,o.indexOf(i))).length>0&&h(t).unusedInput.push(s),o=o.slice(o.indexOf(i)+i.length),u+=i.length),Ri[r]?(i?h(t).empty=!1:h(t).unusedTokens.push(r),ne(r,i,t)):t._strict&&!i&&h(t).unusedTokens.push(r);h(t).charsLeftOver=l-u,o.length>0&&h(t).unusedInput.push(o),t._a[ra]<=12&&!0===h(t).bigHour&&t._a[ra]>0&&(h(t).bigHour=void 0),h(t).parsedDateParts=t._a.slice(0),h(t).meridiem=t._meridiem,t._a[ra]=dt(t._locale,t._a[ra],t._meridiem),lt(t),nt(t)}else at(t);else it(t)}function dt(e,t,n){var i;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((i=e.isPM(n))&&t<12&&(t+=12),i||12!==t||(t=0),t):t}function ht(e){var t,n,i,a,r;if(0===e._f.length)return h(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)r=0,t=m({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],ct(t),p(t)&&(r+=h(t).charsLeftOver,r+=10*h(t).unusedTokens.length,h(t).score=r,(null==i||r<i)&&(i=r,n=t));u(e,n||t)}function pt(e){if(!e._d){var t=R(e._i);e._a=o([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),lt(e)}}function ft(e){var t=new g(nt(mt(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function mt(e){var n=e._i,i=e._f;return e._locale=e._locale||et(e._l),null===n||void 0===i&&""===n?f({nullInput:!0}):("string"==typeof n&&(e._i=n=e._locale.preparse(n)),v(n)?new g(nt(n)):(s(n)?e._d=n:t(i)?ht(e):i?ct(e):gt(e),p(e)||(e._d=null),e))}function gt(i){var l=i._i;a(l)?i._d=new Date(e.now()):s(l)?i._d=new Date(l.valueOf()):"string"==typeof l?rt(i):t(l)?(i._a=o(l.slice(0),function(e){return parseInt(e,10)}),lt(i)):n(l)?pt(i):r(l)?i._d=new Date(l):e.createFromInputFallback(i)}function vt(e,a,r,s,o){var l={};return!0!==r&&!1!==r||(s=r,r=void 0),(n(e)&&i(e)||t(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=o,l._l=r,l._i=e,l._f=a,l._strict=s,ft(l)}function yt(e,t,n,i){return vt(e,t,n,i,!1)}function wt(e,n){var i,a;if(1===n.length&&t(n[0])&&(n=n[0]),!n.length)return yt();for(i=n[0],a=1;a<n.length;++a)n[a].isValid()&&!n[a][e](i)||(i=n[a]);return i}function bt(){return wt("isBefore",[].slice.call(arguments,0))}function xt(){return wt("isAfter",[].slice.call(arguments,0))}function Ct(e){for(var t in e)if(-1===Wa.indexOf(t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,i=0;i<Wa.length;++i)if(e[Wa[i]]){if(n)return!1;parseFloat(e[Wa[i]])!==w(e[Wa[i]])&&(n=!0)}return!0}function Tt(){return this._isValid}function St(){return Bt(NaN)}function kt(e){var t=R(e),n=t.year||0,i=t.quarter||0,a=t.month||0,r=t.week||0,s=t.day||0,o=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=Ct(t),this._milliseconds=+c+1e3*u+6e4*l+1e3*o*60*60,this._days=+s+7*r,this._months=+a+3*i+12*n,this._data={},this._locale=et(),this._bubble()}function Mt(e){return e instanceof kt}function _t(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Dt(e,t){G(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+q(~~(e/60),2)+t+q(~~e%60,2)})}function Et(e,t){var n=(t||"").match(e);if(null===n)return null;var i=((n[n.length-1]||[])+"").match(Fa)||["-",0,0],a=60*i[1]+w(i[2]);return 0===a?0:"+"===i[0]?a:-a}function Pt(t,n){var i,a;return n._isUTC?(i=n.clone(),a=(v(t)||s(t)?t.valueOf():yt(t).valueOf())-i.valueOf(),i._d.setTime(i._d.valueOf()+a),e.updateOffset(i,!1),i):yt(t).local()}function zt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function It(t,n,i){var a,r=this._offset||0;if(!this.isValid())return null!=t?this:NaN;if(null!=t){if("string"==typeof t){if(null===(t=Et(Qi,t)))return this}else Math.abs(t)<16&&!i&&(t*=60);return!this._isUTC&&n&&(a=zt(this)),this._offset=t,this._isUTC=!0,null!=a&&this.add(a,"m"),r!==t&&(!n||this._changeInProgress?Xt(this,Bt(t-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,e.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?r:zt(this)}function At(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function Ot(e){return this.utcOffset(0,e)}function Lt(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(zt(this),"m")),this}function Rt(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Et(Zi,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this}function Nt(e){return!!this.isValid()&&(e=e?yt(e).utcOffset():0,(this.utcOffset()-e)%60==0)}function Yt(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function jt(){if(!a(this._isDSTShifted))return this._isDSTShifted;var e={};if(m(e,this),(e=mt(e))._a){var t=e._isUTC?c(e._a):yt(e._a);this._isDSTShifted=this.isValid()&&b(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Ht(){return!!this.isValid()&&!this._isUTC}function Wt(){return!!this.isValid()&&this._isUTC}function Ft(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}function Bt(e,t){var n,i,a,s=e,o=null;return Mt(e)?s={ms:e._milliseconds,d:e._days,M:e._months}:r(e)?(s={},t?s[t]=e:s.milliseconds=e):(o=Ba.exec(e))?(n="-"===o[1]?-1:1,s={y:0,d:w(o[aa])*n,h:w(o[ra])*n,m:w(o[sa])*n,s:w(o[oa])*n,ms:w(_t(1e3*o[la]))*n}):(o=qa.exec(e))?(n="-"===o[1]?-1:1,s={y:qt(o[2],n),M:qt(o[3],n),w:qt(o[4],n),d:qt(o[5],n),h:qt(o[6],n),m:qt(o[7],n),s:qt(o[8],n)}):null==s?s={}:"object"==typeof s&&("from"in s||"to"in s)&&(a=$t(yt(s.from),yt(s.to)),(s={}).ms=a.milliseconds,s.M=a.months),i=new kt(s),Mt(e)&&l(e,"_locale")&&(i._locale=e._locale),i}function qt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Gt(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function $t(e,t){var n;return e.isValid()&&t.isValid()?(t=Pt(t,e),e.isBefore(t)?n=Gt(e,t):((n=Gt(t,e)).milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function Vt(e,t){return function(n,i){var a,r;return null===i||isNaN(+i)||(T(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),r=n,n=i,i=r),n="string"==typeof n?+n:n,a=Bt(n,i),Xt(this,a,e),this}}function Xt(t,n,i,a){var r=n._milliseconds,s=_t(n._days),o=_t(n._months);t.isValid()&&(a=null==a||a,r&&t._d.setTime(t._d.valueOf()+r*i),s&&W(t,"Date",H(t,"Date")+s*i),o&&le(t,H(t,"Month")+o*i),a&&e.updateOffset(t,s||o))}function Ut(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"}function Zt(t,n){var i=t||yt(),a=Pt(i,this).startOf("day"),r=e.calendarFormat(this,a)||"sameElse",s=n&&(S(n[r])?n[r].call(this,i):n[r]);return this.format(s||this.localeData().calendar(r,this,yt(i)))}function Qt(){return new g(this)}function Kt(e,t){var n=v(e)?e:yt(e);return!(!this.isValid()||!n.isValid())&&(t=L(a(t)?"millisecond":t),"millisecond"===t?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())}function Jt(e,t){var n=v(e)?e:yt(e);return!(!this.isValid()||!n.isValid())&&(t=L(a(t)?"millisecond":t),"millisecond"===t?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())}function en(e,t,n,i){return i=i||"()",("("===i[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===i[1]?this.isBefore(t,n):!this.isAfter(t,n))}function tn(e,t){var n,i=v(e)?e:yt(e);return!(!this.isValid()||!i.isValid())&&(t=L(t||"millisecond"),"millisecond"===t?this.valueOf()===i.valueOf():(n=i.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))}function nn(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function an(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function rn(e,t,n){var i,a,r,s;return this.isValid()&&(i=Pt(e,this)).isValid()?(a=6e4*(i.utcOffset()-this.utcOffset()),t=L(t),"year"===t||"month"===t||"quarter"===t?(s=sn(this,i),"quarter"===t?s/=3:"year"===t&&(s/=12)):(r=this-i,s="second"===t?r/1e3:"minute"===t?r/6e4:"hour"===t?r/36e5:"day"===t?(r-a)/864e5:"week"===t?(r-a)/6048e5:r),n?s:y(s)):NaN}function sn(e,t){var n,i=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(i,"months");return n=t-a<0?(t-a)/(a-e.clone().add(i-1,"months")):(t-a)/(e.clone().add(i+1,"months")-a),-(i+n)||0}function on(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function ln(){if(!this.isValid())return null;var e=this.clone().utc();return e.year()<0||e.year()>9999?X(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):S(Date.prototype.toISOString)?this.toDate().toISOString():X(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function un(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',i=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a=t+'[")]';return this.format(n+i+"-MM-DD[T]HH:mm:ss.SSS"+a)}function cn(t){t||(t=this.isUtc()?e.defaultFormatUtc:e.defaultFormat);var n=X(this,t);return this.localeData().postformat(n)}function dn(e,t){return this.isValid()&&(v(e)&&e.isValid()||yt(e).isValid())?Bt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function hn(e){return this.from(yt(),e)}function pn(e,t){return this.isValid()&&(v(e)&&e.isValid()||yt(e).isValid())?Bt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function fn(e){return this.to(yt(),e)}function mn(e){var t;return void 0===e?this._locale._abbr:(null!=(t=et(e))&&(this._locale=t),this)}function gn(){return this._locale}function vn(e){switch(e=L(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function yn(e){return void 0===(e=L(e))||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))}function wn(){return this._d.valueOf()-6e4*(this._offset||0)}function bn(){return Math.floor(this.valueOf()/1e3)}function xn(){return new Date(this.valueOf())}function Cn(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function Tn(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function Sn(){return this.isValid()?this.toISOString():null}function kn(){return p(this)}function Mn(){return u({},h(this))}function _n(){return h(this).overflow}function Dn(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function En(e,t){G(0,[e,e.length],0,t)}function Pn(e){return On.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function zn(e){return On.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function In(){return Ce(this.year(),1,4)}function An(){var e=this.localeData()._week;return Ce(this.year(),e.dow,e.doy)}function On(e,t,n,i,a){var r;return null==e?xe(this,i,a).year:(r=Ce(e,i,a),t>r&&(t=r),Ln.call(this,e,t,n,i,a))}function Ln(e,t,n,i,a){var r=be(e,t,n,i,a),s=ye(r.year,0,r.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}function Rn(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function Nn(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")}function Yn(e,t){t[la]=w(1e3*("0."+e))}function jn(){return this._isUTC?"UTC":""}function Hn(){return this._isUTC?"Coordinated Universal Time":""}function Wn(e){return yt(1e3*e)}function Fn(){return yt.apply(null,arguments).parseZone()}function Bn(e){return e}function qn(e,t,n,i){var a=et(),r=c().set(i,t);return a[n](r,e)}function Gn(e,t,n){if(r(e)&&(t=e,e=void 0),e=e||"",null!=t)return qn(e,t,n,"month");var i,a=[];for(i=0;i<12;i++)a[i]=qn(e,i,n,"month");return a}function $n(e,t,n,i){"boolean"==typeof e?(r(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,r(t)&&(n=t,t=void 0),t=t||"");var a=et(),s=e?a._week.dow:0;if(null!=n)return qn(t,(n+s)%7,i,"day");var o,l=[];for(o=0;o<7;o++)l[o]=qn(t,(o+s)%7,i,"day");return l}function Vn(e,t){return Gn(e,t,"months")}function Xn(e,t){return Gn(e,t,"monthsShort")}function Un(e,t,n){return $n(e,t,n,"weekdays")}function Zn(e,t,n){return $n(e,t,n,"weekdaysShort")}function Qn(e,t,n){return $n(e,t,n,"weekdaysMin")}function Kn(){var e=this._data;return this._milliseconds=tr(this._milliseconds),this._days=tr(this._days),this._months=tr(this._months),e.milliseconds=tr(e.milliseconds),e.seconds=tr(e.seconds),e.minutes=tr(e.minutes),e.hours=tr(e.hours),e.months=tr(e.months),e.years=tr(e.years),this}function Jn(e,t,n,i){var a=Bt(t,n);return e._milliseconds+=i*a._milliseconds,e._days+=i*a._days,e._months+=i*a._months,e._bubble()}function ei(e,t){return Jn(this,e,t,1)}function ti(e,t){return Jn(this,e,t,-1)}function ni(e){return e<0?Math.floor(e):Math.ceil(e)}function ii(){var e,t,n,i,a,r=this._milliseconds,s=this._days,o=this._months,l=this._data;return r>=0&&s>=0&&o>=0||r<=0&&s<=0&&o<=0||(r+=864e5*ni(ri(o)+s),s=0,o=0),l.milliseconds=r%1e3,e=y(r/1e3),l.seconds=e%60,t=y(e/60),l.minutes=t%60,n=y(t/60),l.hours=n%24,s+=y(n/24),a=y(ai(s)),o+=a,s-=ni(ri(a)),i=y(o/12),o%=12,l.days=s,l.months=o,l.years=i,this}function ai(e){return 4800*e/146097}function ri(e){return 146097*e/4800}function si(e){if(!this.isValid())return NaN;var t,n,i=this._milliseconds;if("month"===(e=L(e))||"year"===e)return t=this._days+i/864e5,n=this._months+ai(t),"month"===e?n:n/12;switch(t=this._days+Math.round(ri(this._months)),e){case"week":return t/7+i/6048e5;case"day":return t+i/864e5;case"hour":return 24*t+i/36e5;case"minute":return 1440*t+i/6e4;case"second":return 86400*t+i/1e3;case"millisecond":return Math.floor(864e5*t)+i;default:throw new Error("Unknown unit "+e)}}function oi(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*w(this._months/12):NaN}function li(e){return function(){return this.as(e)}}function ui(e){return e=L(e),this.isValid()?this[e+"s"]():NaN}function ci(e){return function(){return this.isValid()?this._data[e]:NaN}}function di(){return y(this.days()/7)}function hi(e,t,n,i,a){return a.relativeTime(t||1,!!n,e,i)}function pi(e,t,n){var i=Bt(e).abs(),a=vr(i.as("s")),r=vr(i.as("m")),s=vr(i.as("h")),o=vr(i.as("d")),l=vr(i.as("M")),u=vr(i.as("y")),c=a<=yr.ss&&["s",a]||a<yr.s&&["ss",a]||r<=1&&["m"]||r<yr.m&&["mm",r]||s<=1&&["h"]||s<yr.h&&["hh",s]||o<=1&&["d"]||o<yr.d&&["dd",o]||l<=1&&["M"]||l<yr.M&&["MM",l]||u<=1&&["y"]||["yy",u];return c[2]=t,c[3]=+e>0,c[4]=n,hi.apply(null,c)}function fi(e){return void 0===e?vr:"function"==typeof e&&(vr=e,!0)}function mi(e,t){return void 0!==yr[e]&&(void 0===t?yr[e]:(yr[e]=t,"s"===e&&(yr.ss=t-1),!0))}function gi(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=pi(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)}function vi(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,i=wr(this._milliseconds)/1e3,a=wr(this._days),r=wr(this._months);t=y((e=y(i/60))/60),i%=60,e%=60;var s=n=y(r/12),o=r%=12,l=a,u=t,c=e,d=i,h=this.asSeconds();return h?(h<0?"-":"")+"P"+(s?s+"Y":"")+(o?o+"M":"")+(l?l+"D":"")+(u||c||d?"T":"")+(u?u+"H":"")+(c?c+"M":"")+(d?d+"S":""):"P0D"}var yi,wi,bi=wi=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,i=0;i<n;i++)if(i in t&&e.call(this,t[i],i,t))return!0;return!1},xi=e.momentProperties=[],Ci=!1,Ti={};e.suppressDeprecationWarnings=!1,e.deprecationHandler=null;var Si,ki,Mi=Si=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)l(e,t)&&n.push(t);return n},_i={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},Di={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},Ei=/\d{1,2}/,Pi={future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},zi={},Ii={},Ai=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oi=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Li={},Ri={},Ni=/\d/,Yi=/\d\d/,ji=/\d{3}/,Hi=/\d{4}/,Wi=/[+-]?\d{6}/,Fi=/\d\d?/,Bi=/\d\d\d\d?/,qi=/\d\d\d\d\d\d?/,Gi=/\d{1,3}/,$i=/\d{1,4}/,Vi=/[+-]?\d{1,6}/,Xi=/\d+/,Ui=/[+-]?\d+/,Zi=/Z|[+-]\d\d:?\d\d/gi,Qi=/Z|[+-]\d\d(?::?\d\d)?/gi,Ki=/[+-]?\d+(\.\d{1,3})?/,Ji=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,ea={},ta={},na=0,ia=1,aa=2,ra=3,sa=4,oa=5,la=6,ua=7,ca=8,da=ki=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1};G("M",["MM",2],"Mo",function(){return this.month()+1}),G("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),G("MMMM",0,0,function(e){return this.localeData().months(this,e)}),O("month","M"),N("month",8),Z("M",Fi),Z("MM",Fi,Yi),Z("MMM",function(e,t){return t.monthsShortRegex(e)}),Z("MMMM",function(e,t){return t.monthsRegex(e)}),ee(["M","MM"],function(e,t){t[ia]=w(e)-1}),ee(["MMM","MMMM"],function(e,t,n,i){var a=n._locale.monthsParse(e,i,n._strict);null!=a?t[ia]=a:h(n).invalidMonth=e});var ha=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,pa="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),fa="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),ma=Ji,ga=Ji;G("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),G(0,["YY",2],0,function(){return this.year()%100}),G(0,["YYYY",4],0,"year"),G(0,["YYYYY",5],0,"year"),G(0,["YYYYYY",6,!0],0,"year"),O("year","y"),N("year",1),Z("Y",Ui),Z("YY",Fi,Yi),Z("YYYY",$i,Hi),Z("YYYYY",Vi,Wi),Z("YYYYYY",Vi,Wi),ee(["YYYYY","YYYYYY"],na),ee("YYYY",function(t,n){n[na]=2===t.length?e.parseTwoDigitYear(t):w(t)}),ee("YY",function(t,n){n[na]=e.parseTwoDigitYear(t)}),ee("Y",function(e,t){t[na]=parseInt(e,10)}),e.parseTwoDigitYear=function(e){return w(e)+(w(e)>68?1900:2e3)};var va=j("FullYear",!0);G("w",["ww",2],"wo","week"),G("W",["WW",2],"Wo","isoWeek"),O("week","w"),O("isoWeek","W"),N("week",5),N("isoWeek",5),Z("w",Fi),Z("ww",Fi,Yi),Z("W",Fi),Z("WW",Fi,Yi),te(["w","ww","W","WW"],function(e,t,n,i){t[i.substr(0,1)]=w(e)});var ya={dow:0,doy:6};G("d",0,"do","day"),G("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),G("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),G("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),G("e",0,0,"weekday"),G("E",0,0,"isoWeekday"),O("day","d"),O("weekday","e"),O("isoWeekday","E"),N("day",11),N("weekday",11),N("isoWeekday",11),Z("d",Fi),Z("e",Fi),Z("E",Fi),Z("dd",function(e,t){return t.weekdaysMinRegex(e)}),Z("ddd",function(e,t){return t.weekdaysShortRegex(e)}),Z("dddd",function(e,t){return t.weekdaysRegex(e)}),te(["dd","ddd","dddd"],function(e,t,n,i){var a=n._locale.weekdaysParse(e,i,n._strict);null!=a?t.d=a:h(n).invalidWeekday=e}),te(["d","e","E"],function(e,t,n,i){t[i]=w(e)});var wa="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ba="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),xa="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ca=Ji,Ta=Ji,Sa=Ji;G("H",["HH",2],0,"hour"),G("h",["hh",2],0,Fe),G("k",["kk",2],0,Be),G("hmm",0,0,function(){return""+Fe.apply(this)+q(this.minutes(),2)}),G("hmmss",0,0,function(){return""+Fe.apply(this)+q(this.minutes(),2)+q(this.seconds(),2)}),G("Hmm",0,0,function(){return""+this.hours()+q(this.minutes(),2)}),G("Hmmss",0,0,function(){return""+this.hours()+q(this.minutes(),2)+q(this.seconds(),2)}),qe("a",!0),qe("A",!1),O("hour","h"),N("hour",13),Z("a",Ge),Z("A",Ge),Z("H",Fi),Z("h",Fi),Z("k",Fi),Z("HH",Fi,Yi),Z("hh",Fi,Yi),Z("kk",Fi,Yi),Z("hmm",Bi),Z("hmmss",qi),Z("Hmm",Bi),Z("Hmmss",qi),ee(["H","HH"],ra),ee(["k","kk"],function(e,t,n){var i=w(e);t[ra]=24===i?0:i}),ee(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),ee(["h","hh"],function(e,t,n){t[ra]=w(e),h(n).bigHour=!0}),ee("hmm",function(e,t,n){var i=e.length-2;t[ra]=w(e.substr(0,i)),t[sa]=w(e.substr(i)),h(n).bigHour=!0}),ee("hmmss",function(e,t,n){var i=e.length-4,a=e.length-2;t[ra]=w(e.substr(0,i)),t[sa]=w(e.substr(i,2)),t[oa]=w(e.substr(a)),h(n).bigHour=!0}),ee("Hmm",function(e,t,n){var i=e.length-2;t[ra]=w(e.substr(0,i)),t[sa]=w(e.substr(i))}),ee("Hmmss",function(e,t,n){var i=e.length-4,a=e.length-2;t[ra]=w(e.substr(0,i)),t[sa]=w(e.substr(i,2)),t[oa]=w(e.substr(a))});var ka,Ma=/[ap]\.?m?\.?/i,_a=j("Hours",!0),Da={calendar:_i,longDateFormat:Di,invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:Ei,relativeTime:Pi,months:pa,monthsShort:fa,week:ya,weekdays:wa,weekdaysMin:xa,weekdaysShort:ba,meridiemParse:Ma},Ea={},Pa={},za=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Ia=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Aa=/Z|[+-]\d\d(?::?\d\d)?/,Oa=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],La=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Ra=/^\/?Date\((\-?\d+)/i,Na=/^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;e.createFromInputFallback=C("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),e.ISO_8601=function(){},e.RFC_2822=function(){};var Ya=C("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=yt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:f()}),ja=C("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=yt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:f()}),Ha=function(){return Date.now?Date.now():+new Date},Wa=["year","quarter","month","week","day","hour","minute","second","millisecond"];Dt("Z",":"),Dt("ZZ",""),Z("Z",Qi),Z("ZZ",Qi),ee(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Et(Qi,e)});var Fa=/([\+\-]|\d\d)/gi;e.updateOffset=function(){};var Ba=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,qa=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;Bt.fn=kt.prototype,Bt.invalid=St;var Ga=Vt(1,"add"),$a=Vt(-1,"subtract");e.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",e.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Va=C("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});G(0,["gg",2],0,function(){return this.weekYear()%100}),G(0,["GG",2],0,function(){return this.isoWeekYear()%100}),En("gggg","weekYear"),En("ggggg","weekYear"),En("GGGG","isoWeekYear"),En("GGGGG","isoWeekYear"),O("weekYear","gg"),O("isoWeekYear","GG"),N("weekYear",1),N("isoWeekYear",1),Z("G",Ui),Z("g",Ui),Z("GG",Fi,Yi),Z("gg",Fi,Yi),Z("GGGG",$i,Hi),Z("gggg",$i,Hi),Z("GGGGG",Vi,Wi),Z("ggggg",Vi,Wi),te(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,i){t[i.substr(0,2)]=w(e)}),te(["gg","GG"],function(t,n,i,a){n[a]=e.parseTwoDigitYear(t)}),G("Q",0,"Qo","quarter"),O("quarter","Q"),N("quarter",7),Z("Q",Ni),ee("Q",function(e,t){t[ia]=3*(w(e)-1)}),G("D",["DD",2],"Do","date"),O("date","D"),N("date",9),Z("D",Fi),Z("DD",Fi,Yi),Z("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),ee(["D","DD"],aa),ee("Do",function(e,t){t[aa]=w(e.match(Fi)[0],10)});var Xa=j("Date",!0);G("DDD",["DDDD",3],"DDDo","dayOfYear"),O("dayOfYear","DDD"),N("dayOfYear",4),Z("DDD",Gi),Z("DDDD",ji),ee(["DDD","DDDD"],function(e,t,n){n._dayOfYear=w(e)}),G("m",["mm",2],0,"minute"),O("minute","m"),N("minute",14),Z("m",Fi),Z("mm",Fi,Yi),ee(["m","mm"],sa);var Ua=j("Minutes",!1);G("s",["ss",2],0,"second"),O("second","s"),N("second",15),Z("s",Fi),Z("ss",Fi,Yi),ee(["s","ss"],oa);var Za=j("Seconds",!1);G("S",0,0,function(){return~~(this.millisecond()/100)}),G(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),G(0,["SSS",3],0,"millisecond"),G(0,["SSSS",4],0,function(){return 10*this.millisecond()}),G(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),G(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),G(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),G(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),G(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),O("millisecond","ms"),N("millisecond",16),Z("S",Gi,Ni),Z("SS",Gi,Yi),Z("SSS",Gi,ji);var Qa;for(Qa="SSSS";Qa.length<=9;Qa+="S")Z(Qa,Xi);for(Qa="S";Qa.length<=9;Qa+="S")ee(Qa,Yn);var Ka=j("Milliseconds",!1);G("z",0,0,"zoneAbbr"),G("zz",0,0,"zoneName");var Ja=g.prototype;Ja.add=Ga,Ja.calendar=Zt,Ja.clone=Qt,Ja.diff=rn,Ja.endOf=yn,Ja.format=cn,Ja.from=dn,Ja.fromNow=hn,Ja.to=pn,Ja.toNow=fn,Ja.get=F,Ja.invalidAt=_n,Ja.isAfter=Kt,Ja.isBefore=Jt,Ja.isBetween=en,Ja.isSame=tn,Ja.isSameOrAfter=nn,Ja.isSameOrBefore=an,Ja.isValid=kn,Ja.lang=Va,Ja.locale=mn,Ja.localeData=gn,Ja.max=ja,Ja.min=Ya,Ja.parsingFlags=Mn,Ja.set=B,Ja.startOf=vn,Ja.subtract=$a,Ja.toArray=Cn,Ja.toObject=Tn,Ja.toDate=xn,Ja.toISOString=ln,Ja.inspect=un,Ja.toJSON=Sn,Ja.toString=on,Ja.unix=bn,Ja.valueOf=wn,Ja.creationData=Dn,Ja.year=va,Ja.isLeapYear=ge,Ja.weekYear=Pn,Ja.isoWeekYear=zn,Ja.quarter=Ja.quarters=Rn,Ja.month=ue,Ja.daysInMonth=ce,Ja.week=Ja.weeks=Me,Ja.isoWeek=Ja.isoWeeks=_e,Ja.weeksInYear=An,Ja.isoWeeksInYear=In,Ja.date=Xa,Ja.day=Ja.days=Le,Ja.weekday=Re,Ja.isoWeekday=Ne,Ja.dayOfYear=Nn,Ja.hour=Ja.hours=_a,Ja.minute=Ja.minutes=Ua,Ja.second=Ja.seconds=Za,Ja.millisecond=Ja.milliseconds=Ka,Ja.utcOffset=It,Ja.utc=Ot,Ja.local=Lt,Ja.parseZone=Rt,Ja.hasAlignedHourOffset=Nt,Ja.isDST=Yt,Ja.isLocal=Ht,Ja.isUtcOffset=Wt,Ja.isUtc=Ft,Ja.isUTC=Ft,Ja.zoneAbbr=jn,Ja.zoneName=Hn,Ja.dates=C("dates accessor is deprecated. Use date instead.",Xa),Ja.months=C("months accessor is deprecated. Use month instead",ue),Ja.years=C("years accessor is deprecated. Use year instead",va),Ja.zone=C("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",At),Ja.isDSTShifted=C("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",jt);var er=_.prototype;er.calendar=D,er.longDateFormat=E,er.invalidDate=P,er.ordinal=z,er.preparse=Bn,er.postformat=Bn,er.relativeTime=I,er.pastFuture=A,er.set=k,er.months=ae,er.monthsShort=re,er.monthsParse=oe,er.monthsRegex=he,er.monthsShortRegex=de,er.week=Te,er.firstDayOfYear=ke,er.firstDayOfWeek=Se,er.weekdays=Pe,er.weekdaysMin=Ie,er.weekdaysShort=ze,er.weekdaysParse=Oe,er.weekdaysRegex=Ye,er.weekdaysShortRegex=je,er.weekdaysMinRegex=He,er.isPM=$e,er.meridiem=Ve,Qe("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===w(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),e.lang=C("moment.lang is deprecated. Use moment.locale instead.",Qe),e.langData=C("moment.langData is deprecated. Use moment.localeData instead.",et);var tr=Math.abs,nr=li("ms"),ir=li("s"),ar=li("m"),rr=li("h"),sr=li("d"),or=li("w"),lr=li("M"),ur=li("y"),cr=ci("milliseconds"),dr=ci("seconds"),hr=ci("minutes"),pr=ci("hours"),fr=ci("days"),mr=ci("months"),gr=ci("years"),vr=Math.round,yr={ss:44,s:45,m:45,h:22,d:26,M:11},wr=Math.abs,br=kt.prototype;return br.isValid=Tt,br.abs=Kn,br.add=ei,br.subtract=ti,br.as=si,br.asMilliseconds=nr,br.asSeconds=ir,br.asMinutes=ar,br.asHours=rr,br.asDays=sr,br.asWeeks=or,br.asMonths=lr,br.asYears=ur,br.valueOf=oi,br._bubble=ii,br.get=ui,br.milliseconds=cr,br.seconds=dr,br.minutes=hr,br.hours=pr,br.days=fr,br.weeks=di,br.months=mr,br.years=gr,br.humanize=gi,br.toISOString=vi,br.toString=vi,br.toJSON=vi,br.locale=mn,br.localeData=gn,br.toIsoString=C("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",vi),br.lang=Va,G("X",0,0,"unix"),G("x",0,0,"valueOf"),Z("x",Ui),Z("X",Ki),ee("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),ee("x",function(e,t,n){n._d=new Date(w(e))}),e.version="2.18.1",function(e){yi=e}(yt),e.fn=Ja,e.min=bt,e.max=xt,e.now=Ha,e.utc=c,e.unix=Wn,e.months=Vn,e.isDate=s,e.locale=Qe,e.invalid=f,e.duration=Bt,e.isMoment=v,e.weekdays=Un,e.parseZone=Fn,e.localeData=et,e.isDuration=Mt,e.monthsShort=Xn,e.weekdaysMin=Qn,e.defineLocale=Ke,e.updateLocale=Je,e.locales=tt,e.weekdaysShort=Zn,e.normalizeUnits=L,e.relativeTimeRounding=fi,e.relativeTimeThreshold=mi,e.calendarFormat=Ut,e.prototype=Ja,e}),function(e,t){"use strict";var n;if("object"==typeof exports){try{n=require("moment")}catch(e){}module.exports=t(n)}else"function"==typeof define&&define.amd?define(function(e){try{n=e("moment")}catch(e){}return t(n)}):e.Pikaday=t(e.moment)}(this,function(e){"use strict";var t="function"==typeof e,n=!!window.addEventListener,i=window.document,a=window.setTimeout,r=function(e,t,i,a){n?e.addEventListener(t,i,!!a):e.attachEvent("on"+t,i)},s=function(e,t,i,a){n?e.removeEventListener(t,i,!!a):e.detachEvent("on"+t,i)},o=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},l=function(e,t){return-1!==(" "+e.className+" ").indexOf(" "+t+" ")},u=function(e,t){l(e,t)||(e.className=""===e.className?t:e.className+" "+t)},c=function(e,t){e.className=o((" "+e.className+" ").replace(" "+t+" "," "))},d=function(e){return/Array/.test(Object.prototype.toString.call(e))},h=function(e){return/Date/.test(Object.prototype.toString.call(e))&&!isNaN(e.getTime())},p=function(e){var t=e.getDay();return 0===t||6===t},f=function(e){return e%4==0&&e%100!=0||e%400==0},m=function(e,t){return[31,f(e)?29:28,31,30,31,30,31,31,30,31,30,31][t]},g=function(e){h(e)&&e.setHours(0,0,0,0)},v=function(e,t){return e.getTime()===t.getTime()},y=function(e,t,n){var i,a;for(i in t)(a=void 0!==e[i])&&"object"==typeof t[i]&&null!==t[i]&&void 0===t[i].nodeName?h(t[i])?n&&(e[i]=new Date(t[i].getTime())):d(t[i])?n&&(e[i]=t[i].slice(0)):e[i]=y({},t[i],n):!n&&a||(e[i]=t[i]);return e},w=function(e,t,n){var a;i.createEvent?((a=i.createEvent("HTMLEvents")).initEvent(t,!0,!1),a=y(a,n),e.dispatchEvent(a)):i.createEventObject&&(a=i.createEventObject(),a=y(a,n),e.fireEvent("on"+t,a))},b=function(e){return e.month<0&&(e.year-=Math.ceil(Math.abs(e.month)/12),e.month+=12),e.month>11&&(e.year+=Math.floor(Math.abs(e.month)/12),e.month-=12),e},x={field:null,bound:void 0,position:"bottom left",reposition:!0,format:"YYYY-MM-DD",toString:null,parse:null,defaultDate:null,setDefaultDate:!1,firstDay:0,formatStrict:!1,minDate:null,maxDate:null,yearRange:10,showWeekNumber:!1,pickWholeWeek:!1,minYear:0,maxYear:9999,minMonth:void 0,maxMonth:void 0,startRange:null,endRange:null,isRTL:!1,yearSuffix:"",showMonthAfterYear:!1,showDaysInNextAndPreviousMonths:!1,enableSelectionDaysInNextAndPreviousMonths:!1,numberOfMonths:1,mainCalendar:"left",container:void 0,blurFieldOnSelect:!0,i18n:{previousMonth:"Previous Month",nextMonth:"Next Month",months:["January","February","March","April","May","June","July","August","September","October","November","December"],weekdays:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],weekdaysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"]},theme:null,events:[],onSelect:null,onOpen:null,onClose:null,onDraw:null},C=function(e,t,n){for(t+=e.firstDay;t>=7;)t-=7;return n?e.i18n.weekdaysShort[t]:e.i18n.weekdays[t]},T=function(e){var t=[],n="false";if(e.isEmpty){if(!e.showDaysInNextAndPreviousMonths)return'<td class="is-empty"></td>';t.push("is-outside-current-month"),e.enableSelectionDaysInNextAndPreviousMonths||t.push("is-selection-disabled")}return e.isDisabled&&t.push("is-disabled"),e.isToday&&t.push("is-today"),e.isSelected&&(t.push("is-selected"),n="true"),e.hasEvent&&t.push("has-event"),e.isInRange&&t.push("is-inrange"),e.isStartRange&&t.push("is-startrange"),e.isEndRange&&t.push("is-endrange"),'<td data-day="'+e.day+'" class="'+t.join(" ")+'" aria-selected="'+n+'"><button class="pika-button pika-day" type="button" data-pika-year="'+e.year+'" data-pika-month="'+e.month+'" data-pika-day="'+e.day+'">'+e.day+"</button></td>"},S=function(e,t,n){var i=new Date(n,0,1);return'<td class="pika-week">'+Math.ceil(((new Date(n,t,e)-i)/864e5+i.getDay()+1)/7)+"</td>"},k=function(e,t,n,i){return'<tr class="pika-row'+(n?" pick-whole-week":"")+(i?" is-selected":"")+'">'+(t?e.reverse():e).join("")+"</tr>"},M=function(e){return"<tbody>"+e.join("")+"</tbody>"},_=function(e){var t,n=[];for(e.showWeekNumber&&n.push("<th></th>"),t=0;t<7;t++)n.push('<th scope="col"><abbr title="'+C(e,t)+'">'+C(e,t,!0)+"</abbr></th>");return"<thead><tr>"+(e.isRTL?n.reverse():n).join("")+"</tr></thead>"},D=function(e,t,n,i,a,r){var s,o,l,u,c,h=e._o,p=n===h.minYear,f=n===h.maxYear,m='<div id="'+r+'" class="pika-title" role="heading" aria-live="assertive">',g=!0,v=!0;for(l=[],s=0;s<12;s++)l.push('<option value="'+(n===a?s-t:12+s-t)+'"'+(s===i?' selected="selected"':"")+(p&&s<h.minMonth||f&&s>h.maxMonth?'disabled="disabled"':"")+">"+h.i18n.months[s]+"</option>");for(u='<div class="pika-label">'+h.i18n.months[i]+'<select class="pika-select pika-select-month" tabindex="-1">'+l.join("")+"</select></div>",d(h.yearRange)?(s=h.yearRange[0],o=h.yearRange[1]+1):(s=n-h.yearRange,o=1+n+h.yearRange),l=[];s<o&&s<=h.maxYear;s++)s>=h.minYear&&l.push('<option value="'+s+'"'+(s===n?' selected="selected"':"")+">"+s+"</option>");return c='<div class="pika-label">'+n+h.yearSuffix+'<select class="pika-select pika-select-year" tabindex="-1">'+l.join("")+"</select></div>",h.showMonthAfterYear?m+=c+u:m+=u+c,p&&(0===i||h.minMonth>=i)&&(g=!1),f&&(11===i||h.maxMonth<=i)&&(v=!1),0===t&&(m+='<button class="pika-prev'+(g?"":" is-disabled")+'" type="button">'+h.i18n.previousMonth+"</button>"),t===e._o.numberOfMonths-1&&(m+='<button class="pika-next'+(v?"":" is-disabled")+'" type="button">'+h.i18n.nextMonth+"</button>"),m+="</div>"},E=function(e,t,n){return'<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="'+n+'">'+_(e)+M(t)+"</table>"},P=function(s){var o=this,u=o.config(s);o._onMouseDown=function(e){if(o._v){var t=(e=e||window.event).target||e.srcElement;if(t)if(l(t,"is-disabled")||(!l(t,"pika-button")||l(t,"is-empty")||l(t.parentNode,"is-disabled")?l(t,"pika-prev")?o.prevMonth():l(t,"pika-next")&&o.nextMonth():(o.setDate(new Date(t.getAttribute("data-pika-year"),t.getAttribute("data-pika-month"),t.getAttribute("data-pika-day"))),u.bound&&a(function(){o.hide(),u.blurFieldOnSelect&&u.field&&u.field.blur()},100))),l(t,"pika-select"))o._c=!0;else{if(!e.preventDefault)return e.returnValue=!1,!1;e.preventDefault()}}},o._onChange=function(e){var t=(e=e||window.event).target||e.srcElement;t&&(l(t,"pika-select-month")?o.gotoMonth(t.value):l(t,"pika-select-year")&&o.gotoYear(t.value))},o._onKeyChange=function(e){if(e=e||window.event,o.isVisible())switch(e.keyCode){case 13:case 27:u.field&&u.field.blur();break;case 37:e.preventDefault(),o.adjustDate("subtract",1);break;case 38:o.adjustDate("subtract",7);break;case 39:o.adjustDate("add",1);break;case 40:o.adjustDate("add",7)}},o._onInputChange=function(n){var i;n.firedBy!==o&&(i=u.parse?u.parse(u.field.value,u.format):t?(i=e(u.field.value,u.format,u.formatStrict))&&i.isValid()?i.toDate():null:new Date(Date.parse(u.field.value)),h(i)&&o.setDate(i),o._v||o.show())},o._onInputFocus=function(){o.show()},o._onInputClick=function(){o.show()},o._onInputBlur=function(){var e=i.activeElement;do{if(l(e,"pika-single"))return}while(e=e.parentNode);o._c||(o._b=a(function(){o.hide()},50)),o._c=!1},o._onClick=function(e){var t=(e=e||window.event).target||e.srcElement,i=t;if(t){!n&&l(t,"pika-select")&&(t.onchange||(t.setAttribute("onchange","return;"),r(t,"change",o._onChange)));do{if(l(i,"pika-single")||i===u.trigger)return}while(i=i.parentNode);o._v&&t!==u.trigger&&i!==u.trigger&&o.hide()}},o.el=i.createElement("div"),o.el.className="pika-single"+(u.isRTL?" is-rtl":"")+(u.theme?" "+u.theme:""),r(o.el,"mousedown",o._onMouseDown,!0),r(o.el,"touchend",o._onMouseDown,!0),r(o.el,"change",o._onChange),r(i,"keydown",o._onKeyChange),u.field&&(u.container?u.container.appendChild(o.el):u.bound?i.body.appendChild(o.el):u.field.parentNode.insertBefore(o.el,u.field.nextSibling),r(u.field,"change",o._onInputChange),u.defaultDate||(t&&u.field.value?u.defaultDate=e(u.field.value,u.format).toDate():u.defaultDate=new Date(Date.parse(u.field.value)),u.setDefaultDate=!0));var c=u.defaultDate;h(c)?u.setDefaultDate?o.setDate(c,!0):o.gotoDate(c):o.gotoDate(new Date),u.bound?(this.hide(),o.el.className+=" is-bound",r(u.trigger,"click",o._onInputClick),r(u.trigger,"focus",o._onInputFocus),r(u.trigger,"blur",o._onInputBlur)):this.show()};return P.prototype={config:function(e){this._o||(this._o=y({},x,!0));var t=y(this._o,e,!0);t.isRTL=!!t.isRTL,t.field=t.field&&t.field.nodeName?t.field:null,t.theme="string"==typeof t.theme&&t.theme?t.theme:null,t.bound=!!(void 0!==t.bound?t.field&&t.bound:t.field),t.trigger=t.trigger&&t.trigger.nodeName?t.trigger:t.field,t.disableWeekends=!!t.disableWeekends,t.disableDayFn="function"==typeof t.disableDayFn?t.disableDayFn:null;var n=parseInt(t.numberOfMonths,10)||1;if(t.numberOfMonths=n>4?4:n,h(t.minDate)||(t.minDate=!1),h(t.maxDate)||(t.maxDate=!1),t.minDate&&t.maxDate&&t.maxDate<t.minDate&&(t.maxDate=t.minDate=!1),t.minDate&&this.setMinDate(t.minDate),t.maxDate&&this.setMaxDate(t.maxDate),d(t.yearRange)){var i=(new Date).getFullYear()-10;t.yearRange[0]=parseInt(t.yearRange[0],10)||i,t.yearRange[1]=parseInt(t.yearRange[1],10)||i}else t.yearRange=Math.abs(parseInt(t.yearRange,10))||x.yearRange,t.yearRange>100&&(t.yearRange=100);return t},toString:function(n){return n=n||this._o.format,h(this._d)?this._o.toString?this._o.toString(this._d,n):t?e(this._d).format(n):this._d.toDateString():""},getMoment:function(){return t?e(this._d):null},setMoment:function(n,i){t&&e.isMoment(n)&&this.setDate(n.toDate(),i)},getDate:function(){return h(this._d)?new Date(this._d.getTime()):null},setDate:function(e,t){if(!e)return this._d=null,this._o.field&&(this._o.field.value="",w(this._o.field,"change",{firedBy:this})),this.draw();if("string"==typeof e&&(e=new Date(Date.parse(e))),h(e)){var n=this._o.minDate,i=this._o.maxDate;h(n)&&e<n?e=n:h(i)&&e>i&&(e=i),this._d=new Date(e.getTime()),g(this._d),this.gotoDate(this._d),this._o.field&&(this._o.field.value=this.toString(),w(this._o.field,"change",{firedBy:this})),t||"function"!=typeof this._o.onSelect||this._o.onSelect.call(this,this.getDate())}},gotoDate:function(e){var t=!0;if(h(e)){if(this.calendars){var n=new Date(this.calendars[0].year,this.calendars[0].month,1),i=new Date(this.calendars[this.calendars.length-1].year,this.calendars[this.calendars.length-1].month,1),a=e.getTime();i.setMonth(i.getMonth()+1),i.setDate(i.getDate()-1),t=a<n.getTime()||i.getTime()<a}t&&(this.calendars=[{month:e.getMonth(),year:e.getFullYear()}],"right"===this._o.mainCalendar&&(this.calendars[0].month+=1-this._o.numberOfMonths)),this.adjustCalendars()}},adjustDate:function(e,t){var n,i=this.getDate()||new Date,a=24*parseInt(t)*60*60*1e3;"add"===e?n=new Date(i.valueOf()+a):"subtract"===e&&(n=new Date(i.valueOf()-a)),this.setDate(n)},adjustCalendars:function(){this.calendars[0]=b(this.calendars[0]);for(var e=1;e<this._o.numberOfMonths;e++)this.calendars[e]=b({month:this.calendars[0].month+e,year:this.calendars[0].year});this.draw()},gotoToday:function(){this.gotoDate(new Date)},gotoMonth:function(e){isNaN(e)||(this.calendars[0].month=parseInt(e,10),this.adjustCalendars())},nextMonth:function(){this.calendars[0].month++,this.adjustCalendars()},prevMonth:function(){this.calendars[0].month--,this.adjustCalendars()},gotoYear:function(e){isNaN(e)||(this.calendars[0].year=parseInt(e,10),this.adjustCalendars())},setMinDate:function(e){e instanceof Date?(g(e),this._o.minDate=e,this._o.minYear=e.getFullYear(),this._o.minMonth=e.getMonth()):(this._o.minDate=x.minDate,this._o.minYear=x.minYear,this._o.minMonth=x.minMonth,this._o.startRange=x.startRange),this.draw()},setMaxDate:function(e){e instanceof Date?(g(e),this._o.maxDate=e,this._o.maxYear=e.getFullYear(),this._o.maxMonth=e.getMonth()):(this._o.maxDate=x.maxDate,this._o.maxYear=x.maxYear,this._o.maxMonth=x.maxMonth,this._o.endRange=x.endRange),this.draw()},setStartRange:function(e){this._o.startRange=e},setEndRange:function(e){this._o.endRange=e},draw:function(e){if(this._v||e){var t,n=this._o,i=n.minYear,r=n.maxYear,s=n.minMonth,o=n.maxMonth,l="";this._y<=i&&(this._y=i,!isNaN(s)&&this._m<s&&(this._m=s)),this._y>=r&&(this._y=r,!isNaN(o)&&this._m>o&&(this._m=o)),t="pika-title-"+Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,2);for(var u=0;u<n.numberOfMonths;u++)l+='<div class="pika-lendar">'+D(this,u,this.calendars[u].year,this.calendars[u].month,this.calendars[0].year,t)+this.render(this.calendars[u].year,this.calendars[u].month,t)+"</div>";this.el.innerHTML=l,n.bound&&"hidden"!==n.field.type&&a(function(){n.trigger.focus()},1),"function"==typeof this._o.onDraw&&this._o.onDraw(this),n.bound&&n.field.setAttribute("aria-label","Use the arrow keys to pick a date")}},adjustPosition:function(){var e,t,n,a,r,s,o,l,u,c;if(!this._o.container){if(this.el.style.position="absolute",e=this._o.trigger,t=e,n=this.el.offsetWidth,a=this.el.offsetHeight,r=window.innerWidth||i.documentElement.clientWidth,s=window.innerHeight||i.documentElement.clientHeight,o=window.pageYOffset||i.body.scrollTop||i.documentElement.scrollTop,"function"==typeof e.getBoundingClientRect)l=(c=e.getBoundingClientRect()).left+window.pageXOffset,u=c.bottom+window.pageYOffset;else for(l=t.offsetLeft,u=t.offsetTop+t.offsetHeight;t=t.offsetParent;)l+=t.offsetLeft,u+=t.offsetTop;(this._o.reposition&&l+n>r||this._o.position.indexOf("right")>-1&&l-n+e.offsetWidth>0)&&(l=l-n+e.offsetWidth),(this._o.reposition&&u+a>s+o||this._o.position.indexOf("top")>-1&&u-a-e.offsetHeight>0)&&(u=u-a-e.offsetHeight),this.el.style.left=l+"px",this.el.style.top=u+"px"}},render:function(e,t,n){var i=this._o,a=new Date,r=m(e,t),s=new Date(e,t,1).getDay(),o=[],l=[];g(a),i.firstDay>0&&(s-=i.firstDay)<0&&(s+=7);for(var u=0===t?11:t-1,c=11===t?0:t+1,d=0===t?e-1:e,f=11===t?e+1:e,y=m(d,u),w=r+s,b=w;b>7;)b-=7;w+=7-b;for(var x=!1,C=0,M=0;C<w;C++){var _=new Date(e,t,C-s+1),D=!!h(this._d)&&v(_,this._d),P=v(_,a),z=-1!==i.events.indexOf(_.toDateString()),I=C<s||C>=r+s,A=C-s+1,O=t,L=e,R=i.startRange&&v(i.startRange,_),N=i.endRange&&v(i.endRange,_),Y=i.startRange&&i.endRange&&i.startRange<_&&_<i.endRange,j=i.minDate&&_<i.minDate||i.maxDate&&_>i.maxDate||i.disableWeekends&&p(_)||i.disableDayFn&&i.disableDayFn(_);I&&(C<s?(A=y+A,O=u,L=d):(A-=r,O=c,L=f));var H={day:A,month:O,year:L,hasEvent:z,isSelected:D,isToday:P,isDisabled:j,isEmpty:I,isStartRange:R,isEndRange:N,isInRange:Y,showDaysInNextAndPreviousMonths:i.showDaysInNextAndPreviousMonths,enableSelectionDaysInNextAndPreviousMonths:i.enableSelectionDaysInNextAndPreviousMonths};i.pickWholeWeek&&D&&(x=!0),l.push(T(H)),7==++M&&(i.showWeekNumber&&l.unshift(S(C-s,t,e)),o.push(k(l,i.isRTL,i.pickWholeWeek,x)),l=[],M=0,x=!1)}return E(i,o,n)},isVisible:function(){return this._v},show:function(){this.isVisible()||(this._v=!0,this.draw(),c(this.el,"is-hidden"),this._o.bound&&(r(i,"click",this._onClick),this.adjustPosition()),"function"==typeof this._o.onOpen&&this._o.onOpen.call(this))},hide:function(){var e=this._v;!1!==e&&(this._o.bound&&s(i,"click",this._onClick),this.el.style.position="static",this.el.style.left="auto",this.el.style.top="auto",u(this.el,"is-hidden"),this._v=!1,void 0!==e&&"function"==typeof this._o.onClose&&this._o.onClose.call(this))},destroy:function(){this.hide(),s(this.el,"mousedown",this._onMouseDown,!0),s(this.el,"touchend",this._onMouseDown,!0),s(this.el,"change",this._onChange),s(i,"keydown",this._onKeyChange),this._o.field&&(s(this._o.field,"change",this._onInputChange),this._o.bound&&(s(this._o.trigger,"click",this._onInputClick),s(this._o.trigger,"focus",this._onInputFocus),s(this._o.trigger,"blur",this._onInputBlur))),this.el.parentNode&&this.el.parentNode.removeChild(this.el)}},P}),function(e,t){"use strict";"object"==typeof exports?t(require("jquery"),require("pikaday")):"function"==typeof define&&define.amd?define(["jquery","pikaday"],t):t(e.jQuery,e.Pikaday)}(this,function(e,t){"use strict";e.fn.pikaday=function(){var n=arguments;return n&&n.length||(n=[{}]),this.each(function(){var i=e(this),a=i.data("pikaday");if(a instanceof t)"string"==typeof n[0]&&"function"==typeof a[n[0]]&&(a[n[0]].apply(a,Array.prototype.slice.call(n,1)),"destroy"===n[0]&&i.removeData("pikaday"));else if("object"==typeof n[0]){var r=e.extend({},n[0]);r.field=i[0],i.data("pikaday",new t(r))}})}}),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports&&"function"==typeof require?require("jquery"):jQuery)}(function(e){"use strict";function t(n,i){var a=this;a.element=n,a.el=e(n),a.suggestions=[],a.badQueries=[],a.selectedIndex=-1,a.currentValue=a.element.value,a.timeoutId=null,a.cachedResponse={},a.onChangeTimeout=null,a.onChange=null,a.isLocal=!1,a.suggestionsContainer=null,a.noSuggestionsContainer=null,a.options=e.extend({},t.defaults,i),a.classes={selected:"autocomplete-selected",suggestion:"autocomplete-suggestion"},a.hint=null,a.hintValue="",a.selection=null,a.initialize(),a.setOptions(i)}function n(e,t,n){return-1!==e.value.toLowerCase().indexOf(n)}function i(t){return"string"==typeof t?e.parseJSON(t):t}function a(e,t){if(!t)return e.value;var n="("+s.escapeRegExChars(t)+")";return e.value.replace(new RegExp(n,"gi"),"<strong>$1</strong>").replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/&lt;(\/?strong)&gt;/g,"<$1>")}function r(e,t){return'<div class="autocomplete-group">'+t+"</div>"}var s=function(){return{escapeRegExChars:function(e){return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&")},createNode:function(e){var t=document.createElement("div");return t.className=e,t.style.position="absolute",t.style.display="none",t}}}(),o={ESC:27,TAB:9,RETURN:13,LEFT:37,UP:38,RIGHT:39,DOWN:40},l=e.noop;t.utils=s,e.Autocomplete=t,t.defaults={ajaxSettings:{},autoSelectFirst:!1,appendTo:"body",serviceUrl:null,lookup:null,onSelect:null,width:"auto",minChars:1,maxHeight:300,deferRequestBy:0,params:{},formatResult:a,formatGroup:r,delimiter:null,zIndex:9999,type:"GET",noCache:!1,onSearchStart:l,onSearchComplete:l,onSearchError:l,preserveInput:!1,containerClass:"autocomplete-suggestions",tabDisabled:!1,dataType:"text",currentRequest:null,triggerSelectOnValidInput:!0,preventBadQueries:!0,lookupFilter:n,paramName:"query",transformResult:i,showNoSuggestionNotice:!1,noSuggestionNotice:"No results",orientation:"bottom",forceFixPosition:!1},t.prototype={initialize:function(){var n,i=this,a="."+i.classes.suggestion,r=i.classes.selected,s=i.options;i.element.setAttribute("autocomplete","off"),i.noSuggestionsContainer=e('<div class="autocomplete-no-suggestion"></div>').html(this.options.noSuggestionNotice).get(0),i.suggestionsContainer=t.utils.createNode(s.containerClass),(n=e(i.suggestionsContainer)).appendTo(s.appendTo||"body"),"auto"!==s.width&&n.css("width",s.width),n.on("mouseover.autocomplete",a,function(){i.activate(e(this).data("index"))}),n.on("mouseout.autocomplete",function(){i.selectedIndex=-1,n.children("."+r).removeClass(r)}),n.on("click.autocomplete",a,function(){i.select(e(this).data("index"))}),n.on("click.autocomplete",function(){clearTimeout(i.blurTimeoutId)}),i.fixPositionCapture=function(){i.visible&&i.fixPosition()},e(window).on("resize.autocomplete",i.fixPositionCapture),i.el.on("keydown.autocomplete",function(e){i.onKeyPress(e)}),i.el.on("keyup.autocomplete",function(e){i.onKeyUp(e)}),i.el.on("blur.autocomplete",function(){i.onBlur()}),i.el.on("focus.autocomplete",function(){i.onFocus()}),i.el.on("change.autocomplete",function(e){i.onKeyUp(e)}),i.el.on("input.autocomplete",function(e){i.onKeyUp(e)})},onFocus:function(){var e=this;e.fixPosition(),e.el.val().length>=e.options.minChars&&e.onValueChange()},onBlur:function(){var e=this;e.blurTimeoutId=setTimeout(function(){e.hide()},200)},abortAjax:function(){var e=this;e.currentRequest&&(e.currentRequest.abort(),e.currentRequest=null)},setOptions:function(t){var n=this,i=n.options;this.options=e.extend({},i,t),n.isLocal=e.isArray(i.lookup),n.isLocal&&(i.lookup=n.verifySuggestionsFormat(i.lookup)),i.orientation=n.validateOrientation(i.orientation,"bottom"),e(n.suggestionsContainer).css({"max-height":i.maxHeight+"px",width:i.width+"px","z-index":i.zIndex})},clearCache:function(){this.cachedResponse={},this.badQueries=[]},clear:function(){this.clearCache(),this.currentValue="",this.suggestions=[]},disable:function(){var e=this;e.disabled=!0,clearTimeout(e.onChangeTimeout),e.abortAjax()},enable:function(){this.disabled=!1},fixPosition:function(){var t=this,n=e(t.suggestionsContainer),i=n.parent().get(0);if(i===document.body||t.options.forceFixPosition){var a=t.options.orientation,r=n.outerHeight(),s=t.el.outerHeight(),o=t.el.offset(),l={top:o.top,left:o.left};if("auto"===a){var u=e(window).height(),c=e(window).scrollTop(),d=-c+o.top-r,h=c+u-(o.top+s+r);a=Math.max(d,h)===d?"top":"bottom"}if(l.top+="top"===a?-r:s,i!==document.body){var p,f=n.css("opacity");t.visible||n.css("opacity",0).show(),p=n.offsetParent().offset(),l.top-=p.top,l.left-=p.left,t.visible||n.css("opacity",f).hide()}"auto"===t.options.width&&(l.width=t.el.outerWidth()+"px"),n.css(l)}},isCursorAtEnd:function(){var e,t=this,n=t.el.val().length,i=t.element.selectionStart;return"number"==typeof i?i===n:!document.selection||((e=document.selection.createRange()).moveStart("character",-n),n===e.text.length)},onKeyPress:function(e){var t=this;if(t.disabled||t.visible||e.which!==o.DOWN||!t.currentValue){if(!t.disabled&&t.visible){switch(e.which){case o.ESC:t.el.val(t.currentValue),t.hide();break;case o.RIGHT:if(t.hint&&t.options.onHint&&t.isCursorAtEnd()){t.selectHint();break}return;case o.TAB:if(t.hint&&t.options.onHint)return void t.selectHint();if(-1===t.selectedIndex)return void t.hide();if(t.select(t.selectedIndex),!1===t.options.tabDisabled)return;break;case o.RETURN:if(-1===t.selectedIndex)return void t.hide();t.select(t.selectedIndex);break;case o.UP:t.moveUp();break;case o.DOWN:t.moveDown();break;default:return}e.stopImmediatePropagation(),e.preventDefault()}}else t.suggest()},onKeyUp:function(e){var t=this;if(!t.disabled){switch(e.which){case o.UP:case o.DOWN:return}clearTimeout(t.onChangeTimeout),t.currentValue!==t.el.val()&&(t.findBestHint(),t.options.deferRequestBy>0?t.onChangeTimeout=setTimeout(function(){t.onValueChange()},t.options.deferRequestBy):t.onValueChange())}},onValueChange:function(){var t=this,n=t.options,i=t.el.val(),a=t.getQuery(i);t.selection&&t.currentValue!==a&&(t.selection=null,(n.onInvalidateSelection||e.noop).call(t.element)),clearTimeout(t.onChangeTimeout),t.currentValue=i,t.selectedIndex=-1,n.triggerSelectOnValidInput&&t.isExactMatch(a)?t.select(0):a.length<n.minChars?t.hide():t.getSuggestions(a)},isExactMatch:function(e){var t=this.suggestions;return 1===t.length&&t[0].value.toLowerCase()===e.toLowerCase()},getQuery:function(t){var n,i=this.options.delimiter;return i?(n=t.split(i),e.trim(n[n.length-1])):t},getSuggestionsLocal:function(t){var n,i=this.options,a=t.toLowerCase(),r=i.lookupFilter,s=parseInt(i.lookupLimit,10);return n={suggestions:e.grep(i.lookup,function(e){return r(e,t,a)})},s&&n.suggestions.length>s&&(n.suggestions=n.suggestions.slice(0,s)),n},getSuggestions:function(t){var n,i,a,r,s=this,o=s.options,l=o.serviceUrl;o.params[o.paramName]=t,!1!==o.onSearchStart.call(s.element,o.params)&&(i=o.ignoreParams?null:o.params,e.isFunction(o.lookup)?o.lookup(t,function(e){s.suggestions=e.suggestions,s.suggest(),o.onSearchComplete.call(s.element,t,e.suggestions)}):(s.isLocal?n=s.getSuggestionsLocal(t):(e.isFunction(l)&&(l=l.call(s.element,t)),a=l+"?"+e.param(i||{}),n=s.cachedResponse[a]),n&&e.isArray(n.suggestions)?(s.suggestions=n.suggestions,s.suggest(),o.onSearchComplete.call(s.element,t,n.suggestions)):s.isBadQuery(t)?o.onSearchComplete.call(s.element,t,[]):(s.abortAjax(),r={url:l,data:i,type:o.type,dataType:o.dataType},e.extend(r,o.ajaxSettings),s.currentRequest=e.ajax(r).done(function(e){var n;s.currentRequest=null,n=o.transformResult(e,t),s.processResponse(n,t,a),o.onSearchComplete.call(s.element,t,n.suggestions)}).fail(function(e,n,i){o.onSearchError.call(s.element,t,e,n,i)}))))},isBadQuery:function(e){if(!this.options.preventBadQueries)return!1;for(var t=this.badQueries,n=t.length;n--;)if(0===e.indexOf(t[n]))return!0;return!1},hide:function(){var t=this,n=e(t.suggestionsContainer);e.isFunction(t.options.onHide)&&t.visible&&t.options.onHide.call(t.element,n),t.visible=!1,t.selectedIndex=-1,clearTimeout(t.onChangeTimeout),e(t.suggestionsContainer).hide(),t.signalHint(null)},suggest:function(){if(this.suggestions.length){var t,n=this,i=n.options,a=i.groupBy,r=i.formatResult,s=n.getQuery(n.currentValue),o=n.classes.suggestion,l=n.classes.selected,u=e(n.suggestionsContainer),c=e(n.noSuggestionsContainer),d=i.beforeRender,h="",p=function(e,n){var r=e.data[a];return t===r?"":(t=r,i.formatGroup(e,t))};i.triggerSelectOnValidInput&&n.isExactMatch(s)?n.select(0):(e.each(n.suggestions,function(e,t){a&&(h+=p(t,0)),h+='<div class="'+o+'" data-index="'+e+'">'+r(t,s,e)+"</div>"}),this.adjustContainerWidth(),c.detach(),u.html(h),e.isFunction(d)&&d.call(n.element,u,n.suggestions),n.fixPosition(),u.show(),i.autoSelectFirst&&(n.selectedIndex=0,u.scrollTop(0),u.children("."+o).first().addClass(l)),n.visible=!0,n.findBestHint())}else this.options.showNoSuggestionNotice?this.noSuggestions():this.hide()},noSuggestions:function(){var t=this,n=t.options.beforeRender,i=e(t.suggestionsContainer),a=e(t.noSuggestionsContainer);this.adjustContainerWidth(),a.detach(),i.empty(),i.append(a),e.isFunction(n)&&n.call(t.element,i,t.suggestions),t.fixPosition(),i.show(),t.visible=!0},adjustContainerWidth:function(){var t,n=this,i=n.options,a=e(n.suggestionsContainer);"auto"===i.width?(t=n.el.outerWidth(),a.css("width",t>0?t:300)):"flex"===i.width&&a.css("width","")},findBestHint:function(){var t=this,n=t.el.val().toLowerCase(),i=null;n&&(e.each(t.suggestions,function(e,t){var a=0===t.value.toLowerCase().indexOf(n);return a&&(i=t),!a}),t.signalHint(i))},signalHint:function(t){var n="",i=this;t&&(n=i.currentValue+t.value.substr(i.currentValue.length)),i.hintValue!==n&&(i.hintValue=n,i.hint=t,(this.options.onHint||e.noop)(n))},verifySuggestionsFormat:function(t){return t.length&&"string"==typeof t[0]?e.map(t,function(e){return{value:e,data:null}}):t},validateOrientation:function(t,n){return t=e.trim(t||"").toLowerCase(),-1===e.inArray(t,["auto","bottom","top"])&&(t=n),t},processResponse:function(e,t,n){var i=this,a=i.options;e.suggestions=i.verifySuggestionsFormat(e.suggestions),a.noCache||(i.cachedResponse[n]=e,a.preventBadQueries&&!e.suggestions.length&&i.badQueries.push(t)),t===i.getQuery(i.currentValue)&&(i.suggestions=e.suggestions,i.suggest())},activate:function(t){var n,i=this,a=i.classes.selected,r=e(i.suggestionsContainer),s=r.find("."+i.classes.suggestion);return r.find("."+a).removeClass(a),i.selectedIndex=t,-1!==i.selectedIndex&&s.length>i.selectedIndex?(n=s.get(i.selectedIndex),e(n).addClass(a),n):null},selectHint:function(){var t=this,n=e.inArray(t.hint,t.suggestions);t.select(n)},select:function(e){var t=this;t.hide(),t.onSelect(e)},moveUp:function(){var t=this;if(-1!==t.selectedIndex)return 0===t.selectedIndex?(e(t.suggestionsContainer).children().first().removeClass(t.classes.selected),t.selectedIndex=-1,t.el.val(t.currentValue),void t.findBestHint()):void t.adjustScroll(t.selectedIndex-1)},moveDown:function(){var e=this;e.selectedIndex!==e.suggestions.length-1&&e.adjustScroll(e.selectedIndex+1)},adjustScroll:function(t){var n=this,i=n.activate(t);if(i){var a,r,s,o=e(i).outerHeight();a=i.offsetTop,s=(r=e(n.suggestionsContainer).scrollTop())+n.options.maxHeight-o,a<r?e(n.suggestionsContainer).scrollTop(a):a>s&&e(n.suggestionsContainer).scrollTop(a-n.options.maxHeight+o),n.options.preserveInput||n.el.val(n.getValue(n.suggestions[t].value)),n.signalHint(null)}},onSelect:function(t){var n=this,i=n.options.onSelect,a=n.suggestions[t];n.currentValue=n.getValue(a.value),n.currentValue===n.el.val()||n.options.preserveInput||n.el.val(n.currentValue),n.signalHint(null),n.suggestions=[],n.selection=a,e.isFunction(i)&&i.call(n.element,a)},getValue:function(e){var t,n,i=this,a=i.options.delimiter;return a?(t=i.currentValue,n=t.split(a),1===n.length?e:t.substr(0,t.length-n[n.length-1].length)+e):e},dispose:function(){var t=this;t.el.off(".autocomplete").removeData("autocomplete"),e(window).off("resize.autocomplete",t.fixPositionCapture),e(t.suggestionsContainer).remove()}},e.fn.devbridgeAutocomplete=function(n,i){return arguments.length?this.each(function(){var a=e(this),r=a.data("autocomplete");"string"==typeof n?r&&"function"==typeof r[n]&&r[n](i):(r&&r.dispose&&r.dispose(),r=new t(this,n),a.data("autocomplete",r))}):this.first().data("autocomplete")},e.fn.autocomplete||(e.fn.autocomplete=e.fn.devbridgeAutocomplete)}),function(){"use strict";function e(t){var n,i,a=(t&&t[0]||t)instanceof HTMLElement?{root:t}:t,r=!!a,s={$:l.jQuery,direction:"v",barOnCls:"_scrollbar",resizeDebounce:0,event:function(e,t,n,i){a.$(e)[i||"on"](t,n)},cssGuru:!1,impact:"scroller",position:"static"};a=a||{};for(var o in s)void 0===a[o]&&(a[o]=s[o]);n=a.$&&this instanceof a.$,a._chain?i=a.root:n?a.root=i=this:i=a.$?a.$(a.root||a.scroller):[];var u=new e.fn.constructor(i,a,r);return u.autoUpdate&&u.autoUpdate(),u}function t(e,t){var n=0,i=e;for(void 0!==i.length&&i!==l||(i=[i]);i[n];)t.call(this,i[n],n),n++}function n(){return(new Date).getTime()}function i(e,n,i){e._eventHandlers=e._eventHandlers||[{element:e.scroller,handler:function(t){e.scroll(t)},type:"scroll"},{element:e.root,handler:function(){e.update()},type:"transitionend animationend"},{element:e.scroller,handler:function(){e.update()},type:"keyup"},{element:e.bar,handler:function(t){t.preventDefault(),e.selection(),e.drag.now=1,e.draggingCls&&u(e.root).addClass(e.draggingCls)},type:"touchstart mousedown"},{element:document,handler:function(){e.selection(1),e.drag.now=0,e.draggingCls&&u(e.root).removeClass(e.draggingCls)},type:"mouseup blur touchend"},{element:document,handler:function(t){2!=t.button&&e._pos0(t)},type:"touchstart mousedown"},{element:document,handler:function(t){e.drag.now&&e.drag(t)},type:"mousemove touchmove"},{element:l,handler:function(){e.update()},type:"resize"},{element:e.root,handler:function(){e.update()},type:"sizeChange"},{element:e.clipper,handler:function(){e.clipperOnScroll()},type:"scroll"}],t(e._eventHandlers,function(e){e.element&&n(e.element,e.type,e.handler,i)})}function a(e,t,n,i){var a="data-baron-"+t+"-id";return"on"==n?e.setAttribute(a,i):"off"==n&&e.removeAttribute(a),e.getAttribute(a)}function r(e){var t=new d.prototype.constructor(e);return i(t,e.event,"on"),a(t.root,e.direction,"on",p.length),p.push(t),t.update(),t}function s(e){var t={},n=e||{};for(var i in n)n.hasOwnProperty(i)&&(t[i]=n[i]);return t}function o(e){if(this.events&&this.events[e])for(var t=0;t<this.events[e].length;t++){var n=Array.prototype.slice.call(arguments,1);this.events[e][t].apply(this,n)}}var l=function(){return this||(0,eval)("this")}(),u=l.$,c=e,d={},h=["left","top","right","bottom","width","height"],p=[],f={v:{x:"Y",pos:h[1],oppos:h[3],crossPos:h[0],crossOpPos:h[2],size:h[5],crossSize:h[4],crossMinSize:"min-"+h[4],crossMaxSize:"max-"+h[4],client:"clientHeight",crossClient:"clientWidth",scrollEdge:"scrollLeft",offset:"offsetHeight",crossOffset:"offsetWidth",offsetPos:"offsetTop",scroll:"scrollTop",scrollSize:"scrollHeight"},h:{x:"X",pos:h[0],oppos:h[2],crossPos:h[1],crossOpPos:h[3],size:h[4],crossSize:h[5],crossMinSize:"min-"+h[5],crossMaxSize:"max-"+h[5],client:"clientWidth",crossClient:"clientHeight",scrollEdge:"scrollTop",offset:"offsetWidth",crossOffset:"offsetHeight",offsetPos:"offsetLeft",scroll:"scrollLeft",scrollSize:"scrollWidth"}},m=17,g=15,v=/[\s\S]*Macintosh[\s\S]*\) Gecko[\s\S]*/.test(l.navigator&&l.navigator.userAgent);e.fn={constructor:function(e,n,i){var o=s(n);o.event=function(e,i,a,r){t(e,function(e){n.event(e,i,a,r)})},this.length=0,t.call(this,e,function(e,t){var n=a(e,o.direction),i=+n;if(i==i&&null!==n&&p[i])this[t]=p[i];else{var l=s(o);if(o.root&&o.scroller){if(l.scroller=o.$(o.scroller,e),!l.scroller.length)return}else l.scroller=e;l.root=e,this[t]=r(l)}this.length=t+1}),this.params=o},dispose:function(){var e=this.params;t(this,function(t,n){t.dispose(e),p[n]=null}),this.params=null},update:function(){var e=arguments;t(this,function(t){t.update.apply(t,e)})},baron:function(n){return n.root=[],this.params.root&&(n.scroller=this.params.scroller),t.call(this,this,function(e){n.root.push(e.root)}),n.direction="v"==this.params.direction?"h":"v",n._chain=!0,e(n)}},d.prototype={_debounce:function(e,t){var i,a,r=this,s=function(){if(r._disposed)return clearTimeout(i),void(i=r=null);var o=n()-a;o<t&&o>=0?i=setTimeout(s,t-o):(i=null,e())};return function(){a=n(),i||(i=setTimeout(s,t))}},constructor:function(e){function t(e,t){return d(e,t)[0]}function i(e){var t=this.barMinSize||20,n=e;n>0&&n<t&&(n=t),this.bar&&d(this.bar).css(this.origin.size,parseInt(n,10)+"px")}function a(e){if(this.bar){var t=d(this.bar).css(this.origin.pos),n=+e+"px";n&&n!=t&&d(this.bar).css(this.origin.pos,n)}}function r(){return y[this.origin.client]-this.barTopLimit-this.bar[this.origin.offset]}function s(e){return e*r.call(this)+this.barTopLimit}function u(e){return(e-this.barTopLimit)/r.call(this)}function c(){return!1}var d,h,p,y,w,b,x,C;if(x=n(),d=this.$=e.$,this.event=e.event,this.events={},this.root=e.root,this.scroller=t(e.scroller),this.bar=t(e.bar,this.root),y=this.track=t(e.track,this.root),!this.track&&this.bar&&(y=this.bar.parentNode),this.clipper=this.scroller.parentNode,this.direction=e.direction,this.rtl=e.rtl,this.origin=f[this.direction],this.barOnCls=e.barOnCls,this.scrollingCls=e.scrollingCls,this.draggingCls=e.draggingCls,this.impact=e.impact,this.position=e.position,this.rtl=e.rtl,this.barTopLimit=0,this.resizeDebounce=e.resizeDebounce,this.cursor=function(e){return e["client"+this.origin.x]||(((e.originalEvent||e).touches||{})[0]||{})["page"+this.origin.x]},this.pos=function(e){var t="page"+this.origin.x+"Offset",n=this.scroller[t]?t:this.origin.scroll;return void 0!==e&&(this.scroller[n]=e),this.scroller[n]},this.rpos=function(e){var t=this.scroller[this.origin.scrollSize]-this.scroller[this.origin.client];return(e?this.pos(e*t):this.pos())/(t||1)},this.barOn=function(e){if(this.barOnCls){var t=this.scroller[this.origin.client]>=this.scroller[this.origin.scrollSize];e||t?d(this.root).hasClass(this.barOnCls)&&d(this.root).removeClass(this.barOnCls):d(this.root).hasClass(this.barOnCls)||d(this.root).addClass(this.barOnCls)}},this._pos0=function(e){p=this.cursor(e)-h},this.drag=function(e){var t=u.call(this,this.cursor(e)-p),n=this.scroller[this.origin.scrollSize]-this.scroller[this.origin.client];this.scroller[this.origin.scroll]=t*n},this.selection=function(e){this.event(document,"selectpos selectstart",c,e?"off":"on")},this.resize=function(){function e(){var e,i,a=t.scroller[t.origin.crossOffset],r=t.scroller[t.origin.crossClient],s=0;if(v?s=g:r>0&&0===a&&(a=r+m),a)if(t.barOn(),"scroller"==t.impact){var l=a-r+s;if("static"==t.position)e=t.$(t.scroller).css(t.origin.crossSize),i=t.clipper[t.origin.crossClient]+l+"px",e!=i&&t._setCrossSizes(t.scroller,i);else{var u={},c=t.rtl?"Left":"Right";"h"==t.direction&&(c="Bottom"),u["padding"+c]=l+"px",t.$(t.scroller).css(u)}}else e=t.$(t.clipper).css(t.origin.crossSize),i=r+"px",e!=i&&t._setCrossSizes(t.clipper,i);Array.prototype.unshift.call(arguments,"resize"),o.apply(t,arguments),x=n()}var t=this,i=void 0===t.resizeDebounce?300:t.resizeDebounce,a=0;n()-x<i&&(clearTimeout(w),a=i),a?w=setTimeout(e,a):e()},this.updatePositions=function(e){var t,n=this;n.bar&&(t=(y[n.origin.client]-n.barTopLimit)*n.scroller[n.origin.client]/n.scroller[n.origin.scrollSize],(e||parseInt(C,10)!=parseInt(t,10))&&(i.call(n,t),C=t),h=s.call(n,n.rpos()),a.call(n,h)),Array.prototype.unshift.call(arguments,"scroll"),o.apply(n,arguments)},this.scroll=function(){var e=this;e.updatePositions(),e.scrollingCls&&(b||e.$(e.root).addClass(e.scrollingCls),clearTimeout(b),b=setTimeout(function(){e.$(e.root).removeClass(e.scrollingCls),b=void 0},300))},this.clipperOnScroll=function(){this.rtl?this.clipper[this.origin.scrollEdge]=this.clipper[this.origin.scrollSize]:this.clipper[this.origin.scrollEdge]=0},this._setCrossSizes=function(e,t){var n={};n[this.origin.crossSize]=t,n[this.origin.crossMinSize]=t,n[this.origin.crossMaxSize]=t,this.$(e).css(n)},this._dumbCss=function(t){if(!e.cssGuru){var n=t?"hidden":null,i=t?"none":null;this.$(this.clipper).css({overflow:n,msOverflowStyle:i,position:"static"==this.position?"":"relative"});var a=t?"scroll":null,r={};r["overflow-"+("v"==this.direction?"y":"x")]=a,r["box-sizing"]="border-box",r.margin="0",r.border="0","absolute"==this.position&&(r.position="absolute",r.top="0","h"==this.direction?r.left=r.right="0":(r.bottom="0",r.right=this.rtl?"0":"",r.left=this.rtl?"":"0")),this.$(this.scroller).css(r)}},this._dumbCss(!0),v){var T="paddingRight",S={},k=l.getComputedStyle(this.scroller)[[T]];"h"==e.direction?T="paddingBottom":e.rtl&&(T="paddingLeft");var M=parseInt(k,10);M!=M&&(M=0),S[T]=g+M+"px",d(this.scroller).css(S)}return this},update:function(e){return o.call(this,"upd",e),this.resize(1),this.updatePositions(1),this},dispose:function(e){i(this,this.event,"off"),a(this.root,e.direction,"off"),"v"==e.direction?this._setCrossSizes(this.scroller,""):this._setCrossSizes(this.clipper,""),this._dumbCss(!1),this.barOn(!0),o.call(this,"dispose"),this._disposed=!0},on:function(e,t,n){for(var i=e.split(" "),a=0;a<i.length;a++)"init"==i[a]?t.call(this,n):(this.events[i[a]]=this.events[i[a]]||[],this.events[i[a]].push(function(e){t.call(this,e||n)}))}},e.fn.constructor.prototype=e.fn,d.prototype.constructor.prototype=d.prototype,e.noConflict=function(){return l.baron=c,e},e.version="2.3.1","undefined"!=typeof module?(module.exports=e,require("./fix"),require("./pull"),require("./controls"),require("./autoUpdate")):(window.baron=e,u&&u.fn&&(u.fn.baron=e))}(),function(){var e=function(){return this||(0,eval)("this")}(),t=function(e){function t(e,t,n){var i=t,o=1==n?"pos":"oppos";r<(s.minView||0)&&(i=void 0),this.$(a[e]).css(this.origin.pos,"").css(this.origin.oppos,"").removeClass(s.outside),void 0!==i&&(i+="px",this.$(a[e]).css(this.origin[o],i).addClass(s.outside))}function n(e){try{var t=document.createEvent("WheelEvent");t.initWebKitWheelEvent(e.originalEvent.wheelDeltaX,e.originalEvent.wheelDeltaY),c.dispatchEvent(t),e.preventDefault()}catch(e){}}function i(e){var t;for(var i in e)s[i]=e[i];if(a=this.$(s.elements,this.scroller)){r=this.scroller[this.origin.client];for(var c=0;c<a.length;c++)t={},t[this.origin.size]=a[c][this.origin.offset],a[c].parentNode!==this.scroller&&this.$(a[c].parentNode).css(t),t={},t[this.origin.crossSize]=a[c].parentNode[this.origin.crossClient],this.$(a[c]).css(t),r-=a[c][this.origin.offset],u[c]=a[c].parentNode[this.origin.offsetPos],o[c]=o[c-1]||0,l[c]=l[c-1]||Math.min(u[c],0),a[c-1]&&(o[c]+=a[c-1][this.origin.offset],l[c]+=a[c-1][this.origin.offset]),0==c&&0==u[c]||(this.event(a[c],"mousewheel",n,"off"),this.event(a[c],"mousewheel",n));s.limiter&&a[0]&&(this.track&&this.track!=this.scroller?(t={},t[this.origin.pos]=a[0].parentNode[this.origin.offset],this.$(this.track).css(t)):this.barTopLimit=a[0].parentNode[this.origin.offset],this.scroll()),!1===s.limiter&&(this.barTopLimit=0)}var f={element:a,handler:function(){for(var e,t=h(this)[0].parentNode.offsetTop,n=0;n<a.length;n++)a[n]===this&&(e=n);var i=t-o[e];s.scroll?s.scroll({x1:p.scroller.scrollTop,x2:i}):p.scroller.scrollTop=i},type:"click"};s.clickable&&(this._eventHandlers.push(f),d(f.element,f.type,f.handler,"on"))}var a,r,s={outside:"",inside:"",before:"",after:"",past:"",future:"",radius:0,minView:0},o=[],l=[],u=[],c=this.scroller,d=this.event,h=this.$,p=this;this.on("init",i,e);var f=[],m=[];this.on("init scroll",function(){var e,n,i,c;if(a){var d;for(c=0;c<a.length;c++)e=0,u[c]-this.pos()<l[c]+s.radius?(e=1,n=o[c]):u[c]-this.pos()>l[c]+r-s.radius?(e=2,n=this.scroller[this.origin.client]-a[c][this.origin.offset]-o[c]-r):(e=3,n=void 0),i=!1,(u[c]-this.pos()<l[c]||u[c]-this.pos()>l[c]+r)&&(i=!0),e==f[c]&&i==m[c]||(t.call(this,c,n,e),f[c]=e,m[c]=i,d=!0);if(d)for(c=0;c<a.length;c++)1==f[c]&&s.past&&this.$(a[c]).addClass(s.past).removeClass(s.future),2==f[c]&&s.future&&this.$(a[c]).addClass(s.future).removeClass(s.past),3==f[c]?((s.future||s.past)&&this.$(a[c]).removeClass(s.past).removeClass(s.future),s.inside&&this.$(a[c]).addClass(s.inside)):s.inside&&this.$(a[c]).removeClass(s.inside),f[c]!=f[c+1]&&1==f[c]&&s.before?this.$(a[c]).addClass(s.before).removeClass(s.after):f[c]!=f[c-1]&&2==f[c]&&s.after?this.$(a[c]).addClass(s.after).removeClass(s.before):this.$(a[c]).removeClass(s.before).removeClass(s.after),s.grad&&(m[c]?this.$(a[c]).addClass(s.grad):this.$(a[c]).removeClass(s.grad))}}),this.on("resize upd",function(e){i.call(this,e&&e.fix)})};("undefined"!=typeof module?require("./core.js"):e.baron).fn.fix=function(e){for(var n=0;this[n];)t.call(this[n],e),n++;return this}}(),function(){var e,t=function(){return this||(0,eval)("this")}();e="undefined"!=typeof module?require("./core"):t.baron;var n=t.MutationObserver||t.WebKitMutationObserver||t.MozMutationObserver||null,i=function(){function e(){r.root[r.origin.offset]?i():t()}function t(){a||(a=setInterval(function(){r.root[r.origin.offset]&&(i(),r.update())},300))}function i(){clearInterval(a),a=null}var a,r=this;if(!this._au){var s=r._debounce(function(){r.update()},300);this._observer=new n(function(){e(),r.update(),s()}),this.on("init",function(){r._observer.observe(r.root,{childList:!0,subtree:!0,characterData:!0}),e()}),this.on("dispose",function(){r._observer.disconnect(),i(),delete r._observer}),this._au=!0}};e.fn.autoUpdate=function(e){if(!n)return this;for(var t=0;this[t];)i.call(this[t],e),t++;return this}}(),function(){var e=function(){return this||(0,eval)("this")}(),t=function(e){var t,n,i,a,r,s=this;a=e.screen||.9,e.forward&&(t=this.$(e.forward,this.clipper),r={element:t,handler:function(){var t=s.pos()+(e.delta||30);s.pos(t)},type:"click"},this._eventHandlers.push(r),this.event(r.element,r.type,r.handler,"on")),e.backward&&(n=this.$(e.backward,this.clipper),r={element:n,handler:function(){var t=s.pos()-(e.delta||30);s.pos(t)},type:"click"},this._eventHandlers.push(r),this.event(r.element,r.type,r.handler,"on")),e.track&&(i=!0===e.track?this.track:this.$(e.track,this.clipper)[0])&&(r={element:i,handler:function(e){if(e.target==i){var t=e["offset"+s.origin.x],n=s.bar[s.origin.offsetPos],r=0;t<n?r=-1:t>n+s.bar[s.origin.offset]&&(r=1);var o=s.pos()+r*a*s.scroller[s.origin.client];s.pos(o)}},type:"mousedown"},this._eventHandlers.push(r),this.event(r.element,r.type,r.handler,"on"))};("undefined"!=typeof module?require("./core"):e.baron).fn.controls=function(e){for(var n=0;this[n];)t.call(this[n],e),n++;return this}}(),function(e){e.fn.avatarCrop=function(){this.each(function(){e(this).croppie({viewport:{width:300,height:300}})})}}(jQuery),function(e){e.fn.datePicker=function(){var t=e("html").attr("lang");return this.each(function(){var e={previousMonth:"Предыдущий месяц",nextMonth:"Следующий месяц",months:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],weekdays:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"],weekdaysShort:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"]},n={field:this,firstDay:1,format:"DD.MM.YYYY",defaultDate:new Date(1980,0,1),maxDate:new Date(2010,0,1),yearRange:[1900,2010]};"ru"===t&&(n.i18n=e);new Pikaday(n)})}}(jQuery),$(document).ready(function(){var e=$(".js-events-block-content");$(".js-events-block-filter").click(function(){var t=$(this),n=t.attr("href");return t.hasClass("active")||(e.spin("large","#000"),$.ajax(n,{method:"GET",cache:!1}).done(function(n){$(".js-events-block-filter").removeClass("active"),t.addClass("active"),e.html(n)}).fail(function(e,t,n){alert("Ошибка загрузки данных. Пожалуйста, попробуйте ещё раз."),console.log(e),console.log(n)}).always(function(){e.spin(!1)})),!1})}),function(e){e.fn.formAjax=function(){this.each(function(){e(this).on("submit",function(){function t(){e("body").spin("large","#000"),e.ajax({url:i,type:a,data:r,processData:!1,contentType:!1,cache:!1,dataType:"json"}).done(function(t){t&&t.success?(n[0].reset(),initSideModal(t.message,"message-modal",!1,!1)):t&&t.message&&(n.find(".js-form-messages").addClass("active").html(t.message),t.errors&&t.errors.forEach(function(t){var n=e('[name="'+t.name+'"]');n.length&&(n.addClass("error"),n.siblings(".form-label").addClass("form-label-error"),n.siblings(".form-control-errors").addClass("active").html(t.message))})),t&&t.redirect&&(window.location.href=t.redirect),t&&t.reload&&window.location.reload()}).fail(function(e,t,n){alert("Ошибка отправки данных. Пожалуйста, попробуйте ещё раз."),console.log(e),console.log(n)}).always(function(){e("body").spin(!1)})}var n=e(this),i=n.attr("action"),a=n.attr("method"),r=new FormData(n[0]),s=n.is("[data-validate]");return s&&n.valid()?t():s||t(),!1})})}}(jQuery),function(e){e.validator.addMethod("dateRange",function(e,t,n){try{var i=n.split(","),a=i[0].split(".").reverse(),r=moment(a).unix(),s=i[1].split(".").reverse(),o=moment(s).unix(),l=e.split(".").reverse(),u=moment(l).unix();return r<=u&&u<=o}catch(e){return console.log(e),!1}}),e.validator.methods.email=function(e,t){return this.optional(t)||/.+@.+\..{2,}/i.test(e)},e.fn.formValidation=function(){this.each(function(){e(this).validate({errorPlacement:function(e,t){},highlight:function(t,n,i){e(t).closest(".form-group").find(".form-label").addClass("form-label-error").removeClass("form-label-valid"),e(t).closest(".form-control").addClass(n).removeClass(i),e(t).addClass(n).removeClass(i)},unhighlight:function(t,n,i){e(t).closest(".form-group").find(".form-label").removeClass("form-label-error").addClass("form-label-valid"),e(t).closest(".form-control").removeClass(n).addClass(i),e(t).removeClass(n).addClass(i)}})})}}(jQuery),function(e){e.fn.inputFile=function(){return this.each(function(){e(this).on("focus blur change",function(){var t=e(this).val(),n=e(this).siblings(".js-input-file-title").data("input-file-default-title"),i=e(this).siblings(".js-input-file-subtitle");""!=t?(t.length>10&&(t=t.substr(0,10)+"..."),e(this).siblings(".js-input-file-title").html(t),i.animate({opacity:0},300)):(e(this).siblings(".js-input-file-title").html(n),i.animate({opacity:1},300))}),e(this).on("focus",function(){e(this).closest(".form-control").addClass("is-focus")}),e(this).on("blur",function(){e(this).closest(".form-control").removeClass("is-focus")})})}}(jQuery),function(e){e.fn.maskedinput=function(){this.each(function(){var t=e(this).data("masked-input"),n=e(this).data("masked-input-placeholder"),i=e(this).is("[data-masked-input-clearifnotmatch]");e(this).mask(t,{placeholder:n,clearIfNotMatch:i})})}}(jQuery),function(e){e.fn.inputPhoto=function(){return this.each(function(){var t=e(this)[0],n=e(this).closest(".form-control-photo"),i=e(this).siblings(".form-control-photo-area"),a=e(this).siblings(".form-control-photo-notify");t.addEventListener("change",function(e){var r=t.files[0],s=/image.*/;if(r.type.match(s)){n.removeClass("is-with-error"),n.addClass("is-with-photo"),a.removeClass("active");var o=new FileReader;o.onload=function(e){i.html("");var t=new Image;t.src=o.result,i.append(t)},o.readAsDataURL(r)}else t.value="",n.removeClass("is-with-photo"),n.addClass("is-with-error"),a.addClass("active").html("Недопустимый формат файла!")})})}}(jQuery),function(e){e.fn.inputRegionCity=function(){return this.each(function(){var t=e(this).find(".js-regions-autocomplete"),n=e(this).find(".js-region-id"),i=e(this).find(".js-cities-autocomplete"),a=e(this).find(".js-city-id"),r=null,s=null;i.attr("readonly",!0),t.devbridgeAutocomplete({serviceUrl:"data/regions.json",minChars:1,onSelect:function(e){r=e,n.val()!=e.data&&(i.attr("readonly",!1),n.val(e.data),i.val(""),a.val(""))},onInvalidateSelection:function(){n.val(""),t.val(""),a.val(""),i.val(""),i.attr("readonly",!0)}}),i.devbridgeAutocomplete({serviceUrl:function(e,t){return"data/cities.json?"+r.data},minChars:1,onSelect:function(e){s=e,a.val(e.data)},onInvalidateSelection:function(){i.val(""),a.val("")}})})}}(jQuery);var contactsMap;$(document).ready(function(){$(".js-mobile-menu-toggle").click(function(){return $(this).siblings("ul").hasClass("active")?($(this).removeClass("active"),$(this).siblings("ul").removeClass("active")):($(this).siblings("ul").addClass("active"),$(this).addClass("active")),!1})}),function(){function e(t,n,i){$(t.target).closest(n).length||(i(),$(document).off("click","body",e))}function t(){$(".js-offcanvas").addClass("active"),$(i).addClass("active"),$(document).on("click","body",function(t){e(t,a,n)})}function n(){$(".js-offcanvas, "+i).removeClass("active")}var i="#offcanvas",a="#offcanvas > .main-offcanvas";$(".js-offcanvas").click(function(){return $(this).hasClass("active")?n():t(),!1}),$(i).length&&new Hammer($(i)[0]).on("swipeleft",function(e){n()})}(),$(document).on("click","[data-side-modal]",function(e){var t=$(this).attr("href"),n=$(this).data("side-modal-url"),i=$(this).data("side-modal"),a=$(this).data("side-modal-class"),r=$(this).is("[data-side-modal-prevent-overlay-close]"),s=$(this).is("[data-side-modal-prevent-esc-close]");return i?($modalContent=$(i).clone(),initSideModal($modalContent,a,r,s)):($("body").spin("large","#000"),$.ajax({url:n||t,method:"GET",cache:!1}).done(function(e){$modalContent=e,initSideModal($modalContent,a,r,s)}).fail(function(e,t,n){alert("Ошибка загрузки данных. Пожалуйста, попробуйте перезагрузить страницу."),console.log(e),console.log(n)}).always(function(){$("body").spin(!1)})),!1}),$(document).ready(function(){new Swiper(".js-sponsors-swiper",{loop:!0,pagination:".js-sponsors-swiper .swiper-pagination",paginationClickable:!0}),new Swiper(".js-speakers-swiper",{loop:!0,prevButton:".js-speakers-block-button-prev",nextButton:".js-speakers-block-button-next",pagination:".js-speakers-swiper .swiper-pagination",paginationClickable:!0}),new Swiper(".js-news-swiper",{loop:!0,prevButton:".js-news-block-button-prev",nextButton:".js-news-block-button-next",pagination:".js-news-swiper .swiper-pagination",paginationClickable:!0,breakpoints:{1170:{slidesPerView:2},640:{slidesPerView:1}}});$(".js-events-swiper").each(function(){$swiper=$(this),new Swiper($swiper,{loop:!0,pagination:$swiper.find(".swiper-pagination"),paginationClickable:!0,breakpoints:{1170:{slidesPerView:2},640:{slidesPerView:1}}})}),$("[data-masked-input]").maskedinput(),$("[data-validate]").formValidation(),$(".js-input-file").inputFile(),$(".js-input-photo").inputPhoto(),$(".js-datepicker").datePicker(),$(".js-input-region-city").inputRegionCity(),$(".js-avatar-crop").avatarCrop(),$("[data-form-ajax]").formAjax(),$(".js-smooth-scroll").click(function(){history.pushState(null,null,$(this).attr("href"));var e=window.location.hash;return $(e).length>0&&$("html, body").animate({scrollTop:$($.attr(this,"href")).offset().top-10},700),!1})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcC5qcyIsInNpZGUtbW9kYWwuanMiLCJqcXVlcnkuanMiLCJzcGluLmpzIiwianF1ZXJ5LnNwaW4uanMiLCJzd2lwZXIuanF1ZXJ5LmpzIiwiaGFtbWVyLmpzIiwianF1ZXJ5Lm1hc2suanMiLCJqcXVlcnkudmFsaWRhdGUuanMiLCJjcm9wcGllLmpzIiwibW9tZW50LmpzIiwicGlrYWRheS5qcyIsInBpa2FkYXkuanF1ZXJ5LmpzIiwianF1ZXJ5LmF1dG9jb21wbGV0ZS5qcyIsImJhcm9uLm1pbi5qcyIsImF2YXRhci1jcm9wLmpzIiwiZGF0ZXBpY2tlci5qcyIsImV2ZW50cy1maWx0ZXIuanMiLCJmb3JtLWFqYXguanMiLCJmb3JtLXZhbGlkYXRpb24uanMiLCJpbnB1dC1maWxlLmpzIiwiaW5wdXQtbWFzay5qcyIsImlucHV0LXBob3RvLmpzIiwiaW5wdXQtcmVnaW9uLWNpdHkuanMiLCJtb2JpbGUtbWVudS5qcyIsIm9mZmNhbnZhcy5qcyIsInNjcmlwdHMuanMiXSwibmFtZXMiOlsiaW5pdENvbnRhY3RzTWFwIiwieW1hcHMiLCJtYXBFbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIm1hcERhdGFVcmwiLCJkYXRhc2V0IiwibWFwRGF0YSIsImNvbnRhY3RzTWFwIiwiTWFwIiwiY2VudGVyIiwibWFwQ29vcmRzIiwic3BsaXQiLCJ6b29tIiwibWFwWm9vbSIsImNvbnRyb2xzIiwiYmVoYXZpb3JzIiwiZGlzYWJsZSIsImNvbW1vbkNvbnRlbnQiLCJ0ZW1wbGF0ZUxheW91dEZhY3RvcnkiLCJjcmVhdGVDbGFzcyIsIiQiLCJhamF4IiwibWV0aG9kIiwiY2FjaGUiLCJkYXRhVHlwZSIsImRvbmUiLCJkYXRhIiwib2JqZWN0cyIsImZvckVhY2giLCJvYmplY3QiLCJpY29uT2Zmc2V0IiwiaWNvbkNsYXNzZXMiLCJpY29uU2hhcGUiLCJ0eXBlIiwiY29vcmRpbmF0ZXMiLCJteVBsYWNlbWFyayIsIlBsYWNlbWFyayIsImNvb3JkcyIsImljb25Db250ZW50IiwibmFtZSIsImhpbnRDb250ZW50IiwiaWNvbkhvdmVyQ2xhc3NlcyIsImljb25MYXlvdXQiLCJoYXNCYWxsb29uIiwicHJvcGVydGllcyIsInNldCIsImV2ZW50cyIsImFkZCIsImUiLCJkZXNjcmlwdGlvbiIsImxlbmd0aCIsImluaXRTaWRlTW9kYWwiLCJzdG9wUHJvcGFnYXRpb24iLCJnZW9PYmplY3RzIiwiZmFpbCIsImpxWEhSIiwidGV4dFN0YXR1cyIsImVycm9yVGhyb3duIiwiYWxlcnQiLCJjb25zb2xlIiwibG9nIiwiaW5pdFNpZGVNb2RhbFdyYXBwZXIiLCJjbGFzc05hbWVzIiwiJG1vZGFsV3JhcHBlciIsIiRvdmVybGF5IiwiY2hpbGRyZW4iLCJyZW1vdmUiLCJhcHBlbmQiLCJjb250ZW50IiwicHJldmVudE92ZXJsYXlDbG9zZSIsInByZXZlbnRFc2NDbG9zZSIsIiR3cmFwcGVyIiwiZmluZCIsImh0bWwiLCJtYXNrZWRpbnB1dCIsImZvcm1WYWxpZGF0aW9uIiwiaW5wdXRGaWxlIiwiaW5wdXRQaG90byIsImRhdGVQaWNrZXIiLCJpbnB1dFJlZ2lvbkNpdHkiLCJmb3JtQWpheCIsImF2YXRhckNyb3AiLCJzZXRUaW1lb3V0IiwiYWRkQ2xhc3MiLCJmaXJzdCIsImZvY3VzIiwib24iLCJoaWRlIiwidGFyZ2V0IiwiY2xvc2VzdCIsImlzIiwid2hpY2giLCJyZW1vdmVDbGFzcyIsIm9mZiIsImNsaWNrIiwiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJET01FdmFsIiwiY29kZSIsImRvYyIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaXNBcnJheUxpa2UiLCJvYmoiLCJqUXVlcnkiLCJpc1dpbmRvdyIsIm5vZGVOYW1lIiwiZWxlbSIsInRvTG93ZXJDYXNlIiwid2lubm93IiwiZWxlbWVudHMiLCJxdWFsaWZpZXIiLCJub3QiLCJpc0Z1bmN0aW9uIiwiZ3JlcCIsImkiLCJjYWxsIiwibm9kZVR5cGUiLCJpbmRleE9mIiwicmlzU2ltcGxlIiwidGVzdCIsImZpbHRlciIsInNpYmxpbmciLCJjdXIiLCJkaXIiLCJjcmVhdGVPcHRpb25zIiwib3B0aW9ucyIsImVhY2giLCJtYXRjaCIsInJub3RodG1sd2hpdGUiLCJfIiwiZmxhZyIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJ2YWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwicHJvbWlzZSIsInRoZW4iLCJhcHBseSIsInVuZGVmaW5lZCIsInNsaWNlIiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5IiwiRGF0YSIsImV4cGFuZG8iLCJ1aWQiLCJnZXREYXRhIiwicmJyYWNlIiwiSlNPTiIsInBhcnNlIiwiZGF0YUF0dHIiLCJrZXkiLCJyZXBsYWNlIiwicm11bHRpRGFzaCIsImdldEF0dHJpYnV0ZSIsImRhdGFVc2VyIiwiYWRqdXN0Q1NTIiwicHJvcCIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiY3NzIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwicmNzc051bSIsImV4ZWMiLCJzdHlsZSIsInN0YXJ0IiwiZW5kIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJ0ZW1wIiwib3duZXJEb2N1bWVudCIsImRpc3BsYXkiLCJkZWZhdWx0RGlzcGxheU1hcCIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJpbmRleCIsImRhdGFQcml2IiwiZ2V0IiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiZ2V0QWxsIiwiY29udGV4dCIsInRhZyIsInJldCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicXVlcnlTZWxlY3RvckFsbCIsIm1lcmdlIiwic2V0R2xvYmFsRXZhbCIsImVsZW1zIiwicmVmRWxlbWVudHMiLCJsIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwidG1wIiwid3JhcCIsImNvbnRhaW5zIiwiaiIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vZGVzIiwicmh0bWwiLCJydGFnTmFtZSIsIndyYXBNYXAiLCJfZGVmYXVsdCIsImlubmVySFRNTCIsImh0bWxQcmVmaWx0ZXIiLCJsYXN0Q2hpbGQiLCJjaGlsZE5vZGVzIiwiZmlyc3RDaGlsZCIsInRleHRDb250ZW50IiwicHVzaCIsImNyZWF0ZVRleHROb2RlIiwiaW5BcnJheSIsInJzY3JpcHRUeXBlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiZXJyIiwidHlwZXMiLCJzZWxlY3RvciIsImZuIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJhcmd1bWVudHMiLCJndWlkIiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJlbW92ZUF0dHJpYnV0ZSIsImNsb25lQ29weUV2ZW50Iiwic3JjIiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiaGFzRGF0YSIsImFjY2VzcyIsImhhbmRsZSIsImV4dGVuZCIsImZpeElucHV0IiwicmNoZWNrYWJsZVR5cGUiLCJjaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiYXJncyIsImNhbGxiYWNrIiwiY29uY2F0IiwiaGFzU2NyaXB0cyIsIm5vZGUiLCJpTm9DbG9uZSIsInN1cHBvcnQiLCJjaGVja0Nsb25lIiwicmNoZWNrZWQiLCJzZWxmIiwiZXEiLCJtYXAiLCJjbG9uZSIsIl9ldmFsVXJsIiwicmNsZWFuU2NyaXB0Iiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFN0eWxlcyIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbE1hcmdpblJpZ2h0Iiwicm51bW5vbnB4Iiwicm1hcmdpbiIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwidmVuZG9yUHJvcE5hbWUiLCJlbXB0eVN0eWxlIiwiY2FwTmFtZSIsInRvVXBwZXJDYXNlIiwiY3NzUHJlZml4ZXMiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF0Y2hlcyIsIk1hdGgiLCJtYXgiLCJhdWdtZW50V2lkdGhPckhlaWdodCIsImV4dHJhIiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJ2YWwiLCJjc3NFeHBhbmQiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsImJveFNpemluZ1JlbGlhYmxlIiwicGFyc2VGbG9hdCIsIlR3ZWVuIiwiZWFzaW5nIiwicHJvdG90eXBlIiwiaW5pdCIsInNjaGVkdWxlIiwiaW5Qcm9ncmVzcyIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZ4IiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJmeE5vdyIsIm5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiYXR0cnMiLCJoZWlnaHQiLCJvcGFjaXR5IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsImRlZmF1bHRQcmVmaWx0ZXIiLCJwcm9wcyIsIm9wdHMiLCJ0b2dnbGUiLCJob29rcyIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiYW5pbSIsIm9yaWciLCJkYXRhU2hvdyIsInF1ZXVlIiwiX3F1ZXVlSG9va3MiLCJ1bnF1ZXVlZCIsImVtcHR5IiwiZmlyZSIsImFsd2F5cyIsInJmeHR5cGVzIiwiaXNFbXB0eU9iamVjdCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJvcEZpbHRlciIsInNwZWNpYWxFYXNpbmciLCJjYW1lbENhc2UiLCJBcnJheSIsImlzQXJyYXkiLCJjc3NIb29rcyIsImV4cGFuZCIsInJlc3VsdCIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiZGVmZXJyZWQiLCJEZWZlcnJlZCIsImN1cnJlbnRUaW1lIiwicmVtYWluaW5nIiwic3RhcnRUaW1lIiwiZHVyYXRpb24iLCJwZXJjZW50IiwidHdlZW5zIiwicnVuIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwic3RvcCIsImdvdG9FbmQiLCJyZWplY3RXaXRoIiwicHJveHkiLCJwcm9ncmVzcyIsImNvbXBsZXRlIiwidGltZXIiLCJzdHJpcEFuZENvbGxhcHNlIiwiam9pbiIsImdldENsYXNzIiwiYnVpbGRQYXJhbXMiLCJwcmVmaXgiLCJ0cmFkaXRpb25hbCIsInJicmFja2V0IiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZnVuYyIsImRhdGFUeXBlcyIsInVuc2hpZnQiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImluc3BlY3QiLCJzZWxlY3RlZCIsImluc3BlY3RlZCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJzZWVraW5nVHJhbnNwb3J0IiwidHJhbnNwb3J0cyIsImFqYXhFeHRlbmQiLCJkZWVwIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwicyIsInJlc3BvbnNlcyIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJjb250ZW50cyIsInNoaWZ0IiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsInJlc3BvbnNlIiwiaXNTdWNjZXNzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsInByZXYiLCJyZXNwb25zZUZpZWxkcyIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJzdGF0ZSIsImVycm9yIiwiYXJyIiwiZ2V0UHJvdG8iLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsImhhc093biIsImhhc093blByb3BlcnR5IiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsInByZXZPYmplY3QiLCJsYXN0IiwibGVuIiwic29ydCIsInNwbGljZSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImlzUGxhaW5PYmplY3QiLCJyYW5kb20iLCJpc1JlYWR5IiwibXNnIiwibm9vcCIsImlzTnVtZXJpYyIsImlzTmFOIiwicHJvdG8iLCJDdG9yIiwiZ2xvYmFsRXZhbCIsInN0cmluZyIsInRyaW0iLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwic2Vjb25kIiwiaW52ZXJ0IiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJEYXRlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJTaXp6bGUiLCJzZWVkIiwibSIsIm5pZCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsInByZWZlcnJlZERvYyIsInNldERvY3VtZW50IiwiZG9jdW1lbnRJc0hUTUwiLCJycXVpY2tFeHByIiwiaWQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwiY29tcGlsZXJDYWNoZSIsInJidWdneVFTQSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwic2V0QXR0cmlidXRlIiwidG9rZW5pemUiLCJ0b1NlbGVjdG9yIiwicnNpYmxpbmciLCJ0ZXN0Q29udGV4dCIsInFzYUVycm9yIiwic2VsZWN0IiwiY3JlYXRlQ2FjaGUiLCJrZXlzIiwiRXhwciIsImNhY2hlTGVuZ3RoIiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJhZGRIYW5kbGUiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImEiLCJiIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImRpc2FibGVkIiwiaXNEaXNhYmxlZCIsImRpc2FibGVkQW5jZXN0b3IiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJzZXRGaWx0ZXJzIiwidG9rZW5zIiwiYWRkQ29tYmluYXRvciIsIm1hdGNoZXIiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJuZXh0IiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwieG1sIiwib2xkQ2FjaGUiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJuZXdDYWNoZSIsImRpcnJ1bnMiLCJ1bmlxdWVJRCIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsInVubWF0Y2hlZCIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwcmVGaWx0ZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsInJlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm91dGVybW9zdENvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwicG9wIiwidW5pcXVlU29ydCIsImdldFRleHQiLCJpc1hNTCIsImNvbXBpbGUiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2NFbGVtIiwicmJ1Z2d5TWF0Y2hlcyIsImNsYXNzQ2FjaGUiLCJ0b2tlbkNhY2hlIiwic29ydE9yZGVyIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZWxzIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCI+IiwiICIsIisiLCJ+IiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIm5vZGVJbmRleCIsInBhcmVudCIsInVzZUNhY2hlIiwicHNldWRvIiwiaWR4IiwibWF0Y2hlZCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJzZWxlY3RlZEluZGV4IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJ0b2tlbiIsImNvbXBpbGVkIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJzaWJsaW5ncyIsIm4iLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInJvb3RqUXVlcnkiLCJwYXJzZUhUTUwiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwidGFyZ2V0cyIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJyZXZlcnNlIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJmaXJpbmdJbmRleCIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImxvY2siLCJmaXJlV2l0aCIsInR1cGxlcyIsImNhdGNoIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIm1heERlcHRoIiwiVHlwZUVycm9yIiwicHJvY2VzcyIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwiZ2V0U3RhY2tIb29rIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJ3YXJuIiwibWVzc2FnZSIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwicmVhZHlXYWl0Iiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsImFjY2VwdERhdGEiLCJvd25lciIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJzd2FwIiwib2xkIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkaXYiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwidCIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJ0cmlnZ2VyIiwiYmx1ciIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjc3NUZXh0IiwiY29udGFpbmVyIiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwibWFyZ2luTGVmdCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwibWFyZ2luUmlnaHQiLCJwaXhlbE1hcmdpblJpZ2h0VmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0IiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4IiwiZmxvYXQiLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRDbGllbnRSZWN0cyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwic3VmZml4IiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsImVhc2VkIiwicG9zIiwic3RlcCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsInJydW4iLCIqIiwidHdlZW5lciIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYXR0ck5hbWVzIiwiZ2V0dGVyIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsInBhcnNlSW50IiwiZm9yIiwiY2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJyZm9jdXNNb3JwaCIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJldmVudFBhdGgiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImZvY3VzaW4iLCJhdHRhY2hlcyIsIm5vbmNlIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0Iiwic3RhdHVzIiwibmF0aXZlU3RhdHVzVGV4dCIsImhlYWRlcnMiLCJzdWNjZXNzIiwibW9kaWZpZWQiLCJzdGF0dXNUZXh0IiwidGltZW91dFRpbWVyIiwidHJhbnNwb3J0IiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwiaWZNb2RpZmllZCIsImNhY2hlVVJMIiwiY2FsbGJhY2tDb250ZXh0Iiwic3RhdHVzQ29kZSIsImZpcmVHbG9iYWxzIiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInJlc3BvbnNlSGVhZGVycyIsInVybEFuY2hvciIsInVuY2FjaGVkIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsImFib3J0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImJlZm9yZVNlbmQiLCJzZW5kIiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInRleHQgc2NyaXB0IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsImNsaWVudFRvcCIsInBhZ2VYT2Zmc2V0IiwiY2xpZW50TGVmdCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImJpbmQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiZGVmaW5lIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwibm9Db25mbGljdCIsIlNwaW5uZXIiLCJjcmVhdGVFbCIsImlucyIsImFkZEFuaW1hdGlvbiIsImFscGhhIiwidHJhaWwiLCJsaW5lcyIsInoiLCJ1c2VDc3NBbmltYXRpb25zIiwic3Vic3RyaW5nIiwicHJlIiwiYW5pbWF0aW9ucyIsInNoZWV0IiwiaW5zZXJ0UnVsZSIsImNzc1J1bGVzIiwidmVuZG9yIiwicHAiLCJjaGFyQXQiLCJwcmVmaXhlcyIsImRlZiIsImdldENvbG9yIiwiY29sb3IiLCJvIiwiZGVmYXVsdHMiLCJyYWRpdXMiLCJjb3JuZXJzIiwicm90YXRlIiwiZGlyZWN0aW9uIiwiZnBzIiwic2hhZG93IiwiaHdhY2NlbCIsInNwaW4iLCJmIiwib3N0ZXAiLCJhc3RlcCIsImZpbGwiLCJiYWNrZ3JvdW5kIiwiYm94U2hhZG93IiwidHJhbnNmb3JtT3JpZ2luIiwidHJhbnNmb3JtIiwiYm9yZGVyUmFkaXVzIiwic2VnIiwic3R5bGVTaGVldCIsInByb2JlIiwiYmVoYXZpb3IiLCJhZGoiLCJ2bWwiLCJhZGRSdWxlIiwiZ3JwIiwiY29vcmRzaXplIiwiY29vcmRvcmlnaW4iLCJyIiwiZHgiLCJnIiwicm90YXRpb24iLCJhcmNzaXplIiwiYyIsInJlcXVpcmUiLCIkdGhpcyIsInNwaW5uZXIiLCJwcmVzZXRzIiwidGlueSIsInNtYWxsIiwibGFyZ2UiLCJTd2lwZXIiLCJyb3VuZCIsImZsb29yIiwiYXV0b3BsYXkiLCJhdXRvcGxheURlbGF5IiwiYWN0aXZlU2xpZGUiLCJzbGlkZXMiLCJhY3RpdmVJbmRleCIsImF1dG9wbGF5VGltZW91dElkIiwibG9vcCIsImZpeExvb3AiLCJfc2xpZGVOZXh0IiwiZW1pdCIsImlzRW5kIiwiYXV0b3BsYXlTdG9wT25MYXN0Iiwic3RvcEF1dG9wbGF5IiwiX3NsaWRlVG8iLCJmaW5kRWxlbWVudEluRXZlbnQiLCJmb3VuZCIsIl9lbCIsImluaXRPYnNlcnZlciIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJtdXRhdGlvbiIsIm9uUmVzaXplIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJvYnNlcnZlcnMiLCJoYW5kbGVLZXlib2FyZCIsImtjIiwiYWxsb3dTd2lwZVRvTmV4dCIsImlzSG9yaXpvbnRhbCIsImFsbG93U3dpcGVUb1ByZXYiLCJpblZpZXciLCJzbGlkZUNsYXNzIiwic2xpZGVBY3RpdmVDbGFzcyIsIndpbmRvd1Njcm9sbCIsIndpbmRvd1dpZHRoIiwiaW5uZXJXaWR0aCIsIndpbmRvd0hlaWdodCIsImlubmVySGVpZ2h0Iiwic3dpcGVyT2Zmc2V0IiwicnRsIiwic3dpcGVyQ29vcmQiLCJwb2ludCIsInNsaWRlTmV4dCIsInNsaWRlUHJldiIsIm5vcm1hbGl6ZVdoZWVsIiwic1giLCJzWSIsInBYIiwicFkiLCJ3aGVlbERlbHRhIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhWCIsImF4aXMiLCJIT1JJWk9OVEFMX0FYSVMiLCJkZWx0YVkiLCJkZWx0YVgiLCJkZWx0YU1vZGUiLCJzcGluWCIsInNwaW5ZIiwicGl4ZWxYIiwicGl4ZWxZIiwiaGFuZGxlTW91c2V3aGVlbCIsImRlbHRhIiwicnRsRmFjdG9yIiwibW91c2V3aGVlbEZvcmNlVG9BeGlzIiwiYWJzIiwibW91c2V3aGVlbEludmVydCIsImZyZWVNb2RlIiwiZ2V0V3JhcHBlclRyYW5zbGF0ZSIsIm1vdXNld2hlZWxTZW5zaXRpdml0eSIsIndhc0JlZ2lubmluZyIsImlzQmVnaW5uaW5nIiwid2FzRW5kIiwibWluVHJhbnNsYXRlIiwibWF4VHJhbnNsYXRlIiwic2V0V3JhcHBlclRyYW5zaXRpb24iLCJzZXRXcmFwcGVyVHJhbnNsYXRlIiwidXBkYXRlUHJvZ3Jlc3MiLCJ1cGRhdGVBY3RpdmVJbmRleCIsInVwZGF0ZUNsYXNzZXMiLCJmcmVlTW9kZVN0aWNreSIsIm1vdXNld2hlZWwiLCJzbGlkZVJlc2V0IiwibGF6eUxvYWRpbmciLCJsYXp5IiwiYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbiIsImdldFRpbWUiLCJsYXN0U2Nyb2xsVGltZSIsImFuaW1hdGluZyIsIm1vdXNld2hlZWxSZWxlYXNlT25FZGdlcyIsInNldFBhcmFsbGF4VHJhbnNmb3JtIiwibm9ybWFsaXplRXZlbnROYW1lIiwiZXZlbnROYW1lIiwidG91Y2hFdmVudHNUYXJnZXQiLCJpbml0aWFsU2xpZGUiLCJpT1NFZGdlU3dpcGVEZXRlY3Rpb24iLCJpT1NFZGdlU3dpcGVUaHJlc2hvbGQiLCJmcmVlTW9kZU1vbWVudHVtIiwiZnJlZU1vZGVNb21lbnR1bVJhdGlvIiwiZnJlZU1vZGVNb21lbnR1bUJvdW5jZSIsImZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbyIsImZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvIiwiZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkiLCJhdXRvSGVpZ2h0Iiwic2V0V3JhcHBlclNpemUiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiZWZmZWN0IiwiY292ZXJmbG93Iiwic3RyZXRjaCIsIm1vZGlmaWVyIiwic2xpZGVTaGFkb3dzIiwiZmxpcCIsImxpbWl0Um90YXRpb24iLCJjdWJlIiwic2hhZG93T2Zmc2V0Iiwic2hhZG93U2NhbGUiLCJmYWRlIiwiY3Jvc3NGYWRlIiwicGFyYWxsYXgiLCJ6b29tTWF4Iiwiem9vbU1pbiIsInpvb21Ub2dnbGUiLCJzY3JvbGxiYXIiLCJzY3JvbGxiYXJIaWRlIiwic2Nyb2xsYmFyRHJhZ2dhYmxlIiwic2Nyb2xsYmFyU25hcE9uUmVsZWFzZSIsImtleWJvYXJkQ29udHJvbCIsIm1vdXNld2hlZWxDb250cm9sIiwibW91c2V3aGVlbEV2ZW50c1RhcmdlZCIsImhhc2huYXYiLCJoYXNobmF2V2F0Y2hTdGF0ZSIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJicmVha3BvaW50cyIsInNwYWNlQmV0d2VlbiIsInNsaWRlc1BlclZpZXciLCJzbGlkZXNQZXJDb2x1bW4iLCJzbGlkZXNQZXJDb2x1bW5GaWxsIiwic2xpZGVzUGVyR3JvdXAiLCJjZW50ZXJlZFNsaWRlcyIsInNsaWRlc09mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEFmdGVyIiwicm91bmRMZW5ndGhzIiwidG91Y2hSYXRpbyIsInRvdWNoQW5nbGUiLCJzaW11bGF0ZVRvdWNoIiwic2hvcnRTd2lwZXMiLCJsb25nU3dpcGVzIiwibG9uZ1N3aXBlc1JhdGlvIiwibG9uZ1N3aXBlc01zIiwiZm9sbG93RmluZ2VyIiwib25seUV4dGVybmFsIiwidGhyZXNob2xkIiwidG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uIiwidG91Y2hSZWxlYXNlT25FZGdlcyIsInVuaXF1ZU5hdkVsZW1lbnRzIiwicGFnaW5hdGlvbiIsInBhZ2luYXRpb25FbGVtZW50IiwicGFnaW5hdGlvbkNsaWNrYWJsZSIsInBhZ2luYXRpb25IaWRlIiwicGFnaW5hdGlvbkJ1bGxldFJlbmRlciIsInBhZ2luYXRpb25Qcm9ncmVzc1JlbmRlciIsInBhZ2luYXRpb25GcmFjdGlvblJlbmRlciIsInBhZ2luYXRpb25DdXN0b21SZW5kZXIiLCJwYWdpbmF0aW9uVHlwZSIsInJlc2lzdGFuY2UiLCJyZXNpc3RhbmNlUmF0aW8iLCJuZXh0QnV0dG9uIiwicHJldkJ1dHRvbiIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ3YXRjaFNsaWRlc1Zpc2liaWxpdHkiLCJncmFiQ3Vyc29yIiwicHJldmVudENsaWNrcyIsInByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiIsInNsaWRlVG9DbGlja2VkU2xpZGUiLCJsYXp5TG9hZGluZ0luUHJldk5leHQiLCJsYXp5TG9hZGluZ0luUHJldk5leHRBbW91bnQiLCJsYXp5TG9hZGluZ09uVHJhbnNpdGlvblN0YXJ0IiwicHJlbG9hZEltYWdlcyIsInVwZGF0ZU9uSW1hZ2VzUmVhZHkiLCJsb29wQWRkaXRpb25hbFNsaWRlcyIsImxvb3BlZFNsaWRlcyIsImNvbnRyb2wiLCJjb250cm9sSW52ZXJzZSIsImNvbnRyb2xCeSIsIm5vcm1hbGl6ZVNsaWRlSW5kZXgiLCJzd2lwZUhhbmRsZXIiLCJub1N3aXBpbmciLCJub1N3aXBpbmdDbGFzcyIsInBhc3NpdmVMaXN0ZW5lcnMiLCJjb250YWluZXJNb2RpZmllckNsYXNzIiwic2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyIsInNsaWRlVmlzaWJsZUNsYXNzIiwic2xpZGVEdXBsaWNhdGVDbGFzcyIsInNsaWRlTmV4dENsYXNzIiwic2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MiLCJzbGlkZVByZXZDbGFzcyIsInNsaWRlRHVwbGljYXRlUHJldkNsYXNzIiwid3JhcHBlckNsYXNzIiwiYnVsbGV0Q2xhc3MiLCJidWxsZXRBY3RpdmVDbGFzcyIsImJ1dHRvbkRpc2FibGVkQ2xhc3MiLCJwYWdpbmF0aW9uQ3VycmVudENsYXNzIiwicGFnaW5hdGlvblRvdGFsQ2xhc3MiLCJwYWdpbmF0aW9uSGlkZGVuQ2xhc3MiLCJwYWdpbmF0aW9uUHJvZ3Jlc3NiYXJDbGFzcyIsInBhZ2luYXRpb25DbGlja2FibGVDbGFzcyIsInBhZ2luYXRpb25Nb2RpZmllckNsYXNzIiwibGF6eUxvYWRpbmdDbGFzcyIsImxhenlTdGF0dXNMb2FkaW5nQ2xhc3MiLCJsYXp5U3RhdHVzTG9hZGVkQ2xhc3MiLCJsYXp5UHJlbG9hZGVyQ2xhc3MiLCJub3RpZmljYXRpb25DbGFzcyIsInByZWxvYWRlckNsYXNzIiwiem9vbUNvbnRhaW5lckNsYXNzIiwib2JzZXJ2ZVBhcmVudHMiLCJhMTF5IiwicHJldlNsaWRlTWVzc2FnZSIsIm5leHRTbGlkZU1lc3NhZ2UiLCJmaXJzdFNsaWRlTWVzc2FnZSIsImxhc3RTbGlkZU1lc3NhZ2UiLCJwYWdpbmF0aW9uQnVsbGV0TWVzc2FnZSIsInJ1bkNhbGxiYWNrc09uSW5pdCIsImluaXRpYWxWaXJ0dWFsVHJhbnNsYXRlIiwib3JpZ2luYWxQYXJhbXMiLCJEb203IiwiZGVlcFBhcmFtIiwiZGVlcERlZiIsIlplcHRvIiwiY3VycmVudEJyZWFrcG9pbnQiLCJnZXRBY3RpdmVCcmVha3BvaW50IiwiYnJlYWtwb2ludCIsInBvaW50cyIsInNldEJyZWFrcG9pbnQiLCJicmVha1BvaW50c1BhcmFtcyIsIm5lZWRzUmVMb29wIiwiZGVzdHJveUxvb3AiLCJyZUxvb3AiLCJzd2lwZXJzIiwic3dpcGVyIiwiZmxleGJveCIsInRyYW5zZm9ybXMzZCIsInRvdWNoIiwid3JhcHBlciIsInBhZ2luYXRpb25Db250YWluZXIiLCJ3cm9uZ1JUTCIsImRldmljZSIsImFuZHJvaWQiLCJ0cmFuc2xhdGUiLCJ2ZWxvY2l0eSIsImxvY2tTd2lwZVRvTmV4dCIsInVuc2V0R3JhYkN1cnNvciIsImxvY2tTd2lwZVRvUHJldiIsImxvY2tTd2lwZXMiLCJ1bmxvY2tTd2lwZVRvTmV4dCIsInNldEdyYWJDdXJzb3IiLCJ1bmxvY2tTd2lwZVRvUHJldiIsInVubG9ja1N3aXBlcyIsIm1vdmluZyIsImN1cnNvciIsImltYWdlc1RvTG9hZCIsImltYWdlc0xvYWRlZCIsImxvYWRJbWFnZSIsImltZ0VsZW1lbnQiLCJzcmNzZXQiLCJzaXplcyIsImNoZWNrRm9yQ29tcGxldGUiLCJvblJlYWR5IiwiSW1hZ2UiLCJfb25SZWFkeSIsInVwZGF0ZSIsImN1cnJlbnRTcmMiLCJhdXRvcGxheWluZyIsImF1dG9wbGF5UGF1c2VkIiwic3RhcnRBdXRvcGxheSIsImludGVybmFsIiwicGF1c2VBdXRvcGxheSIsInRyYW5zaXRpb25FbmQiLCJzbmFwR3JpZCIsInVwZGF0ZUF1dG9IZWlnaHQiLCJhY3RpdmVTbGlkZXMiLCJuZXdIZWlnaHQiLCJjZWlsIiwidXBkYXRlQ29udGFpbmVyU2l6ZSIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0Iiwic2l6ZSIsInVwZGF0ZVNsaWRlc1NpemUiLCJzbGlkZXNHcmlkIiwic2xpZGVzU2l6ZXNHcmlkIiwic2xpZGVQb3NpdGlvbiIsInByZXZTbGlkZVNpemUiLCJ2aXJ0dWFsU2l6ZSIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsInNsaWRlc051bWJlckV2ZW5Ub1Jvd3MiLCJzbGlkZVNpemUiLCJzbGlkZXNQZXJSb3ciLCJudW1GdWxsQ29sdW1ucyIsInNsaWRlIiwibmV3U2xpZGVPcmRlckluZGV4IiwiY29sdW1uIiwicm93IiwiLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cCIsIi1tb3otYm94LW9yZGluYWwtZ3JvdXAiLCItbXMtZmxleC1vcmRlciIsIi13ZWJraXQtb3JkZXIiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJzd2lwZXJTbGlkZVNpemUiLCJuZXdTbGlkZXNHcmlkIiwidXBkYXRlU2xpZGVzT2Zmc2V0Iiwic3dpcGVyU2xpZGVPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwiY3VycmVudFNsaWRlc1BlclZpZXciLCJzcHYiLCJicmVha0xvb3AiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsIm9mZnNldENlbnRlciIsInNsaWRlUHJvZ3Jlc3MiLCJzbGlkZUJlZm9yZSIsInNsaWRlQWZ0ZXIiLCJ0cmFuc2xhdGVzRGlmZiIsIm5ld0FjdGl2ZUluZGV4Iiwic25hcEluZGV4IiwicHJldmlvdXNJbmRleCIsInVwZGF0ZVJlYWxJbmRleCIsInJlYWxJbmRleCIsIm5leHRTbGlkZSIsInByZXZTbGlkZSIsInRvdGFsIiwiYnVsbGV0cyIsInNjYWxlWCIsInNjYWxlWSIsInRyYW5zaXRpb24iLCJlbmFibGUiLCJ1cGRhdGVQYWdpbmF0aW9uIiwicGFnaW5hdGlvbkhUTUwiLCJudW1iZXJPZkJ1bGxldHMiLCJpbml0UGFnaW5hdGlvbiIsInVwZGF0ZVRyYW5zbGF0ZSIsImZvcmNlU2V0VHJhbnNsYXRlIiwibmV3VHJhbnNsYXRlIiwibWluIiwiY29udHJvbGxlciIsInNwbGluZSIsInNsaWRlVG8iLCJmb3JjZVVwZGF0ZVBhZ2luYXRpb24iLCJvbkJlZm9yZVJlc2l6ZSIsInNsaWRlQ2hhbmdlZEJ5U2xpZGVUbyIsIm9uQWZ0ZXJSZXNpemUiLCJ0b3VjaEV2ZW50c0Rlc2t0b3AiLCJtb3ZlIiwibmF2aWdhdG9yIiwicG9pbnRlckVuYWJsZWQiLCJtc1BvaW50ZXJFbmFibGVkIiwidG91Y2hFdmVudHMiLCJpbml0RXZlbnRzIiwiYWN0aW9uRG9tIiwiYWN0aW9uIiwibW92ZUNhcHR1cmUiLCJuZXN0ZWQiLCJicm93c2VyIiwiaWUiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hFbmQiLCJwYXNzaXZlTGlzdGVuZXIiLCJwYXNzaXZlIiwiY2FwdHVyZSIsImlvcyIsIm9uQ2xpY2tOZXh0Iiwib25FbnRlcktleSIsIm9uQ2xpY2tQcmV2Iiwib25DbGlja0luZGV4IiwiYXR0YWNoRXZlbnRzIiwiZGV0YWNoRXZlbnRzIiwiYWxsb3dDbGljayIsInVwZGF0ZUNsaWNrZWRTbGlkZSIsInNsaWRlRm91bmQiLCJjbGlja2VkU2xpZGUiLCJjbGlja2VkSW5kZXgiLCJzbGlkZVRvSW5kZXgiLCJpc1RvdWNoZWQiLCJpc01vdmVkIiwiYWxsb3dUb3VjaENhbGxiYWNrcyIsInRvdWNoU3RhcnRUaW1lIiwiaXNTY3JvbGxpbmciLCJjdXJyZW50VHJhbnNsYXRlIiwic3RhcnRUcmFuc2xhdGUiLCJhbGxvd1RocmVzaG9sZE1vdmUiLCJjbGlja1RpbWVvdXQiLCJhbGxvd01vbWVudHVtQm91bmNlIiwiZm9ybUVsZW1lbnRzIiwibGFzdENsaWNrVGltZSIsInZlbG9jaXRpZXMiLCJzdGFydFgiLCJzdGFydFkiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwiaXNUb3VjaEV2ZW50Iiwic3RhcnRNb3ZpbmciLCJzd2lwZURpcmVjdGlvbiIsInByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyIiwiYXRhbjIiLCJkaXNhYmxlUGFyZW50U3dpcGVyIiwicG93IiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJjdXJyZW50UG9zIiwibGFzdE1vdmVFdmVudCIsInZlbG9jaXR5RXZlbnQiLCJkaXN0YW5jZSIsIm1vbWVudHVtRHVyYXRpb24iLCJtb21lbnR1bURpc3RhbmNlIiwibmV3UG9zaXRpb24iLCJhZnRlckJvdW5jZVBvc2l0aW9uIiwiZG9Cb3VuY2UiLCJib3VuY2VBbW91bnQiLCJvblRyYW5zaXRpb25TdGFydCIsIm9uVHJhbnNpdGlvbkVuZCIsInN0b3BJbmRleCIsImdyb3VwU2l6ZSIsInJhdGlvIiwic2xpZGVJbmRleCIsInJ1bkNhbGxiYWNrcyIsImx0ZUlFOSIsInNldEhpc3RvcnkiLCJzZXRIYXNoIiwiX3NsaWRlUHJldiIsImRpc2FibGVUb3VjaENvbnRyb2wiLCJlbmFibGVUb3VjaENvbnRyb2wiLCJieUNvbnRyb2xsZXIiLCJlZmZlY3RzIiwic2V0VHJhbnNpdGlvbiIsIngiLCJ5Iiwic2V0VHJhbnNsYXRlIiwiZ2V0VHJhbnNsYXRlIiwibWF0cml4IiwiY3VyVHJhbnNmb3JtIiwiY3VyU3R5bGUiLCJ0cmFuc2Zvcm1NYXRyaXgiLCJXZWJLaXRDU1NNYXRyaXgiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJNb3pUcmFuc2Zvcm0iLCJPVHJhbnNmb3JtIiwiTXNUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsIm00MSIsIm00MiIsImluaXRPYnNlcnZlcnMiLCJjb250YWluZXJQYXJlbnRzIiwiZGlzY29ubmVjdE9ic2VydmVycyIsImRpc2Nvbm5lY3QiLCJjcmVhdGVMb29wIiwicHJlcGVuZFNsaWRlcyIsImFwcGVuZFNsaWRlcyIsInVwZGF0ZVBvc2l0aW9uIiwib2xkSW5kZXgiLCJuZXdJbmRleCIsImFwcGVuZFNsaWRlIiwicHJlcGVuZFNsaWRlIiwicmVtb3ZlU2xpZGUiLCJzbGlkZXNJbmRleGVzIiwiaW5kZXhUb1JlbW92ZSIsInJlbW92ZUFsbFNsaWRlcyIsInR4IiwidHkiLCJzbGlkZU9wYWNpdHkiLCJldmVudFRyaWdnZXJlZCIsInRyaWdnZXJFdmVudHMiLCJyb3RhdGVZIiwicm90YXRlWCIsInNoYWRvd0JlZm9yZSIsInNoYWRvd0FmdGVyIiwiY3ViZVNoYWRvdyIsIndyYXBwZXJSb3RhdGUiLCJzbGlkZUFuZ2xlIiwidHoiLCItd2Via2l0LXRyYW5zZm9ybS1vcmlnaW4iLCItbW96LXRyYW5zZm9ybS1vcmlnaW4iLCItbXMtdHJhbnNmb3JtLW9yaWdpbiIsInRyYW5zZm9ybS1vcmlnaW4iLCJzaGFkb3dBbmdsZSIsIm11bHRpcGxpZXIiLCJzaW4iLCJzY2FsZTEiLCJzY2FsZTIiLCJ6RmFjdG9yIiwiaXNTYWZhcmkiLCJpc1VpV2ViVmlldyIsIm9mZnNldE11bHRpcGxpZXIiLCJ0cmFuc2xhdGVaIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVgiLCJzbGlkZVRyYW5zZm9ybSIsInBlcnNwZWN0aXZlT3JpZ2luIiwiaW5pdGlhbEltYWdlTG9hZGVkIiwibG9hZEltYWdlSW5TbGlkZSIsImxvYWRJbkR1cGxpY2F0ZSIsImltZyIsIl9pbWciLCJzbGlkZU9yaWdpbmFsSW5kZXgiLCJvcmlnaW5hbFNsaWRlIiwiZHVwbGljYXRlZFNsaWRlIiwiYW1vdW50IiwibWF4SW5kZXgiLCJtaW5JbmRleCIsInNldERyYWdQb3NpdGlvbiIsInNiIiwidHJhY2siLCJkcmFnU2l6ZSIsInBvc2l0aW9uTWluIiwibW92ZURpdmlkZXIiLCJwb3NpdGlvbk1heCIsImRyYWdTdGFydCIsImRyYWdUaW1lb3V0IiwiZHJhZyIsImRyYWdNb3ZlIiwiZHJhZ0VuZCIsImRyYWdnYWJsZUV2ZW50cyIsImVuYWJsZURyYWdnYWJsZSIsImRpc2FibGVEcmFnZ2FibGUiLCJ0cmFja1NpemUiLCJkaXZpZGVyIiwibmV3UG9zIiwibmV3U2l6ZSIsIkxpbmVhclNwbGluZSIsImJpbmFyeVNlYXJjaCIsImd1ZXNzIiwiYXJyYXkiLCJsYXN0SW5kZXgiLCJpMSIsImkzIiwiaW50ZXJwb2xhdGUiLCJ4MiIsImdldEludGVycG9sYXRlRnVuY3Rpb24iLCJzZXRDb250cm9sbGVkVHJhbnNsYXRlIiwiY29udHJvbGxlZFRyYW5zbGF0ZSIsImNvbnRyb2xsZWQiLCJzZXRDb250cm9sbGVkVHJhbnNpdGlvbiIsIm9uSGFzaENhbmdlIiwibmV3SGFzaCIsImluaXRpYWxpemVkIiwiZGVzdHJveSIsInB1c2hTdGF0ZSIsInBhdGhzIiwiZ2V0UGF0aFZhbHVlcyIsInNjcm9sbFRvU2xpZGUiLCJzZXRIaXN0b3J5UG9wU3RhdGUiLCJwYXRoQXJyYXkiLCJwYXRobmFtZSIsInNsdWdpZnkiLCJpbmNsdWRlcyIsImRpc2FibGVLZXlib2FyZENvbnRyb2wiLCJlbmFibGVLZXlib2FyZENvbnRyb2wiLCJ1c2VyQWdlbnQiLCJpc1N1cHBvcnRlZCIsImVsZW1lbnQiLCJoYXNGZWF0dXJlIiwiZGlzYWJsZU1vdXNld2hlZWxDb250cm9sIiwiZW5hYmxlTW91c2V3aGVlbENvbnRyb2wiLCJwYXJhbGxheER1cmF0aW9uIiwiY3VycmVudFNjYWxlIiwiaXNTY2FsaW5nIiwiZ2VzdHVyZSIsInNsaWRlV2lkdGgiLCJzbGlkZUhlaWdodCIsImltYWdlV3JhcCIsIm1pblgiLCJtaW5ZIiwibWF4WCIsIm1heFkiLCJ0b3VjaGVzU3RhcnQiLCJ0b3VjaGVzQ3VycmVudCIsInByZXZQb3NpdGlvblgiLCJwcmV2UG9zaXRpb25ZIiwicHJldlRpbWUiLCJnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzIiwieDEiLCJ5MSIsInkyIiwic3FydCIsIm9uR2VzdHVyZVN0YXJ0IiwiZ2VzdHVyZXMiLCJzY2FsZVN0YXJ0Iiwib25HZXN0dXJlQ2hhbmdlIiwic2NhbGVNb3ZlIiwib25HZXN0dXJlRW5kIiwib3MiLCJzY2FsZWRXaWR0aCIsInNjYWxlZEhlaWdodCIsIm1vbWVudHVtRHVyYXRpb25YIiwibW9tZW50dW1EdXJhdGlvblkiLCJtb21lbnR1bURpc3RhbmNlWCIsIm5ld1Bvc2l0aW9uWCIsIm1vbWVudHVtRGlzdGFuY2VZIiwibmV3UG9zaXRpb25ZIiwidG9nZ2xlWm9vbSIsInRvdWNoWCIsInRvdWNoWSIsImRpZmZYIiwiZGlmZlkiLCJpbWFnZVdpZHRoIiwiaW1hZ2VIZWlnaHQiLCJ0cmFuc2xhdGVNaW5YIiwidHJhbnNsYXRlTWluWSIsInRyYW5zbGF0ZU1heFgiLCJ0cmFuc2xhdGVNYXhZIiwiX3BsdWdpbnMiLCJwbHVnaW4iLCJwbHVnaW5zIiwiY2FsbFBsdWdpbnMiLCJlbWl0dGVyRXZlbnRMaXN0ZW5lcnMiLCJfaGFuZGxlciIsIm1ha2VGb2N1c2FibGUiLCIkZWwiLCJhZGRSb2xlIiwicm9sZSIsImFkZExhYmVsIiwibGFiZWwiLCJsaXZlUmVnaW9uIiwibm90aWZpY2F0aW9uIiwiYnVsbGV0IiwiaGFzaG5hdlJlcGxhY2VTdGF0ZSIsImNsZWFudXBTdHlsZXMiLCJkZWxldGVJbnN0YW5jZSIsInVhIiwiaWVUb3VjaCIsIm1zTWF4VG91Y2hQb2ludHMiLCJtYXhUb3VjaFBvaW50cyIsImlwYWQiLCJpcG9kIiwiaXBob25lIiwiTW9kZXJuaXpyIiwiRG9jdW1lbnRUb3VjaCIsImNzc3RyYW5zZm9ybXMzZCIsInN1cHBvcnRzUGFzc2l2ZSIsInN3aXBlckRvbVBsdWdpbnMiLCJsaWIiLCJmaXJzdEluc3RhbmNlIiwiZG9tTGliIiwiZmlyZUNhbGxCYWNrIiwiZG9tIiwiZWxTdHlsZSIsIndlYmtpdFRyYW5zaXRpb25EdXJhdGlvbiIsIk1zVHJhbnNpdGlvbkR1cmF0aW9uIiwibXNUcmFuc2l0aW9uRHVyYXRpb24iLCJNb3pUcmFuc2l0aW9uRHVyYXRpb24iLCJPVHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiaW5jbHVkZU1hcmdpbnMiLCJleHBvcnROYW1lIiwic2V0VGltZW91dENvbnRleHQiLCJiaW5kRm4iLCJpbnZva2VBcnJheUFyZyIsImRlcHJlY2F0ZSIsImRlcHJlY2F0aW9uTWVzc2FnZSIsImluaGVyaXQiLCJjaGlsZCIsImNoaWxkUCIsImJhc2VQIiwiY3JlYXRlIiwiX3N1cGVyIiwiYXNzaWduIiwiYm9vbE9yRm4iLCJUWVBFX0ZVTkNUSU9OIiwiaWZVbmRlZmluZWQiLCJ2YWwxIiwidmFsMiIsImFkZEV2ZW50TGlzdGVuZXJzIiwic3BsaXRTdHIiLCJyZW1vdmVFdmVudExpc3RlbmVycyIsImhhc1BhcmVudCIsImluU3RyIiwic3RyIiwiZmluZEJ5S2V5IiwidW5pcXVlQXJyYXkiLCJwcmVmaXhlZCIsInByb3BlcnR5IiwiY2FtZWxQcm9wIiwiVkVORE9SX1BSRUZJWEVTIiwidW5pcXVlSWQiLCJfdW5pcXVlSWQiLCJnZXRXaW5kb3dGb3JFbGVtZW50IiwiSW5wdXQiLCJtYW5hZ2VyIiwiaW5wdXRUYXJnZXQiLCJkb21IYW5kbGVyIiwiZXYiLCJjcmVhdGVJbnB1dEluc3RhbmNlIiwiaW5wdXRDbGFzcyIsIlNVUFBPUlRfUE9JTlRFUl9FVkVOVFMiLCJQb2ludGVyRXZlbnRJbnB1dCIsIlNVUFBPUlRfT05MWV9UT1VDSCIsIlRvdWNoSW5wdXQiLCJTVVBQT1JUX1RPVUNIIiwiVG91Y2hNb3VzZUlucHV0IiwiTW91c2VJbnB1dCIsImlucHV0SGFuZGxlciIsImV2ZW50VHlwZSIsInBvaW50ZXJzTGVuIiwicG9pbnRlcnMiLCJjaGFuZ2VkUG9pbnRlcnNMZW4iLCJjaGFuZ2VkUG9pbnRlcnMiLCJpc0ZpcnN0IiwiSU5QVVRfU1RBUlQiLCJpc0ZpbmFsIiwiSU5QVVRfRU5EIiwiSU5QVVRfQ0FOQ0VMIiwic2Vzc2lvbiIsImNvbXB1dGVJbnB1dERhdGEiLCJyZWNvZ25pemUiLCJwcmV2SW5wdXQiLCJwb2ludGVyc0xlbmd0aCIsImZpcnN0SW5wdXQiLCJzaW1wbGVDbG9uZUlucHV0RGF0YSIsImZpcnN0TXVsdGlwbGUiLCJnZXRDZW50ZXIiLCJkZWx0YVRpbWUiLCJhbmdsZSIsImdldEFuZ2xlIiwiZ2V0RGlzdGFuY2UiLCJjb21wdXRlRGVsdGFYWSIsIm9mZnNldERpcmVjdGlvbiIsImdldERpcmVjdGlvbiIsIm92ZXJhbGxWZWxvY2l0eSIsImdldFZlbG9jaXR5Iiwib3ZlcmFsbFZlbG9jaXR5WCIsIm92ZXJhbGxWZWxvY2l0eVkiLCJnZXRTY2FsZSIsImdldFJvdGF0aW9uIiwibWF4UG9pbnRlcnMiLCJjb21wdXRlSW50ZXJ2YWxJbnB1dERhdGEiLCJzcmNFdmVudCIsIm9mZnNldERlbHRhIiwicHJldkRlbHRhIiwidmVsb2NpdHlYIiwidmVsb2NpdHlZIiwibGFzdEludGVydmFsIiwiQ09NUFVURV9JTlRFUlZBTCIsIkRJUkVDVElPTl9OT05FIiwiRElSRUNUSU9OX0xFRlQiLCJESVJFQ1RJT05fUklHSFQiLCJESVJFQ1RJT05fVVAiLCJESVJFQ1RJT05fRE9XTiIsInAxIiwicDIiLCJQUk9QU19YWSIsIlBST1BTX0NMSUVOVF9YWSIsImV2RWwiLCJNT1VTRV9FTEVNRU5UX0VWRU5UUyIsImV2V2luIiwiTU9VU0VfV0lORE9XX0VWRU5UUyIsInByZXNzZWQiLCJQT0lOVEVSX0VMRU1FTlRfRVZFTlRTIiwiUE9JTlRFUl9XSU5ET1dfRVZFTlRTIiwic3RvcmUiLCJwb2ludGVyRXZlbnRzIiwiU2luZ2xlVG91Y2hJbnB1dCIsImV2VGFyZ2V0IiwiU0lOR0xFX1RPVUNIX1RBUkdFVF9FVkVOVFMiLCJTSU5HTEVfVE9VQ0hfV0lORE9XX0VWRU5UUyIsInN0YXJ0ZWQiLCJub3JtYWxpemVTaW5nbGVUb3VjaGVzIiwiY2hhbmdlZCIsIlRPVUNIX1RBUkdFVF9FVkVOVFMiLCJ0YXJnZXRJZHMiLCJnZXRUb3VjaGVzIiwiYWxsVG91Y2hlcyIsIklOUFVUX01PVkUiLCJjaGFuZ2VkVGFyZ2V0VG91Y2hlcyIsIm1vdXNlIiwicHJpbWFyeVRvdWNoIiwibGFzdFRvdWNoZXMiLCJyZWNvcmRUb3VjaGVzIiwiZXZlbnREYXRhIiwic2V0TGFzdFRvdWNoIiwibGFzdFRvdWNoIiwibHRzIiwicmVtb3ZlTGFzdFRvdWNoIiwiREVEVVBfVElNRU9VVCIsImlzU3ludGhldGljRXZlbnQiLCJkeSIsIkRFRFVQX0RJU1RBTkNFIiwiVG91Y2hBY3Rpb24iLCJjbGVhblRvdWNoQWN0aW9ucyIsImFjdGlvbnMiLCJUT1VDSF9BQ1RJT05fTk9ORSIsImhhc1BhblgiLCJUT1VDSF9BQ1RJT05fUEFOX1giLCJoYXNQYW5ZIiwiVE9VQ0hfQUNUSU9OX1BBTl9ZIiwiVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTiIsIlRPVUNIX0FDVElPTl9BVVRPIiwiUmVjb2duaXplciIsIlNUQVRFX1BPU1NJQkxFIiwic2ltdWx0YW5lb3VzIiwicmVxdWlyZUZhaWwiLCJzdGF0ZVN0ciIsIlNUQVRFX0NBTkNFTExFRCIsIlNUQVRFX0VOREVEIiwiU1RBVEVfQ0hBTkdFRCIsIlNUQVRFX0JFR0FOIiwiZGlyZWN0aW9uU3RyIiwiZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlciIsIm90aGVyUmVjb2duaXplciIsInJlY29nbml6ZXIiLCJBdHRyUmVjb2duaXplciIsIlBhblJlY29nbml6ZXIiLCJQaW5jaFJlY29nbml6ZXIiLCJQcmVzc1JlY29nbml6ZXIiLCJfdGltZXIiLCJfaW5wdXQiLCJSb3RhdGVSZWNvZ25pemVyIiwiU3dpcGVSZWNvZ25pemVyIiwiVGFwUmVjb2duaXplciIsInBUaW1lIiwicENlbnRlciIsIkhhbW1lciIsInJlY29nbml6ZXJzIiwicHJlc2V0IiwiTWFuYWdlciIsIm9sZENzc1Byb3BzIiwidG91Y2hBY3Rpb24iLCJ0b2dnbGVDc3NQcm9wcyIsIml0ZW0iLCJyZWNvZ25pemVXaXRoIiwicmVxdWlyZUZhaWx1cmUiLCJ0cmlnZ2VyRG9tRXZlbnQiLCJnZXN0dXJlRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJURVNUX0VMRU1FTlQiLCJvdXRwdXQiLCJuZXh0S2V5IiwiTU9CSUxFX1JFR0VYIiwiRElSRUNUSU9OX0hPUklaT05UQUwiLCJESVJFQ1RJT05fVkVSVElDQUwiLCJESVJFQ1RJT05fQUxMIiwiTU9VU0VfSU5QVVRfTUFQIiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwibW91c2V1cCIsIlBPSU5URVJfSU5QVVRfTUFQIiwicG9pbnRlcmRvd24iLCJwb2ludGVybW92ZSIsInBvaW50ZXJ1cCIsInBvaW50ZXJjYW5jZWwiLCJwb2ludGVyb3V0IiwiSUUxMF9QT0lOVEVSX1RZUEVfRU5VTSIsIjIiLCIzIiwiNCIsIjUiLCJNU1BvaW50ZXJFdmVudCIsIlBvaW50ZXJFdmVudCIsInJlbW92ZVBvaW50ZXIiLCJldmVudFR5cGVOb3JtYWxpemVkIiwiaXNUb3VjaCIsInN0b3JlSW5kZXgiLCJTSU5HTEVfVE9VQ0hfSU5QVVRfTUFQIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwidG91Y2hjYW5jZWwiLCJUT1VDSF9JTlBVVF9NQVAiLCJpbnB1dEV2ZW50IiwiaW5wdXREYXRhIiwiaXNNb3VzZSIsInNvdXJjZUNhcGFiaWxpdGllcyIsImZpcmVzVG91Y2hFdmVudHMiLCJQUkVGSVhFRF9UT1VDSF9BQ1RJT04iLCJOQVRJVkVfVE9VQ0hfQUNUSU9OIiwiVE9VQ0hfQUNUSU9OX01BUCIsInRvdWNoTWFwIiwiY3NzU3VwcG9ydHMiLCJDU1MiLCJzdXBwb3J0cyIsImNvbXB1dGUiLCJnZXRUb3VjaEFjdGlvbiIsInByZXZlbnREZWZhdWx0cyIsInByZXZlbnRlZCIsImhhc05vbmUiLCJpc1RhcFBvaW50ZXIiLCJpc1RhcE1vdmVtZW50IiwiaXNUYXBUb3VjaFRpbWUiLCJwcmV2ZW50U3JjIiwiU1RBVEVfUkVDT0dOSVpFRCIsImRyb3BSZWNvZ25pemVXaXRoIiwiZHJvcFJlcXVpcmVGYWlsdXJlIiwiaGFzUmVxdWlyZUZhaWx1cmVzIiwiY2FuUmVjb2duaXplV2l0aCIsImFkZGl0aW9uYWxFdmVudCIsInRyeUVtaXQiLCJjYW5FbWl0IiwiaW5wdXREYXRhQ2xvbmUiLCJhdHRyVGVzdCIsIm9wdGlvblBvaW50ZXJzIiwiaXNSZWNvZ25pemVkIiwiaXNWYWxpZCIsImRpcmVjdGlvblRlc3QiLCJoYXNNb3ZlZCIsImluT3V0IiwidmFsaWRQb2ludGVycyIsInZhbGlkTW92ZW1lbnQiLCJ2YWxpZFRpbWUiLCJ0YXBzIiwicG9zVGhyZXNob2xkIiwidmFsaWRUb3VjaFRpbWUiLCJmYWlsVGltZW91dCIsInZhbGlkSW50ZXJ2YWwiLCJ2YWxpZE11bHRpVGFwIiwidGFwQ291bnQiLCJWRVJTSU9OIiwiZG9tRXZlbnRzIiwidXNlclNlbGVjdCIsInRvdWNoU2VsZWN0IiwidG91Y2hDYWxsb3V0IiwiY29udGVudFpvb21pbmciLCJ1c2VyRHJhZyIsInRhcEhpZ2hsaWdodENvbG9yIiwiZm9yY2UiLCJjdXJSZWNvZ25pemVyIiwiZXhpc3RpbmciLCJTVEFURV9GQUlMRUQiLCJUYXAiLCJQYW4iLCJTd2lwZSIsIlBpbmNoIiwiUm90YXRlIiwiUHJlc3MiLCJNYXNrIiwibWFzayIsImludmFsaWQiLCJnZXRDYXJldCIsImN0cmwiLCJkU2VsIiwiY1NlbFN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJhcHBWZXJzaW9uIiwiY3JlYXRlUmFuZ2UiLCJtb3ZlU3RhcnQiLCJzZXRDYXJldCIsInJhbmdlIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJjcmVhdGVUZXh0UmFuZ2UiLCJjb2xsYXBzZSIsIm1vdmVFbmQiLCJtYXNrRGlnaXRQb3NNYXBPbGQiLCJtYXNrRGlnaXRQb3NNYXAiLCJqTWFza0dsb2JhbHMiLCJ1c2VJbnB1dCIsImJlaGF2aW91ciIsImtleWRvd24iLCJrZXl1cCIsIm9sZFZhbHVlIiwic2VsZWN0T25Gb2N1cyIsImNsZWFySWZOb3RNYXRjaCIsInJlZ2V4TWFzayIsImdldFJlZ2V4TWFzayIsInRyYW5zbGF0aW9uIiwib3B0aW9uYWwiLCJyZWN1cnNpdmUiLCJvUmVjdXJzaXZlIiwibWFza0NodW5rcyIsImpNYXNrIiwiZGlnaXQiLCJkZXN0cm95RXZlbnRzIiwiY2FsY3VsYXRlQ2FyZXRQb3NpdGlvbiIsIm9sZFZhbCIsIm5ld1ZhbCIsImdldE1hc2tlZCIsImNhcmV0UG9zTmV3IiwiY2FyZXRQb3NPbGQiLCJuZXdWYWxMIiwib2xkVmFsTCIsIm1hc2tEaWdpdHNCZWZvcmVDYXJldCIsIm1hc2tEaWdpdHNBZnRlckNhcmV0IiwibWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsIiwibWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsT2xkIiwiY2FyZXRQb3MiLCJieVBhc3NLZXlzIiwiY2FsbGJhY2tzIiwic2tpcE1hc2tDaGFycyIsImxhc3RNYXNrQ2hhciIsImJ1ZiIsIm1hc2tMZW4iLCJ2YWxMZW4iLCJhZGRNZXRob2QiLCJyZXNldFBvcyIsIm1hc2tEaWdpdENvdW50IiwibWFza0RpZ2l0UG9zQXJyIiwibGFzdFVudHJhbnNsYXRlZE1hc2tDaGFyIiwibWFza0RpZ2l0IiwidmFsRGlnaXQiLCJmYWxsYmFjayIsImxhc3RNYXNrQ2hhckRpZ2l0IiwibWFwTWFza2RpZ2l0UG9zaXRpb25zIiwibWFza0RpZmYiLCJkZWZhdWx0QXJncyIsImNyaXRlcmlhIiwiY2FyZXQiLCJnZXRDbGVhblZhbCIsImdldE1hc2tlZFZhbCIsIm9ubHlNYXNrIiwicGxhY2Vob2xkZXIiLCJtYXhsZW5ndGgiLCJtYXNrV2F0Y2hlcnMiLCJIVE1MQXR0cmlidXRlcyIsIm5vdFNhbWVNYXNrT2JqZWN0IiwiZmllbGQiLCJtYXNrT2JqZWN0Iiwic3RyaW5naWZ5IiwiZ2xvYmFscyIsIndhdGNoSW50ZXJ2YWwiLCJ3YXRjaElucHV0cyIsIm1hc2tGdW5jdGlvbiIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsIm1hc2tlZCIsInVubWFzayIsImRhdGFNYXNrIiwiY2xlYW5WYWwiLCJhcHBseURhdGFNYXNrIiwibWFza0VsZW1lbnRzIiwiZGF0YU1hc2tBdHRyIiwid2F0Y2hEYXRhTWFzayIsIjkiLCIjIiwiQSIsIlMiLCJ2YWxpZGF0ZSIsInZhbGlkYXRvciIsIm9uc3VibWl0Iiwic3VibWl0SGFuZGxlciIsInN1Ym1pdEJ1dHRvbiIsImNhbmNlbFN1Ym1pdCIsImN1cnJlbnRGb3JtIiwiZGVidWciLCJmb3JtIiwicGVuZGluZ1JlcXVlc3QiLCJmb3JtU3VibWl0dGVkIiwiZm9jdXNJbnZhbGlkIiwidmFsaWQiLCJlcnJvckxpc3QiLCJydWxlcyIsImNvbW1hbmQiLCJzdGF0aWNSdWxlcyIsImV4aXN0aW5nUnVsZXMiLCJmaWx0ZXJlZCIsIm5vcm1hbGl6ZVJ1bGUiLCJtZXNzYWdlcyIsIm5vcm1hbGl6ZVJ1bGVzIiwiY2xhc3NSdWxlcyIsImF0dHJpYnV0ZVJ1bGVzIiwiZGF0YVJ1bGVzIiwicmVxdWlyZWQiLCJyZW1vdGUiLCJibGFuayIsImZpbGxlZCIsInVuY2hlY2tlZCIsImZvcm1hdCIsImVycm9yQ2xhc3MiLCJwZW5kaW5nQ2xhc3MiLCJ2YWxpZENsYXNzIiwiZXJyb3JFbGVtZW50IiwiZm9jdXNDbGVhbnVwIiwiZXJyb3JDb250YWluZXIiLCJlcnJvckxhYmVsQ29udGFpbmVyIiwiaWdub3JlIiwiaWdub3JlVGl0bGUiLCJvbmZvY3VzaW4iLCJsYXN0QWN0aXZlIiwidW5oaWdobGlnaHQiLCJoaWRlVGhlc2UiLCJlcnJvcnNGb3IiLCJvbmZvY3Vzb3V0IiwiY2hlY2thYmxlIiwic3VibWl0dGVkIiwib25rZXl1cCIsImV4Y2x1ZGVkS2V5cyIsImVsZW1lbnRWYWx1ZSIsIm9uY2xpY2siLCJoaWdobGlnaHQiLCJmaW5kQnlOYW1lIiwic2V0RGVmYXVsdHMiLCJlbWFpbCIsImRhdGUiLCJkYXRlSVNPIiwibnVtYmVyIiwiZGlnaXRzIiwiZXF1YWxUbyIsIm1pbmxlbmd0aCIsInJhbmdlbGVuZ3RoIiwiYXV0b0NyZWF0ZVJhbmdlcyIsImhhc0F0dHJpYnV0ZSIsImxhYmVsQ29udGFpbmVyIiwiZXJyb3JDb250ZXh0IiwiY29udGFpbmVycyIsInZhbHVlQ2FjaGUiLCJwZW5kaW5nIiwiaW52YWxpZEhhbmRsZXIiLCJjaGVja0Zvcm0iLCJlcnJvck1hcCIsInNob3dFcnJvcnMiLCJwcmVwYXJlRm9ybSIsImN1cnJlbnRFbGVtZW50cyIsInJzIiwiZ3JvdXAiLCJjbGVhbkVsZW1lbnQiLCJjbGVhbiIsImNoZWNrRWxlbWVudCIsInZhbGlkYXRpb25UYXJnZXRGb3IiLCJwcmVwYXJlRWxlbWVudCIsInRlc3Rncm91cCIsIm51bWJlck9mSW52YWxpZHMiLCJ0b0hpZGUiLCJlcnJvcnMiLCJzdWNjZXNzTGlzdCIsImRlZmF1bHRTaG93RXJyb3JzIiwicmVzZXRGb3JtIiwiaGlkZUVycm9ycyIsInJlc2V0RWxlbWVudHMiLCJvYmplY3RMZW5ndGgiLCJhZGRXcmFwcGVyIiwiZmluZExhc3RBY3RpdmUiLCJydWxlc0NhY2hlIiwicmVzZXRJbnRlcm5hbHMiLCJ0b1Nob3ciLCIkZWxlbWVudCIsInZhbGlkaXR5IiwiYmFkSW5wdXQiLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsInJ1bGUiLCJydWxlc0NvdW50IiwiZGVwZW5kZW5jeU1pc21hdGNoIiwibm9ybWFsaXplciIsInBhcmFtZXRlcnMiLCJtZXRob2RzIiwiZm9ybWF0QW5kQWRkIiwiY3VzdG9tRGF0YU1lc3NhZ2UiLCJjdXN0b21NZXNzYWdlIiwiZmluZERlZmluZWQiLCJkZWZhdWx0TWVzc2FnZSIsInRpdGxlIiwidGhlcmVnZXgiLCJ0b1RvZ2dsZSIsInNob3dMYWJlbCIsInZhbGlkRWxlbWVudHMiLCJpbnZhbGlkRWxlbWVudHMiLCJwbGFjZSIsImVycm9ySUQiLCJlbGVtZW50SUQiLCJpZE9yTmFtZSIsImRlc2NyaWJlZEJ5IiwiZXJyb3JQbGFjZW1lbnQiLCJlc2NhcGVDc3NNZXRhIiwiZGVzY3JpYmVyIiwiZ2V0TGVuZ3RoIiwiZGVwZW5kIiwiZGVwZW5kVHlwZXMiLCJib29sZWFuIiwiZnVuY3Rpb24iLCJzdGFydFJlcXVlc3QiLCJzdG9wUmVxdWVzdCIsInByZXZpb3VzVmFsdWUiLCJjbGFzc1J1bGVTZXR0aW5ncyIsImNyZWRpdGNhcmQiLCJhZGRDbGFzc1J1bGVzIiwibm9ybWFsaXplQXR0cmlidXRlUnVsZSIsIk51bWJlciIsImRlcGVuZHMiLCJrZWVwUnVsZSIsInBhcmFtZXRlciIsInRyYW5zZm9ybWVkIiwiZGVjaW1hbHMiLCJlcnJvck1lc3NhZ2UiLCJzdXBwb3J0ZWRUeXBlcyIsInJlIiwiZGVjaW1hbFBsYWNlcyIsInRvSW50Iiwib3B0aW9uRGF0YVN0cmluZyIsInByZXZpb3VzIiwib3JpZ2luYWxNZXNzYWdlIiwibW9kZSIsInBvcnQiLCJwZW5kaW5nUmVxdWVzdHMiLCJjb21tb25Kc1N0cmljdCIsInZlbmRvclByZWZpeCIsImVtcHR5U3R5bGVzIiwiY2FwUHJvcCIsImRlZXBFeHRlbmQiLCJkZXN0aW5hdGlvbiIsImRpc3BhdGNoQ2hhbmdlIiwiZmlyZUV2ZW50IiwiY2xhc3NMaXN0IiwiaW1hZ2VFbCIsIlByb21pc2UiLCJnZXRFeGlmT3JpZW50YXRpb24iLCJjYiIsIkVYSUYiLCJvcmllbnRhdGlvbiIsImdldFRhZyIsImRyYXdDYW52YXMiLCJjYW52YXMiLCJjdHgiLCJnZXRDb250ZXh0Iiwic2F2ZSIsImRyYXdJbWFnZSIsInJlc3RvcmUiLCJfY3JlYXRlIiwiYm91bmRhcnkiLCJ2aWV3cG9ydCIsIm92ZXJsYXkiLCJidyIsImJoIiwiY3VzdG9tVmlld3BvcnRDbGFzcyIsInVzZUNhbnZhcyIsImVuYWJsZU9yaWVudGF0aW9uIiwiX2hhc0V4aWYiLCJwcmV2aWV3IiwiY3VzdG9tQ2xhc3MiLCJfaW5pdERyYWdnYWJsZSIsImVuYWJsZVpvb20iLCJfaW5pdGlhbGl6ZVpvb20iLCJlbmFibGVFeGlmIiwiX3NldFpvb21lclZhbCIsInpvb21lciIsImNoYW5nZSIsIl9vblpvb20iLCJvcmlnaW4iLCJUcmFuc2Zvcm1PcmlnaW4iLCJ2aWV3cG9ydFJlY3QiLCJUcmFuc2Zvcm0iLCJzY3JvbGwiLCJ0YXJnZXRab29tIiwiX2N1cnJlbnRab29tIiwiem9vbWVyV3JhcCIsInNob3dab29tZXIiLCJtb3VzZVdoZWVsWm9vbSIsInVpIiwiYXBwbHlDc3MiLCJ0cmFuc0NzcyIsIkNTU19UUkFOU0ZPUk0iLCJDU1NfVFJBTlNfT1JHIiwidnBSZWN0IiwiZW5mb3JjZUJvdW5kYXJ5IiwiYm91bmRhcmllcyIsIl9nZXRWaXJ0dWFsQm91bmRhcmllcyIsInRyYW5zQm91bmRhcmllcyIsIm9Cb3VuZGFyaWVzIiwiX2RlYm91bmNlZE92ZXJsYXkiLCJfdHJpZ2dlclVwZGF0ZSIsInZwV2lkdGgiLCJ2cEhlaWdodCIsImNlbnRlckZyb21Cb3VuZGFyeVgiLCJjZW50ZXJGcm9tQm91bmRhcnlZIiwiaW1nUmVjdCIsImN1ckltZ1dpZHRoIiwiY3VySW1nSGVpZ2h0IiwiaGFsZldpZHRoIiwiaGFsZkhlaWdodCIsIm9yaWdpbk1pblgiLCJvcmlnaW5NaW5ZIiwiX3VwZGF0ZUNlbnRlclBvaW50IiwidnBEYXRhIiwicGMiLCJuZXdDc3MiLCJhc3NpZ25UcmFuc2Zvcm1Db29yZGluYXRlcyIsImJvdHRvbSIsInJpZ2h0Iiwia2V5RG93biIsIkxFRlRfQVJST1ciLCJVUF9BUlJPVyIsIlJJR0hUX0FSUk9XIiwiRE9XTl9BUlJPVyIsIm1vdmVtZW50IiwiQ1NTX1VTRVJTRUxFQ1QiLCJrZXlNb3ZlIiwic2V0Wm9vbSIsIl91cGRhdGVPdmVybGF5Iiwib3JpZ2luYWxEaXN0YW5jZSIsIm1vdXNlRG93biIsImlzRHJhZ2dpbmciLCJvcmlnaW5hbFgiLCJvcmlnaW5hbFkiLCJtb3VzZU1vdmUiLCJtb3VzZVVwIiwidG91Y2gxIiwidG91Y2gyIiwiZGlzdCIsImJvdW5kUmVjdCIsImltZ0RhdGEiLCJfaXNWaXNpYmxlIiwiUHJvdG90eXBlIiwiQ3VzdG9tRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJfdXBkYXRlUHJvcGVydGllc0Zyb21JbWFnZSIsImJvdW5kYXJ5RGF0YSIsIm1pblciLCJtaW5IIiwibWluWm9vbSIsIm1heFpvb20iLCJpbml0aWFsWm9vbSIsImNzc1Jlc2V0IiwidHJhbnNmb3JtUmVzZXQiLCJvcmlnaW5SZXNldCIsImJvdW5kIiwiX29yaWdpbmFsSW1hZ2VXaWR0aCIsIl9vcmlnaW5hbEltYWdlSGVpZ2h0IiwiZGVmYXVsdEluaXRpYWxab29tIiwiYm91bmRab29tIiwiX2JpbmRQb2ludHMiLCJfY2VudGVySW1hZ2UiLCJwb2ludHNXaWR0aCIsInZwT2Zmc2V0Iiwib3JpZ2luVG9wIiwib3JpZ2luTGVmdCIsInRyYW5zZm9ybVRvcCIsInRyYW5zZm9ybUxlZnQiLCJpbWdEaW0iLCJ2cERpbSIsImJvdW5kRGltIiwidnBMZWZ0IiwidnBUb3AiLCJoIiwiX3RyYW5zZmVySW1hZ2VUb0NhbnZhcyIsImN1c3RvbU9yaWVudGF0aW9uIiwiZXhpZiIsImNsZWFyUmVjdCIsIl9nZXRDYW52YXMiLCJjaXJjbGUiLCJvdXRXaWR0aCIsIm91dEhlaWdodCIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0Iiwib3V0cHV0UmF0aW8iLCJvdXRwdXRXaWR0aCIsIm91dHB1dEhlaWdodCIsImJhY2tncm91bmRDb2xvciIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiYmVnaW5QYXRoIiwiYXJjIiwiY2xvc2VQYXRoIiwiX2dldEh0bWxSZXN1bHQiLCJfZ2V0QmFzZTY0UmVzdWx0IiwidG9EYXRhVVJMIiwicXVhbGl0eSIsIl9nZXRCbG9iUmVzdWx0IiwidG9CbG9iIiwiYmxvYiIsIl9iaW5kIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsImlXaWR0aCIsImlIZWlnaHQiLCJhc3BlY3RSYXRpbyIsIngwIiwieTAiLCJleGlmZGF0YSIsImRlY2ltYWxQb2ludHMiLCJ0b0ZpeGVkIiwiX2dldCIsIndpZHRoRGlmZiIsImhlaWdodERpZmYiLCJJbmZpbml0eSIsIk5FR0FUSVZFX0lORklOSVRZIiwiX3Jlc3VsdCIsIlJFU1VMVF9ERUZBVUxUUyIsInJlc3VsdFR5cGUiLCJSRVNVTFRfRk9STUFUUyIsIl9yZWZyZXNoIiwiX3JvdGF0ZSIsImRlZyIsIm9ybnQiLCJfZGVzdHJveSIsIkNyb3BwaWUiLCJ0YWdOYW1lIiwib3JpZ0ltYWdlIiwicmVwbGFjZW1lbnREaXYiLCJiaW5kT3B0cyIsIl9zdGF0ZSIsIl92YWx1ZSIsIl9kZWZlcnJlZHMiLCJkIiwiayIsInNldEltbWVkaWF0ZSIsInJhY2UiLCJfc2V0SW1tZWRpYXRlRm4iLCJIVE1MQ2FudmFzRWxlbWVudCIsImJpblN0ciIsImF0b2IiLCJVaW50OEFycmF5IiwiQmxvYiIsIlRSQU5TTEFURV9PUFRTIiwidHJhbnNsYXRlM2QiLCJmcm9tTWF0cml4IiwiZnJvbVN0cmluZyIsInZhbHMiLCJpbW1lZGlhdGUiLCJsYXRlciIsImNhbGxOb3ciLCJjcm9wcGllIiwic2luZ2xlSW5zdCIsIm9yaWVudGF0aW9uQ29udHJvbHMiLCJsZWZ0Q2xhc3MiLCJyaWdodENsYXNzIiwicmVmcmVzaCIsIm1vbWVudCIsImhvb2tDYWxsYmFjayIsImlzT2JqZWN0IiwiaXNPYmplY3RFbXB0eSIsImlzVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJyZXMiLCJoYXNPd25Qcm9wIiwidmFsdWVPZiIsImNyZWF0ZVVUQyIsImxvY2FsZSIsInN0cmljdCIsImNyZWF0ZUxvY2FsT3JVVEMiLCJ1dGMiLCJkZWZhdWx0UGFyc2luZ0ZsYWdzIiwidW51c2VkVG9rZW5zIiwidW51c2VkSW5wdXQiLCJjaGFyc0xlZnRPdmVyIiwibnVsbElucHV0IiwiaW52YWxpZE1vbnRoIiwiaW52YWxpZEZvcm1hdCIsInVzZXJJbnZhbGlkYXRlZCIsImlzbyIsInBhcnNlZERhdGVQYXJ0cyIsIm1lcmlkaWVtIiwicmZjMjgyMiIsIndlZWtkYXlNaXNtYXRjaCIsImdldFBhcnNpbmdGbGFncyIsIl9wZiIsIl9pc1ZhbGlkIiwiZmxhZ3MiLCJwYXJzZWRQYXJ0cyIsInNvbWUkMSIsImlzTm93VmFsaWQiLCJfZCIsImludmFsaWRXZWVrZGF5IiwiX3N0cmljdCIsImJpZ0hvdXIiLCJpc0Zyb3plbiIsImNyZWF0ZUludmFsaWQiLCJOYU4iLCJjb3B5Q29uZmlnIiwiZnJvbSIsIl9pc0FNb21lbnRPYmplY3QiLCJfaSIsIl9mIiwiX2wiLCJfdHptIiwiX2lzVVRDIiwiX29mZnNldCIsIl9sb2NhbGUiLCJtb21lbnRQcm9wZXJ0aWVzIiwiTW9tZW50IiwiY29uZmlnIiwidXBkYXRlSW5Qcm9ncmVzcyIsInVwZGF0ZU9mZnNldCIsImlzTW9tZW50IiwiYWJzRmxvb3IiLCJhcmd1bWVudEZvckNvZXJjaW9uIiwiY29lcmNlZE51bWJlciIsImNvbXBhcmVBcnJheXMiLCJhcnJheTEiLCJhcnJheTIiLCJkb250Q29udmVydCIsImxlbmd0aERpZmYiLCJkaWZmcyIsInN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyIsImZpcnN0VGltZSIsImRlcHJlY2F0aW9uSGFuZGxlciIsImRlcHJlY2F0ZVNpbXBsZSIsImRlcHJlY2F0aW9ucyIsIkZ1bmN0aW9uIiwiX2NvbmZpZyIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwiX29yZGluYWxQYXJzZSIsIm1lcmdlQ29uZmlncyIsInBhcmVudENvbmZpZyIsImNoaWxkQ29uZmlnIiwiTG9jYWxlIiwiY2FsZW5kYXIiLCJtb20iLCJfY2FsZW5kYXIiLCJsb25nRGF0ZUZvcm1hdCIsIl9sb25nRGF0ZUZvcm1hdCIsImZvcm1hdFVwcGVyIiwiaW52YWxpZERhdGUiLCJfaW52YWxpZERhdGUiLCJvcmRpbmFsIiwiX29yZGluYWwiLCJyZWxhdGl2ZVRpbWUiLCJ3aXRob3V0U3VmZml4IiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsImFkZFVuaXRBbGlhcyIsInNob3J0aGFuZCIsImxvd2VyQ2FzZSIsImFsaWFzZXMiLCJub3JtYWxpemVVbml0cyIsInVuaXRzIiwibm9ybWFsaXplT2JqZWN0VW5pdHMiLCJpbnB1dE9iamVjdCIsIm5vcm1hbGl6ZWRQcm9wIiwibm9ybWFsaXplZElucHV0IiwiYWRkVW5pdFByaW9yaXR5IiwicHJpb3JpdHkiLCJwcmlvcml0aWVzIiwiZ2V0UHJpb3JpdGl6ZWRVbml0cyIsInVuaXRzT2JqIiwidSIsIm1ha2VHZXRTZXQiLCJrZWVwVGltZSIsInNldCQxIiwic3RyaW5nR2V0Iiwic3RyaW5nU2V0IiwicHJpb3JpdGl6ZWQiLCJ6ZXJvRmlsbCIsInRhcmdldExlbmd0aCIsImZvcmNlU2lnbiIsImFic051bWJlciIsInplcm9zVG9GaWxsIiwiYWRkRm9ybWF0VG9rZW4iLCJwYWRkZWQiLCJmb3JtYXRUb2tlbkZ1bmN0aW9ucyIsImxvY2FsZURhdGEiLCJyZW1vdmVGb3JtYXR0aW5nVG9rZW5zIiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwiZm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdE1vbWVudCIsImV4cGFuZEZvcm1hdCIsImZvcm1hdEZ1bmN0aW9ucyIsInJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImFkZFJlZ2V4VG9rZW4iLCJyZWdleCIsInN0cmljdFJlZ2V4IiwicmVnZXhlcyIsImlzU3RyaWN0IiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwidW5lc2NhcGVGb3JtYXQiLCJyZWdleEVzY2FwZSIsInAzIiwicDQiLCJhZGRQYXJzZVRva2VuIiwiYWRkV2Vla1BhcnNlVG9rZW4iLCJfdyIsImFkZFRpbWVUb0FycmF5RnJvbVRva2VuIiwiX2EiLCJkYXlzSW5Nb250aCIsInllYXIiLCJtb250aCIsIlVUQyIsImdldFVUQ0RhdGUiLCJsb2NhbGVNb250aHMiLCJfbW9udGhzIiwiaXNGb3JtYXQiLCJNT05USFNfSU5fRk9STUFUIiwibG9jYWxlTW9udGhzU2hvcnQiLCJfbW9udGhzU2hvcnQiLCJoYW5kbGVTdHJpY3RQYXJzZSIsIm1vbnRoTmFtZSIsImlpIiwibGxjIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJfbW9udGhzUGFyc2UiLCJfbG9uZ01vbnRoc1BhcnNlIiwiX3Nob3J0TW9udGhzUGFyc2UiLCJtb250aHNTaG9ydCIsIm1vbnRocyIsImluZGV4T2YkMSIsImxvY2FsZU1vbnRoc1BhcnNlIiwiX21vbnRoc1BhcnNlRXhhY3QiLCJzZXRNb250aCIsImRheU9mTW9udGgiLCJtb250aHNQYXJzZSIsImdldFNldE1vbnRoIiwiZ2V0RGF5c0luTW9udGgiLCJtb250aHNTaG9ydFJlZ2V4IiwiY29tcHV0ZU1vbnRoc1BhcnNlIiwiX21vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJfbW9udGhzU2hvcnRSZWdleCIsImRlZmF1bHRNb250aHNTaG9ydFJlZ2V4IiwibW9udGhzUmVnZXgiLCJfbW9udGhzU3RyaWN0UmVnZXgiLCJfbW9udGhzUmVnZXgiLCJkZWZhdWx0TW9udGhzUmVnZXgiLCJjbXBMZW5SZXYiLCJzaG9ydFBpZWNlcyIsImxvbmdQaWVjZXMiLCJtaXhlZFBpZWNlcyIsImRheXNJblllYXIiLCJpc0xlYXBZZWFyIiwiZ2V0SXNMZWFwWWVhciIsImNyZWF0ZURhdGUiLCJNIiwibXMiLCJnZXRGdWxsWWVhciIsInNldEZ1bGxZZWFyIiwiY3JlYXRlVVRDRGF0ZSIsImdldFVUQ0Z1bGxZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJmaXJzdFdlZWtPZmZzZXQiLCJkb3ciLCJkb3kiLCJmd2QiLCJnZXRVVENEYXkiLCJkYXlPZlllYXJGcm9tV2Vla3MiLCJ3ZWVrIiwid2Vla2RheSIsInJlc1llYXIiLCJyZXNEYXlPZlllYXIiLCJkYXlPZlllYXIiLCJ3ZWVrT2ZZZWFyIiwicmVzV2VlayIsIndlZWtPZmZzZXQiLCJ3ZWVrc0luWWVhciIsIndlZWtPZmZzZXROZXh0IiwibG9jYWxlV2VlayIsIl93ZWVrIiwibG9jYWxlRmlyc3REYXlPZldlZWsiLCJsb2NhbGVGaXJzdERheU9mWWVhciIsImdldFNldFdlZWsiLCJnZXRTZXRJU09XZWVrIiwicGFyc2VXZWVrZGF5Iiwid2Vla2RheXNQYXJzZSIsInBhcnNlSXNvV2Vla2RheSIsImxvY2FsZVdlZWtkYXlzIiwiX3dlZWtkYXlzIiwiZGF5IiwibG9jYWxlV2Vla2RheXNTaG9ydCIsIl93ZWVrZGF5c1Nob3J0IiwibG9jYWxlV2Vla2RheXNNaW4iLCJfd2Vla2RheXNNaW4iLCJoYW5kbGVTdHJpY3RQYXJzZSQxIiwid2Vla2RheU5hbWUiLCJfd2Vla2RheXNQYXJzZSIsIl9zaG9ydFdlZWtkYXlzUGFyc2UiLCJfbWluV2Vla2RheXNQYXJzZSIsIndlZWtkYXlzTWluIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzIiwibG9jYWxlV2Vla2RheXNQYXJzZSIsIl93ZWVrZGF5c1BhcnNlRXhhY3QiLCJfZnVsbFdlZWtkYXlzUGFyc2UiLCJnZXRTZXREYXlPZldlZWsiLCJnZXREYXkiLCJnZXRTZXRMb2NhbGVEYXlPZldlZWsiLCJnZXRTZXRJU09EYXlPZldlZWsiLCJ3ZWVrZGF5c1JlZ2V4IiwiY29tcHV0ZVdlZWtkYXlzUGFyc2UiLCJfd2Vla2RheXNTdHJpY3RSZWdleCIsIl93ZWVrZGF5c1JlZ2V4IiwiZGVmYXVsdFdlZWtkYXlzUmVnZXgiLCJ3ZWVrZGF5c1Nob3J0UmVnZXgiLCJfd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzU2hvcnRSZWdleCIsImRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXgiLCJ3ZWVrZGF5c01pblJlZ2V4IiwiX3dlZWtkYXlzTWluU3RyaWN0UmVnZXgiLCJfd2Vla2RheXNNaW5SZWdleCIsImRlZmF1bHRXZWVrZGF5c01pblJlZ2V4IiwibWlucCIsInNob3J0cCIsImxvbmdwIiwibWluUGllY2VzIiwiaEZvcm1hdCIsImhvdXJzIiwia0Zvcm1hdCIsImxvd2VyY2FzZSIsIm1pbnV0ZXMiLCJtYXRjaE1lcmlkaWVtIiwiX21lcmlkaWVtUGFyc2UiLCJsb2NhbGVJc1BNIiwibG9jYWxlTWVyaWRpZW0iLCJpc0xvd2VyIiwibm9ybWFsaXplTG9jYWxlIiwiY2hvb3NlTG9jYWxlIiwibmFtZXMiLCJsb2FkTG9jYWxlIiwib2xkTG9jYWxlIiwibG9jYWxlcyIsImdsb2JhbExvY2FsZSIsIl9hYmJyIiwiZ2V0U2V0R2xvYmFsTG9jYWxlIiwiZ2V0TG9jYWxlIiwiZGVmaW5lTG9jYWxlIiwiYmFzZUNvbmZpZyIsImFiYnIiLCJwYXJlbnRMb2NhbGUiLCJsb2NhbGVGYW1pbGllcyIsInVwZGF0ZUxvY2FsZSIsImxpc3RMb2NhbGVzIiwia2V5cyQxIiwiY2hlY2tPdmVyZmxvdyIsIk1PTlRIIiwiREFURSIsIllFQVIiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJfb3ZlcmZsb3dEYXlPZlllYXIiLCJfb3ZlcmZsb3dXZWVrcyIsIldFRUsiLCJfb3ZlcmZsb3dXZWVrZGF5IiwiV0VFS0RBWSIsImNvbmZpZ0Zyb21JU08iLCJhbGxvd1RpbWUiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsInR6Rm9ybWF0IiwiZXh0ZW5kZWRJc29SZWdleCIsImJhc2ljSXNvUmVnZXgiLCJpc29EYXRlcyIsImlzb1RpbWVzIiwidHpSZWdleCIsImNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQiLCJjb25maWdGcm9tUkZDMjgyMiIsImRheUZvcm1hdCIsInRpbWV6b25lIiwidGltZXpvbmVJbmRleCIsInRpbWV6b25lcyIsIiBHTVQiLCIgRURUIiwiIEVTVCIsIiBDRFQiLCIgQ1NUIiwiIE1EVCIsIiBNU1QiLCIgUERUIiwiIFBTVCIsImJhc2ljUmZjUmVnZXgiLCJtb21lbnREYXkiLCJjb25maWdGcm9tU3RyaW5nIiwiYXNwTmV0SnNvblJlZ2V4IiwiY3JlYXRlRnJvbUlucHV0RmFsbGJhY2siLCJjdXJyZW50RGF0ZUFycmF5Iiwibm93VmFsdWUiLCJfdXNlVVRDIiwiZ2V0VVRDTW9udGgiLCJnZXRNb250aCIsImdldERhdGUiLCJjb25maWdGcm9tQXJyYXkiLCJjdXJyZW50RGF0ZSIsInllYXJUb1VzZSIsImRheU9mWWVhckZyb21XZWVrSW5mbyIsIl9kYXlPZlllYXIiLCJfbmV4dERheSIsInNldFVUQ01pbnV0ZXMiLCJnZXRVVENNaW51dGVzIiwid2Vla1llYXIiLCJ3ZWVrZGF5T3ZlcmZsb3ciLCJHRyIsIlciLCJFIiwiY3JlYXRlTG9jYWwiLCJjdXJXZWVrIiwiZ2ciLCJJU09fODYwMSIsIlJGQ18yODIyIiwicGFyc2VkSW5wdXQiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsIl9tZXJpZGllbSIsIm1lcmlkaWVtRml4V3JhcCIsImhvdXIiLCJpc1BtIiwibWVyaWRpZW1Ib3VyIiwiaXNQTSIsImNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheSIsInRlbXBDb25maWciLCJiZXN0TW9tZW50Iiwic2NvcmVUb0JlYXQiLCJjdXJyZW50U2NvcmUiLCJzY29yZSIsImNvbmZpZ0Zyb21PYmplY3QiLCJtaW51dGUiLCJtaWxsaXNlY29uZCIsImNyZWF0ZUZyb21Db25maWciLCJwcmVwYXJlQ29uZmlnIiwicHJlcGFyc2UiLCJjb25maWdGcm9tSW5wdXQiLCJpc1VUQyIsInBpY2tCeSIsIm1vbWVudHMiLCJpc0R1cmF0aW9uVmFsaWQiLCJvcmRlcmluZyIsInVuaXRIYXNEZWNpbWFsIiwiaXNWYWxpZCQxIiwiY3JlYXRlSW52YWxpZCQxIiwiY3JlYXRlRHVyYXRpb24iLCJEdXJhdGlvbiIsInllYXJzIiwicXVhcnRlcnMiLCJxdWFydGVyIiwid2Vla3MiLCJkYXlzIiwic2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsIl9taWxsaXNlY29uZHMiLCJfZGF5cyIsIl9idWJibGUiLCJpc0R1cmF0aW9uIiwiYWJzUm91bmQiLCJzZXBhcmF0b3IiLCJ1dGNPZmZzZXQiLCJzaWduIiwib2Zmc2V0RnJvbVN0cmluZyIsImNodW5rT2Zmc2V0IiwiY2xvbmVXaXRoT2Zmc2V0IiwibW9kZWwiLCJzZXRUaW1lIiwibG9jYWwiLCJnZXREYXRlT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJnZXRTZXRPZmZzZXQiLCJrZWVwTG9jYWxUaW1lIiwia2VlcE1pbnV0ZXMiLCJsb2NhbEFkanVzdCIsIm1hdGNoU2hvcnRPZmZzZXQiLCJfY2hhbmdlSW5Qcm9ncmVzcyIsImFkZFN1YnRyYWN0IiwiZ2V0U2V0Wm9uZSIsInNldE9mZnNldFRvVVRDIiwic2V0T2Zmc2V0VG9Mb2NhbCIsInNldE9mZnNldFRvUGFyc2VkT2Zmc2V0IiwidFpvbmUiLCJtYXRjaE9mZnNldCIsImhhc0FsaWduZWRIb3VyT2Zmc2V0IiwiaXNEYXlsaWdodFNhdmluZ1RpbWUiLCJpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwib3RoZXIiLCJpc1V0Y09mZnNldCIsImlzVXRjIiwiZGlmZlJlcyIsImFzcE5ldFJlZ2V4IiwiaXNvUmVnZXgiLCJwYXJzZUlzbyIsIm1vbWVudHNEaWZmZXJlbmNlIiwiaW5wIiwicG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZSIsImlzQWZ0ZXIiLCJpc0JlZm9yZSIsImNyZWF0ZUFkZGVyIiwicGVyaW9kIiwiZHVyIiwiaXNBZGRpbmciLCJnZXRDYWxlbmRhckZvcm1hdCIsIm15TW9tZW50IiwiY2FsZW5kYXIkMSIsImZvcm1hdHMiLCJzb2QiLCJzdGFydE9mIiwiY2FsZW5kYXJGb3JtYXQiLCJsb2NhbElucHV0IiwiZW5kT2YiLCJpc0JldHdlZW4iLCJpbmNsdXNpdml0eSIsImlzU2FtZSIsImlucHV0TXMiLCJpc1NhbWVPckFmdGVyIiwiaXNTYW1lT3JCZWZvcmUiLCJhc0Zsb2F0Iiwiem9uZURlbHRhIiwibW9udGhEaWZmIiwiYWRqdXN0Iiwid2hvbGVNb250aERpZmYiLCJhbmNob3IiLCJ0b0lTT1N0cmluZyIsInRvRGF0ZSIsInpvbmUiLCJpbnB1dFN0cmluZyIsImRlZmF1bHRGb3JtYXRVdGMiLCJkZWZhdWx0Rm9ybWF0IiwicG9zdGZvcm1hdCIsImh1bWFuaXplIiwiZnJvbU5vdyIsInRvTm93IiwibmV3TG9jYWxlRGF0YSIsImlzb1dlZWtkYXkiLCJ1bml4IiwidG9PYmplY3QiLCJ0b0pTT04iLCJpc1ZhbGlkJDIiLCJwYXJzaW5nRmxhZ3MiLCJpbnZhbGlkQXQiLCJjcmVhdGlvbkRhdGEiLCJhZGRXZWVrWWVhckZvcm1hdFRva2VuIiwiZ2V0U2V0V2Vla1llYXIiLCJnZXRTZXRXZWVrWWVhckhlbHBlciIsImdldFNldElTT1dlZWtZZWFyIiwiaXNvV2VlayIsImdldElTT1dlZWtzSW5ZZWFyIiwiZ2V0V2Vla3NJblllYXIiLCJ3ZWVrSW5mbyIsIndlZWtzVGFyZ2V0Iiwic2V0V2Vla0FsbCIsImRheU9mWWVhckRhdGEiLCJnZXRTZXRRdWFydGVyIiwiZ2V0U2V0RGF5T2ZZZWFyIiwicGFyc2VNcyIsImdldFpvbmVBYmJyIiwiZ2V0Wm9uZU5hbWUiLCJjcmVhdGVVbml4IiwiY3JlYXRlSW5ab25lIiwicGFyc2Vab25lIiwicHJlUGFyc2VQb3N0Rm9ybWF0IiwiZ2V0JDEiLCJsaXN0TW9udGhzSW1wbCIsIm91dCIsImxpc3RXZWVrZGF5c0ltcGwiLCJsb2NhbGVTb3J0ZWQiLCJsaXN0TW9udGhzIiwibGlzdE1vbnRoc1Nob3J0IiwibGlzdFdlZWtkYXlzIiwibGlzdFdlZWtkYXlzU2hvcnQiLCJsaXN0V2Vla2RheXNNaW4iLCJtYXRoQWJzIiwiYWRkU3VidHJhY3QkMSIsImFkZCQxIiwic3VidHJhY3QkMSIsImFic0NlaWwiLCJidWJibGUiLCJtb250aHNGcm9tRGF5cyIsIm1vbnRoc1RvRGF5cyIsImRheXNUb01vbnRocyIsImFzIiwidmFsdWVPZiQxIiwibWFrZUFzIiwiYWxpYXMiLCJnZXQkMiIsIm1ha2VHZXR0ZXIiLCJzdWJzdGl0dXRlVGltZUFnbyIsInJlbGF0aXZlVGltZSQxIiwicG9zTmVnRHVyYXRpb24iLCJ0aHJlc2hvbGRzIiwic3MiLCJnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJvdW5kaW5nRnVuY3Rpb24iLCJnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJsaW1pdCIsIndpdGhTdWZmaXgiLCJ0b0lTT1N0cmluZyQxIiwiYWJzJDEiLCJZIiwiRCIsImFzU2Vjb25kcyIsInNvbWUiLCJmdW4iLCJkZWZhdWx0Q2FsZW5kYXIiLCJzYW1lRGF5IiwibmV4dERheSIsIm5leHRXZWVrIiwibGFzdERheSIsImxhc3RXZWVrIiwic2FtZUVsc2UiLCJkZWZhdWx0TG9uZ0RhdGVGb3JtYXQiLCJMVFMiLCJMVCIsIkwiLCJMTCIsIkxMTCIsIkxMTEwiLCJkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSIsImRlZmF1bHRSZWxhdGl2ZVRpbWUiLCJmdXR1cmUiLCJwYXN0IiwibW0iLCJoaCIsImRkIiwiTU0iLCJ5eSIsIm1hdGNoMSIsIm1hdGNoMiIsIm1hdGNoMyIsIm1hdGNoNCIsIm1hdGNoNiIsIm1hdGNoMXRvMiIsIm1hdGNoM3RvNCIsIm1hdGNoNXRvNiIsIm1hdGNoMXRvMyIsIm1hdGNoMXRvNCIsIm1hdGNoMXRvNiIsIm1hdGNoVW5zaWduZWQiLCJtYXRjaFNpZ25lZCIsIm1hdGNoVGltZXN0YW1wIiwibWF0Y2hXb3JkIiwiZGVmYXVsdExvY2FsZU1vbnRocyIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsInBhcnNlVHdvRGlnaXRZZWFyIiwiZ2V0U2V0WWVhciIsImRlZmF1bHRMb2NhbGVXZWVrIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4iLCJrSW5wdXQiLCJfaXNQbSIsInBvczEiLCJwb3MyIiwiZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UiLCJnZXRTZXRIb3VyIiwiZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIm1lcmlkaWVtUGFyc2UiLCJwcm90b3R5cGVNaW4iLCJwcm90b3R5cGVNYXgiLCJpc29XZWVrWWVhciIsImdldFNldERheU9mTW9udGgiLCJnZXRTZXRNaW51dGUiLCJnZXRTZXRTZWNvbmQiLCJnZXRTZXRNaWxsaXNlY29uZCIsImlzb1dlZWtzIiwiaXNvV2Vla3NJblllYXIiLCJpc0RTVCIsInpvbmVBYmJyIiwiem9uZU5hbWUiLCJkYXRlcyIsImlzRFNUU2hpZnRlZCIsInByb3RvJDEiLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwibGFuZ0RhdGEiLCJhc01pbGxpc2Vjb25kcyIsImFzTWludXRlcyIsImFzSG91cnMiLCJhc0RheXMiLCJhc1dlZWtzIiwiYXNNb250aHMiLCJhc1llYXJzIiwicHJvdG8kMiIsInRvSXNvU3RyaW5nIiwidmVyc2lvbiIsInJlbGF0aXZlVGltZVJvdW5kaW5nIiwicmVsYXRpdmVUaW1lVGhyZXNob2xkIiwicmVxIiwiUGlrYWRheSIsImhhc01vbWVudCIsImhhc0V2ZW50TGlzdGVuZXJzIiwic3RvIiwiYWRkRXZlbnQiLCJkZXRhY2hFdmVudCIsImNuIiwiaXNXZWVrZW5kIiwic2V0VG9TdGFydE9mRGF5Iiwic2V0SG91cnMiLCJjb21wYXJlRGF0ZXMiLCJvdmVyd3JpdGUiLCJoYXNQcm9wIiwiY3JlYXRlRXZlbnRPYmplY3QiLCJhZGp1c3RDYWxlbmRhciIsInJlcG9zaXRpb24iLCJkZWZhdWx0RGF0ZSIsInNldERlZmF1bHREYXRlIiwiZmlyc3REYXkiLCJmb3JtYXRTdHJpY3QiLCJtaW5EYXRlIiwibWF4RGF0ZSIsInllYXJSYW5nZSIsInNob3dXZWVrTnVtYmVyIiwicGlja1dob2xlV2VlayIsIm1pblllYXIiLCJtYXhZZWFyIiwibWluTW9udGgiLCJtYXhNb250aCIsInN0YXJ0UmFuZ2UiLCJlbmRSYW5nZSIsImlzUlRMIiwieWVhclN1ZmZpeCIsInNob3dNb250aEFmdGVyWWVhciIsInNob3dEYXlzSW5OZXh0QW5kUHJldmlvdXNNb250aHMiLCJlbmFibGVTZWxlY3Rpb25EYXlzSW5OZXh0QW5kUHJldmlvdXNNb250aHMiLCJudW1iZXJPZk1vbnRocyIsIm1haW5DYWxlbmRhciIsImJsdXJGaWVsZE9uU2VsZWN0IiwiaTE4biIsInByZXZpb3VzTW9udGgiLCJuZXh0TW9udGgiLCJ0aGVtZSIsIm9uU2VsZWN0Iiwib25PcGVuIiwib25DbG9zZSIsIm9uRHJhdyIsInJlbmRlckRheU5hbWUiLCJyZW5kZXJEYXkiLCJhcmlhU2VsZWN0ZWQiLCJpc0VtcHR5IiwiaXNUb2RheSIsImlzU2VsZWN0ZWQiLCJoYXNFdmVudCIsImlzSW5SYW5nZSIsImlzU3RhcnRSYW5nZSIsImlzRW5kUmFuZ2UiLCJyZW5kZXJXZWVrIiwib25lamFuIiwicmVuZGVyUm93IiwiaXNSb3dTZWxlY3RlZCIsInJlbmRlckJvZHkiLCJyb3dzIiwicmVuZGVySGVhZCIsInJlbmRlclRpdGxlIiwiaW5zdGFuY2UiLCJyZWZZZWFyIiwicmFuZElkIiwibW9udGhIdG1sIiwieWVhckh0bWwiLCJfbyIsImlzTWluWWVhciIsImlzTWF4WWVhciIsInJlbmRlclRhYmxlIiwiX29uTW91c2VEb3duIiwiX3YiLCJzcmNFbGVtZW50IiwicHJldk1vbnRoIiwic2V0RGF0ZSIsIl9jIiwiX29uQ2hhbmdlIiwiZ290b01vbnRoIiwiZ290b1llYXIiLCJfb25LZXlDaGFuZ2UiLCJpc1Zpc2libGUiLCJhZGp1c3REYXRlIiwiX29uSW5wdXRDaGFuZ2UiLCJmaXJlZEJ5IiwiX29uSW5wdXRGb2N1cyIsIl9vbklucHV0Q2xpY2siLCJfb25JbnB1dEJsdXIiLCJwRWwiLCJfYiIsIl9vbkNsaWNrIiwib25jaGFuZ2UiLCJkZWZEYXRlIiwiZ290b0RhdGUiLCJkaXNhYmxlV2Vla2VuZHMiLCJkaXNhYmxlRGF5Rm4iLCJub20iLCJzZXRNaW5EYXRlIiwic2V0TWF4RGF0ZSIsInRvRGF0ZVN0cmluZyIsImdldE1vbWVudCIsInNldE1vbWVudCIsInByZXZlbnRPblNlbGVjdCIsImRyYXciLCJuZXdDYWxlbmRhciIsImNhbGVuZGFycyIsImZpcnN0VmlzaWJsZURhdGUiLCJsYXN0VmlzaWJsZURhdGUiLCJ2aXNpYmxlRGF0ZSIsImFkanVzdENhbGVuZGFycyIsIm5ld0RheSIsImRpZmZlcmVuY2UiLCJnb3RvVG9kYXkiLCJzZXRTdGFydFJhbmdlIiwic2V0RW5kUmFuZ2UiLCJfeSIsIl9tIiwicmVuZGVyIiwiYWRqdXN0UG9zaXRpb24iLCJ2aWV3cG9ydFdpZHRoIiwidmlld3BvcnRIZWlnaHQiLCJjbGllbnRSZWN0IiwieWVhck9mUHJldmlvdXNNb250aCIsInllYXJPZk5leHRNb250aCIsImRheXNJblByZXZpb3VzTW9udGgiLCJjZWxscyIsImlzV2Vla1NlbGVjdGVkIiwiZGF5TnVtYmVyIiwibW9udGhOdW1iZXIiLCJ5ZWFyTnVtYmVyIiwiZGF5Q29uZmlnIiwicGlrYWRheSIsIkF1dG9jb21wbGV0ZSIsInN1Z2dlc3Rpb25zIiwiYmFkUXVlcmllcyIsInRpbWVvdXRJZCIsImNhY2hlZFJlc3BvbnNlIiwib25DaGFuZ2VUaW1lb3V0Iiwib25DaGFuZ2UiLCJzdWdnZXN0aW9uc0NvbnRhaW5lciIsIm5vU3VnZ2VzdGlvbnNDb250YWluZXIiLCJzdWdnZXN0aW9uIiwiaGludCIsImhpbnRWYWx1ZSIsImluaXRpYWxpemUiLCJzZXRPcHRpb25zIiwiX2xvb2t1cEZpbHRlciIsIm9yaWdpbmFsUXVlcnkiLCJxdWVyeUxvd2VyQ2FzZSIsIl90cmFuc2Zvcm1SZXN1bHQiLCJfZm9ybWF0UmVzdWx0IiwidXRpbHMiLCJlc2NhcGVSZWdFeENoYXJzIiwiX2Zvcm1hdEdyb3VwIiwiY2F0ZWdvcnkiLCJjcmVhdGVOb2RlIiwiY29udGFpbmVyQ2xhc3MiLCJFU0MiLCJUQUIiLCJSRVRVUk4iLCJMRUZUIiwiVVAiLCJSSUdIVCIsIkRPV04iLCJhdXRvU2VsZWN0Rmlyc3QiLCJzZXJ2aWNlVXJsIiwibG9va3VwIiwibWluQ2hhcnMiLCJtYXhIZWlnaHQiLCJkZWZlclJlcXVlc3RCeSIsImZvcm1hdFJlc3VsdCIsImZvcm1hdEdyb3VwIiwiZGVsaW1pdGVyIiwibm9DYWNoZSIsIm9uU2VhcmNoU3RhcnQiLCJvblNlYXJjaENvbXBsZXRlIiwib25TZWFyY2hFcnJvciIsInByZXNlcnZlSW5wdXQiLCJ0YWJEaXNhYmxlZCIsImN1cnJlbnRSZXF1ZXN0IiwidHJpZ2dlclNlbGVjdE9uVmFsaWRJbnB1dCIsInByZXZlbnRCYWRRdWVyaWVzIiwibG9va3VwRmlsdGVyIiwicGFyYW1OYW1lIiwidHJhbnNmb3JtUmVzdWx0Iiwic2hvd05vU3VnZ2VzdGlvbk5vdGljZSIsIm5vU3VnZ2VzdGlvbk5vdGljZSIsImZvcmNlRml4UG9zaXRpb24iLCJzdWdnZXN0aW9uU2VsZWN0b3IiLCJhY3RpdmF0ZSIsImJsdXJUaW1lb3V0SWQiLCJmaXhQb3NpdGlvbkNhcHR1cmUiLCJmaXhQb3NpdGlvbiIsIm9uS2V5UHJlc3MiLCJvbktleVVwIiwib25CbHVyIiwib25Gb2N1cyIsIm9uVmFsdWVDaGFuZ2UiLCJhYm9ydEFqYXgiLCJzdXBwbGllZE9wdGlvbnMiLCJ2ZXJpZnlTdWdnZXN0aW9uc0Zvcm1hdCIsInZhbGlkYXRlT3JpZW50YXRpb24iLCJtYXgtaGVpZ2h0Iiwiei1pbmRleCIsImNsZWFyQ2FjaGUiLCJjbGVhciIsIiRjb250YWluZXIiLCJjb250YWluZXJQYXJlbnQiLCJjb250YWluZXJIZWlnaHQiLCJ2aWV3UG9ydEhlaWdodCIsInRvcE92ZXJmbG93IiwiYm90dG9tT3ZlcmZsb3ciLCJwYXJlbnRPZmZzZXREaWZmIiwiaXNDdXJzb3JBdEVuZCIsInZhbExlbmd0aCIsIm9uSGludCIsInNlbGVjdEhpbnQiLCJtb3ZlVXAiLCJtb3ZlRG93biIsInN1Z2dlc3QiLCJmaW5kQmVzdEhpbnQiLCJxdWVyeSIsImdldFF1ZXJ5Iiwib25JbnZhbGlkYXRlU2VsZWN0aW9uIiwiaXNFeGFjdE1hdGNoIiwiZ2V0U3VnZ2VzdGlvbnMiLCJnZXRTdWdnZXN0aW9uc0xvY2FsIiwibG9va3VwTGltaXQiLCJxIiwiY2FjaGVLZXkiLCJpZ25vcmVQYXJhbXMiLCJpc0JhZFF1ZXJ5IiwicHJvY2Vzc1Jlc3BvbnNlIiwib25IaWRlIiwic2lnbmFsSGludCIsImdyb3VwQnkiLCJjbGFzc1NlbGVjdGVkIiwiYmVmb3JlUmVuZGVyIiwiY3VycmVudENhdGVnb3J5IiwiYWRqdXN0Q29udGFpbmVyV2lkdGgiLCJub1N1Z2dlc3Rpb25zIiwiYmVzdE1hdGNoIiwiZm91bmRNYXRjaCIsImFjdGl2ZUl0ZW0iLCJhZGp1c3RTY3JvbGwiLCJ1cHBlckJvdW5kIiwibG93ZXJCb3VuZCIsImhlaWdodERlbHRhIiwiZ2V0VmFsdWUiLCJvblNlbGVjdENhbGxiYWNrIiwiZGlzcG9zZSIsImRldmJyaWRnZUF1dG9jb21wbGV0ZSIsImlucHV0RWxlbWVudCIsImF1dG9jb21wbGV0ZSIsIkhUTUxFbGVtZW50IiwiYmFyT25DbHMiLCJyZXNpemVEZWJvdW5jZSIsImNzc0d1cnUiLCJpbXBhY3QiLCJfY2hhaW4iLCJzY3JvbGxlciIsImF1dG9VcGRhdGUiLCJfZXZlbnRIYW5kbGVycyIsImJhciIsImRyYWdnaW5nQ2xzIiwiX3BvczAiLCJjbGlwcGVyIiwiY2xpcHBlck9uU2Nyb2xsIiwiZXZhbCIsIm9wcG9zIiwiY3Jvc3NQb3MiLCJjcm9zc09wUG9zIiwiY3Jvc3NTaXplIiwiY3Jvc3NNaW5TaXplIiwiY3Jvc3NNYXhTaXplIiwiY2xpZW50IiwiY3Jvc3NDbGllbnQiLCJzY3JvbGxFZGdlIiwiY3Jvc3NPZmZzZXQiLCJvZmZzZXRQb3MiLCJzY3JvbGxTaXplIiwiYmFyb24iLCJfZGVib3VuY2UiLCJfZGlzcG9zZWQiLCJiYXJNaW5TaXplIiwiYmFyVG9wTGltaXQiLCJDIiwic2Nyb2xsaW5nQ2xzIiwicnBvcyIsImJhck9uIiwicmVzaXplIiwiX3NldENyb3NzU2l6ZXMiLCJ1cGRhdGVQb3NpdGlvbnMiLCJfZHVtYkNzcyIsIm1zT3ZlcmZsb3dTdHlsZSIsIm1pblZpZXciLCJvdXRzaWRlIiwiaW5pdFdlYktpdFdoZWVsRXZlbnQiLCJsaW1pdGVyIiwiY2xpY2thYmxlIiwiaW5zaWRlIiwiZ3JhZCIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJNb3pNdXRhdGlvbk9ic2VydmVyIiwiX2F1IiwiX29ic2VydmVyIiwic3VidHJlZSIsInNjcmVlbiIsImJhY2t3YXJkIiwicnVMYW5nIiwiJGV2ZW50c0NvbnRlbnQiLCJsaW5rIiwic3VibWl0Rm9ybSIsImZvcm1EYXRhIiwiJGZvcm0iLCIkZmllbGQiLCJyZWRpcmVjdCIsInJlbG9hZCIsIkZvcm1EYXRhIiwidmFsaWRhdGlvbiIsImRhdGVSYW5nZSIsImRhdGVGcm9tIiwidGltZXN0YW1wRnJvbSIsImRhdGVUbyIsInRpbWVzdGFtcFRvIiwiZGF0ZVZhbHVlIiwidGltZXN0YW1wVmFsdWUiLCJmaWxlbmFtZSIsInN1YnRpdGxlIiwiZmlsZUlucHV0IiwiJGZvcm1Db250cm9sIiwiJGZpbGVEaXNwbGF5QXJlYSIsIiRub3RpZmljYXRpb25zQXJlYSIsImZpbGVzIiwiaW1hZ2VUeXBlIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsInJlYWRBc0RhdGFVUkwiLCIkcmVnaW9uc0ZpZWxkIiwiJHJlZ2lvbklkRmllbGQiLCIkY2l0aWVzRmllbGQiLCIkY2l0eUlkRmllbGQiLCJzZWxlY3RlZFJlZ2lvbiIsInNlbGVjdGVkQ2l0eSIsImhpZGVFdmVudCIsImNsb3Nlc3RFbCIsImhpZGVGdW5jIiwib2ZmY2FudmFzT3ZlcmxheSIsIm9mZmNhbnZhcyIsImFsdFVybCIsIm1vZGFsQ29udGVudFNlbGVjdG9yIiwiJG1vZGFsQ29udGVudCIsIjExNzAiLCI2NDAiLCIkc3dpcGVyIiwiZWxlbWVudElkIl0sIm1hcHBpbmdzIjoiQUFFQSxTQUFBQSxnQkFBQUMsR0FDQSxhQUNBLElBQUFDLEVBQUFDLFNBQUFDLGVBQUEsbUJBQ0FDLEVBQUFILEVBQUFJLFFBQUFDLFNBRUFDLFlBQUEsSUFBQVAsRUFBQVEsSUFBQVAsR0FDQVEsT0FBQVIsRUFBQUksUUFBQUssVUFBQUMsTUFBQSxLQUNBQyxLQUFBWCxFQUFBSSxRQUFBUSxRQUNBQyxVQUFBLHlCQUdBQyxVQUFBQyxRQUFBLGNBRUEsSUFBQUMsRUFBQWpCLEVBQUFrQixzQkFBQUMsWUFDQSx1TEFHQUMsRUFBQUMsS0FBQWpCLEdBQ0FrQixPQUFBLE1BQ0FDLE9BQUEsRUFDQUMsU0FBQSxTQUNBQyxLQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLFNBQ0FELEVBQUFDLFFBQUFDLFFBQUEsU0FBQUMsR0FFQSxJQUFBQyxJQUFBLEtBQUEsSUFDQUMsRUFBQSxHQUNBQyxHQUNBQyxLQUFBLFlBRUFDLGNBQ0EsRUFBQSxJQUFBLElBQUEsTUFLQUwsRUFBQUksTUFBQSxTQUFBSixFQUFBSSxPQUNBSCxJQUFBLEtBQUEsS0FDQUMsRUFBQSw0QkFDQUMsR0FDQUMsS0FBQSxZQUNBQyxjQUNBLEVBQUEsSUFBQSxJQUFBLFFBS0EsSUFBQUMsRUFBQSxJQUFBbkMsRUFBQW9DLFVBQUFQLEVBQUFRLFFBQ0FDLFlBQUFULEVBQUFVLEtBQ0FDLFlBQUFYLEVBQUFVLE9BRUFFLGlCQUFBLEdBQ0FDLFdBQUF6QixFQUNBYSxXQUFBQSxFQUNBYSxZQUFBLEVBQ0FYLFVBQUFBLElBR0FHLEVBQUFTLFdBQUFDLElBQUEs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bUJBQUE2RCxhQUNBN0QsRUFBQSxvQkFBQTRELFdBRUE1RCxFQUFBLHFCQUFBMEUsTUFBQSxXQUNBazBDLFFBQUFnYSxVQUFBLEtBQUEsS0FBQTV5RCxFQUFBa0YsTUFBQW9rQixLQUFBLFNBQ0EsSUFBQTg5RixFQUFBbmlILE9BQUF3bUIsU0FBQUQsS0FRQSxPQVBBeHJCLEVBQUFvbkgsR0FBQXRsSCxPQUFBLEdBQ0E5QixFQUFBLGNBQUEyK0IsU0FDQWhCLFVBQUEzOUIsRUFBQUEsRUFBQXNwQixLQUFBcGtCLEtBQUEsU0FBQTZrQyxTQUFBbGlCLElBQUEsSUFDQSxNQUlBIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbnRhY3RzTWFwO1xuXG5mdW5jdGlvbiBpbml0Q29udGFjdHNNYXAoeW1hcHMpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIG1hcEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnanMtY29udGFjdHMtbWFwJyksXG4gICAgICAgIG1hcERhdGFVcmwgPSBtYXBFbGVtZW50LmRhdGFzZXQubWFwRGF0YTtcblxuICAgIGNvbnRhY3RzTWFwID0gbmV3IHltYXBzLk1hcChtYXBFbGVtZW50LCB7XG4gICAgICAgIGNlbnRlcjogbWFwRWxlbWVudC5kYXRhc2V0Lm1hcENvb3Jkcy5zcGxpdCgnLCcpLFxuICAgICAgICB6b29tOiBtYXBFbGVtZW50LmRhdGFzZXQubWFwWm9vbSxcbiAgICAgICAgY29udHJvbHM6IFsnc21hbGxNYXBEZWZhdWx0U2V0J11cbiAgICB9KTtcblxuICAgIGNvbnRhY3RzTWFwLmJlaGF2aW9ycy5kaXNhYmxlKCdzY3JvbGxab29tJyk7XG5cbiAgICB2YXIgY29tbW9uQ29udGVudCA9IHltYXBzLnRlbXBsYXRlTGF5b3V0RmFjdG9yeS5jcmVhdGVDbGFzcyhcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJjb250YWN0cy1tYXAtYmFsbG9vbiB7eyBwcm9wZXJ0aWVzLmljb25DbGFzc2VzIH19IHt7IHByb3BlcnRpZXMuaWNvbkhvdmVyQ2xhc3NlcyB9fVwiPjxkaXYgY2xhc3M9XCJjb250YWN0cy1tYXAtYmFsbG9vbi1jb250ZW50XCI+e3sgcHJvcGVydGllcy5pY29uQ29udGVudCB9fTwvZGl2PjwvZGl2PidcbiAgICApO1xuXG4gICAgJC5hamF4KG1hcERhdGFVcmwsIHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgY2FjaGU6IGZhbHNlLFxuICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgfSkuZG9uZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YS5vYmplY3RzKSB7XG4gICAgICAgICAgICBkYXRhLm9iamVjdHMuZm9yRWFjaChmdW5jdGlvbiAob2JqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaWNvbk9mZnNldCA9IFstMTAwLCAtNzBdLFxuICAgICAgICAgICAgICAgICAgICBpY29uQ2xhc3NlcyA9ICcnLFxuICAgICAgICAgICAgICAgICAgICBpY29uU2hhcGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUmVjdGFuZ2xlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vINCf0YDRj9C80L7Rg9Cz0L7Qu9GM0L3QuNC6INC+0L/QuNGB0YvQstCw0LXRgtGB0Y8g0LIg0LLQuNC00LUg0LTQstGD0YUg0YLQvtGH0LXQuiAtINCy0LXRgNGF0L3QtdC5INC70LXQstC+0Lkg0Lgg0L3QuNC20L3QtdC5INC/0YDQsNCy0L7QuS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWzAsIDBdLCBbMjAwLCA3MF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vIExhcmdlIGJsdWUgUGxhY2VtYXJrIDI2MHgxMzBweCAtIHR5cGU6IFwibWFpblwiXG4gICAgICAgICAgICAgICAgaWYgKG9iamVjdC50eXBlICYmIG9iamVjdC50eXBlID09PSAnbWFpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWNvbk9mZnNldCA9IFstMTMwLCAtMTMwXTtcbiAgICAgICAgICAgICAgICAgICAgaWNvbkNsYXNzZXMgPSAnY29udGFjdHMtbWFwLWJhbGxvb24tbWFpbic7XG4gICAgICAgICAgICAgICAgICAgIGljb25TaGFwZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdSZWN0YW5nbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbMCwgMF0sIFsyNjAsIDEzMF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbXlQbGFjZW1hcmsgPSBuZXcgeW1hcHMuUGxhY2VtYXJrKG9iamVjdC5jb29yZHMsIHtcbiAgICAgICAgICAgICAgICAgICAgaWNvbkNvbnRlbnQ6IG9iamVjdC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBoaW50Q29udGVudDogb2JqZWN0Lm5hbWVcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGljb25Ib3ZlckNsYXNzZXM6ICcnLFxuICAgICAgICAgICAgICAgICAgICBpY29uTGF5b3V0OiBjb21tb25Db250ZW50LFxuICAgICAgICAgICAgICAgICAgICBpY29uT2Zmc2V0OiBpY29uT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBoYXNCYWxsb29uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaWNvblNoYXBlOiBpY29uU2hhcGVcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG15UGxhY2VtYXJrLnByb3BlcnRpZXMuc2V0KCdpY29uQ2xhc3NlcycsIGljb25DbGFzc2VzKTtcblxuICAgICAgICAgICAgICAgIG15UGxhY2VtYXJrLmV2ZW50cy5hZGQoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBteVBsYWNlbWFyay5wcm9wZXJ0aWVzLnNldCgnaWNvbkhvdmVyQ2xhc3NlcycsICdjb250YWN0cy1tYXAtYmFsbG9vbi1ob3ZlcicpXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBteVBsYWNlbWFyay5ldmVudHMuYWRkKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbXlQbGFjZW1hcmsucHJvcGVydGllcy5zZXQoJ2ljb25Ib3ZlckNsYXNzZXMnLCAnJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0LmRlc2NyaXB0aW9uLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBteVBsYWNlbWFyay5ldmVudHMuYWRkKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0U2lkZU1vZGFsKG9iamVjdC5kZXNjcmlwdGlvbiwgJ3NpZGUtbW9kYWwtbWFwLW9iamVjdCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29udGFjdHNNYXAuZ2VvT2JqZWN0cy5hZGQobXlQbGFjZW1hcmspO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KS5mYWlsKGZ1bmN0aW9uKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICBhbGVydCgn0J7RiNC40LHQutCwINC30LDQs9GA0YPQt9C60Lgg0LTQsNC90L3Ri9GFLiDQn9C+0LbQsNC70YPQudGB0YLQsCwg0L/QvtC/0YDQvtCx0YPQudGC0LUg0L/QtdGA0LXQt9Cw0LPRgNGD0LfQuNGC0Ywg0YHRgtGA0LDQvdC40YbRgy4nKTtcbiAgICAgICAgY29uc29sZS5sb2coanFYSFIpO1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvclRocm93bik7XG4gICAgfSk7XG59IiwiZnVuY3Rpb24gaW5pdFNpZGVNb2RhbFdyYXBwZXIoY2xhc3NOYW1lcykge1xuICAgIHZhciAkbW9kYWxXcmFwcGVyID0gJChcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJzaWRlLW1vZGFsLW92ZXJsYXlcIj4nICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2lkZS1tb2RhbCAnICsgY2xhc3NOYW1lcyArICdcIj4nICtcbiAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIiNcIiBjbGFzcz1cInNpZGUtbW9kYWwtY2xvc2VcIiBkYXRhLXNpZGUtbW9kYWwtY2xvc2U+PC9hPicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2lkZS1tb2RhbC1vdmVyZmxvd1wiPicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgJzwvZGl2PidcbiAgICApO1xuXG4gICAgdmFyICRvdmVybGF5ID0gJCgnYm9keScpLmNoaWxkcmVuKCcuc2lkZS1tb2RhbC1vdmVybGF5Jyk7XG5cbiAgICBpZiAoJG92ZXJsYXkubGVuZ3RoKSB7XG4gICAgICAgICRvdmVybGF5LnJlbW92ZSgpO1xuICAgIH1cblxuICAgICQoJ2JvZHknKS5hcHBlbmQoJG1vZGFsV3JhcHBlcik7XG5cbiAgICByZXR1cm4gJCgnYm9keScpLmNoaWxkcmVuKCcuc2lkZS1tb2RhbC1vdmVybGF5Jyk7XG59XG5cbmZ1bmN0aW9uIGluaXRTaWRlTW9kYWwoY29udGVudCwgY2xhc3NOYW1lcywgcHJldmVudE92ZXJsYXlDbG9zZSwgcHJldmVudEVzY0Nsb3NlKSB7XG4gICAgdmFyICR3cmFwcGVyID0gaW5pdFNpZGVNb2RhbFdyYXBwZXIoY2xhc3NOYW1lcyk7XG4gICAgJHdyYXBwZXIuZmluZCgnLnNpZGUtbW9kYWwtb3ZlcmZsb3cnKS5odG1sKGNvbnRlbnQpO1xuICAgICR3cmFwcGVyLmZpbmQoJ1tkYXRhLW1hc2tlZC1pbnB1dF0nKS5tYXNrZWRpbnB1dCgpO1xuICAgICR3cmFwcGVyLmZpbmQoJ1tkYXRhLXZhbGlkYXRlXScpLmZvcm1WYWxpZGF0aW9uKCk7XG4gICAgJHdyYXBwZXIuZmluZCgnLmpzLWlucHV0LWZpbGUnKS5pbnB1dEZpbGUoKTtcbiAgICAkd3JhcHBlci5maW5kKCcuanMtaW5wdXQtcGhvdG8nKS5pbnB1dFBob3RvKCk7XG4gICAgJHdyYXBwZXIuZmluZCgnLmpzLWRhdGVwaWNrZXInKS5kYXRlUGlja2VyKCk7XG4gICAgJHdyYXBwZXIuZmluZCgnLmpzLWlucHV0LXJlZ2lvbi1jaXR5JykuaW5wdXRSZWdpb25DaXR5KCk7XG4gICAgJHdyYXBwZXIuZmluZCgnW2RhdGEtZm9ybS1hamF4XScpLmZvcm1BamF4KCk7XG4gICAgJHdyYXBwZXIuZmluZCgnLmpzLWF2YXRhci1jcm9wJykuYXZhdGFyQ3JvcCgpO1xuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICR3cmFwcGVyLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgLy8gRm9jdXMgb24gZmlyc3QgaW5wdXQgaW4gbW9kYWxcbiAgICAgICAgJHdyYXBwZXIuZmluZCgnaW5wdXQnKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgIGlmICghcHJldmVudE92ZXJsYXlDbG9zZSkge1xuICAgICAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJ2JvZHknLCBoaWRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcHJldmVudEVzY0Nsb3NlKSB7XG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vbigna2V5dXAnLCBoaWRlKTtcbiAgICAgICAgfVxuICAgIH0sIDIwMCk7XG5cbiAgICB2YXIgaGlkZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKCAhJChlLnRhcmdldCkuY2xvc2VzdCgnLnNpZGUtbW9kYWwnKS5sZW5ndGggJiYgISQoZS50YXJnZXQpLmlzKCdpbnB1dCwgbGFiZWwnKSAmJiAhJChlLnRhcmdldCkuaXMoJ2JvZHknKSApIHx8XG4gICAgICAgICAgICAoIGUud2hpY2ggPT09IDI3IClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICAkd3JhcHBlci5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vZmYoJ2NsaWNrJywgJ2JvZHknLCBoaWRlKTtcblxuICAgICAgICAgICAgaWYgKCFwcmV2ZW50RXNjQ2xvc2UpIHtcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vZmYoJ2tleXVwJywgaGlkZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJHdyYXBwZXIuZmluZCgnW2RhdGEtc2lkZS1tb2RhbC1jbG9zZV0nKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghcHJldmVudE92ZXJsYXlDbG9zZSkge1xuICAgICAgICAgICAgJChkb2N1bWVudCkub2ZmKCdjbGljaycsICdib2R5JywgaGlkZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXByZXZlbnRFc2NDbG9zZSkge1xuICAgICAgICAgICAgJChkb2N1bWVudCkub2ZmKCdrZXl1cCcsIGhpZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgJHdyYXBwZXIucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG59XG5cbiQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdbZGF0YS1zaWRlLW1vZGFsXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIHVybCA9ICQodGhpcykuYXR0cignaHJlZicpLFxuICAgICAgICBhbHRVcmwgPSAkKHRoaXMpLmRhdGEoJ3NpZGUtbW9kYWwtdXJsJyksXG4gICAgICAgIG1vZGFsQ29udGVudFNlbGVjdG9yID0gJCh0aGlzKS5kYXRhKCdzaWRlLW1vZGFsJyksXG4gICAgICAgIGNsYXNzTmFtZXMgPSAkKHRoaXMpLmRhdGEoJ3NpZGUtbW9kYWwtY2xhc3MnKSxcbiAgICAgICAgcHJldmVudE92ZXJsYXlDbG9zZSA9ICQodGhpcykuaXMoJ1tkYXRhLXNpZGUtbW9kYWwtcHJldmVudC1vdmVybGF5LWNsb3NlXScpLFxuICAgICAgICBwcmV2ZW50RXNjQ2xvc2UgPSAkKHRoaXMpLmlzKCdbZGF0YS1zaWRlLW1vZGFsLXByZXZlbnQtZXNjLWNsb3NlXScpO1xuXG4gICAgaWYgKG1vZGFsQ29udGVudFNlbGVjdG9yKSB7XG4gICAgICAgICRtb2RhbENvbnRlbnQgPSAkKG1vZGFsQ29udGVudFNlbGVjdG9yKS5jbG9uZSgpO1xuICAgICAgICBpbml0U2lkZU1vZGFsKCRtb2RhbENvbnRlbnQsIGNsYXNzTmFtZXMsIHByZXZlbnRPdmVybGF5Q2xvc2UsIHByZXZlbnRFc2NDbG9zZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgJCgnYm9keScpLnNwaW4oJ2xhcmdlJywgJyMwMDAnKTtcblxuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdXJsOiBhbHRVcmwgfHwgdXJsLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGNhY2hlOiBmYWxzZVxuICAgICAgICB9KS5kb25lKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAkbW9kYWxDb250ZW50ID0gZGF0YTtcbiAgICAgICAgICAgIGluaXRTaWRlTW9kYWwoJG1vZGFsQ29udGVudCwgY2xhc3NOYW1lcywgcHJldmVudE92ZXJsYXlDbG9zZSwgcHJldmVudEVzY0Nsb3NlKTtcbiAgICAgICAgfSkuZmFpbChmdW5jdGlvbihqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgIGFsZXJ0KCfQntGI0LjQsdC60LAg0LfQsNCz0YDRg9C30LrQuCDQtNCw0L3QvdGL0YUuINCf0L7QttCw0LvRg9C50YHRgtCwLCDQv9C+0L/RgNC+0LHRg9C50YLQtSDQv9C10YDQtdC30LDQs9GA0YPQt9C40YLRjCDRgdGC0YDQsNC90LjRhtGDLicpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coanFYSFIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3JUaHJvd24pO1xuICAgICAgICB9KS5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCgnYm9keScpLnNwaW4oZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59KTsiLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuMi4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNy0wMy0yMFQxODo1OVpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuMi4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXG5cblx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZyxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgQXJyYXkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwiZnVuY3Rpb25cIjtcblx0fSxcblxuXHRpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9LFxuXG5cdGlzTnVtZXJpYzogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdFx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHRcdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdFx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdFx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvNjEyNVxuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHRET01FdmFsKCBjb2RlICk7XG5cdH0sXG5cblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3Milcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuXHQvLyBhcmd1bWVudHMuXG5cdHByb3h5OiBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdFx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRcdGNvbnRleHQgPSBmbjtcblx0XHRcdGZuID0gdG1wO1xuXHRcdH1cblxuXHRcdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdFx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdFx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHRcdH07XG5cblx0XHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0XHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRcdHJldHVybiBwcm94eTtcblx0fSxcblxuXHRub3c6IERhdGUubm93LFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuM1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTYtMDgtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0ZGlzYWJsZWRBbmNlc3RvciA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiAoXCJmb3JtXCIgaW4gZWxlbSB8fCBcImxhYmVsXCIgaW4gZWxlbSk7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuXHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRkaXNhYmxlZEFuY2VzdG9yKCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG52YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW1wbGUgc2VsZWN0b3IgdGhhdCBjYW4gYmUgZmlsdGVyZWQgZGlyZWN0bHksIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG5cdH1cblxuXHQvLyBDb21wbGV4IHNlbGVjdG9yLCBjb21wYXJlIHRoZSB0d28gc2V0cywgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdHF1YWxpZmllciA9IGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMgKTtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdCAmJiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcbiAgICAgICAgLy8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgaXQuXG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuICAgICAgICAgICAgZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIGpRdWVyeS50eXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgalF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBqUXVlcnkuY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsXG5cdFx0c2NhbGUgPSAxLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdGRvIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxuXHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXG5cdFx0fSB3aGlsZSAoXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xuXHRcdCk7XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBqUXVlcnkuaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgbm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggXCI+dGJvZHlcIiwgZWxlbSApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybWFyZ2luID0gKCAvXm1hcmdpbi8gKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwiYm94LXNpemluZzpib3JkZXItYm94O1wiICtcblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ0b3A6MSU7d2lkdGg6NTAlXCI7XG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gZGl2U3R5bGUubWFyZ2luTGVmdCA9PT0gXCIycHhcIjtcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCI7XG5cdFx0cGl4ZWxNYXJnaW5SaWdodFZhbCA9IGRpdlN0eWxlLm1hcmdpblJpZ2h0ID09PSBcIjRweFwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgcGl4ZWxNYXJnaW5SaWdodFZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7XCIgK1xuXHRcdFwicGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbE1hcmdpblJpZ2h0VmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcHJvcGVydHkgbWFwcGVkIGFsb25nIHdoYXQgalF1ZXJ5LmNzc1Byb3BzIHN1Z2dlc3RzIG9yIHRvXG4vLyBhIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eS5cbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciByZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXTtcblx0aWYgKCAhcmV0ICkge1xuXHRcdHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xuXHR9XG5cdHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcblx0dmFyIGksXG5cdFx0dmFsID0gMDtcblxuXHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0aWYgKCBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdGkgPSA0O1xuXG5cdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcblx0fSBlbHNlIHtcblx0XHRpID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgdmFsdWVJc0JvcmRlckJveCxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiZcblx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9IZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdGlmICggdmFsID09PSBcImF1dG9cIiApIHtcblx0XHR2YWwgPSBlbGVtWyBcIm9mZnNldFwiICsgbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICkgXTtcblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge1xuXHRcdFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXG5cdH0sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRqUXVlcnkucHJveHkoIHJlc3VsdC5zdG9wLCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmZyYXN0cnVjdHVyZS5odG1sI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC87XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0galF1ZXJ5Lm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgZG9jLCBkb2NFbGVtLCByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdHdpbiA9IGRvYy5kZWZhdWx0VmlldztcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcblx0XHR9O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuXHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRpZiAoICFub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7XG5cdFx0XHRcdHRvcDogcGFyZW50T2Zmc2V0LnRvcCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKSxcblx0XHRcdFx0bGVmdDogcGFyZW50T2Zmc2V0LmxlZnQgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMS0yMDE0IEZlbGl4IEduYXNzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9zcGluLmpzLm9yZy9cbiAqXG4gKiBFeGFtcGxlOlxuICAgIHZhciBvcHRzID0ge1xuICAgICAgbGluZXM6IDEyICAgICAgICAgICAgIC8vIFRoZSBudW1iZXIgb2YgbGluZXMgdG8gZHJhd1xuICAgICwgbGVuZ3RoOiA3ICAgICAgICAgICAgIC8vIFRoZSBsZW5ndGggb2YgZWFjaCBsaW5lXG4gICAgLCB3aWR0aDogNSAgICAgICAgICAgICAgLy8gVGhlIGxpbmUgdGhpY2tuZXNzXG4gICAgLCByYWRpdXM6IDEwICAgICAgICAgICAgLy8gVGhlIHJhZGl1cyBvZiB0aGUgaW5uZXIgY2lyY2xlXG4gICAgLCBzY2FsZTogMS4wICAgICAgICAgICAgLy8gU2NhbGVzIG92ZXJhbGwgc2l6ZSBvZiB0aGUgc3Bpbm5lclxuICAgICwgY29ybmVyczogMSAgICAgICAgICAgIC8vIFJvdW5kbmVzcyAoMC4uMSlcbiAgICAsIGNvbG9yOiAnIzAwMCcgICAgICAgICAvLyAjcmdiIG9yICNycmdnYmJcbiAgICAsIG9wYWNpdHk6IDEvNCAgICAgICAgICAvLyBPcGFjaXR5IG9mIHRoZSBsaW5lc1xuICAgICwgcm90YXRlOiAwICAgICAgICAgICAgIC8vIFJvdGF0aW9uIG9mZnNldFxuICAgICwgZGlyZWN0aW9uOiAxICAgICAgICAgIC8vIDE6IGNsb2Nrd2lzZSwgLTE6IGNvdW50ZXJjbG9ja3dpc2VcbiAgICAsIHNwZWVkOiAxICAgICAgICAgICAgICAvLyBSb3VuZHMgcGVyIHNlY29uZFxuICAgICwgdHJhaWw6IDEwMCAgICAgICAgICAgIC8vIEFmdGVyZ2xvdyBwZXJjZW50YWdlXG4gICAgLCBmcHM6IDIwICAgICAgICAgICAgICAgLy8gRnJhbWVzIHBlciBzZWNvbmQgd2hlbiB1c2luZyBzZXRUaW1lb3V0KClcbiAgICAsIHpJbmRleDogMmU5ICAgICAgICAgICAvLyBVc2UgYSBoaWdoIHotaW5kZXggYnkgZGVmYXVsdFxuICAgICwgY2xhc3NOYW1lOiAnc3Bpbm5lcicgIC8vIENTUyBjbGFzcyB0byBhc3NpZ24gdG8gdGhlIGVsZW1lbnRcbiAgICAsIHRvcDogJzUwJScgICAgICAgICAgICAvLyBjZW50ZXIgdmVydGljYWxseVxuICAgICwgbGVmdDogJzUwJScgICAgICAgICAgIC8vIGNlbnRlciBob3Jpem9udGFsbHlcbiAgICAsIHNoYWRvdzogZmFsc2UgICAgICAgICAvLyBXaGV0aGVyIHRvIHJlbmRlciBhIHNoYWRvd1xuICAgICwgaHdhY2NlbDogZmFsc2UgICAgICAgIC8vIFdoZXRoZXIgdG8gdXNlIGhhcmR3YXJlIGFjY2VsZXJhdGlvbiAobWlnaHQgYmUgYnVnZ3kpXG4gICAgLCBwb3NpdGlvbjogJ2Fic29sdXRlJyAgLy8gRWxlbWVudCBwb3NpdGlvbmluZ1xuICAgIH1cbiAgICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbycpXG4gICAgdmFyIHNwaW5uZXIgPSBuZXcgU3Bpbm5lcihvcHRzKS5zcGluKHRhcmdldClcbiAqL1xuOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXG4gIC8qIENvbW1vbkpTICovXG4gIGlmICh0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKVxuXG4gIC8qIEFNRCBtb2R1bGUgKi9cbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIGRlZmluZShmYWN0b3J5KVxuXG4gIC8qIEJyb3dzZXIgZ2xvYmFsICovXG4gIGVsc2Ugcm9vdC5TcGlubmVyID0gZmFjdG9yeSgpXG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCJcblxuICB2YXIgcHJlZml4ZXMgPSBbJ3dlYmtpdCcsICdNb3onLCAnbXMnLCAnTyddIC8qIFZlbmRvciBwcmVmaXhlcyAqL1xuICAgICwgYW5pbWF0aW9ucyA9IHt9IC8qIEFuaW1hdGlvbiBydWxlcyBrZXllZCBieSB0aGVpciBuYW1lICovXG4gICAgLCB1c2VDc3NBbmltYXRpb25zIC8qIFdoZXRoZXIgdG8gdXNlIENTUyBhbmltYXRpb25zIG9yIHNldFRpbWVvdXQgKi9cbiAgICAsIHNoZWV0IC8qIEEgc3R5bGVzaGVldCB0byBob2xkIHRoZSBAa2V5ZnJhbWUgb3IgVk1MIHJ1bGVzLiAqL1xuXG4gIC8qKlxuICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBlbGVtZW50cy4gSWYgbm8gdGFnIG5hbWUgaXMgZ2l2ZW4sXG4gICAqIGEgRElWIGlzIGNyZWF0ZWQuIE9wdGlvbmFsbHkgcHJvcGVydGllcyBjYW4gYmUgcGFzc2VkLlxuICAgKi9cbiAgZnVuY3Rpb24gY3JlYXRlRWwgKHRhZywgcHJvcCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnIHx8ICdkaXYnKVxuICAgICAgLCBuXG5cbiAgICBmb3IgKG4gaW4gcHJvcCkgZWxbbl0gPSBwcm9wW25dXG4gICAgcmV0dXJuIGVsXG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyBjaGlsZHJlbiBhbmQgcmV0dXJucyB0aGUgcGFyZW50LlxuICAgKi9cbiAgZnVuY3Rpb24gaW5zIChwYXJlbnQgLyogY2hpbGQxLCBjaGlsZDIsIC4uLiovKSB7XG4gICAgZm9yICh2YXIgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoYXJndW1lbnRzW2ldKVxuICAgIH1cblxuICAgIHJldHVybiBwYXJlbnRcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIG9wYWNpdHkga2V5ZnJhbWUgYW5pbWF0aW9uIHJ1bGUgYW5kIHJldHVybnMgaXRzIG5hbWUuXG4gICAqIFNpbmNlIG1vc3QgbW9iaWxlIFdlYmtpdHMgaGF2ZSB0aW1pbmcgaXNzdWVzIHdpdGggYW5pbWF0aW9uLWRlbGF5LFxuICAgKiB3ZSBjcmVhdGUgc2VwYXJhdGUgcnVsZXMgZm9yIGVhY2ggbGluZS9zZWdtZW50LlxuICAgKi9cbiAgZnVuY3Rpb24gYWRkQW5pbWF0aW9uIChhbHBoYSwgdHJhaWwsIGksIGxpbmVzKSB7XG4gICAgdmFyIG5hbWUgPSBbJ29wYWNpdHknLCB0cmFpbCwgfn4oYWxwaGEgKiAxMDApLCBpLCBsaW5lc10uam9pbignLScpXG4gICAgICAsIHN0YXJ0ID0gMC4wMSArIGkvbGluZXMgKiAxMDBcbiAgICAgICwgeiA9IE1hdGgubWF4KDEgLSAoMS1hbHBoYSkgLyB0cmFpbCAqICgxMDAtc3RhcnQpLCBhbHBoYSlcbiAgICAgICwgcHJlZml4ID0gdXNlQ3NzQW5pbWF0aW9ucy5zdWJzdHJpbmcoMCwgdXNlQ3NzQW5pbWF0aW9ucy5pbmRleE9mKCdBbmltYXRpb24nKSkudG9Mb3dlckNhc2UoKVxuICAgICAgLCBwcmUgPSBwcmVmaXggJiYgJy0nICsgcHJlZml4ICsgJy0nIHx8ICcnXG5cbiAgICBpZiAoIWFuaW1hdGlvbnNbbmFtZV0pIHtcbiAgICAgIHNoZWV0Lmluc2VydFJ1bGUoXG4gICAgICAgICdAJyArIHByZSArICdrZXlmcmFtZXMgJyArIG5hbWUgKyAneycgK1xuICAgICAgICAnMCV7b3BhY2l0eTonICsgeiArICd9JyArXG4gICAgICAgIHN0YXJ0ICsgJyV7b3BhY2l0eTonICsgYWxwaGEgKyAnfScgK1xuICAgICAgICAoc3RhcnQrMC4wMSkgKyAnJXtvcGFjaXR5OjF9JyArXG4gICAgICAgIChzdGFydCt0cmFpbCkgJSAxMDAgKyAnJXtvcGFjaXR5OicgKyBhbHBoYSArICd9JyArXG4gICAgICAgICcxMDAle29wYWNpdHk6JyArIHogKyAnfScgK1xuICAgICAgICAnfScsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aClcblxuICAgICAgYW5pbWF0aW9uc1tuYW1lXSA9IDFcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZVxuICB9XG5cbiAgLyoqXG4gICAqIFRyaWVzIHZhcmlvdXMgdmVuZG9yIHByZWZpeGVzIGFuZCByZXR1cm5zIHRoZSBmaXJzdCBzdXBwb3J0ZWQgcHJvcGVydHkuXG4gICAqL1xuICBmdW5jdGlvbiB2ZW5kb3IgKGVsLCBwcm9wKSB7XG4gICAgdmFyIHMgPSBlbC5zdHlsZVxuICAgICAgLCBwcFxuICAgICAgLCBpXG5cbiAgICBwcm9wID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSlcbiAgICBpZiAoc1twcm9wXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcHJvcFxuICAgIGZvciAoaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcHAgPSBwcmVmaXhlc1tpXStwcm9wXG4gICAgICBpZiAoc1twcF0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIHBwXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgbXVsdGlwbGUgc3R5bGUgcHJvcGVydGllcyBhdCBvbmNlLlxuICAgKi9cbiAgZnVuY3Rpb24gY3NzIChlbCwgcHJvcCkge1xuICAgIGZvciAodmFyIG4gaW4gcHJvcCkge1xuICAgICAgZWwuc3R5bGVbdmVuZG9yKGVsLCBuKSB8fCBuXSA9IHByb3Bbbl1cbiAgICB9XG5cbiAgICByZXR1cm4gZWxcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWxscyBpbiBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIG1lcmdlIChvYmopIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlZiA9IGFyZ3VtZW50c1tpXVxuICAgICAgZm9yICh2YXIgbiBpbiBkZWYpIHtcbiAgICAgICAgaWYgKG9ialtuXSA9PT0gdW5kZWZpbmVkKSBvYmpbbl0gPSBkZWZbbl1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxpbmUgY29sb3IgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nIG9yIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0Q29sb3IgKGNvbG9yLCBpZHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIGNvbG9yID09ICdzdHJpbmcnID8gY29sb3IgOiBjb2xvcltpZHggJSBjb2xvci5sZW5ndGhdXG4gIH1cblxuICAvLyBCdWlsdC1pbiBkZWZhdWx0c1xuXG4gIHZhciBkZWZhdWx0cyA9IHtcbiAgICBsaW5lczogMTIgICAgICAgICAgICAgLy8gVGhlIG51bWJlciBvZiBsaW5lcyB0byBkcmF3XG4gICwgbGVuZ3RoOiA3ICAgICAgICAgICAgIC8vIFRoZSBsZW5ndGggb2YgZWFjaCBsaW5lXG4gICwgd2lkdGg6IDUgICAgICAgICAgICAgIC8vIFRoZSBsaW5lIHRoaWNrbmVzc1xuICAsIHJhZGl1czogMTAgICAgICAgICAgICAvLyBUaGUgcmFkaXVzIG9mIHRoZSBpbm5lciBjaXJjbGVcbiAgLCBzY2FsZTogMS4wICAgICAgICAgICAgLy8gU2NhbGVzIG92ZXJhbGwgc2l6ZSBvZiB0aGUgc3Bpbm5lclxuICAsIGNvcm5lcnM6IDEgICAgICAgICAgICAvLyBSb3VuZG5lc3MgKDAuLjEpXG4gICwgY29sb3I6ICcjMDAwJyAgICAgICAgIC8vICNyZ2Igb3IgI3JyZ2diYlxuICAsIG9wYWNpdHk6IDEvNCAgICAgICAgICAvLyBPcGFjaXR5IG9mIHRoZSBsaW5lc1xuICAsIHJvdGF0ZTogMCAgICAgICAgICAgICAvLyBSb3RhdGlvbiBvZmZzZXRcbiAgLCBkaXJlY3Rpb246IDEgICAgICAgICAgLy8gMTogY2xvY2t3aXNlLCAtMTogY291bnRlcmNsb2Nrd2lzZVxuICAsIHNwZWVkOiAxICAgICAgICAgICAgICAvLyBSb3VuZHMgcGVyIHNlY29uZFxuICAsIHRyYWlsOiAxMDAgICAgICAgICAgICAvLyBBZnRlcmdsb3cgcGVyY2VudGFnZVxuICAsIGZwczogMjAgICAgICAgICAgICAgICAvLyBGcmFtZXMgcGVyIHNlY29uZCB3aGVuIHVzaW5nIHNldFRpbWVvdXQoKVxuICAsIHpJbmRleDogMmU5ICAgICAgICAgICAvLyBVc2UgYSBoaWdoIHotaW5kZXggYnkgZGVmYXVsdFxuICAsIGNsYXNzTmFtZTogJ3NwaW5uZXInICAvLyBDU1MgY2xhc3MgdG8gYXNzaWduIHRvIHRoZSBlbGVtZW50XG4gICwgdG9wOiAnNTAlJyAgICAgICAgICAgIC8vIGNlbnRlciB2ZXJ0aWNhbGx5XG4gICwgbGVmdDogJzUwJScgICAgICAgICAgIC8vIGNlbnRlciBob3Jpem9udGFsbHlcbiAgLCBzaGFkb3c6IGZhbHNlICAgICAgICAgLy8gV2hldGhlciB0byByZW5kZXIgYSBzaGFkb3dcbiAgLCBod2FjY2VsOiBmYWxzZSAgICAgICAgLy8gV2hldGhlciB0byB1c2UgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIChtaWdodCBiZSBidWdneSlcbiAgLCBwb3NpdGlvbjogJ2Fic29sdXRlJyAgLy8gRWxlbWVudCBwb3NpdGlvbmluZ1xuICB9XG5cbiAgLyoqIFRoZSBjb25zdHJ1Y3RvciAqL1xuICBmdW5jdGlvbiBTcGlubmVyIChvKSB7XG4gICAgdGhpcy5vcHRzID0gbWVyZ2UobyB8fCB7fSwgU3Bpbm5lci5kZWZhdWx0cywgZGVmYXVsdHMpXG4gIH1cblxuICAvLyBHbG9iYWwgZGVmYXVsdHMgdGhhdCBvdmVycmlkZSB0aGUgYnVpbHQtaW5zOlxuICBTcGlubmVyLmRlZmF1bHRzID0ge31cblxuICBtZXJnZShTcGlubmVyLnByb3RvdHlwZSwge1xuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHNwaW5uZXIgdG8gdGhlIGdpdmVuIHRhcmdldCBlbGVtZW50LiBJZiB0aGlzIGluc3RhbmNlIGlzIGFscmVhZHlcbiAgICAgKiBzcGlubmluZywgaXQgaXMgYXV0b21hdGljYWxseSByZW1vdmVkIGZyb20gaXRzIHByZXZpb3VzIHRhcmdldCBiIGNhbGxpbmdcbiAgICAgKiBzdG9wKCkgaW50ZXJuYWxseS5cbiAgICAgKi9cbiAgICBzcGluOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICB0aGlzLnN0b3AoKVxuXG4gICAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICAgICAgLCBvID0gc2VsZi5vcHRzXG4gICAgICAgICwgZWwgPSBzZWxmLmVsID0gY3JlYXRlRWwobnVsbCwge2NsYXNzTmFtZTogby5jbGFzc05hbWV9KVxuXG4gICAgICBjc3MoZWwsIHtcbiAgICAgICAgcG9zaXRpb246IG8ucG9zaXRpb25cbiAgICAgICwgd2lkdGg6IDBcbiAgICAgICwgekluZGV4OiBvLnpJbmRleFxuICAgICAgLCBsZWZ0OiBvLmxlZnRcbiAgICAgICwgdG9wOiBvLnRvcFxuICAgICAgfSlcblxuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKGVsLCB0YXJnZXQuZmlyc3RDaGlsZCB8fCBudWxsKVxuICAgICAgfVxuXG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAncHJvZ3Jlc3NiYXInKVxuICAgICAgc2VsZi5saW5lcyhlbCwgc2VsZi5vcHRzKVxuXG4gICAgICBpZiAoIXVzZUNzc0FuaW1hdGlvbnMpIHtcbiAgICAgICAgLy8gTm8gQ1NTIGFuaW1hdGlvbiBzdXBwb3J0LCB1c2Ugc2V0VGltZW91dCgpIGluc3RlYWRcbiAgICAgICAgdmFyIGkgPSAwXG4gICAgICAgICAgLCBzdGFydCA9IChvLmxpbmVzIC0gMSkgKiAoMSAtIG8uZGlyZWN0aW9uKSAvIDJcbiAgICAgICAgICAsIGFscGhhXG4gICAgICAgICAgLCBmcHMgPSBvLmZwc1xuICAgICAgICAgICwgZiA9IGZwcyAvIG8uc3BlZWRcbiAgICAgICAgICAsIG9zdGVwID0gKDEgLSBvLm9wYWNpdHkpIC8gKGYgKiBvLnRyYWlsIC8gMTAwKVxuICAgICAgICAgICwgYXN0ZXAgPSBmIC8gby5saW5lc1xuXG4gICAgICAgIDsoZnVuY3Rpb24gYW5pbSAoKSB7XG4gICAgICAgICAgaSsrXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvLmxpbmVzOyBqKyspIHtcbiAgICAgICAgICAgIGFscGhhID0gTWF0aC5tYXgoMSAtIChpICsgKG8ubGluZXMgLSBqKSAqIGFzdGVwKSAlIGYgKiBvc3RlcCwgby5vcGFjaXR5KVxuXG4gICAgICAgICAgICBzZWxmLm9wYWNpdHkoZWwsIGogKiBvLmRpcmVjdGlvbiArIHN0YXJ0LCBhbHBoYSwgbylcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsZi50aW1lb3V0ID0gc2VsZi5lbCAmJiBzZXRUaW1lb3V0KGFuaW0sIH5+KDEwMDAgLyBmcHMpKVxuICAgICAgICB9KSgpXG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3BzIGFuZCByZW1vdmVzIHRoZSBTcGlubmVyLlxuICAgICAqL1xuICAsIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBlbCA9IHRoaXMuZWxcbiAgICAgIGlmIChlbCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KVxuICAgICAgICBpZiAoZWwucGFyZW50Tm9kZSkgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbClcbiAgICAgICAgdGhpcy5lbCA9IHVuZGVmaW5lZFxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBtZXRob2QgdGhhdCBkcmF3cyB0aGUgaW5kaXZpZHVhbCBsaW5lcy4gV2lsbCBiZSBvdmVyd3JpdHRlblxuICAgICAqIGluIFZNTCBmYWxsYmFjayBtb2RlIGJlbG93LlxuICAgICAqL1xuICAsIGxpbmVzOiBmdW5jdGlvbiAoZWwsIG8pIHtcbiAgICAgIHZhciBpID0gMFxuICAgICAgICAsIHN0YXJ0ID0gKG8ubGluZXMgLSAxKSAqICgxIC0gby5kaXJlY3Rpb24pIC8gMlxuICAgICAgICAsIHNlZ1xuXG4gICAgICBmdW5jdGlvbiBmaWxsIChjb2xvciwgc2hhZG93KSB7XG4gICAgICAgIHJldHVybiBjc3MoY3JlYXRlRWwoKSwge1xuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICAgICwgd2lkdGg6IG8uc2NhbGUgKiAoby5sZW5ndGggKyBvLndpZHRoKSArICdweCdcbiAgICAgICAgLCBoZWlnaHQ6IG8uc2NhbGUgKiBvLndpZHRoICsgJ3B4J1xuICAgICAgICAsIGJhY2tncm91bmQ6IGNvbG9yXG4gICAgICAgICwgYm94U2hhZG93OiBzaGFkb3dcbiAgICAgICAgLCB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0J1xuICAgICAgICAsIHRyYW5zZm9ybTogJ3JvdGF0ZSgnICsgfn4oMzYwL28ubGluZXMqaSArIG8ucm90YXRlKSArICdkZWcpIHRyYW5zbGF0ZSgnICsgby5zY2FsZSpvLnJhZGl1cyArICdweCcgKyAnLDApJ1xuICAgICAgICAsIGJvcmRlclJhZGl1czogKG8uY29ybmVycyAqIG8uc2NhbGUgKiBvLndpZHRoID4+IDEpICsgJ3B4J1xuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBmb3IgKDsgaSA8IG8ubGluZXM7IGkrKykge1xuICAgICAgICBzZWcgPSBjc3MoY3JlYXRlRWwoKSwge1xuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICAgICwgdG9wOiAxICsgfihvLnNjYWxlICogby53aWR0aCAvIDIpICsgJ3B4J1xuICAgICAgICAsIHRyYW5zZm9ybTogby5od2FjY2VsID8gJ3RyYW5zbGF0ZTNkKDAsMCwwKScgOiAnJ1xuICAgICAgICAsIG9wYWNpdHk6IG8ub3BhY2l0eVxuICAgICAgICAsIGFuaW1hdGlvbjogdXNlQ3NzQW5pbWF0aW9ucyAmJiBhZGRBbmltYXRpb24oby5vcGFjaXR5LCBvLnRyYWlsLCBzdGFydCArIGkgKiBvLmRpcmVjdGlvbiwgby5saW5lcykgKyAnICcgKyAxIC8gby5zcGVlZCArICdzIGxpbmVhciBpbmZpbml0ZSdcbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoby5zaGFkb3cpIGlucyhzZWcsIGNzcyhmaWxsKCcjMDAwJywgJzAgMCA0cHggIzAwMCcpLCB7dG9wOiAnMnB4J30pKVxuICAgICAgICBpbnMoZWwsIGlucyhzZWcsIGZpbGwoZ2V0Q29sb3Ioby5jb2xvciwgaSksICcwIDAgMXB4IHJnYmEoMCwwLDAsLjEpJykpKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGVsXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgbWV0aG9kIHRoYXQgYWRqdXN0cyB0aGUgb3BhY2l0eSBvZiBhIHNpbmdsZSBsaW5lLlxuICAgICAqIFdpbGwgYmUgb3ZlcndyaXR0ZW4gaW4gVk1MIGZhbGxiYWNrIG1vZGUgYmVsb3cuXG4gICAgICovXG4gICwgb3BhY2l0eTogZnVuY3Rpb24gKGVsLCBpLCB2YWwpIHtcbiAgICAgIGlmIChpIDwgZWwuY2hpbGROb2Rlcy5sZW5ndGgpIGVsLmNoaWxkTm9kZXNbaV0uc3R5bGUub3BhY2l0eSA9IHZhbFxuICAgIH1cblxuICB9KVxuXG5cbiAgZnVuY3Rpb24gaW5pdFZNTCAoKSB7XG5cbiAgICAvKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIFZNTCB0YWcgKi9cbiAgICBmdW5jdGlvbiB2bWwgKHRhZywgYXR0cikge1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsKCc8JyArIHRhZyArICcgeG1sbnM9XCJ1cm46c2NoZW1hcy1taWNyb3NvZnQuY29tOnZtbFwiIGNsYXNzPVwic3Bpbi12bWxcIj4nLCBhdHRyKVxuICAgIH1cblxuICAgIC8vIE5vIENTUyB0cmFuc2Zvcm1zIGJ1dCBWTUwgc3VwcG9ydCwgYWRkIGEgQ1NTIHJ1bGUgZm9yIFZNTCBlbGVtZW50czpcbiAgICBzaGVldC5hZGRSdWxlKCcuc3Bpbi12bWwnLCAnYmVoYXZpb3I6dXJsKCNkZWZhdWx0I1ZNTCknKVxuXG4gICAgU3Bpbm5lci5wcm90b3R5cGUubGluZXMgPSBmdW5jdGlvbiAoZWwsIG8pIHtcbiAgICAgIHZhciByID0gby5zY2FsZSAqIChvLmxlbmd0aCArIG8ud2lkdGgpXG4gICAgICAgICwgcyA9IG8uc2NhbGUgKiAyICogclxuXG4gICAgICBmdW5jdGlvbiBncnAgKCkge1xuICAgICAgICByZXR1cm4gY3NzKFxuICAgICAgICAgIHZtbCgnZ3JvdXAnLCB7XG4gICAgICAgICAgICBjb29yZHNpemU6IHMgKyAnICcgKyBzXG4gICAgICAgICAgLCBjb29yZG9yaWdpbjogLXIgKyAnICcgKyAtclxuICAgICAgICAgIH0pXG4gICAgICAgICwgeyB3aWR0aDogcywgaGVpZ2h0OiBzIH1cbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICB2YXIgbWFyZ2luID0gLShvLndpZHRoICsgby5sZW5ndGgpICogby5zY2FsZSAqIDIgKyAncHgnXG4gICAgICAgICwgZyA9IGNzcyhncnAoKSwge3Bvc2l0aW9uOiAnYWJzb2x1dGUnLCB0b3A6IG1hcmdpbiwgbGVmdDogbWFyZ2lufSlcbiAgICAgICAgLCBpXG5cbiAgICAgIGZ1bmN0aW9uIHNlZyAoaSwgZHgsIGZpbHRlcikge1xuICAgICAgICBpbnMoXG4gICAgICAgICAgZ1xuICAgICAgICAsIGlucyhcbiAgICAgICAgICAgIGNzcyhncnAoKSwge3JvdGF0aW9uOiAzNjAgLyBvLmxpbmVzICogaSArICdkZWcnLCBsZWZ0OiB+fmR4fSlcbiAgICAgICAgICAsIGlucyhcbiAgICAgICAgICAgICAgY3NzKFxuICAgICAgICAgICAgICAgIHZtbCgncm91bmRyZWN0Jywge2FyY3NpemU6IG8uY29ybmVyc30pXG4gICAgICAgICAgICAgICwgeyB3aWR0aDogclxuICAgICAgICAgICAgICAgICwgaGVpZ2h0OiBvLnNjYWxlICogby53aWR0aFxuICAgICAgICAgICAgICAgICwgbGVmdDogby5zY2FsZSAqIG8ucmFkaXVzXG4gICAgICAgICAgICAgICAgLCB0b3A6IC1vLnNjYWxlICogby53aWR0aCA+PiAxXG4gICAgICAgICAgICAgICAgLCBmaWx0ZXI6IGZpbHRlclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgLCB2bWwoJ2ZpbGwnLCB7Y29sb3I6IGdldENvbG9yKG8uY29sb3IsIGkpLCBvcGFjaXR5OiBvLm9wYWNpdHl9KVxuICAgICAgICAgICAgLCB2bWwoJ3N0cm9rZScsIHtvcGFjaXR5OiAwfSkgLy8gdHJhbnNwYXJlbnQgc3Ryb2tlIHRvIGZpeCBjb2xvciBibGVlZGluZyB1cG9uIG9wYWNpdHkgY2hhbmdlXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGlmIChvLnNoYWRvdylcbiAgICAgICAgZm9yIChpID0gMTsgaSA8PSBvLmxpbmVzOyBpKyspIHtcbiAgICAgICAgICBzZWcoaSwgLTIsICdwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQmx1cihwaXhlbHJhZGl1cz0yLG1ha2VzaGFkb3c9MSxzaGFkb3dvcGFjaXR5PS4zKScpXG4gICAgICAgIH1cblxuICAgICAgZm9yIChpID0gMTsgaSA8PSBvLmxpbmVzOyBpKyspIHNlZyhpKVxuICAgICAgcmV0dXJuIGlucyhlbCwgZylcbiAgICB9XG5cbiAgICBTcGlubmVyLnByb3RvdHlwZS5vcGFjaXR5ID0gZnVuY3Rpb24gKGVsLCBpLCB2YWwsIG8pIHtcbiAgICAgIHZhciBjID0gZWwuZmlyc3RDaGlsZFxuICAgICAgbyA9IG8uc2hhZG93ICYmIG8ubGluZXMgfHwgMFxuICAgICAgaWYgKGMgJiYgaSArIG8gPCBjLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIGMgPSBjLmNoaWxkTm9kZXNbaSArIG9dOyBjID0gYyAmJiBjLmZpcnN0Q2hpbGQ7IGMgPSBjICYmIGMuZmlyc3RDaGlsZFxuICAgICAgICBpZiAoYykgYy5vcGFjaXR5ID0gdmFsXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzaGVldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZWwgPSBjcmVhdGVFbCgnc3R5bGUnLCB7dHlwZSA6ICd0ZXh0L2Nzcyd9KVxuICAgICAgaW5zKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0sIGVsKVxuICAgICAgcmV0dXJuIGVsLnNoZWV0IHx8IGVsLnN0eWxlU2hlZXRcbiAgICB9KCkpXG5cbiAgICB2YXIgcHJvYmUgPSBjc3MoY3JlYXRlRWwoJ2dyb3VwJyksIHtiZWhhdmlvcjogJ3VybCgjZGVmYXVsdCNWTUwpJ30pXG5cbiAgICBpZiAoIXZlbmRvcihwcm9iZSwgJ3RyYW5zZm9ybScpICYmIHByb2JlLmFkaikgaW5pdFZNTCgpXG4gICAgZWxzZSB1c2VDc3NBbmltYXRpb25zID0gdmVuZG9yKHByb2JlLCAnYW5pbWF0aW9uJylcbiAgfVxuXG4gIHJldHVybiBTcGlubmVyXG5cbn0pKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDExLTIwMTQgRmVsaXggR25hc3NcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL3NwaW4uanMub3JnL1xuICovXG5cbi8qXG5cbkJhc2ljIFVzYWdlOlxuPT09PT09PT09PT09XG5cbiQoJyNlbCcpLnNwaW4oKSAvLyBDcmVhdGVzIGEgZGVmYXVsdCBTcGlubmVyIHVzaW5nIHRoZSB0ZXh0IGNvbG9yIG9mICNlbC5cbiQoJyNlbCcpLnNwaW4oeyAuLi4gfSkgLy8gQ3JlYXRlcyBhIFNwaW5uZXIgdXNpbmcgdGhlIHByb3ZpZGVkIG9wdGlvbnMuXG5cbiQoJyNlbCcpLnNwaW4oZmFsc2UpIC8vIFN0b3BzIGFuZCByZW1vdmVzIHRoZSBzcGlubmVyLlxuXG5Vc2luZyBQcmVzZXRzOlxuPT09PT09PT09PT09PT1cblxuJCgnI2VsJykuc3Bpbignc21hbGwnKSAvLyBDcmVhdGVzIGEgJ3NtYWxsJyBTcGlubmVyIHVzaW5nIHRoZSB0ZXh0IGNvbG9yIG9mICNlbC5cbiQoJyNlbCcpLnNwaW4oJ2xhcmdlJywgJyNmZmYnKSAvLyBDcmVhdGVzIGEgJ2xhcmdlJyB3aGl0ZSBTcGlubmVyLlxuXG5BZGRpbmcgYSBjdXN0b20gcHJlc2V0OlxuPT09PT09PT09PT09PT09PT09PT09PT1cblxuJC5mbi5zcGluLnByZXNldHMuZmxvd2VyID0ge1xuICBsaW5lczogICA5XG4sIGxlbmd0aDogMTBcbiwgd2lkdGg6ICAyMFxuLCByYWRpdXM6ICAwXG59XG5cbiQoJyNlbCcpLnNwaW4oJ2Zsb3dlcicsICdyZWQnKVxuXG4qL1xuXG47KGZ1bmN0aW9uKGZhY3RvcnkpIHtcblxuICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcpIHtcbiAgICAvLyBDb21tb25KU1xuICAgIGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JyksIHJlcXVpcmUoJ3NwaW4uanMnKSlcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRCwgcmVnaXN0ZXIgYXMgYW5vbnltb3VzIG1vZHVsZVxuICAgIGRlZmluZShbJ2pxdWVyeScsICdzcGluJ10sIGZhY3RvcnkpXG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgaWYgKCF3aW5kb3cuU3Bpbm5lcikgdGhyb3cgbmV3IEVycm9yKCdTcGluLmpzIG5vdCBwcmVzZW50JylcbiAgICBmYWN0b3J5KHdpbmRvdy5qUXVlcnksIHdpbmRvdy5TcGlubmVyKVxuICB9XG5cbn0oZnVuY3Rpb24oJCwgU3Bpbm5lcikge1xuXG4gICQuZm4uc3BpbiA9IGZ1bmN0aW9uKG9wdHMsIGNvbG9yKSB7XG5cbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKVxuICAgICAgICAsIGRhdGEgPSAkdGhpcy5kYXRhKClcblxuICAgICAgaWYgKGRhdGEuc3Bpbm5lcikge1xuICAgICAgICBkYXRhLnNwaW5uZXIuc3RvcCgpXG4gICAgICAgIGRlbGV0ZSBkYXRhLnNwaW5uZXJcbiAgICAgIH1cbiAgICAgIGlmIChvcHRzICE9PSBmYWxzZSkge1xuICAgICAgICBvcHRzID0gJC5leHRlbmQoXG4gICAgICAgICAgeyBjb2xvcjogY29sb3IgfHwgJHRoaXMuY3NzKCdjb2xvcicpIH1cbiAgICAgICAgLCAkLmZuLnNwaW4ucHJlc2V0c1tvcHRzXSB8fCBvcHRzXG4gICAgICAgIClcbiAgICAgICAgZGF0YS5zcGlubmVyID0gbmV3IFNwaW5uZXIob3B0cykuc3Bpbih0aGlzKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAkLmZuLnNwaW4ucHJlc2V0cyA9IHtcbiAgICB0aW55OiAgeyBsaW5lczogIDgsIGxlbmd0aDogMiwgd2lkdGg6IDIsIHJhZGl1czogMyB9XG4gICwgc21hbGw6IHsgbGluZXM6ICA4LCBsZW5ndGg6IDQsIHdpZHRoOiAzLCByYWRpdXM6IDUgfVxuICAsIGxhcmdlOiB7IGxpbmVzOiAxMCwgbGVuZ3RoOiA4LCB3aWR0aDogNCwgcmFkaXVzOiA4IH1cbiAgfVxuXG59KSk7XG4iLCIvKipcbiAqIFN3aXBlciAzLjQuMlxuICogTW9zdCBtb2Rlcm4gbW9iaWxlIHRvdWNoIHNsaWRlciBhbmQgZnJhbWV3b3JrIHdpdGggaGFyZHdhcmUgYWNjZWxlcmF0ZWQgdHJhbnNpdGlvbnNcbiAqIFxuICogaHR0cDovL3d3dy5pZGFuZ2Vyby51cy9zd2lwZXIvXG4gKiBcbiAqIENvcHlyaWdodCAyMDE3LCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICogVGhlIGlEYW5nZXJvLnVzXG4gKiBodHRwOi8vd3d3LmlkYW5nZXJvLnVzL1xuICogXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqIFxuICogUmVsZWFzZWQgb246IE1hcmNoIDEwLCAyMDE3XG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciAkO1xuXG4gICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICBTd2lwZXJcbiAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgIHZhciBTd2lwZXIgPSBmdW5jdGlvbiAoY29udGFpbmVyLCBwYXJhbXMpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN3aXBlcikpIHJldHVybiBuZXcgU3dpcGVyKGNvbnRhaW5lciwgcGFyYW1zKTtcbiAgICBcblxuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgICAgICAgICAgIHRvdWNoRXZlbnRzVGFyZ2V0OiAnY29udGFpbmVyJyxcbiAgICAgICAgICAgIGluaXRpYWxTbGlkZTogMCxcbiAgICAgICAgICAgIHNwZWVkOiAzMDAsXG4gICAgICAgICAgICAvLyBhdXRvcGxheVxuICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgIGF1dG9wbGF5U3RvcE9uTGFzdDogZmFsc2UsXG4gICAgICAgICAgICAvLyBUbyBzdXBwb3J0IGlPUydzIHN3aXBlLXRvLWdvLWJhY2sgZ2VzdHVyZSAod2hlbiBiZWluZyB1c2VkIGluLWFwcCwgd2l0aCBVSVdlYlZpZXcpLlxuICAgICAgICAgICAgaU9TRWRnZVN3aXBlRGV0ZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgIGlPU0VkZ2VTd2lwZVRocmVzaG9sZDogMjAsXG4gICAgICAgICAgICAvLyBGcmVlIG1vZGVcbiAgICAgICAgICAgIGZyZWVNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgIGZyZWVNb2RlTW9tZW50dW06IHRydWUsXG4gICAgICAgICAgICBmcmVlTW9kZU1vbWVudHVtUmF0aW86IDEsXG4gICAgICAgICAgICBmcmVlTW9kZU1vbWVudHVtQm91bmNlOiB0cnVlLFxuICAgICAgICAgICAgZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvOiAxLFxuICAgICAgICAgICAgZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW86IDEsXG4gICAgICAgICAgICBmcmVlTW9kZVN0aWNreTogZmFsc2UsXG4gICAgICAgICAgICBmcmVlTW9kZU1pbmltdW1WZWxvY2l0eTogMC4wMixcbiAgICAgICAgICAgIC8vIEF1dG9oZWlnaHRcbiAgICAgICAgICAgIGF1dG9IZWlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgLy8gU2V0IHdyYXBwZXIgd2lkdGhcbiAgICAgICAgICAgIHNldFdyYXBwZXJTaXplOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIFZpcnR1YWwgVHJhbnNsYXRlXG4gICAgICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIEVmZmVjdHNcbiAgICAgICAgICAgIGVmZmVjdDogJ3NsaWRlJywgLy8gJ3NsaWRlJyBvciAnZmFkZScgb3IgJ2N1YmUnIG9yICdjb3ZlcmZsb3cnIG9yICdmbGlwJ1xuICAgICAgICAgICAgY292ZXJmbG93OiB7XG4gICAgICAgICAgICAgICAgcm90YXRlOiA1MCxcbiAgICAgICAgICAgICAgICBzdHJldGNoOiAwLFxuICAgICAgICAgICAgICAgIGRlcHRoOiAxMDAsXG4gICAgICAgICAgICAgICAgbW9kaWZpZXI6IDEsXG4gICAgICAgICAgICAgICAgc2xpZGVTaGFkb3dzIDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZsaXA6IHtcbiAgICAgICAgICAgICAgICBzbGlkZVNoYWRvd3MgOiB0cnVlLFxuICAgICAgICAgICAgICAgIGxpbWl0Um90YXRpb246IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjdWJlOiB7XG4gICAgICAgICAgICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNoYWRvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaGFkb3dPZmZzZXQ6IDIwLFxuICAgICAgICAgICAgICAgIHNoYWRvd1NjYWxlOiAwLjk0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmFkZToge1xuICAgICAgICAgICAgICAgIGNyb3NzRmFkZTogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBQYXJhbGxheFxuICAgICAgICAgICAgcGFyYWxsYXg6IGZhbHNlLFxuICAgICAgICAgICAgLy8gWm9vbVxuICAgICAgICAgICAgem9vbTogZmFsc2UsXG4gICAgICAgICAgICB6b29tTWF4OiAzLFxuICAgICAgICAgICAgem9vbU1pbjogMSxcbiAgICAgICAgICAgIHpvb21Ub2dnbGU6IHRydWUsXG4gICAgICAgICAgICAvLyBTY3JvbGxiYXJcbiAgICAgICAgICAgIHNjcm9sbGJhcjogbnVsbCxcbiAgICAgICAgICAgIHNjcm9sbGJhckhpZGU6IHRydWUsXG4gICAgICAgICAgICBzY3JvbGxiYXJEcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgICAgICAgc2Nyb2xsYmFyU25hcE9uUmVsZWFzZTogZmFsc2UsXG4gICAgICAgICAgICAvLyBLZXlib2FyZCBNb3VzZXdoZWVsXG4gICAgICAgICAgICBrZXlib2FyZENvbnRyb2w6IGZhbHNlLFxuICAgICAgICAgICAgbW91c2V3aGVlbENvbnRyb2w6IGZhbHNlLFxuICAgICAgICAgICAgbW91c2V3aGVlbFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgICAgICAgICAgIG1vdXNld2hlZWxJbnZlcnQ6IGZhbHNlLFxuICAgICAgICAgICAgbW91c2V3aGVlbEZvcmNlVG9BeGlzOiBmYWxzZSxcbiAgICAgICAgICAgIG1vdXNld2hlZWxTZW5zaXRpdml0eTogMSxcbiAgICAgICAgICAgIG1vdXNld2hlZWxFdmVudHNUYXJnZWQ6ICdjb250YWluZXInLFxuICAgICAgICAgICAgLy8gSGFzaCBOYXZpZ2F0aW9uXG4gICAgICAgICAgICBoYXNobmF2OiBmYWxzZSxcbiAgICAgICAgICAgIGhhc2huYXZXYXRjaFN0YXRlOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIEhpc3RvcnlcbiAgICAgICAgICAgIGhpc3Rvcnk6IGZhbHNlLFxuICAgICAgICAgICAgLy8gQ29tbW9uZyBOYXYgU3RhdGVcbiAgICAgICAgICAgIHJlcGxhY2VTdGF0ZTogZmFsc2UsXG4gICAgICAgICAgICAvLyBCcmVha3BvaW50c1xuICAgICAgICAgICAgYnJlYWtwb2ludHM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIC8vIFNsaWRlcyBncmlkXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICAgICAgc2xpZGVzUGVyQ29sdW1uRmlsbDogJ2NvbHVtbicsXG4gICAgICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgICAgICAgICAgIHNsaWRlc09mZnNldEJlZm9yZTogMCwgLy8gaW4gcHhcbiAgICAgICAgICAgIHNsaWRlc09mZnNldEFmdGVyOiAwLCAvLyBpbiBweFxuICAgICAgICAgICAgLy8gUm91bmQgbGVuZ3RoXG4gICAgICAgICAgICByb3VuZExlbmd0aHM6IGZhbHNlLFxuICAgICAgICAgICAgLy8gVG91Y2hlc1xuICAgICAgICAgICAgdG91Y2hSYXRpbzogMSxcbiAgICAgICAgICAgIHRvdWNoQW5nbGU6IDQ1LFxuICAgICAgICAgICAgc2ltdWxhdGVUb3VjaDogdHJ1ZSxcbiAgICAgICAgICAgIHNob3J0U3dpcGVzOiB0cnVlLFxuICAgICAgICAgICAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgICAgICAgICAgIGxvbmdTd2lwZXNSYXRpbzogMC41LFxuICAgICAgICAgICAgbG9uZ1N3aXBlc01zOiAzMDAsXG4gICAgICAgICAgICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gICAgICAgICAgICBvbmx5RXh0ZXJuYWw6IGZhbHNlLFxuICAgICAgICAgICAgdGhyZXNob2xkOiAwLFxuICAgICAgICAgICAgdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiB0cnVlLFxuICAgICAgICAgICAgdG91Y2hSZWxlYXNlT25FZGdlczogZmFsc2UsXG4gICAgICAgICAgICAvLyBVbmlxdWUgTmF2aWdhdGlvbiBFbGVtZW50c1xuICAgICAgICAgICAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG4gICAgICAgICAgICAvLyBQYWdpbmF0aW9uXG4gICAgICAgICAgICBwYWdpbmF0aW9uOiBudWxsLFxuICAgICAgICAgICAgcGFnaW5hdGlvbkVsZW1lbnQ6ICdzcGFuJyxcbiAgICAgICAgICAgIHBhZ2luYXRpb25DbGlja2FibGU6IGZhbHNlLFxuICAgICAgICAgICAgcGFnaW5hdGlvbkhpZGU6IGZhbHNlLFxuICAgICAgICAgICAgcGFnaW5hdGlvbkJ1bGxldFJlbmRlcjogbnVsbCxcbiAgICAgICAgICAgIHBhZ2luYXRpb25Qcm9ncmVzc1JlbmRlcjogbnVsbCxcbiAgICAgICAgICAgIHBhZ2luYXRpb25GcmFjdGlvblJlbmRlcjogbnVsbCxcbiAgICAgICAgICAgIHBhZ2luYXRpb25DdXN0b21SZW5kZXI6IG51bGwsXG4gICAgICAgICAgICBwYWdpbmF0aW9uVHlwZTogJ2J1bGxldHMnLCAvLyAnYnVsbGV0cycgb3IgJ3Byb2dyZXNzJyBvciAnZnJhY3Rpb24nIG9yICdjdXN0b20nXG4gICAgICAgICAgICAvLyBSZXNpc3RhbmNlXG4gICAgICAgICAgICByZXNpc3RhbmNlOiB0cnVlLFxuICAgICAgICAgICAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuICAgICAgICAgICAgLy8gTmV4dC9wcmV2IGJ1dHRvbnNcbiAgICAgICAgICAgIG5leHRCdXR0b246IG51bGwsXG4gICAgICAgICAgICBwcmV2QnV0dG9uOiBudWxsLFxuICAgICAgICAgICAgLy8gUHJvZ3Jlc3NcbiAgICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IGZhbHNlLFxuICAgICAgICAgICAgd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OiBmYWxzZSxcbiAgICAgICAgICAgIC8vIEN1cnNvclxuICAgICAgICAgICAgZ3JhYkN1cnNvcjogZmFsc2UsXG4gICAgICAgICAgICAvLyBDbGlja3NcbiAgICAgICAgICAgIHByZXZlbnRDbGlja3M6IHRydWUsXG4gICAgICAgICAgICBwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246IHRydWUsXG4gICAgICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIExhenkgTG9hZGluZ1xuICAgICAgICAgICAgbGF6eUxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgbGF6eUxvYWRpbmdJblByZXZOZXh0OiBmYWxzZSxcbiAgICAgICAgICAgIGxhenlMb2FkaW5nSW5QcmV2TmV4dEFtb3VudDogMSxcbiAgICAgICAgICAgIGxhenlMb2FkaW5nT25UcmFuc2l0aW9uU3RhcnQ6IGZhbHNlLFxuICAgICAgICAgICAgLy8gSW1hZ2VzXG4gICAgICAgICAgICBwcmVsb2FkSW1hZ2VzOiB0cnVlLFxuICAgICAgICAgICAgdXBkYXRlT25JbWFnZXNSZWFkeTogdHJ1ZSxcbiAgICAgICAgICAgIC8vIGxvb3BcbiAgICAgICAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgICAgICAgbG9vcEFkZGl0aW9uYWxTbGlkZXM6IDAsXG4gICAgICAgICAgICBsb29wZWRTbGlkZXM6IG51bGwsXG4gICAgICAgICAgICAvLyBDb250cm9sXG4gICAgICAgICAgICBjb250cm9sOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjb250cm9sSW52ZXJzZTogZmFsc2UsXG4gICAgICAgICAgICBjb250cm9sQnk6ICdzbGlkZScsIC8vb3IgJ2NvbnRhaW5lcidcbiAgICAgICAgICAgIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXG4gICAgICAgICAgICAvLyBTd2lwaW5nL25vIHN3aXBpbmdcbiAgICAgICAgICAgIGFsbG93U3dpcGVUb1ByZXY6IHRydWUsXG4gICAgICAgICAgICBhbGxvd1N3aXBlVG9OZXh0OiB0cnVlLFxuICAgICAgICAgICAgc3dpcGVIYW5kbGVyOiBudWxsLCAvLycuc3dpcGUtaGFuZGxlcicsXG4gICAgICAgICAgICBub1N3aXBpbmc6IHRydWUsXG4gICAgICAgICAgICBub1N3aXBpbmdDbGFzczogJ3N3aXBlci1uby1zd2lwaW5nJyxcbiAgICAgICAgICAgIC8vIFBhc3NpdmUgTGlzdGVuZXJzXG4gICAgICAgICAgICBwYXNzaXZlTGlzdGVuZXJzOiB0cnVlLFxuICAgICAgICAgICAgLy8gTlNcbiAgICAgICAgICAgIGNvbnRhaW5lck1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItY29udGFpbmVyLScsIC8vIE5FV1xuICAgICAgICAgICAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZScsXG4gICAgICAgICAgICBzbGlkZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWFjdGl2ZScsXG4gICAgICAgICAgICBzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1hY3RpdmUnLFxuICAgICAgICAgICAgc2xpZGVWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdmlzaWJsZScsXG4gICAgICAgICAgICBzbGlkZUR1cGxpY2F0ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZScsXG4gICAgICAgICAgICBzbGlkZU5leHRDbGFzczogJ3N3aXBlci1zbGlkZS1uZXh0JyxcbiAgICAgICAgICAgIHNsaWRlRHVwbGljYXRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1uZXh0JyxcbiAgICAgICAgICAgIHNsaWRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLXByZXYnLFxuICAgICAgICAgICAgc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLXByZXYnLFxuICAgICAgICAgICAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLFxuICAgICAgICAgICAgYnVsbGV0Q2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1idWxsZXQnLFxuICAgICAgICAgICAgYnVsbGV0QWN0aXZlQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZlJyxcbiAgICAgICAgICAgIGJ1dHRvbkRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgICAgICAgIHBhZ2luYXRpb25DdXJyZW50Q2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1jdXJyZW50JyxcbiAgICAgICAgICAgIHBhZ2luYXRpb25Ub3RhbENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tdG90YWwnLFxuICAgICAgICAgICAgcGFnaW5hdGlvbkhpZGRlbkNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24taGlkZGVuJyxcbiAgICAgICAgICAgIHBhZ2luYXRpb25Qcm9ncmVzc2JhckNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXInLFxuICAgICAgICAgICAgcGFnaW5hdGlvbkNsaWNrYWJsZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tY2xpY2thYmxlJywgLy8gTkVXXG4gICAgICAgICAgICBwYWdpbmF0aW9uTW9kaWZpZXJDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLScsIC8vIE5FV1xuICAgICAgICAgICAgbGF6eUxvYWRpbmdDbGFzczogJ3N3aXBlci1sYXp5JyxcbiAgICAgICAgICAgIGxhenlTdGF0dXNMb2FkaW5nQ2xhc3M6ICdzd2lwZXItbGF6eS1sb2FkaW5nJyxcbiAgICAgICAgICAgIGxhenlTdGF0dXNMb2FkZWRDbGFzczogJ3N3aXBlci1sYXp5LWxvYWRlZCcsXG4gICAgICAgICAgICBsYXp5UHJlbG9hZGVyQ2xhc3M6ICdzd2lwZXItbGF6eS1wcmVsb2FkZXInLFxuICAgICAgICAgICAgbm90aWZpY2F0aW9uQ2xhc3M6ICdzd2lwZXItbm90aWZpY2F0aW9uJyxcbiAgICAgICAgICAgIHByZWxvYWRlckNsYXNzOiAncHJlbG9hZGVyJyxcbiAgICAgICAgICAgIHpvb21Db250YWluZXJDbGFzczogJ3N3aXBlci16b29tLWNvbnRhaW5lcicsXG4gICAgICAgIFxuICAgICAgICAgICAgLy8gT2JzZXJ2ZXJcbiAgICAgICAgICAgIG9ic2VydmVyOiBmYWxzZSxcbiAgICAgICAgICAgIG9ic2VydmVQYXJlbnRzOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIEFjY2Vzc2liaWxpdHlcbiAgICAgICAgICAgIGExMXk6IGZhbHNlLFxuICAgICAgICAgICAgcHJldlNsaWRlTWVzc2FnZTogJ1ByZXZpb3VzIHNsaWRlJyxcbiAgICAgICAgICAgIG5leHRTbGlkZU1lc3NhZ2U6ICdOZXh0IHNsaWRlJyxcbiAgICAgICAgICAgIGZpcnN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgZmlyc3Qgc2xpZGUnLFxuICAgICAgICAgICAgbGFzdFNsaWRlTWVzc2FnZTogJ1RoaXMgaXMgdGhlIGxhc3Qgc2xpZGUnLFxuICAgICAgICAgICAgcGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2U6ICdHbyB0byBzbGlkZSB7e2luZGV4fX0nLFxuICAgICAgICAgICAgLy8gQ2FsbGJhY2tzXG4gICAgICAgICAgICBydW5DYWxsYmFja3NPbkluaXQ6IHRydWVcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBDYWxsYmFja3M6XG4gICAgICAgICAgICBvbkluaXQ6IGZ1bmN0aW9uIChzd2lwZXIpXG4gICAgICAgICAgICBvbkRlc3Ryb3k6IGZ1bmN0aW9uIChzd2lwZXIpXG4gICAgICAgICAgICBvbkJlZm9yZVJlc2l6ZTogZnVuY3Rpb24gKHN3aXBlcilcbiAgICAgICAgICAgIG9uQWZ0ZXJSZXNpemU6IGZ1bmN0aW9uIChzd2lwZXIpXG4gICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiAoc3dpcGVyLCBlKVxuICAgICAgICAgICAgb25UYXA6IGZ1bmN0aW9uIChzd2lwZXIsIGUpXG4gICAgICAgICAgICBvbkRvdWJsZVRhcDogZnVuY3Rpb24gKHN3aXBlciwgZSlcbiAgICAgICAgICAgIG9uU2xpZGVyTW92ZTogZnVuY3Rpb24gKHN3aXBlciwgZSlcbiAgICAgICAgICAgIG9uU2xpZGVDaGFuZ2VTdGFydDogZnVuY3Rpb24gKHN3aXBlcilcbiAgICAgICAgICAgIG9uU2xpZGVDaGFuZ2VFbmQ6IGZ1bmN0aW9uIChzd2lwZXIpXG4gICAgICAgICAgICBvblRyYW5zaXRpb25TdGFydDogZnVuY3Rpb24gKHN3aXBlcilcbiAgICAgICAgICAgIG9uVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gKHN3aXBlcilcbiAgICAgICAgICAgIG9uSW1hZ2VzUmVhZHk6IGZ1bmN0aW9uIChzd2lwZXIpXG4gICAgICAgICAgICBvblByb2dyZXNzOiBmdW5jdGlvbiAoc3dpcGVyLCBwcm9ncmVzcylcbiAgICAgICAgICAgIG9uVG91Y2hTdGFydDogZnVuY3Rpb24gKHN3aXBlciwgZSlcbiAgICAgICAgICAgIG9uVG91Y2hNb3ZlOiBmdW5jdGlvbiAoc3dpcGVyLCBlKVxuICAgICAgICAgICAgb25Ub3VjaE1vdmVPcHBvc2l0ZTogZnVuY3Rpb24gKHN3aXBlciwgZSlcbiAgICAgICAgICAgIG9uVG91Y2hFbmQ6IGZ1bmN0aW9uIChzd2lwZXIsIGUpXG4gICAgICAgICAgICBvblJlYWNoQmVnaW5uaW5nOiBmdW5jdGlvbiAoc3dpcGVyKVxuICAgICAgICAgICAgb25SZWFjaEVuZDogZnVuY3Rpb24gKHN3aXBlcilcbiAgICAgICAgICAgIG9uU2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gKHN3aXBlciwgZHVyYXRpb24pXG4gICAgICAgICAgICBvblNldFRyYW5zbGF0ZTogZnVuY3Rpb24gKHN3aXBlciwgdHJhbnNsYXRlKVxuICAgICAgICAgICAgb25BdXRvcGxheVN0YXJ0OiBmdW5jdGlvbiAoc3dpcGVyKVxuICAgICAgICAgICAgb25BdXRvcGxheVN0b3A6IGZ1bmN0aW9uIChzd2lwZXIpLFxuICAgICAgICAgICAgb25MYXp5SW1hZ2VMb2FkOiBmdW5jdGlvbiAoc3dpcGVyLCBzbGlkZSwgaW1hZ2UpXG4gICAgICAgICAgICBvbkxhenlJbWFnZVJlYWR5OiBmdW5jdGlvbiAoc3dpcGVyLCBzbGlkZSwgaW1hZ2UpXG4gICAgICAgICAgICBvbktleVByZXNzOiBmdW5jdGlvbiAoc3dpcGVyLCBrZXlDb2RlKVxuICAgICAgICAgICAgKi9cbiAgICAgICAgXG4gICAgICAgIH07XG4gICAgICAgIHZhciBpbml0aWFsVmlydHVhbFRyYW5zbGF0ZSA9IHBhcmFtcyAmJiBwYXJhbXMudmlydHVhbFRyYW5zbGF0ZTtcbiAgICAgICAgXG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgICAgICAgdmFyIG9yaWdpbmFsUGFyYW1zID0ge307XG4gICAgICAgIGZvciAodmFyIHBhcmFtIGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXNbcGFyYW1dID09PSAnb2JqZWN0JyAmJiBwYXJhbXNbcGFyYW1dICE9PSBudWxsICYmICEocGFyYW1zW3BhcmFtXS5ub2RlVHlwZSB8fCBwYXJhbXNbcGFyYW1dID09PSB3aW5kb3cgfHwgcGFyYW1zW3BhcmFtXSA9PT0gZG9jdW1lbnQgfHwgKHR5cGVvZiBEb203ICE9PSAndW5kZWZpbmVkJyAmJiBwYXJhbXNbcGFyYW1dIGluc3RhbmNlb2YgRG9tNykgfHwgKHR5cGVvZiBqUXVlcnkgIT09ICd1bmRlZmluZWQnICYmIHBhcmFtc1twYXJhbV0gaW5zdGFuY2VvZiBqUXVlcnkpKSkge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsUGFyYW1zW3BhcmFtXSA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGRlZXBQYXJhbSBpbiBwYXJhbXNbcGFyYW1dKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsUGFyYW1zW3BhcmFtXVtkZWVwUGFyYW1dID0gcGFyYW1zW3BhcmFtXVtkZWVwUGFyYW1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsUGFyYW1zW3BhcmFtXSA9IHBhcmFtc1twYXJhbV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgZGVmIGluIGRlZmF1bHRzKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtc1tkZWZdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHBhcmFtc1tkZWZdID0gZGVmYXVsdHNbZGVmXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwYXJhbXNbZGVmXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBkZWVwRGVmIGluIGRlZmF1bHRzW2RlZl0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXNbZGVmXVtkZWVwRGVmXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1tkZWZdW2RlZXBEZWZdID0gZGVmYXVsdHNbZGVmXVtkZWVwRGVmXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gU3dpcGVyXG4gICAgICAgIHZhciBzID0gdGhpcztcbiAgICAgICAgXG4gICAgICAgIC8vIFBhcmFtc1xuICAgICAgICBzLnBhcmFtcyA9IHBhcmFtcztcbiAgICAgICAgcy5vcmlnaW5hbFBhcmFtcyA9IG9yaWdpbmFsUGFyYW1zO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2xhc3NuYW1lXG4gICAgICAgIHMuY2xhc3NOYW1lcyA9IFtdO1xuICAgICAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICBEb20gTGlicmFyeSBhbmQgcGx1Z2luc1xuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIGlmICh0eXBlb2YgJCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIERvbTcgIT09ICd1bmRlZmluZWQnKXtcbiAgICAgICAgICAgICQgPSBEb203O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgJCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgRG9tNyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAkID0gd2luZG93LkRvbTcgfHwgd2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAkID0gRG9tNztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghJCkgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4cG9ydCBpdCB0byBTd2lwZXIgaW5zdGFuY2VcbiAgICAgICAgcy4kID0gJDtcbiAgICAgICAgXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIEJyZWFrcG9pbnRzXG4gICAgICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbiAgICAgICAgcy5jdXJyZW50QnJlYWtwb2ludCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcy5nZXRBY3RpdmVCcmVha3BvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy9HZXQgYnJlYWtwb2ludCBmb3Igd2luZG93IHdpZHRoXG4gICAgICAgICAgICBpZiAoIXMucGFyYW1zLmJyZWFrcG9pbnRzKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB2YXIgYnJlYWtwb2ludCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHBvaW50cyA9IFtdLCBwb2ludDtcbiAgICAgICAgICAgIGZvciAoIHBvaW50IGluIHMucGFyYW1zLmJyZWFrcG9pbnRzICkge1xuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5icmVha3BvaW50cy5oYXNPd25Qcm9wZXJ0eShwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvaW50cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGEsIDEwKSA+IHBhcnNlSW50KGIsIDEwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQgPj0gd2luZG93LmlubmVyV2lkdGggJiYgIWJyZWFrcG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBicmVha3BvaW50IHx8ICdtYXgnO1xuICAgICAgICB9O1xuICAgICAgICBzLnNldEJyZWFrcG9pbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvL1NldCBicmVha3BvaW50IGZvciB3aW5kb3cgd2lkdGggYW5kIHVwZGF0ZSBwYXJhbWV0ZXJzXG4gICAgICAgICAgICB2YXIgYnJlYWtwb2ludCA9IHMuZ2V0QWN0aXZlQnJlYWtwb2ludCgpO1xuICAgICAgICAgICAgaWYgKGJyZWFrcG9pbnQgJiYgcy5jdXJyZW50QnJlYWtwb2ludCAhPT0gYnJlYWtwb2ludCkge1xuICAgICAgICAgICAgICAgIHZhciBicmVha1BvaW50c1BhcmFtcyA9IGJyZWFrcG9pbnQgaW4gcy5wYXJhbXMuYnJlYWtwb2ludHMgPyBzLnBhcmFtcy5icmVha3BvaW50c1ticmVha3BvaW50XSA6IHMub3JpZ2luYWxQYXJhbXM7XG4gICAgICAgICAgICAgICAgdmFyIG5lZWRzUmVMb29wID0gcy5wYXJhbXMubG9vcCAmJiAoYnJlYWtQb2ludHNQYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gcy5wYXJhbXMuc2xpZGVzUGVyVmlldyk7XG4gICAgICAgICAgICAgICAgZm9yICggdmFyIHBhcmFtIGluIGJyZWFrUG9pbnRzUGFyYW1zICkge1xuICAgICAgICAgICAgICAgICAgICBzLnBhcmFtc1twYXJhbV0gPSBicmVha1BvaW50c1BhcmFtc1twYXJhbV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHMuY3VycmVudEJyZWFrcG9pbnQgPSBicmVha3BvaW50O1xuICAgICAgICAgICAgICAgIGlmKG5lZWRzUmVMb29wICYmIHMuZGVzdHJveUxvb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgcy5yZUxvb3AodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBTZXQgYnJlYWtwb2ludCBvbiBsb2FkXG4gICAgICAgIGlmIChzLnBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgICAgICAgcy5zZXRCcmVha3BvaW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIFByZXBhcmF0aW9uIC0gRGVmaW5lIENvbnRhaW5lciwgV3JhcHBlciBhbmQgUGFnaW5hdGlvblxuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIHMuY29udGFpbmVyID0gJChjb250YWluZXIpO1xuICAgICAgICBpZiAocy5jb250YWluZXIubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgIGlmIChzLmNvbnRhaW5lci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YXIgc3dpcGVycyA9IFtdO1xuICAgICAgICAgICAgcy5jb250YWluZXIuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXM7XG4gICAgICAgICAgICAgICAgc3dpcGVycy5wdXNoKG5ldyBTd2lwZXIodGhpcywgcGFyYW1zKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzd2lwZXJzO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBTYXZlIGluc3RhbmNlIGluIGNvbnRhaW5lciBIVE1MIEVsZW1lbnQgYW5kIGluIGRhdGFcbiAgICAgICAgcy5jb250YWluZXJbMF0uc3dpcGVyID0gcztcbiAgICAgICAgcy5jb250YWluZXIuZGF0YSgnc3dpcGVyJywgcyk7XG4gICAgICAgIFxuICAgICAgICBzLmNsYXNzTmFtZXMucHVzaChzLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgcy5wYXJhbXMuZGlyZWN0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChzLnBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgICAgICAgcy5jbGFzc05hbWVzLnB1c2gocy5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArICdmcmVlLW1vZGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXMuc3VwcG9ydC5mbGV4Ym94KSB7XG4gICAgICAgICAgICBzLmNsYXNzTmFtZXMucHVzaChzLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgJ25vLWZsZXhib3gnKTtcbiAgICAgICAgICAgIHMucGFyYW1zLnNsaWRlc1BlckNvbHVtbiA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICAgIHMuY2xhc3NOYW1lcy5wdXNoKHMucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyAnYXV0b2hlaWdodCcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuYWJsZSBzbGlkZXMgcHJvZ3Jlc3Mgd2hlbiByZXF1aXJlZFxuICAgICAgICBpZiAocy5wYXJhbXMucGFyYWxsYXggfHwgcy5wYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICAgICAgICBzLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNYXggcmVzaXN0YW5jZSB3aGVuIHRvdWNoUmVsZWFzZU9uRWRnZXNcbiAgICAgICAgaWYgKHMucGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICAgICAgICAgIHMucGFyYW1zLnJlc2lzdGFuY2VSYXRpbyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ292ZXJmbG93IC8gM0RcbiAgICAgICAgaWYgKFsnY3ViZScsICdjb3ZlcmZsb3cnLCAnZmxpcCddLmluZGV4T2Yocy5wYXJhbXMuZWZmZWN0KSA+PSAwKSB7XG4gICAgICAgICAgICBpZiAocy5zdXBwb3J0LnRyYW5zZm9ybXMzZCkge1xuICAgICAgICAgICAgICAgIHMucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHMuY2xhc3NOYW1lcy5wdXNoKHMucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyAnM2QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHMucGFyYW1zLmVmZmVjdCA9ICdzbGlkZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMucGFyYW1zLmVmZmVjdCAhPT0gJ3NsaWRlJykge1xuICAgICAgICAgICAgcy5jbGFzc05hbWVzLnB1c2gocy5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIHMucGFyYW1zLmVmZmVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMucGFyYW1zLmVmZmVjdCA9PT0gJ2N1YmUnKSB7XG4gICAgICAgICAgICBzLnBhcmFtcy5yZXNpc3RhbmNlUmF0aW8gPSAwO1xuICAgICAgICAgICAgcy5wYXJhbXMuc2xpZGVzUGVyVmlldyA9IDE7XG4gICAgICAgICAgICBzLnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPSAxO1xuICAgICAgICAgICAgcy5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPSAxO1xuICAgICAgICAgICAgcy5wYXJhbXMuY2VudGVyZWRTbGlkZXMgPSBmYWxzZTtcbiAgICAgICAgICAgIHMucGFyYW1zLnNwYWNlQmV0d2VlbiA9IDA7XG4gICAgICAgICAgICBzLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocy5wYXJhbXMuZWZmZWN0ID09PSAnZmFkZScgfHwgcy5wYXJhbXMuZWZmZWN0ID09PSAnZmxpcCcpIHtcbiAgICAgICAgICAgIHMucGFyYW1zLnNsaWRlc1BlclZpZXcgPSAxO1xuICAgICAgICAgICAgcy5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uID0gMTtcbiAgICAgICAgICAgIHMucGFyYW1zLnNsaWRlc1Blckdyb3VwID0gMTtcbiAgICAgICAgICAgIHMucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgcy5wYXJhbXMuc3BhY2VCZXR3ZWVuID0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5pdGlhbFZpcnR1YWxUcmFuc2xhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcy5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEdyYWIgQ3Vyc29yXG4gICAgICAgIGlmIChzLnBhcmFtcy5ncmFiQ3Vyc29yICYmIHMuc3VwcG9ydC50b3VjaCkge1xuICAgICAgICAgICAgcy5wYXJhbXMuZ3JhYkN1cnNvciA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBXcmFwcGVyXG4gICAgICAgIHMud3JhcHBlciA9IHMuY29udGFpbmVyLmNoaWxkcmVuKCcuJyArIHMucGFyYW1zLndyYXBwZXJDbGFzcyk7XG4gICAgICAgIFxuICAgICAgICAvLyBQYWdpbmF0aW9uXG4gICAgICAgIGlmIChzLnBhcmFtcy5wYWdpbmF0aW9uKSB7XG4gICAgICAgICAgICBzLnBhZ2luYXRpb25Db250YWluZXIgPSAkKHMucGFyYW1zLnBhZ2luYXRpb24pO1xuICAgICAgICAgICAgaWYgKHMucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBzLnBhcmFtcy5wYWdpbmF0aW9uID09PSAnc3RyaW5nJyAmJiBzLnBhZ2luYXRpb25Db250YWluZXIubGVuZ3RoID4gMSAmJiBzLmNvbnRhaW5lci5maW5kKHMucGFyYW1zLnBhZ2luYXRpb24pLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHMucGFnaW5hdGlvbkNvbnRhaW5lciA9IHMuY29udGFpbmVyLmZpbmQocy5wYXJhbXMucGFnaW5hdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLnBhZ2luYXRpb25UeXBlID09PSAnYnVsbGV0cycgJiYgcy5wYXJhbXMucGFnaW5hdGlvbkNsaWNrYWJsZSkge1xuICAgICAgICAgICAgICAgIHMucGFnaW5hdGlvbkNvbnRhaW5lci5hZGRDbGFzcyhzLnBhcmFtcy5wYWdpbmF0aW9uTW9kaWZpZXJDbGFzcyArICdjbGlja2FibGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHMucGFyYW1zLnBhZ2luYXRpb25DbGlja2FibGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHMucGFnaW5hdGlvbkNvbnRhaW5lci5hZGRDbGFzcyhzLnBhcmFtcy5wYWdpbmF0aW9uTW9kaWZpZXJDbGFzcyArIHMucGFyYW1zLnBhZ2luYXRpb25UeXBlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOZXh0L1ByZXYgQnV0dG9uc1xuICAgICAgICBpZiAocy5wYXJhbXMubmV4dEJ1dHRvbiB8fCBzLnBhcmFtcy5wcmV2QnV0dG9uKSB7XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMubmV4dEJ1dHRvbikge1xuICAgICAgICAgICAgICAgIHMubmV4dEJ1dHRvbiA9ICQocy5wYXJhbXMubmV4dEJ1dHRvbik7XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBzLnBhcmFtcy5uZXh0QnV0dG9uID09PSAnc3RyaW5nJyAmJiBzLm5leHRCdXR0b24ubGVuZ3RoID4gMSAmJiBzLmNvbnRhaW5lci5maW5kKHMucGFyYW1zLm5leHRCdXR0b24pLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzLm5leHRCdXR0b24gPSBzLmNvbnRhaW5lci5maW5kKHMucGFyYW1zLm5leHRCdXR0b24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5wcmV2QnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgcy5wcmV2QnV0dG9uID0gJChzLnBhcmFtcy5wcmV2QnV0dG9uKTtcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIHMucGFyYW1zLnByZXZCdXR0b24gPT09ICdzdHJpbmcnICYmIHMucHJldkJ1dHRvbi5sZW5ndGggPiAxICYmIHMuY29udGFpbmVyLmZpbmQocy5wYXJhbXMucHJldkJ1dHRvbikubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHMucHJldkJ1dHRvbiA9IHMuY29udGFpbmVyLmZpbmQocy5wYXJhbXMucHJldkJ1dHRvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBJcyBIb3Jpem9udGFsXG4gICAgICAgIHMuaXNIb3Jpem9udGFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHMucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgICB9O1xuICAgICAgICAvLyBzLmlzSCA9IGlzSDtcbiAgICAgICAgXG4gICAgICAgIC8vIFJUTFxuICAgICAgICBzLnJ0bCA9IHMuaXNIb3Jpem9udGFsKCkgJiYgKHMuY29udGFpbmVyWzBdLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCBzLmNvbnRhaW5lci5jc3MoJ2RpcmVjdGlvbicpID09PSAncnRsJyk7XG4gICAgICAgIGlmIChzLnJ0bCkge1xuICAgICAgICAgICAgcy5jbGFzc05hbWVzLnB1c2gocy5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArICdydGwnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gV3JvbmcgUlRMIHN1cHBvcnRcbiAgICAgICAgaWYgKHMucnRsKSB7XG4gICAgICAgICAgICBzLndyb25nUlRMID0gcy53cmFwcGVyLmNzcygnZGlzcGxheScpID09PSAnLXdlYmtpdC1ib3gnO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDb2x1bW5zXG4gICAgICAgIGlmIChzLnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgICAgICAgICBzLmNsYXNzTmFtZXMucHVzaChzLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgJ211bHRpcm93Jyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIENoZWNrIGZvciBBbmRyb2lkXG4gICAgICAgIGlmIChzLmRldmljZS5hbmRyb2lkKSB7XG4gICAgICAgICAgICBzLmNsYXNzTmFtZXMucHVzaChzLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgJ2FuZHJvaWQnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQWRkIGNsYXNzZXNcbiAgICAgICAgcy5jb250YWluZXIuYWRkQ2xhc3Mocy5jbGFzc05hbWVzLmpvaW4oJyAnKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBUcmFuc2xhdGVcbiAgICAgICAgcy50cmFuc2xhdGUgPSAwO1xuICAgICAgICBcbiAgICAgICAgLy8gUHJvZ3Jlc3NcbiAgICAgICAgcy5wcm9ncmVzcyA9IDA7XG4gICAgICAgIFxuICAgICAgICAvLyBWZWxvY2l0eVxuICAgICAgICBzLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIExvY2tzLCB1bmxvY2tzXG4gICAgICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbiAgICAgICAgcy5sb2NrU3dpcGVUb05leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzLnBhcmFtcy5hbGxvd1N3aXBlVG9OZXh0ID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuYWxsb3dTd2lwZVRvUHJldiA9PT0gZmFsc2UgJiYgcy5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgICAgICAgICAgIHMudW5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHMubG9ja1N3aXBlVG9QcmV2ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcy5wYXJhbXMuYWxsb3dTd2lwZVRvUHJldiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHMucGFyYW1zLmFsbG93U3dpcGVUb05leHQgPT09IGZhbHNlICYmIHMucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgICAgICAgICAgICBzLnVuc2V0R3JhYkN1cnNvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzLmxvY2tTd2lwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzLnBhcmFtcy5hbGxvd1N3aXBlVG9OZXh0ID0gcy5wYXJhbXMuYWxsb3dTd2lwZVRvUHJldiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHMucGFyYW1zLmdyYWJDdXJzb3IpIHMudW5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgICAgIH07XG4gICAgICAgIHMudW5sb2NrU3dpcGVUb05leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzLnBhcmFtcy5hbGxvd1N3aXBlVG9OZXh0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5hbGxvd1N3aXBlVG9QcmV2ID09PSB0cnVlICYmIHMucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgICAgICAgICAgICBzLnNldEdyYWJDdXJzb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcy51bmxvY2tTd2lwZVRvUHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHMucGFyYW1zLmFsbG93U3dpcGVUb1ByZXYgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHMucGFyYW1zLmFsbG93U3dpcGVUb05leHQgPT09IHRydWUgJiYgcy5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgICAgICAgICAgIHMuc2V0R3JhYkN1cnNvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzLnVubG9ja1N3aXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHMucGFyYW1zLmFsbG93U3dpcGVUb05leHQgPSBzLnBhcmFtcy5hbGxvd1N3aXBlVG9QcmV2ID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5ncmFiQ3Vyc29yKSBzLnNldEdyYWJDdXJzb3IoKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIFJvdW5kIGhlbHBlclxuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIGZ1bmN0aW9uIHJvdW5kKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKGEpO1xuICAgICAgICB9XG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIFNldCBncmFiIGN1cnNvclxuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIHMuc2V0R3JhYkN1cnNvciA9IGZ1bmN0aW9uKG1vdmluZykge1xuICAgICAgICAgICAgcy5jb250YWluZXJbMF0uc3R5bGUuY3Vyc29yID0gJ21vdmUnO1xuICAgICAgICAgICAgcy5jb250YWluZXJbMF0uc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJy13ZWJraXQtZ3JhYmJpbmcnIDogJy13ZWJraXQtZ3JhYic7XG4gICAgICAgICAgICBzLmNvbnRhaW5lclswXS5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnLW1vei1ncmFiYmluJyA6ICctbW96LWdyYWInO1xuICAgICAgICAgICAgcy5jb250YWluZXJbMF0uc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJ2dyYWJiaW5nJzogJ2dyYWInO1xuICAgICAgICB9O1xuICAgICAgICBzLnVuc2V0R3JhYkN1cnNvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHMuY29udGFpbmVyWzBdLnN0eWxlLmN1cnNvciA9ICcnO1xuICAgICAgICB9O1xuICAgICAgICBpZiAocy5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgICAgICAgcy5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgICAgIH1cbiAgICAgICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgVXBkYXRlIG9uIEltYWdlcyBSZWFkeVxuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIHMuaW1hZ2VzVG9Mb2FkID0gW107XG4gICAgICAgIHMuaW1hZ2VzTG9hZGVkID0gMDtcbiAgICAgICAgXG4gICAgICAgIHMubG9hZEltYWdlID0gZnVuY3Rpb24gKGltZ0VsZW1lbnQsIHNyYywgc3Jjc2V0LCBzaXplcywgY2hlY2tGb3JDb21wbGV0ZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBpbWFnZTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uUmVhZHkgKCkge1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaW1nRWxlbWVudC5jb21wbGV0ZSB8fCAhY2hlY2tGb3JDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9IG9uUmVhZHk7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlLm9uZXJyb3IgPSBvblJlYWR5O1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2l6ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLnNpemVzID0gc2l6ZXM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNyY3NldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2Uuc3Jjc2V0ID0gc3Jjc2V0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLnNyYyA9IHNyYztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9uUmVhZHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgfSBlbHNlIHsvL2ltYWdlIGFscmVhZHkgbG9hZGVkLi4uXG4gICAgICAgICAgICAgICAgb25SZWFkeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzLnByZWxvYWRJbWFnZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzLmltYWdlc1RvTG9hZCA9IHMuY29udGFpbmVyLmZpbmQoJ2ltZycpO1xuICAgICAgICAgICAgZnVuY3Rpb24gX29uUmVhZHkoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzID09PSAndW5kZWZpbmVkJyB8fCBzID09PSBudWxsIHx8ICFzKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKHMuaW1hZ2VzTG9hZGVkICE9PSB1bmRlZmluZWQpIHMuaW1hZ2VzTG9hZGVkKys7XG4gICAgICAgICAgICAgICAgaWYgKHMuaW1hZ2VzTG9hZGVkID09PSBzLmltYWdlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnVwZGF0ZU9uSW1hZ2VzUmVhZHkpIHMudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHMuZW1pdCgnb25JbWFnZXNSZWFkeScsIHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcy5pbWFnZXNUb0xvYWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzLmxvYWRJbWFnZShzLmltYWdlc1RvTG9hZFtpXSwgKHMuaW1hZ2VzVG9Mb2FkW2ldLmN1cnJlbnRTcmMgfHwgcy5pbWFnZXNUb0xvYWRbaV0uZ2V0QXR0cmlidXRlKCdzcmMnKSksIChzLmltYWdlc1RvTG9hZFtpXS5zcmNzZXQgfHwgcy5pbWFnZXNUb0xvYWRbaV0uZ2V0QXR0cmlidXRlKCdzcmNzZXQnKSksIHMuaW1hZ2VzVG9Mb2FkW2ldLnNpemVzIHx8IHMuaW1hZ2VzVG9Mb2FkW2ldLmdldEF0dHJpYnV0ZSgnc2l6ZXMnKSwgdHJ1ZSwgX29uUmVhZHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgQXV0b3BsYXlcbiAgICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBzLmF1dG9wbGF5VGltZW91dElkID0gdW5kZWZpbmVkO1xuICAgICAgICBzLmF1dG9wbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIHMuYXV0b3BsYXlQYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgZnVuY3Rpb24gYXV0b3BsYXkoKSB7XG4gICAgICAgICAgICB2YXIgYXV0b3BsYXlEZWxheSA9IHMucGFyYW1zLmF1dG9wbGF5O1xuICAgICAgICAgICAgdmFyIGFjdGl2ZVNsaWRlID0gcy5zbGlkZXMuZXEocy5hY3RpdmVJbmRleCk7XG4gICAgICAgICAgICBpZiAoYWN0aXZlU2xpZGUuYXR0cignZGF0YS1zd2lwZXItYXV0b3BsYXknKSkge1xuICAgICAgICAgICAgICAgIGF1dG9wbGF5RGVsYXkgPSBhY3RpdmVTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1hdXRvcGxheScpIHx8IHMucGFyYW1zLmF1dG9wbGF5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcy5hdXRvcGxheVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICAgICAgICAgIHMuZml4TG9vcCgpO1xuICAgICAgICAgICAgICAgICAgICBzLl9zbGlkZU5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgcy5lbWl0KCdvbkF1dG9wbGF5Jywgcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXMuaXNFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuX3NsaWRlTmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5lbWl0KCdvbkF1dG9wbGF5Jywgcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmFtcy5hdXRvcGxheVN0b3BPbkxhc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLl9zbGlkZVRvKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuZW1pdCgnb25BdXRvcGxheScsIHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zdG9wQXV0b3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGF1dG9wbGF5RGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHMuc3RhcnRBdXRvcGxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygcy5hdXRvcGxheVRpbWVvdXRJZCAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghcy5wYXJhbXMuYXV0b3BsYXkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzLmF1dG9wbGF5aW5nKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBzLmF1dG9wbGF5aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHMuZW1pdCgnb25BdXRvcGxheVN0YXJ0Jywgcyk7XG4gICAgICAgICAgICBhdXRvcGxheSgpO1xuICAgICAgICB9O1xuICAgICAgICBzLnN0b3BBdXRvcGxheSA9IGZ1bmN0aW9uIChpbnRlcm5hbCkge1xuICAgICAgICAgICAgaWYgKCFzLmF1dG9wbGF5VGltZW91dElkKSByZXR1cm47XG4gICAgICAgICAgICBpZiAocy5hdXRvcGxheVRpbWVvdXRJZCkgY2xlYXJUaW1lb3V0KHMuYXV0b3BsYXlUaW1lb3V0SWQpO1xuICAgICAgICAgICAgcy5hdXRvcGxheWluZyA9IGZhbHNlO1xuICAgICAgICAgICAgcy5hdXRvcGxheVRpbWVvdXRJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHMuZW1pdCgnb25BdXRvcGxheVN0b3AnLCBzKTtcbiAgICAgICAgfTtcbiAgICAgICAgcy5wYXVzZUF1dG9wbGF5ID0gZnVuY3Rpb24gKHNwZWVkKSB7XG4gICAgICAgICAgICBpZiAocy5hdXRvcGxheVBhdXNlZCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHMuYXV0b3BsYXlUaW1lb3V0SWQpIGNsZWFyVGltZW91dChzLmF1dG9wbGF5VGltZW91dElkKTtcbiAgICAgICAgICAgIHMuYXV0b3BsYXlQYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcy5hdXRvcGxheVBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGF1dG9wbGF5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzLndyYXBwZXIudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcykgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBzLmF1dG9wbGF5UGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcy5hdXRvcGxheWluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5zdG9wQXV0b3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgTWluL01heCBUcmFuc2xhdGVcbiAgICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBzLm1pblRyYW5zbGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAoLXMuc25hcEdyaWRbMF0pO1xuICAgICAgICB9O1xuICAgICAgICBzLm1heFRyYW5zbGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAoLXMuc25hcEdyaWRbcy5zbmFwR3JpZC5sZW5ndGggLSAxXSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIFNsaWRlci9zbGlkZXMgc2l6ZXNcbiAgICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBzLnVwZGF0ZUF1dG9IZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYWN0aXZlU2xpZGVzID0gW107XG4gICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICBcbiAgICAgICAgICAgIC8vIEZpbmQgc2xpZGVzIGN1cnJlbnRseSBpbiB2aWV3XG4gICAgICAgICAgICBpZihzLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgcy5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgTWF0aC5jZWlsKHMucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gcy5hY3RpdmVJbmRleCArIGk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGluZGV4ID4gcy5zbGlkZXMubGVuZ3RoKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2gocy5zbGlkZXMuZXEoaW5kZXgpWzBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHMuc2xpZGVzLmVxKHMuYWN0aXZlSW5kZXgpWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAvLyBGaW5kIG5ldyBoZWlnaHQgZnJvbSBoZWlnaGVzdCBzbGlkZSBpbiB2aWV3XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlU2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZXNbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBhY3RpdmVTbGlkZXNbaV0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBuZXdIZWlnaHQgPSBoZWlnaHQgPiBuZXdIZWlnaHQgPyBoZWlnaHQgOiBuZXdIZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBIZWlnaHRcbiAgICAgICAgICAgIGlmIChuZXdIZWlnaHQpIHMud3JhcHBlci5jc3MoJ2hlaWdodCcsIG5ld0hlaWdodCArICdweCcpO1xuICAgICAgICB9O1xuICAgICAgICBzLnVwZGF0ZUNvbnRhaW5lclNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGgsIGhlaWdodDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygcy5wYXJhbXMud2lkdGggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgd2lkdGggPSBzLnBhcmFtcy53aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHdpZHRoID0gcy5jb250YWluZXJbMF0uY2xpZW50V2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHMucGFyYW1zLmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBzLnBhcmFtcy5oZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBzLmNvbnRhaW5lclswXS5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2lkdGggPT09IDAgJiYgcy5pc0hvcml6b250YWwoKSB8fCBoZWlnaHQgPT09IDAgJiYgIXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgLy9TdWJ0cmFjdCBwYWRkaW5nc1xuICAgICAgICAgICAgd2lkdGggPSB3aWR0aCAtIHBhcnNlSW50KHMuY29udGFpbmVyLmNzcygncGFkZGluZy1sZWZ0JyksIDEwKSAtIHBhcnNlSW50KHMuY29udGFpbmVyLmNzcygncGFkZGluZy1yaWdodCcpLCAxMCk7XG4gICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChzLmNvbnRhaW5lci5jc3MoJ3BhZGRpbmctdG9wJyksIDEwKSAtIHBhcnNlSW50KHMuY29udGFpbmVyLmNzcygncGFkZGluZy1ib3R0b20nKSwgMTApO1xuICAgICAgICBcbiAgICAgICAgICAgIC8vIFN0b3JlIHZhbHVlc1xuICAgICAgICAgICAgcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgICAgICBzLnNpemUgPSBzLmlzSG9yaXpvbnRhbCgpID8gcy53aWR0aCA6IHMuaGVpZ2h0O1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgcy51cGRhdGVTbGlkZXNTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcy5zbGlkZXMgPSBzLndyYXBwZXIuY2hpbGRyZW4oJy4nICsgcy5wYXJhbXMuc2xpZGVDbGFzcyk7XG4gICAgICAgICAgICBzLnNuYXBHcmlkID0gW107XG4gICAgICAgICAgICBzLnNsaWRlc0dyaWQgPSBbXTtcbiAgICAgICAgICAgIHMuc2xpZGVzU2l6ZXNHcmlkID0gW107XG4gICAgICAgIFxuICAgICAgICAgICAgdmFyIHNwYWNlQmV0d2VlbiA9IHMucGFyYW1zLnNwYWNlQmV0d2VlbixcbiAgICAgICAgICAgICAgICBzbGlkZVBvc2l0aW9uID0gLXMucGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIHByZXZTbGlkZVNpemUgPSAwLFxuICAgICAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygcy5zaXplID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogcy5zaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIHMudmlydHVhbFNpemUgPSAtc3BhY2VCZXR3ZWVuO1xuICAgICAgICAgICAgLy8gcmVzZXQgbWFyZ2luc1xuICAgICAgICAgICAgaWYgKHMucnRsKSBzLnNsaWRlcy5jc3Moe21hcmdpbkxlZnQ6ICcnLCBtYXJnaW5Ub3A6ICcnfSk7XG4gICAgICAgICAgICBlbHNlIHMuc2xpZGVzLmNzcyh7bWFyZ2luUmlnaHQ6ICcnLCBtYXJnaW5Cb3R0b206ICcnfSk7XG4gICAgICAgIFxuICAgICAgICAgICAgdmFyIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSkge1xuICAgICAgICAgICAgICAgIGlmIChNYXRoLmZsb29yKHMuc2xpZGVzLmxlbmd0aCAvIHMucGFyYW1zLnNsaWRlc1BlckNvbHVtbikgPT09IHMuc2xpZGVzLmxlbmd0aCAvIHMucGFyYW1zLnNsaWRlc1BlckNvbHVtbikge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gcy5zbGlkZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IE1hdGguY2VpbChzLnNsaWRlcy5sZW5ndGggLyBzLnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pICogcy5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHMucGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdyb3cnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLm1heChzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzLCBzLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICogcy5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gQ2FsYyBzbGlkZXNcbiAgICAgICAgICAgIHZhciBzbGlkZVNpemU7XG4gICAgICAgICAgICB2YXIgc2xpZGVzUGVyQ29sdW1uID0gcy5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uO1xuICAgICAgICAgICAgdmFyIHNsaWRlc1BlclJvdyA9IHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyBzbGlkZXNQZXJDb2x1bW47XG4gICAgICAgICAgICB2YXIgbnVtRnVsbENvbHVtbnMgPSBzbGlkZXNQZXJSb3cgLSAocy5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uICogc2xpZGVzUGVyUm93IC0gcy5zbGlkZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzLnNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHNsaWRlU2l6ZSA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gcy5zbGlkZXMuZXEoaSk7XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHNsaWRlcyBvcmRlclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3U2xpZGVPcmRlckluZGV4O1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uLCByb3c7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAnY29sdW1uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uID0gTWF0aC5mbG9vcihpIC8gc2xpZGVzUGVyQ29sdW1uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdyA9IGkgLSBjb2x1bW4gKiBzbGlkZXNQZXJDb2x1bW47XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uID4gbnVtRnVsbENvbHVtbnMgfHwgKGNvbHVtbiA9PT0gbnVtRnVsbENvbHVtbnMgJiYgcm93ID09PSBzbGlkZXNQZXJDb2x1bW4tMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKytyb3cgPj0gc2xpZGVzUGVyQ29sdW1uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NsaWRlT3JkZXJJbmRleCA9IGNvbHVtbiArIHJvdyAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyBzbGlkZXNQZXJDb2x1bW47XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cCc6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1tb3otYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICctbXMtZmxleC1vcmRlcic6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtb3JkZXInOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcmRlcic6IG5ld1NsaWRlT3JkZXJJbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93ID0gTWF0aC5mbG9vcihpIC8gc2xpZGVzUGVyUm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbiA9IGkgLSByb3cgKiBzbGlkZXNQZXJSb3c7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21hcmdpbi0nICsgKHMuaXNIb3Jpem9udGFsKCkgPyAndG9wJyA6ICdsZWZ0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJvdyAhPT0gMCAmJiBzLnBhcmFtcy5zcGFjZUJldHdlZW4pICYmIChzLnBhcmFtcy5zcGFjZUJldHdlZW4gKyAncHgnKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc3dpcGVyLWNvbHVtbicsIGNvbHVtbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXN3aXBlci1yb3cnLCByb3cpO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVTaXplID0gcy5pc0hvcml6b250YWwoKSA/IHNsaWRlLm91dGVyV2lkdGgodHJ1ZSkgOiBzbGlkZS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gcm91bmQoc2xpZGVTaXplKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlU2l6ZSA9IChzLnNpemUgLSAocy5wYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSAvIHMucGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IHJvdW5kKHNsaWRlU2l6ZSk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAocy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5zbGlkZXNbaV0uc3R5bGUud2lkdGggPSBzbGlkZVNpemUgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5zbGlkZXNbaV0uc3R5bGUuaGVpZ2h0ID0gc2xpZGVTaXplICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzLnNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgICAgICAgICAgICAgcy5zbGlkZXNTaXplc0dyaWQucHVzaChzbGlkZVNpemUpO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplIC8gMiArIHByZXZTbGlkZVNpemUgLyAyICsgc3BhY2VCZXR3ZWVuO1xuICAgICAgICAgICAgICAgICAgICBpZihwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gcy5zaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gcy5zaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHNsaWRlUG9zaXRpb24pIDwgMSAvIDEwMDApIHNsaWRlUG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGluZGV4KSAlIHMucGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzLnNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHMuc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChpbmRleCkgJSBzLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgcy5zbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBzLnNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICBzLnZpcnR1YWxTaXplICs9IHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgcHJldlNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgaW5kZXggKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzLnZpcnR1YWxTaXplID0gTWF0aC5tYXgocy52aXJ0dWFsU2l6ZSwgcy5zaXplKSArIHMucGFyYW1zLnNsaWRlc09mZnNldEFmdGVyO1xuICAgICAgICAgICAgdmFyIG5ld1NsaWRlc0dyaWQ7XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHMucnRsICYmIHMud3JvbmdSVEwgJiYgKHMucGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBzLnBhcmFtcy5lZmZlY3QgPT09ICdjb3ZlcmZsb3cnKSkge1xuICAgICAgICAgICAgICAgIHMud3JhcHBlci5jc3Moe3dpZHRoOiBzLnZpcnR1YWxTaXplICsgcy5wYXJhbXMuc3BhY2VCZXR3ZWVuICsgJ3B4J30pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzLnN1cHBvcnQuZmxleGJveCB8fCBzLnBhcmFtcy5zZXRXcmFwcGVyU2l6ZSkge1xuICAgICAgICAgICAgICAgIGlmIChzLmlzSG9yaXpvbnRhbCgpKSBzLndyYXBwZXIuY3NzKHt3aWR0aDogcy52aXJ0dWFsU2l6ZSArIHMucGFyYW1zLnNwYWNlQmV0d2VlbiArICdweCd9KTtcbiAgICAgICAgICAgICAgICBlbHNlIHMud3JhcHBlci5jc3Moe2hlaWdodDogcy52aXJ0dWFsU2l6ZSArIHMucGFyYW1zLnNwYWNlQmV0d2VlbiArICdweCd9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSkge1xuICAgICAgICAgICAgICAgIHMudmlydHVhbFNpemUgPSAoc2xpZGVTaXplICsgcy5wYXJhbXMuc3BhY2VCZXR3ZWVuKSAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7XG4gICAgICAgICAgICAgICAgcy52aXJ0dWFsU2l6ZSA9IE1hdGguY2VpbChzLnZpcnR1YWxTaXplIC8gcy5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSAtIHMucGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICAgICAgICAgICAgICBpZiAocy5pc0hvcml6b250YWwoKSkgcy53cmFwcGVyLmNzcyh7d2lkdGg6IHMudmlydHVhbFNpemUgKyBzLnBhcmFtcy5zcGFjZUJldHdlZW4gKyAncHgnfSk7XG4gICAgICAgICAgICAgICAgZWxzZSBzLndyYXBwZXIuY3NzKHtoZWlnaHQ6IHMudmlydHVhbFNpemUgKyBzLnBhcmFtcy5zcGFjZUJldHdlZW4gKyAncHgnfSk7XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHMuc25hcEdyaWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLnNuYXBHcmlkW2ldIDwgcy52aXJ0dWFsU2l6ZSArIHMuc25hcEdyaWRbMF0pIG5ld1NsaWRlc0dyaWQucHVzaChzLnNuYXBHcmlkW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzLnNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gUmVtb3ZlIGxhc3QgZ3JpZCBlbGVtZW50cyBkZXBlbmRpbmcgb24gd2lkdGhcbiAgICAgICAgICAgIGlmICghcy5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgICAgICAgICBuZXdTbGlkZXNHcmlkID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHMuc25hcEdyaWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMuc25hcEdyaWRbaV0gPD0gcy52aXJ0dWFsU2l6ZSAtIHMuc2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2xpZGVzR3JpZC5wdXNoKHMuc25hcEdyaWRbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHMuc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgICAgICAgICAgICAgIGlmIChNYXRoLmZsb29yKHMudmlydHVhbFNpemUgLSBzLnNpemUpIC0gTWF0aC5mbG9vcihzLnNuYXBHcmlkW3Muc25hcEdyaWQubGVuZ3RoIC0gMV0pID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBzLnNuYXBHcmlkLnB1c2gocy52aXJ0dWFsU2l6ZSAtIHMuc2l6ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMuc25hcEdyaWQubGVuZ3RoID09PSAwKSBzLnNuYXBHcmlkID0gWzBdO1xuICAgICAgICBcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5zcGFjZUJldHdlZW4gIT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAocy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5ydGwpIHMuc2xpZGVzLmNzcyh7bWFyZ2luTGVmdDogc3BhY2VCZXR3ZWVuICsgJ3B4J30pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHMuc2xpZGVzLmNzcyh7bWFyZ2luUmlnaHQ6IHNwYWNlQmV0d2VlbiArICdweCd9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBzLnNsaWRlcy5jc3Moe21hcmdpbkJvdHRvbTogc3BhY2VCZXR3ZWVuICsgJ3B4J30pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICBzLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzLnVwZGF0ZVNsaWRlc09mZnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcy5zbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzLnNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IHMuaXNIb3Jpem9udGFsKCkgPyBzLnNsaWRlc1tpXS5vZmZzZXRMZWZ0IDogcy5zbGlkZXNbaV0ub2Zmc2V0VG9wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgRHluYW1pYyBTbGlkZXMgUGVyIFZpZXdcbiAgICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBzLmN1cnJlbnRTbGlkZXNQZXJWaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNwdiA9IDEsIGksIGo7XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IHMuc2xpZGVzW3MuYWN0aXZlSW5kZXhdLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICAgICAgICB2YXIgYnJlYWtMb29wO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IHMuYWN0aXZlSW5kZXggKyAxOyBpIDwgcy5zbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMuc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgKz0gcy5zbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3B2ICsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNpemUgPiBzLnNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChqID0gcy5hY3RpdmVJbmRleCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzLnNsaWRlc1tqXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplICs9IHMuc2xpZGVzW2pdLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwdiArKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaXplID4gcy5zaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gcy5hY3RpdmVJbmRleCArIDE7IGkgPCBzLnNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5zbGlkZXNHcmlkW2ldIC0gcy5zbGlkZXNHcmlkW3MuYWN0aXZlSW5kZXhdIDwgcy5zaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcHYrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzcHY7XG4gICAgICAgIH07XG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIFNsaWRlci9zbGlkZXMgcHJvZ3Jlc3NcbiAgICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBzLnVwZGF0ZVNsaWRlc1Byb2dyZXNzID0gZnVuY3Rpb24gKHRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0cmFuc2xhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlID0gcy50cmFuc2xhdGUgfHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnNsaWRlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygcy5zbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQgPT09ICd1bmRlZmluZWQnKSBzLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICAgICAgICBcbiAgICAgICAgICAgIHZhciBvZmZzZXRDZW50ZXIgPSAtdHJhbnNsYXRlO1xuICAgICAgICAgICAgaWYgKHMucnRsKSBvZmZzZXRDZW50ZXIgPSB0cmFuc2xhdGU7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gVmlzaWJsZSBTbGlkZXNcbiAgICAgICAgICAgIHMuc2xpZGVzLnJlbW92ZUNsYXNzKHMucGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcy5zbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBzLnNsaWRlc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGVQcm9ncmVzcyA9IChvZmZzZXRDZW50ZXIgKyAocy5wYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgcy5wYXJhbXMuc3BhY2VCZXR3ZWVuKTtcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzbGlkZUJlZm9yZSA9IC0ob2Zmc2V0Q2VudGVyIC0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVBZnRlciA9IHNsaWRlQmVmb3JlICsgcy5zbGlkZXNTaXplc0dyaWRbaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1Zpc2libGUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgKHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzLnNpemUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoc2xpZGVBZnRlciA+IDAgJiYgc2xpZGVBZnRlciA8PSBzLnNpemUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoc2xpZGVCZWZvcmUgPD0gMCAmJiBzbGlkZUFmdGVyID49IHMuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuc2xpZGVzLmVxKGkpLmFkZENsYXNzKHMucGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzbGlkZS5wcm9ncmVzcyA9IHMucnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzLnVwZGF0ZVByb2dyZXNzID0gZnVuY3Rpb24gKHRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0cmFuc2xhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlID0gcy50cmFuc2xhdGUgfHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVzRGlmZiA9IHMubWF4VHJhbnNsYXRlKCkgLSBzLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICAgICAgdmFyIHdhc0JlZ2lubmluZyA9IHMuaXNCZWdpbm5pbmc7XG4gICAgICAgICAgICB2YXIgd2FzRW5kID0gcy5pc0VuZDtcbiAgICAgICAgICAgIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHMucHJvZ3Jlc3MgPSAwO1xuICAgICAgICAgICAgICAgIHMuaXNCZWdpbm5pbmcgPSBzLmlzRW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHMucHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gcy5taW5UcmFuc2xhdGUoKSkgLyAodHJhbnNsYXRlc0RpZmYpO1xuICAgICAgICAgICAgICAgIHMuaXNCZWdpbm5pbmcgPSBzLnByb2dyZXNzIDw9IDA7XG4gICAgICAgICAgICAgICAgcy5pc0VuZCA9IHMucHJvZ3Jlc3MgPj0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLmlzQmVnaW5uaW5nICYmICF3YXNCZWdpbm5pbmcpIHMuZW1pdCgnb25SZWFjaEJlZ2lubmluZycsIHMpO1xuICAgICAgICAgICAgaWYgKHMuaXNFbmQgJiYgIXdhc0VuZCkgcy5lbWl0KCdvblJlYWNoRW5kJywgcyk7XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHMudXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgICAgICAgICAgIHMuZW1pdCgnb25Qcm9ncmVzcycsIHMsIHMucHJvZ3Jlc3MpO1xuICAgICAgICB9O1xuICAgICAgICBzLnVwZGF0ZUFjdGl2ZUluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZSA9IHMucnRsID8gcy50cmFuc2xhdGUgOiAtcy50cmFuc2xhdGU7XG4gICAgICAgICAgICB2YXIgbmV3QWN0aXZlSW5kZXgsIGksIHNuYXBJbmRleDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzLnNsaWRlc0dyaWQubGVuZ3RoOyBpICsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzLnNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRlID49IHMuc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzLnNsaWRlc0dyaWRbaSArIDFdIC0gKHMuc2xpZGVzR3JpZFtpICsgMV0gLSBzLnNsaWRlc0dyaWRbaV0pIC8gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QWN0aXZlSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzLnNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgcy5zbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QWN0aXZlSW5kZXggPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0ZSA+PSBzLnNsaWRlc0dyaWRbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0FjdGl2ZUluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gICAgICAgICAgICBpZihzLnBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KXtcbiAgICAgICAgICAgICAgICBpZiAobmV3QWN0aXZlSW5kZXggPCAwIHx8IHR5cGVvZiBuZXdBY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIG5ld0FjdGl2ZUluZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGZvciAoaSA9IDA7IGkgPCBzLnNsaWRlc0dyaWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvLyBpZiAoLSB0cmFuc2xhdGUgPj0gcy5zbGlkZXNHcmlkW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5ld0FjdGl2ZUluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBzbmFwSW5kZXggPSBNYXRoLmZsb29yKG5ld0FjdGl2ZUluZGV4IC8gcy5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgICAgICAgaWYgKHNuYXBJbmRleCA+PSBzLnNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gcy5zbmFwR3JpZC5sZW5ndGggLSAxO1xuICAgICAgICBcbiAgICAgICAgICAgIGlmIChuZXdBY3RpdmVJbmRleCA9PT0gcy5hY3RpdmVJbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHMuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgICAgICAgcy5wcmV2aW91c0luZGV4ID0gcy5hY3RpdmVJbmRleDtcbiAgICAgICAgICAgIHMuYWN0aXZlSW5kZXggPSBuZXdBY3RpdmVJbmRleDtcbiAgICAgICAgICAgIHMudXBkYXRlQ2xhc3NlcygpO1xuICAgICAgICAgICAgcy51cGRhdGVSZWFsSW5kZXgoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcy51cGRhdGVSZWFsSW5kZXggPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcy5yZWFsSW5kZXggPSBwYXJzZUludChzLnNsaWRlcy5lcShzLmFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIHx8IHMuYWN0aXZlSW5kZXgsIDEwKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIENsYXNzZXNcbiAgICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBzLnVwZGF0ZUNsYXNzZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzLnNsaWRlcy5yZW1vdmVDbGFzcyhzLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzICsgJyAnICsgcy5wYXJhbXMuc2xpZGVOZXh0Q2xhc3MgKyAnICcgKyBzLnBhcmFtcy5zbGlkZVByZXZDbGFzcyArICcgJyArIHMucGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MgKyAnICcgKyBzLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyArICcgJyArIHMucGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTtcbiAgICAgICAgICAgIHZhciBhY3RpdmVTbGlkZSA9IHMuc2xpZGVzLmVxKHMuYWN0aXZlSW5kZXgpO1xuICAgICAgICAgICAgLy8gQWN0aXZlIGNsYXNzZXNcbiAgICAgICAgICAgIGFjdGl2ZVNsaWRlLmFkZENsYXNzKHMucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuICAgICAgICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICAgICAgLy8gRHVwbGljYXRlIHRvIGFsbCBsb29wZWQgc2xpZGVzXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVNsaWRlLmhhc0NsYXNzKHMucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIHMud3JhcHBlci5jaGlsZHJlbignLicgKyBzLnBhcmFtcy5zbGlkZUNsYXNzICsgJzpub3QoLicgKyBzLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgJylbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInICsgcy5yZWFsSW5kZXggKyAnXCJdJykuYWRkQ2xhc3Mocy5wYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzLndyYXBwZXIuY2hpbGRyZW4oJy4nICsgcy5wYXJhbXMuc2xpZGVDbGFzcyArICcuJyArIHMucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyAnW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJyArIHMucmVhbEluZGV4ICsgJ1wiXScpLmFkZENsYXNzKHMucGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5leHQgU2xpZGVcbiAgICAgICAgICAgIHZhciBuZXh0U2xpZGUgPSBhY3RpdmVTbGlkZS5uZXh0KCcuJyArIHMucGFyYW1zLnNsaWRlQ2xhc3MpLmFkZENsYXNzKHMucGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5sb29wICYmIG5leHRTbGlkZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBuZXh0U2xpZGUgPSBzLnNsaWRlcy5lcSgwKTtcbiAgICAgICAgICAgICAgICBuZXh0U2xpZGUuYWRkQ2xhc3Mocy5wYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUHJldiBTbGlkZVxuICAgICAgICAgICAgdmFyIHByZXZTbGlkZSA9IGFjdGl2ZVNsaWRlLnByZXYoJy4nICsgcy5wYXJhbXMuc2xpZGVDbGFzcykuYWRkQ2xhc3Mocy5wYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgICAgICAgaWYgKHMucGFyYW1zLmxvb3AgJiYgcHJldlNsaWRlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHByZXZTbGlkZSA9IHMuc2xpZGVzLmVxKC0xKTtcbiAgICAgICAgICAgICAgICBwcmV2U2xpZGUuYWRkQ2xhc3Mocy5wYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICAgICAgLy8gRHVwbGljYXRlIHRvIGFsbCBsb29wZWQgc2xpZGVzXG4gICAgICAgICAgICAgICAgaWYgKG5leHRTbGlkZS5oYXNDbGFzcyhzLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgICAgICAgICBzLndyYXBwZXIuY2hpbGRyZW4oJy4nICsgcy5wYXJhbXMuc2xpZGVDbGFzcyArICc6bm90KC4nICsgcy5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArICcpW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJyArIG5leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICsgJ1wiXScpLmFkZENsYXNzKHMucGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHMud3JhcHBlci5jaGlsZHJlbignLicgKyBzLnBhcmFtcy5zbGlkZUNsYXNzICsgJy4nICsgcy5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArICdbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInICsgbmV4dFNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKyAnXCJdJykuYWRkQ2xhc3Mocy5wYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJldlNsaWRlLmhhc0NsYXNzKHMucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIHMud3JhcHBlci5jaGlsZHJlbignLicgKyBzLnBhcmFtcy5zbGlkZUNsYXNzICsgJzpub3QoLicgKyBzLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgJylbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInICsgcHJldlNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKyAnXCJdJykuYWRkQ2xhc3Mocy5wYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcy53cmFwcGVyLmNoaWxkcmVuKCcuJyArIHMucGFyYW1zLnNsaWRlQ2xhc3MgKyAnLicgKyBzLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgJ1tkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIicgKyBwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSArICdcIl0nKS5hZGRDbGFzcyhzLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIC8vIFBhZ2luYXRpb25cbiAgICAgICAgICAgIGlmIChzLnBhZ2luYXRpb25Db250YWluZXIgJiYgcy5wYWdpbmF0aW9uQ29udGFpbmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBDdXJyZW50L1RvdGFsXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsID0gcy5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgocy5zbGlkZXMubGVuZ3RoIC0gcy5sb29wZWRTbGlkZXMgKiAyKSAvIHMucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHMuc25hcEdyaWQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBNYXRoLmNlaWwoKHMuYWN0aXZlSW5kZXggLSBzLmxvb3BlZFNsaWRlcykvcy5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCA+IHMuc2xpZGVzLmxlbmd0aCAtIDEgLSBzLmxvb3BlZFNsaWRlcyAqIDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50IC0gKHMuc2xpZGVzLmxlbmd0aCAtIHMubG9vcGVkU2xpZGVzICogMik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgPiB0b3RhbCAtIDEpIGN1cnJlbnQgPSBjdXJyZW50IC0gdG90YWw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50IDwgMCAmJiBzLnBhcmFtcy5wYWdpbmF0aW9uVHlwZSAhPT0gJ2J1bGxldHMnKSBjdXJyZW50ID0gdG90YWwgKyBjdXJyZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzLnNuYXBJbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBzLnNuYXBJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBzLmFjdGl2ZUluZGV4IHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVHlwZXNcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMucGFnaW5hdGlvblR5cGUgPT09ICdidWxsZXRzJyAmJiBzLmJ1bGxldHMgJiYgcy5idWxsZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcy5idWxsZXRzLnJlbW92ZUNsYXNzKHMucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFnaW5hdGlvbkNvbnRhaW5lci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLmJ1bGxldHMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaW5kZXgoKSA9PT0gY3VycmVudCkgJCh0aGlzKS5hZGRDbGFzcyhzLnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuYnVsbGV0cy5lcShjdXJyZW50KS5hZGRDbGFzcyhzLnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnBhZ2luYXRpb25UeXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHMucGFnaW5hdGlvbkNvbnRhaW5lci5maW5kKCcuJyArIHMucGFyYW1zLnBhZ2luYXRpb25DdXJyZW50Q2xhc3MpLnRleHQoY3VycmVudCArIDEpO1xuICAgICAgICAgICAgICAgICAgICBzLnBhZ2luYXRpb25Db250YWluZXIuZmluZCgnLicgKyBzLnBhcmFtcy5wYWdpbmF0aW9uVG90YWxDbGFzcykudGV4dCh0b3RhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5wYWdpbmF0aW9uVHlwZSA9PT0gJ3Byb2dyZXNzJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSAoY3VycmVudCArIDEpIC8gdG90YWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVggPSBzY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlWSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVZID0gc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVggPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHMucGFnaW5hdGlvbkNvbnRhaW5lci5maW5kKCcuJyArIHMucGFyYW1zLnBhZ2luYXRpb25Qcm9ncmVzc2JhckNsYXNzKS50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoJyArIHNjYWxlWCArICcpIHNjYWxlWSgnICsgc2NhbGVZICsgJyknKS50cmFuc2l0aW9uKHMucGFyYW1zLnNwZWVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnBhZ2luYXRpb25UeXBlID09PSAnY3VzdG9tJyAmJiBzLnBhcmFtcy5wYWdpbmF0aW9uQ3VzdG9tUmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHMucGFnaW5hdGlvbkNvbnRhaW5lci5odG1sKHMucGFyYW1zLnBhZ2luYXRpb25DdXN0b21SZW5kZXIocywgY3VycmVudCArIDEsIHRvdGFsKSk7XG4gICAgICAgICAgICAgICAgICAgIHMuZW1pdCgnb25QYWdpbmF0aW9uUmVuZGVyZWQnLCBzLCBzLnBhZ2luYXRpb25Db250YWluZXJbMF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAvLyBOZXh0L2FjdGl2ZSBidXR0b25zXG4gICAgICAgICAgICBpZiAoIXMucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMucHJldkJ1dHRvbiAmJiBzLnByZXZCdXR0b24gJiYgcy5wcmV2QnV0dG9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMucHJldkJ1dHRvbi5hZGRDbGFzcyhzLnBhcmFtcy5idXR0b25EaXNhYmxlZENsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5hMTF5ICYmIHMuYTExeSkgcy5hMTF5LmRpc2FibGUocy5wcmV2QnV0dG9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMucHJldkJ1dHRvbi5yZW1vdmVDbGFzcyhzLnBhcmFtcy5idXR0b25EaXNhYmxlZENsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5hMTF5ICYmIHMuYTExeSkgcy5hMTF5LmVuYWJsZShzLnByZXZCdXR0b24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5uZXh0QnV0dG9uICYmIHMubmV4dEJ1dHRvbiAmJiBzLm5leHRCdXR0b24ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5pc0VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5uZXh0QnV0dG9uLmFkZENsYXNzKHMucGFyYW1zLmJ1dHRvbkRpc2FibGVkQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmExMXkgJiYgcy5hMTF5KSBzLmExMXkuZGlzYWJsZShzLm5leHRCdXR0b24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5uZXh0QnV0dG9uLnJlbW92ZUNsYXNzKHMucGFyYW1zLmJ1dHRvbkRpc2FibGVkQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmExMXkgJiYgcy5hMTF5KSBzLmExMXkuZW5hYmxlKHMubmV4dEJ1dHRvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICBQYWdpbmF0aW9uXG4gICAgICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbiAgICAgICAgcy51cGRhdGVQYWdpbmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFzLnBhcmFtcy5wYWdpbmF0aW9uKSByZXR1cm47XG4gICAgICAgICAgICBpZiAocy5wYWdpbmF0aW9uQ29udGFpbmVyICYmIHMucGFnaW5hdGlvbkNvbnRhaW5lci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhZ2luYXRpb25IVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnBhZ2luYXRpb25UeXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG51bWJlck9mQnVsbGV0cyA9IHMucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoKHMuc2xpZGVzLmxlbmd0aCAtIHMubG9vcGVkU2xpZGVzICogMikgLyBzLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZkJ1bGxldHM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnBhZ2luYXRpb25CdWxsZXRSZW5kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBzLnBhcmFtcy5wYWdpbmF0aW9uQnVsbGV0UmVuZGVyKHMsIGksIHMucGFyYW1zLmJ1bGxldENsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9ICc8JyArIHMucGFyYW1zLnBhZ2luYXRpb25FbGVtZW50KycgY2xhc3M9XCInICsgcy5wYXJhbXMuYnVsbGV0Q2xhc3MgKyAnXCI+PC8nICsgcy5wYXJhbXMucGFnaW5hdGlvbkVsZW1lbnQgKyAnPic7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcy5wYWdpbmF0aW9uQ29udGFpbmVyLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgICAgICAgICAgICAgICAgICBzLmJ1bGxldHMgPSBzLnBhZ2luYXRpb25Db250YWluZXIuZmluZCgnLicgKyBzLnBhcmFtcy5idWxsZXRDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5wYWdpbmF0aW9uQ2xpY2thYmxlICYmIHMucGFyYW1zLmExMXkgJiYgcy5hMTF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLmExMXkuaW5pdFBhZ2luYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMucGFnaW5hdGlvblR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnBhZ2luYXRpb25GcmFjdGlvblJlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBzLnBhcmFtcy5wYWdpbmF0aW9uRnJhY3Rpb25SZW5kZXIocywgcy5wYXJhbXMucGFnaW5hdGlvbkN1cnJlbnRDbGFzcywgcy5wYXJhbXMucGFnaW5hdGlvblRvdGFsQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbkhUTUwgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cIicgKyBzLnBhcmFtcy5wYWdpbmF0aW9uQ3VycmVudENsYXNzICsgJ1wiPjwvc3Bhbj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIC8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiJyArIHMucGFyYW1zLnBhZ2luYXRpb25Ub3RhbENsYXNzKydcIj48L3NwYW4+JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzLnBhZ2luYXRpb25Db250YWluZXIuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5wYWdpbmF0aW9uVHlwZSA9PT0gJ3Byb2dyZXNzJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMucGFnaW5hdGlvblByb2dyZXNzUmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHMucGFyYW1zLnBhZ2luYXRpb25Qcm9ncmVzc1JlbmRlcihzLCBzLnBhcmFtcy5wYWdpbmF0aW9uUHJvZ3Jlc3NiYXJDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uSFRNTCA9ICc8c3BhbiBjbGFzcz1cIicgKyBzLnBhcmFtcy5wYWdpbmF0aW9uUHJvZ3Jlc3NiYXJDbGFzcyArICdcIj48L3NwYW4+JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzLnBhZ2luYXRpb25Db250YWluZXIuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5wYWdpbmF0aW9uVHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgcy5lbWl0KCdvblBhZ2luYXRpb25SZW5kZXJlZCcsIHMsIHMucGFnaW5hdGlvbkNvbnRhaW5lclswXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICBDb21tb24gdXBkYXRlIG1ldGhvZFxuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIHMudXBkYXRlID0gZnVuY3Rpb24gKHVwZGF0ZVRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgaWYgKCFzKSByZXR1cm47XG4gICAgICAgICAgICBzLnVwZGF0ZUNvbnRhaW5lclNpemUoKTtcbiAgICAgICAgICAgIHMudXBkYXRlU2xpZGVzU2l6ZSgpO1xuICAgICAgICAgICAgcy51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICAgICAgcy51cGRhdGVQYWdpbmF0aW9uKCk7XG4gICAgICAgICAgICBzLnVwZGF0ZUNsYXNzZXMoKTtcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5zY3JvbGxiYXIgJiYgcy5zY3JvbGxiYXIpIHtcbiAgICAgICAgICAgICAgICBzLnNjcm9sbGJhci5zZXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBuZXdUcmFuc2xhdGU7XG4gICAgICAgICAgICBmdW5jdGlvbiBmb3JjZVNldFRyYW5zbGF0ZSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlID0gcy5ydGwgPyAtcy50cmFuc2xhdGUgOiBzLnRyYW5zbGF0ZTtcbiAgICAgICAgICAgICAgICBuZXdUcmFuc2xhdGUgPSBNYXRoLm1pbihNYXRoLm1heChzLnRyYW5zbGF0ZSwgcy5tYXhUcmFuc2xhdGUoKSksIHMubWluVHJhbnNsYXRlKCkpO1xuICAgICAgICAgICAgICAgIHMuc2V0V3JhcHBlclRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgICAgICAgICAgIHMudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgICAgICAgICBzLnVwZGF0ZUNsYXNzZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1cGRhdGVUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlZDtcbiAgICAgICAgICAgICAgICBpZiAocy5jb250cm9sbGVyICYmIHMuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcy5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcmNlU2V0VHJhbnNsYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChzLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcy5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHMuaXNFbmQgJiYgIXMucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVkID0gcy5zbGlkZVRvKHMuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZWQgPSBzLnNsaWRlVG8ocy5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJhbnNsYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VTZXRUcmFuc2xhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHMucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBzLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIFJlc2l6ZSBIYW5kbGVyXG4gICAgICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbiAgICAgICAgcy5vblJlc2l6ZSA9IGZ1bmN0aW9uIChmb3JjZVVwZGF0ZVBhZ2luYXRpb24pIHtcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5vbkJlZm9yZVJlc2l6ZSkgcy5wYXJhbXMub25CZWZvcmVSZXNpemUocyk7XG4gICAgICAgICAgICAvL0JyZWFrcG9pbnRzXG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgICAgICAgICAgICBzLnNldEJyZWFrcG9pbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAvLyBEaXNhYmxlIGxvY2tzIG9uIHJlc2l6ZVxuICAgICAgICAgICAgdmFyIGFsbG93U3dpcGVUb1ByZXYgPSBzLnBhcmFtcy5hbGxvd1N3aXBlVG9QcmV2O1xuICAgICAgICAgICAgdmFyIGFsbG93U3dpcGVUb05leHQgPSBzLnBhcmFtcy5hbGxvd1N3aXBlVG9OZXh0O1xuICAgICAgICAgICAgcy5wYXJhbXMuYWxsb3dTd2lwZVRvUHJldiA9IHMucGFyYW1zLmFsbG93U3dpcGVUb05leHQgPSB0cnVlO1xuICAgICAgICBcbiAgICAgICAgICAgIHMudXBkYXRlQ29udGFpbmVyU2l6ZSgpO1xuICAgICAgICAgICAgcy51cGRhdGVTbGlkZXNTaXplKCk7XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHMucGFyYW1zLmZyZWVNb2RlIHx8IGZvcmNlVXBkYXRlUGFnaW5hdGlvbikgcy51cGRhdGVQYWdpbmF0aW9uKCk7XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuc2Nyb2xsYmFyICYmIHMuc2Nyb2xsYmFyKSB7XG4gICAgICAgICAgICAgICAgcy5zY3JvbGxiYXIuc2V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5jb250cm9sbGVyICYmIHMuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgICAgICAgICAgICBzLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNsaWRlQ2hhbmdlZEJ5U2xpZGVUbyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHMucGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHMudHJhbnNsYXRlLCBzLm1heFRyYW5zbGF0ZSgpKSwgcy5taW5UcmFuc2xhdGUoKSk7XG4gICAgICAgICAgICAgICAgcy5zZXRXcmFwcGVyVHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgICAgICAgICAgICAgcy51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICAgICAgICAgIHMudXBkYXRlQ2xhc3NlcygpO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBzLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzLnVwZGF0ZUNsYXNzZXMoKTtcbiAgICAgICAgICAgICAgICBpZiAoKHMucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBzLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgcy5pc0VuZCAmJiAhcy5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVDaGFuZ2VkQnlTbGlkZVRvID0gcy5zbGlkZVRvKHMuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ2hhbmdlZEJ5U2xpZGVUbyA9IHMuc2xpZGVUbyhzLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLmxhenlMb2FkaW5nICYmICFzbGlkZUNoYW5nZWRCeVNsaWRlVG8gJiYgcy5sYXp5KSB7XG4gICAgICAgICAgICAgICAgcy5sYXp5LmxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJldHVybiBsb2NrcyBhZnRlciByZXNpemVcbiAgICAgICAgICAgIHMucGFyYW1zLmFsbG93U3dpcGVUb1ByZXYgPSBhbGxvd1N3aXBlVG9QcmV2O1xuICAgICAgICAgICAgcy5wYXJhbXMuYWxsb3dTd2lwZVRvTmV4dCA9IGFsbG93U3dpcGVUb05leHQ7XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMub25BZnRlclJlc2l6ZSkgcy5wYXJhbXMub25BZnRlclJlc2l6ZShzKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIEV2ZW50c1xuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIFxuICAgICAgICAvL0RlZmluZSBUb3VjaCBFdmVudHNcbiAgICAgICAgcy50b3VjaEV2ZW50c0Rlc2t0b3AgPSB7c3RhcnQ6ICdtb3VzZWRvd24nLCBtb3ZlOiAnbW91c2Vtb3ZlJywgZW5kOiAnbW91c2V1cCd9O1xuICAgICAgICBpZiAod2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCkgcy50b3VjaEV2ZW50c0Rlc2t0b3AgPSB7c3RhcnQ6ICdwb2ludGVyZG93bicsIG1vdmU6ICdwb2ludGVybW92ZScsIGVuZDogJ3BvaW50ZXJ1cCd9O1xuICAgICAgICBlbHNlIGlmICh3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQpIHMudG91Y2hFdmVudHNEZXNrdG9wID0ge3N0YXJ0OiAnTVNQb2ludGVyRG93bicsIG1vdmU6ICdNU1BvaW50ZXJNb3ZlJywgZW5kOiAnTVNQb2ludGVyVXAnfTtcbiAgICAgICAgcy50b3VjaEV2ZW50cyA9IHtcbiAgICAgICAgICAgIHN0YXJ0IDogcy5zdXBwb3J0LnRvdWNoIHx8ICFzLnBhcmFtcy5zaW11bGF0ZVRvdWNoICA/ICd0b3VjaHN0YXJ0JyA6IHMudG91Y2hFdmVudHNEZXNrdG9wLnN0YXJ0LFxuICAgICAgICAgICAgbW92ZSA6IHMuc3VwcG9ydC50b3VjaCB8fCAhcy5wYXJhbXMuc2ltdWxhdGVUb3VjaCA/ICd0b3VjaG1vdmUnIDogcy50b3VjaEV2ZW50c0Rlc2t0b3AubW92ZSxcbiAgICAgICAgICAgIGVuZCA6IHMuc3VwcG9ydC50b3VjaCB8fCAhcy5wYXJhbXMuc2ltdWxhdGVUb3VjaCA/ICd0b3VjaGVuZCcgOiBzLnRvdWNoRXZlbnRzRGVza3RvcC5lbmRcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvLyBXUDggVG91Y2ggRXZlbnRzIEZpeFxuICAgICAgICBpZiAod2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCB8fCB3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQpIHtcbiAgICAgICAgICAgIChzLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyBzLmNvbnRhaW5lciA6IHMud3JhcHBlcikuYWRkQ2xhc3MoJ3N3aXBlci13cDgtJyArIHMucGFyYW1zLmRpcmVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEF0dGFjaC9kZXRhY2ggZXZlbnRzXG4gICAgICAgIHMuaW5pdEV2ZW50cyA9IGZ1bmN0aW9uIChkZXRhY2gpIHtcbiAgICAgICAgICAgIHZhciBhY3Rpb25Eb20gPSBkZXRhY2ggPyAnb2ZmJyA6ICdvbic7XG4gICAgICAgICAgICB2YXIgYWN0aW9uID0gZGV0YWNoID8gJ3JlbW92ZUV2ZW50TGlzdGVuZXInIDogJ2FkZEV2ZW50TGlzdGVuZXInO1xuICAgICAgICAgICAgdmFyIHRvdWNoRXZlbnRzVGFyZ2V0ID0gcy5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gcy5jb250YWluZXJbMF0gOiBzLndyYXBwZXJbMF07XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcy5zdXBwb3J0LnRvdWNoID8gdG91Y2hFdmVudHNUYXJnZXQgOiBkb2N1bWVudDtcbiAgICAgICAgXG4gICAgICAgICAgICB2YXIgbW92ZUNhcHR1cmUgPSBzLnBhcmFtcy5uZXN0ZWQgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIFxuICAgICAgICAgICAgLy9Ub3VjaCBFdmVudHNcbiAgICAgICAgICAgIGlmIChzLmJyb3dzZXIuaWUpIHtcbiAgICAgICAgICAgICAgICB0b3VjaEV2ZW50c1RhcmdldFthY3Rpb25dKHMudG91Y2hFdmVudHMuc3RhcnQsIHMub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2FjdGlvbl0ocy50b3VjaEV2ZW50cy5tb3ZlLCBzLm9uVG91Y2hNb3ZlLCBtb3ZlQ2FwdHVyZSk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2FjdGlvbl0ocy50b3VjaEV2ZW50cy5lbmQsIHMub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHMuc3VwcG9ydC50b3VjaCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gcy50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHMuc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcy5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZX0gOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hFdmVudHNUYXJnZXRbYWN0aW9uXShzLnRvdWNoRXZlbnRzLnN0YXJ0LCBzLm9uVG91Y2hTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hFdmVudHNUYXJnZXRbYWN0aW9uXShzLnRvdWNoRXZlbnRzLm1vdmUsIHMub25Ub3VjaE1vdmUsIG1vdmVDYXB0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hFdmVudHNUYXJnZXRbYWN0aW9uXShzLnRvdWNoRXZlbnRzLmVuZCwgcy5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFzLmRldmljZS5pb3MgJiYgIXMuZGV2aWNlLmFuZHJvaWQpIHx8IChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhcy5zdXBwb3J0LnRvdWNoICYmIHMuZGV2aWNlLmlvcykpIHtcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hFdmVudHNUYXJnZXRbYWN0aW9uXSgnbW91c2Vkb3duJywgcy5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRbYWN0aW9uXSgnbW91c2Vtb3ZlJywgcy5vblRvdWNoTW92ZSwgbW92ZUNhcHR1cmUpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudFthY3Rpb25dKCdtb3VzZXVwJywgcy5vblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2luZG93W2FjdGlvbl0oJ3Jlc2l6ZScsIHMub25SZXNpemUpO1xuICAgICAgICBcbiAgICAgICAgICAgIC8vIE5leHQsIFByZXYsIEluZGV4XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMubmV4dEJ1dHRvbiAmJiBzLm5leHRCdXR0b24gJiYgcy5uZXh0QnV0dG9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBzLm5leHRCdXR0b25bYWN0aW9uRG9tXSgnY2xpY2snLCBzLm9uQ2xpY2tOZXh0KTtcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMuYTExeSAmJiBzLmExMXkpIHMubmV4dEJ1dHRvblthY3Rpb25Eb21dKCdrZXlkb3duJywgcy5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLnByZXZCdXR0b24gJiYgcy5wcmV2QnV0dG9uICYmIHMucHJldkJ1dHRvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcy5wcmV2QnV0dG9uW2FjdGlvbkRvbV0oJ2NsaWNrJywgcy5vbkNsaWNrUHJldik7XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmExMXkgJiYgcy5hMTF5KSBzLnByZXZCdXR0b25bYWN0aW9uRG9tXSgna2V5ZG93bicsIHMuYTExeS5vbkVudGVyS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5wYWdpbmF0aW9uICYmIHMucGFyYW1zLnBhZ2luYXRpb25DbGlja2FibGUpIHtcbiAgICAgICAgICAgICAgICBzLnBhZ2luYXRpb25Db250YWluZXJbYWN0aW9uRG9tXSgnY2xpY2snLCAnLicgKyBzLnBhcmFtcy5idWxsZXRDbGFzcywgcy5vbkNsaWNrSW5kZXgpO1xuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5hMTF5ICYmIHMuYTExeSkgcy5wYWdpbmF0aW9uQ29udGFpbmVyW2FjdGlvbkRvbV0oJ2tleWRvd24nLCAnLicgKyBzLnBhcmFtcy5idWxsZXRDbGFzcywgcy5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG4gICAgICAgICAgICBpZiAocy5wYXJhbXMucHJldmVudENsaWNrcyB8fCBzLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHRvdWNoRXZlbnRzVGFyZ2V0W2FjdGlvbl0oJ2NsaWNrJywgcy5wcmV2ZW50Q2xpY2tzLCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgcy5hdHRhY2hFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzLmluaXRFdmVudHMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcy5kZXRhY2hFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzLmluaXRFdmVudHModHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICBIYW5kbGUgQ2xpY2tzXG4gICAgICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbiAgICAgICAgLy8gUHJldmVudCBDbGlja3NcbiAgICAgICAgcy5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICAgICAgcy5wcmV2ZW50Q2xpY2tzID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmICghcy5hbGxvd0NsaWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uICYmIHMuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBDbGlja3NcbiAgICAgICAgcy5vbkNsaWNrTmV4dCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAocy5pc0VuZCAmJiAhcy5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgICAgICAgICAgcy5zbGlkZU5leHQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcy5vbkNsaWNrUHJldiA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAocy5pc0JlZ2lubmluZyAmJiAhcy5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgICAgICAgICAgcy5zbGlkZVByZXYoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcy5vbkNsaWNrSW5kZXggPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gJCh0aGlzKS5pbmRleCgpICogcy5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMubG9vcCkgaW5kZXggPSBpbmRleCArIHMubG9vcGVkU2xpZGVzO1xuICAgICAgICAgICAgcy5zbGlkZVRvKGluZGV4KTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIEhhbmRsZSBUb3VjaGVzXG4gICAgICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbiAgICAgICAgZnVuY3Rpb24gZmluZEVsZW1lbnRJbkV2ZW50KGUsIHNlbGVjdG9yKSB7XG4gICAgICAgICAgICB2YXIgZWwgPSAkKGUudGFyZ2V0KTtcbiAgICAgICAgICAgIGlmICghZWwuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnRzKHNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2VsZWN0b3Iubm9kZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kO1xuICAgICAgICAgICAgICAgICAgICBlbC5wYXJlbnRzKCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIF9lbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9lbCA9PT0gc2VsZWN0b3IpIGZvdW5kID0gc2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWZvdW5kKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBzZWxlY3RvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbFswXTtcbiAgICAgICAgfVxuICAgICAgICBzLnVwZGF0ZUNsaWNrZWRTbGlkZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgc2xpZGUgPSBmaW5kRWxlbWVudEluRXZlbnQoZSwgJy4nICsgcy5wYXJhbXMuc2xpZGVDbGFzcyk7XG4gICAgICAgICAgICB2YXIgc2xpZGVGb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHNsaWRlKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLnNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5zbGlkZXNbaV0gPT09IHNsaWRlKSBzbGlkZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKHNsaWRlICYmIHNsaWRlRm91bmQpIHtcbiAgICAgICAgICAgICAgICBzLmNsaWNrZWRTbGlkZSA9IHNsaWRlO1xuICAgICAgICAgICAgICAgIHMuY2xpY2tlZEluZGV4ID0gJChzbGlkZSkuaW5kZXgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHMuY2xpY2tlZFNsaWRlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHMuY2xpY2tlZEluZGV4ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHMuY2xpY2tlZEluZGV4ICE9PSB1bmRlZmluZWQgJiYgcy5jbGlja2VkSW5kZXggIT09IHMuYWN0aXZlSW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGVUb0luZGV4ID0gcy5jbGlja2VkSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHJlYWxJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgZHVwbGljYXRlZFNsaWRlcyxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldyA9IHMucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHMuY3VycmVudFNsaWRlc1BlclZpZXcoKSA6IHMucGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHJlYWxJbmRleCA9IHBhcnNlSW50KCQocy5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHNsaWRlVG9JbmRleCA8IHMubG9vcGVkU2xpZGVzIC0gc2xpZGVzUGVyVmlldy8yKSB8fCAoc2xpZGVUb0luZGV4ID4gcy5zbGlkZXMubGVuZ3RoIC0gcy5sb29wZWRTbGlkZXMgKyBzbGlkZXNQZXJWaWV3LzIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5maXhMb29wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVUb0luZGV4ID0gcy53cmFwcGVyLmNoaWxkcmVuKCcuJyArIHMucGFyYW1zLnNsaWRlQ2xhc3MgKyAnW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJyArIHJlYWxJbmRleCArICdcIl06bm90KC4nICsgcy5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArICcpJykuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZVRvSW5kZXggPiBzLnNsaWRlcy5sZW5ndGggLSBzbGlkZXNQZXJWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5maXhMb29wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVUb0luZGV4ID0gcy53cmFwcGVyLmNoaWxkcmVuKCcuJyArIHMucGFyYW1zLnNsaWRlQ2xhc3MgKyAnW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJyArIHJlYWxJbmRleCArICdcIl06bm90KC4nICsgcy5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArICcpJykuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcy5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgdmFyIGlzVG91Y2hlZCxcbiAgICAgICAgICAgIGlzTW92ZWQsXG4gICAgICAgICAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzLFxuICAgICAgICAgICAgdG91Y2hTdGFydFRpbWUsXG4gICAgICAgICAgICBpc1Njcm9sbGluZyxcbiAgICAgICAgICAgIGN1cnJlbnRUcmFuc2xhdGUsXG4gICAgICAgICAgICBzdGFydFRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGFsbG93VGhyZXNob2xkTW92ZSxcbiAgICAgICAgICAgIC8vIEZvcm0gZWxlbWVudHMgdG8gbWF0Y2hcbiAgICAgICAgICAgIGZvcm1FbGVtZW50cyA9ICdpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYnV0dG9uLCB2aWRlbycsXG4gICAgICAgICAgICAvLyBMYXN0IGNsaWNrIHRpbWVcbiAgICAgICAgICAgIGxhc3RDbGlja1RpbWUgPSBEYXRlLm5vdygpLCBjbGlja1RpbWVvdXQsXG4gICAgICAgICAgICAvL1ZlbG9jaXRpZXNcbiAgICAgICAgICAgIHZlbG9jaXRpZXMgPSBbXSxcbiAgICAgICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U7XG4gICAgICAgIFxuICAgICAgICAvLyBBbmltYXRpbmcgRmxhZ1xuICAgICAgICBzLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICBcbiAgICAgICAgLy8gVG91Y2hlcyBpbmZvcm1hdGlvblxuICAgICAgICBzLnRvdWNoZXMgPSB7XG4gICAgICAgICAgICBzdGFydFg6IDAsXG4gICAgICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgICAgICBjdXJyZW50WDogMCxcbiAgICAgICAgICAgIGN1cnJlbnRZOiAwLFxuICAgICAgICAgICAgZGlmZjogMFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gVG91Y2ggaGFuZGxlcnNcbiAgICAgICAgdmFyIGlzVG91Y2hFdmVudCwgc3RhcnRNb3Zpbmc7XG4gICAgICAgIHMub25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgICBpc1RvdWNoRXZlbnQgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JztcbiAgICAgICAgICAgIGlmICghaXNUb3VjaEV2ZW50ICYmICd3aGljaCcgaW4gZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm47XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMubm9Td2lwaW5nICYmIGZpbmRFbGVtZW50SW5FdmVudChlLCAnLicgKyBzLnBhcmFtcy5ub1N3aXBpbmdDbGFzcykpIHtcbiAgICAgICAgICAgICAgICBzLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5zd2lwZUhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZpbmRFbGVtZW50SW5FdmVudChlLCBzLnBhcmFtcy5zd2lwZUhhbmRsZXIpKSByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgdmFyIHN0YXJ0WCA9IHMudG91Y2hlcy5jdXJyZW50WCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgICAgICAgIHZhciBzdGFydFkgPSBzLnRvdWNoZXMuY3VycmVudFkgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gRG8gTk9UIHN0YXJ0IGlmIGlPUyBlZGdlIHN3aXBlIGlzIGRldGVjdGVkLiBPdGhlcndpc2UgaU9TIGFwcCAoVUlXZWJWaWV3KSBjYW5ub3Qgc3dpcGUtdG8tZ28tYmFjayBhbnltb3JlXG4gICAgICAgICAgICBpZihzLmRldmljZS5pb3MgJiYgcy5wYXJhbXMuaU9TRWRnZVN3aXBlRGV0ZWN0aW9uICYmIHN0YXJ0WCA8PSBzLnBhcmFtcy5pT1NFZGdlU3dpcGVUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3MgPSB0cnVlO1xuICAgICAgICAgICAgaXNTY3JvbGxpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBzdGFydE1vdmluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHMudG91Y2hlcy5zdGFydFggPSBzdGFydFg7XG4gICAgICAgICAgICBzLnRvdWNoZXMuc3RhcnRZID0gc3RhcnRZO1xuICAgICAgICAgICAgdG91Y2hTdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgcy5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIHMudXBkYXRlQ29udGFpbmVyU2l6ZSgpO1xuICAgICAgICAgICAgcy5zd2lwZURpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy50aHJlc2hvbGQgPiAwKSBhbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICAgICAgICAgIHZhciBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKGZvcm1FbGVtZW50cykpIHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgJChkb2N1bWVudC5hY3RpdmVFbGVtZW50KS5pcyhmb3JtRWxlbWVudHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHMuZW1pdCgnb25Ub3VjaFN0YXJ0JywgcywgZSk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBzLm9uVG91Y2hNb3ZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgICBpZiAoaXNUb3VjaEV2ZW50ICYmIGUudHlwZSA9PT0gJ21vdXNlbW92ZScpIHJldHVybjtcbiAgICAgICAgICAgIGlmIChlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSB7XG4gICAgICAgICAgICAgICAgcy50b3VjaGVzLnN0YXJ0WCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgICAgICAgICAgICAgIHMudG91Y2hlcy5zdGFydFkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMub25seUV4dGVybmFsKSB7XG4gICAgICAgICAgICAgICAgLy8gaXNNb3ZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcy5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGlzVG91Y2hlZCkge1xuICAgICAgICAgICAgICAgICAgICBzLnRvdWNoZXMuc3RhcnRYID0gcy50b3VjaGVzLmN1cnJlbnRYID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICAgICAgICAgICAgICAgIHMudG91Y2hlcy5zdGFydFkgPSBzLnRvdWNoZXMuY3VycmVudFkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hTdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNUb3VjaEV2ZW50ICYmIHMucGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXMucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgICAgICBpZiAoIXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVmVydGljYWxcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgKHMudG91Y2hlcy5jdXJyZW50WSA8IHMudG91Y2hlcy5zdGFydFkgJiYgcy50cmFuc2xhdGUgPD0gcy5tYXhUcmFuc2xhdGUoKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChzLnRvdWNoZXMuY3VycmVudFkgPiBzLnRvdWNoZXMuc3RhcnRZICYmIHMudHJhbnNsYXRlID49IHMubWluVHJhbnNsYXRlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgKHMudG91Y2hlcy5jdXJyZW50WCA8IHMudG91Y2hlcy5zdGFydFggJiYgcy50cmFuc2xhdGUgPD0gcy5tYXhUcmFuc2xhdGUoKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChzLnRvdWNoZXMuY3VycmVudFggPiBzLnRvdWNoZXMuc3RhcnRYICYmIHMudHJhbnNsYXRlID49IHMubWluVHJhbnNsYXRlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1RvdWNoRXZlbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAkKGUudGFyZ2V0KS5pcyhmb3JtRWxlbWVudHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzTW92ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBzLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAgICAgcy5lbWl0KCdvblRvdWNoTW92ZScsIHMsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUudGFyZ2V0VG91Y2hlcyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoID4gMSkgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgICAgIHMudG91Y2hlcy5jdXJyZW50WCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgICAgICAgICAgcy50b3VjaGVzLmN1cnJlbnRZID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG91Y2hBbmdsZTtcbiAgICAgICAgICAgICAgICBpZiAocy5pc0hvcml6b250YWwoKSAmJiBzLnRvdWNoZXMuY3VycmVudFkgPT09IHMudG91Y2hlcy5zdGFydFkgfHwgIXMuaXNIb3Jpem9udGFsKCkgJiYgcy50b3VjaGVzLmN1cnJlbnRYID09PSBzLnRvdWNoZXMuc3RhcnRYKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b3VjaEFuZ2xlID0gTWF0aC5hdGFuMihNYXRoLmFicyhzLnRvdWNoZXMuY3VycmVudFkgLSBzLnRvdWNoZXMuc3RhcnRZKSwgTWF0aC5hYnMocy50b3VjaGVzLmN1cnJlbnRYIC0gcy50b3VjaGVzLnN0YXJ0WCkpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgICAgICAgICAgICAgaXNTY3JvbGxpbmcgPSBzLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHMucGFyYW1zLnRvdWNoQW5nbGUgOiAoOTAgLSB0b3VjaEFuZ2xlID4gcy5wYXJhbXMudG91Y2hBbmdsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICAgICAgcy5lbWl0KCdvblRvdWNoTW92ZU9wcG9zaXRlJywgcywgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0YXJ0TW92aW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGlmIChzLnRvdWNoZXMuY3VycmVudFggIT09IHMudG91Y2hlcy5zdGFydFggfHwgcy50b3VjaGVzLmN1cnJlbnRZICE9PSBzLnRvdWNoZXMuc3RhcnRZKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0TW92aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzVG91Y2hlZCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGlzU2Nyb2xsaW5nKSAge1xuICAgICAgICAgICAgICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3RhcnRNb3ZpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgICAgICAgIHMuZW1pdCgnb25TbGlkZXJNb3ZlJywgcywgZSk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFzLnBhcmFtcy5uZXN0ZWQpIHtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIGlmICghaXNNb3ZlZCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgICAgICAgICAgICAgICBzLmZpeExvb3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhcnRUcmFuc2xhdGUgPSBzLmdldFdyYXBwZXJUcmFuc2xhdGUoKTtcbiAgICAgICAgICAgICAgICBzLnNldFdyYXBwZXJUcmFuc2l0aW9uKDApO1xuICAgICAgICAgICAgICAgIGlmIChzLmFuaW1hdGluZykge1xuICAgICAgICAgICAgICAgICAgICBzLndyYXBwZXIudHJpZ2dlcignd2Via2l0VHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kIG9UcmFuc2l0aW9uRW5kIE1TVHJhbnNpdGlvbkVuZCBtc1RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmF1dG9wbGF5ICYmIHMuYXV0b3BsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuc3RvcEF1dG9wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnBhdXNlQXV0b3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgLy9HcmFiIEN1cnNvclxuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5ncmFiQ3Vyc29yICYmIChzLnBhcmFtcy5hbGxvd1N3aXBlVG9OZXh0ID09PSB0cnVlIHx8IHMucGFyYW1zLmFsbG93U3dpcGVUb1ByZXYgPT09IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHMuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpc01vdmVkID0gdHJ1ZTtcbiAgICAgICAgXG4gICAgICAgICAgICB2YXIgZGlmZiA9IHMudG91Y2hlcy5kaWZmID0gcy5pc0hvcml6b250YWwoKSA/IHMudG91Y2hlcy5jdXJyZW50WCAtIHMudG91Y2hlcy5zdGFydFggOiBzLnRvdWNoZXMuY3VycmVudFkgLSBzLnRvdWNoZXMuc3RhcnRZO1xuICAgICAgICBcbiAgICAgICAgICAgIGRpZmYgPSBkaWZmICogcy5wYXJhbXMudG91Y2hSYXRpbztcbiAgICAgICAgICAgIGlmIChzLnJ0bCkgZGlmZiA9IC1kaWZmO1xuICAgICAgICBcbiAgICAgICAgICAgIHMuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgICAgICAgICAgIGN1cnJlbnRUcmFuc2xhdGUgPSBkaWZmICsgc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgIFxuICAgICAgICAgICAgdmFyIGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKChkaWZmID4gMCAmJiBjdXJyZW50VHJhbnNsYXRlID4gcy5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnJlc2lzdGFuY2UpIGN1cnJlbnRUcmFuc2xhdGUgPSBzLm1pblRyYW5zbGF0ZSgpIC0gMSArIE1hdGgucG93KC1zLm1pblRyYW5zbGF0ZSgpICsgc3RhcnRUcmFuc2xhdGUgKyBkaWZmLCBzLnBhcmFtcy5yZXNpc3RhbmNlUmF0aW8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGlmZiA8IDAgJiYgY3VycmVudFRyYW5zbGF0ZSA8IHMubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnJlc2lzdGFuY2UpIGN1cnJlbnRUcmFuc2xhdGUgPSBzLm1heFRyYW5zbGF0ZSgpICsgMSAtIE1hdGgucG93KHMubWF4VHJhbnNsYXRlKCkgLSBzdGFydFRyYW5zbGF0ZSAtIGRpZmYsIHMucGFyYW1zLnJlc2lzdGFuY2VSYXRpbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gICAgICAgICAgICBpZiAoIXMucGFyYW1zLmFsbG93U3dpcGVUb05leHQgJiYgcy5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGN1cnJlbnRUcmFuc2xhdGUgPCBzdGFydFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUcmFuc2xhdGUgPSBzdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcy5wYXJhbXMuYWxsb3dTd2lwZVRvUHJldiAmJiBzLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgY3VycmVudFRyYW5zbGF0ZSA+IHN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFRyYW5zbGF0ZSA9IHN0YXJ0VHJhbnNsYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgICAgICAvLyBUaHJlc2hvbGRcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy50aHJlc2hvbGQgPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRpZmYpID4gcy5wYXJhbXMudGhyZXNob2xkIHx8IGFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dUaHJlc2hvbGRNb3ZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMudG91Y2hlcy5zdGFydFggPSBzLnRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnRvdWNoZXMuc3RhcnRZID0gcy50b3VjaGVzLmN1cnJlbnRZO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRyYW5zbGF0ZSA9IHN0YXJ0VHJhbnNsYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcy50b3VjaGVzLmRpZmYgPSBzLmlzSG9yaXpvbnRhbCgpID8gcy50b3VjaGVzLmN1cnJlbnRYIC0gcy50b3VjaGVzLnN0YXJ0WCA6IHMudG91Y2hlcy5jdXJyZW50WSAtIHMudG91Y2hlcy5zdGFydFk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUcmFuc2xhdGUgPSBzdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXMucGFyYW1zLmZvbGxvd0ZpbmdlcikgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuZnJlZU1vZGUgfHwgcy5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIHMudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgICAgICAgICAgIC8vVmVsb2NpdHlcbiAgICAgICAgICAgICAgICBpZiAodmVsb2NpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmVsb2NpdGllcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBzLnRvdWNoZXNbcy5pc0hvcml6b250YWwoKSA/ICdzdGFydFgnIDogJ3N0YXJ0WSddLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogdG91Y2hTdGFydFRpbWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZlbG9jaXRpZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBzLnRvdWNoZXNbcy5pc0hvcml6b250YWwoKSA/ICdjdXJyZW50WCcgOiAnY3VycmVudFknXSxcbiAgICAgICAgICAgICAgICAgICAgdGltZTogKG5ldyB3aW5kb3cuRGF0ZSgpKS5nZXRUaW1lKClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICAgICAgICAgICAgcy51cGRhdGVQcm9ncmVzcyhjdXJyZW50VHJhbnNsYXRlKTtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0cmFuc2xhdGVcbiAgICAgICAgICAgIHMuc2V0V3JhcHBlclRyYW5zbGF0ZShjdXJyZW50VHJhbnNsYXRlKTtcbiAgICAgICAgfTtcbiAgICAgICAgcy5vblRvdWNoRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgICBpZiAoYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgICAgICAgICAgICAgIHMuZW1pdCgnb25Ub3VjaEVuZCcsIHMsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrcyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFpc1RvdWNoZWQpIHJldHVybjtcbiAgICAgICAgICAgIC8vUmV0dXJuIEdyYWIgQ3Vyc29yXG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuZ3JhYkN1cnNvciAmJiBpc01vdmVkICYmIGlzVG91Y2hlZCAgJiYgKHMucGFyYW1zLmFsbG93U3dpcGVUb05leHQgPT09IHRydWUgfHwgcy5wYXJhbXMuYWxsb3dTd2lwZVRvUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICBzLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIC8vIFRpbWUgZGlmZlxuICAgICAgICAgICAgdmFyIHRvdWNoRW5kVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICB2YXIgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSB0b3VjaFN0YXJ0VGltZTtcbiAgICAgICAgXG4gICAgICAgICAgICAvLyBUYXAsIGRvdWJsZVRhcCwgQ2xpY2tcbiAgICAgICAgICAgIGlmIChzLmFsbG93Q2xpY2spIHtcbiAgICAgICAgICAgICAgICBzLnVwZGF0ZUNsaWNrZWRTbGlkZShlKTtcbiAgICAgICAgICAgICAgICBzLmVtaXQoJ29uVGFwJywgcywgZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVEaWZmIDwgMzAwICYmICh0b3VjaEVuZFRpbWUgLSBsYXN0Q2xpY2tUaW1lKSA+IDMwMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2xpY2tUaW1lb3V0KSBjbGVhclRpbWVvdXQoY2xpY2tUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXMpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5wYWdpbmF0aW9uSGlkZSAmJiBzLnBhZ2luYXRpb25Db250YWluZXIubGVuZ3RoID4gMCAmJiAhJChlLnRhcmdldCkuaGFzQ2xhc3Mocy5wYXJhbXMuYnVsbGV0Q2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5wYWdpbmF0aW9uQ29udGFpbmVyLnRvZ2dsZUNsYXNzKHMucGFyYW1zLnBhZ2luYXRpb25IaWRkZW5DbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzLmVtaXQoJ29uQ2xpY2snLCBzLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiAodG91Y2hFbmRUaW1lIC0gbGFzdENsaWNrVGltZSkgPCAzMDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrVGltZW91dCkgY2xlYXJUaW1lb3V0KGNsaWNrVGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIHMuZW1pdCgnb25Eb3VibGVUYXAnLCBzLCBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgbGFzdENsaWNrVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAocykgcy5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICBcbiAgICAgICAgICAgIGlmICghaXNUb3VjaGVkIHx8ICFpc01vdmVkIHx8ICFzLnN3aXBlRGlyZWN0aW9uIHx8IHMudG91Y2hlcy5kaWZmID09PSAwIHx8IGN1cnJlbnRUcmFuc2xhdGUgPT09IHN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgICAgICAgaXNUb3VjaGVkID0gaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlzVG91Y2hlZCA9IGlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgXG4gICAgICAgICAgICB2YXIgY3VycmVudFBvcztcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5mb2xsb3dGaW5nZXIpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UG9zID0gcy5ydGwgPyBzLnRyYW5zbGF0ZSA6IC1zLnRyYW5zbGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQb3MgPSAtY3VycmVudFRyYW5zbGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UG9zIDwgLXMubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcy5zbGlkZVRvKHMuYWN0aXZlSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGN1cnJlbnRQb3MgPiAtcy5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5zbGlkZXMubGVuZ3RoIDwgcy5zbmFwR3JpZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuc2xpZGVUbyhzLnNuYXBHcmlkLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5zbGlkZVRvKHMuc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5mcmVlTW9kZU1vbWVudHVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ZWxvY2l0aWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXN0TW92ZUV2ZW50ID0gdmVsb2NpdGllcy5wb3AoKSwgdmVsb2NpdHlFdmVudCA9IHZlbG9jaXRpZXMucG9wKCk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gbGFzdE1vdmVFdmVudC5wb3NpdGlvbiAtIHZlbG9jaXR5RXZlbnQucG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZSA9IGxhc3RNb3ZlRXZlbnQudGltZSAtIHZlbG9jaXR5RXZlbnQudGltZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMudmVsb2NpdHkgPSBkaXN0YW5jZSAvIHRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnZlbG9jaXR5ID0gcy52ZWxvY2l0eSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMocy52ZWxvY2l0eSkgPCBzLnBhcmFtcy5mcmVlTW9kZU1pbmltdW1WZWxvY2l0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMudmVsb2NpdHkgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBpbXBsaWVzIHRoYXQgdGhlIHVzZXIgc3RvcHBlZCBtb3ZpbmcgYSBmaW5nZXIgdGhlbiByZWxlYXNlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIHdvdWxkIGJlIG5vIGV2ZW50cyB3aXRoIGRpc3RhbmNlIHplcm8sIHNvIHRoZSBsYXN0IGV2ZW50IGlzIHN0YWxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWUgPiAxNTAgfHwgKG5ldyB3aW5kb3cuRGF0ZSgpLmdldFRpbWUoKSAtIGxhc3RNb3ZlRXZlbnQudGltZSkgPiAzMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMudmVsb2NpdHkgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHMudmVsb2NpdHkgPSBzLnZlbG9jaXR5ICogcy5wYXJhbXMuZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW87XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0aWVzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtb21lbnR1bUR1cmF0aW9uID0gMTAwMCAqIHMucGFyYW1zLmZyZWVNb2RlTW9tZW50dW1SYXRpbztcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vbWVudHVtRGlzdGFuY2UgPSBzLnZlbG9jaXR5ICogbW9tZW50dW1EdXJhdGlvbjtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdQb3NpdGlvbiA9IHMudHJhbnNsYXRlICsgbW9tZW50dW1EaXN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMucnRsKSBuZXdQb3NpdGlvbiA9IC0gbmV3UG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgIHZhciBkb0JvdW5jZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWZ0ZXJCb3VuY2VQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvdW5jZUFtb3VudCA9IE1hdGguYWJzKHMudmVsb2NpdHkpICogMjAgKiBzLnBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW87XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiA8IHMubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uICsgcy5tYXhUcmFuc2xhdGUoKSA8IC1ib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzLm1heFRyYW5zbGF0ZSgpIC0gYm91bmNlQW1vdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gcy5tYXhUcmFuc2xhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb0JvdW5jZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHMubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobmV3UG9zaXRpb24gPiBzLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiAtIHMubWluVHJhbnNsYXRlKCkgPiBib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzLm1pblRyYW5zbGF0ZSgpICsgYm91bmNlQW1vdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gcy5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb0JvdW5jZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHMubWluVHJhbnNsYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocy5wYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0U2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcy5zbmFwR3JpZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLnNuYXBHcmlkW2pdID4gLW5ld1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRTbGlkZSA9IGo7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMocy5zbmFwR3JpZFtuZXh0U2xpZGVdIC0gbmV3UG9zaXRpb24pIDwgTWF0aC5hYnMocy5zbmFwR3JpZFtuZXh0U2xpZGUgLSAxXSAtIG5ld1Bvc2l0aW9uKSB8fCBzLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHMuc25hcEdyaWRbbmV4dFNsaWRlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzLnNuYXBHcmlkW25leHRTbGlkZSAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzLnJ0bCkgbmV3UG9zaXRpb24gPSAtIG5ld1Bvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vRml4IGR1cmF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmIChzLnZlbG9jaXR5ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5ydGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKC1uZXdQb3NpdGlvbiAtIHMudHJhbnNsYXRlKSAvIHMudmVsb2NpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IE1hdGguYWJzKChuZXdQb3NpdGlvbiAtIHMudHJhbnNsYXRlKSAvIHMudmVsb2NpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHMucGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnNsaWRlUmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UgJiYgZG9Cb3VuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMudXBkYXRlUHJvZ3Jlc3MoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnNldFdyYXBwZXJUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5zZXRXcmFwcGVyVHJhbnNsYXRlKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMub25UcmFuc2l0aW9uU3RhcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMud3JhcHBlci50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXMgfHwgIWFsbG93TW9tZW50dW1Cb3VuY2UpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLmVtaXQoJ29uTW9tZW50dW1Cb3VuY2UnLCBzKTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zZXRXcmFwcGVyVHJhbnNpdGlvbihzLnBhcmFtcy5zcGVlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zZXRXcmFwcGVyVHJhbnNsYXRlKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMud3JhcHBlci50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMub25UcmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzLnZlbG9jaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnVwZGF0ZVByb2dyZXNzKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuc2V0V3JhcHBlclRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnNldFdyYXBwZXJUcmFuc2xhdGUobmV3UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5vblRyYW5zaXRpb25TdGFydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzLmFuaW1hdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLndyYXBwZXIudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcykgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLm9uVHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBzLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcy5wYXJhbXMuZnJlZU1vZGVNb21lbnR1bSB8fCB0aW1lRGlmZiA+PSBzLnBhcmFtcy5sb25nU3dpcGVzTXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcy51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICAgICAgICAgICAgICBzLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAvLyBGaW5kIGN1cnJlbnQgc2xpZGVcbiAgICAgICAgICAgIHZhciBpLCBzdG9wSW5kZXggPSAwLCBncm91cFNpemUgPSBzLnNsaWRlc1NpemVzR3JpZFswXTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzLnNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IHMucGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzLnNsaWRlc0dyaWRbaSArIHMucGFyYW1zLnNsaWRlc1Blckdyb3VwXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQb3MgPj0gcy5zbGlkZXNHcmlkW2ldICYmIGN1cnJlbnRQb3MgPCBzLnNsaWRlc0dyaWRbaSArIHMucGFyYW1zLnNsaWRlc1Blckdyb3VwXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwU2l6ZSA9IHMuc2xpZGVzR3JpZFtpICsgcy5wYXJhbXMuc2xpZGVzUGVyR3JvdXBdIC0gcy5zbGlkZXNHcmlkW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFBvcyA+PSBzLnNsaWRlc0dyaWRbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cFNpemUgPSBzLnNsaWRlc0dyaWRbcy5zbGlkZXNHcmlkLmxlbmd0aCAtIDFdIC0gcy5zbGlkZXNHcmlkW3Muc2xpZGVzR3JpZC5sZW5ndGggLSAyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZVxuICAgICAgICAgICAgdmFyIHJhdGlvID0gKGN1cnJlbnRQb3MgLSBzLnNsaWRlc0dyaWRbc3RvcEluZGV4XSkgLyBncm91cFNpemU7XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKHRpbWVEaWZmID4gcy5wYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgICAgICAgICAgICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgICAgICAgICAgICAgaWYgKCFzLnBhcmFtcy5sb25nU3dpcGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHMuc2xpZGVUbyhzLmFjdGl2ZUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocy5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXRpbyA+PSBzLnBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHMuc2xpZGVUbyhzdG9wSW5kZXggKyBzLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2Ugcy5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocy5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXRpbyA+ICgxIC0gcy5wYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSkgcy5zbGlkZVRvKHN0b3BJbmRleCArIHMucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBzLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBTaG9ydCBzd2lwZXNcbiAgICAgICAgICAgICAgICBpZiAoIXMucGFyYW1zLnNob3J0U3dpcGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHMuc2xpZGVUbyhzLmFjdGl2ZUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocy5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHMuc2xpZGVUbyhzdG9wSW5kZXggKyBzLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocy5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgICAgICAgICAgICAgIHMuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgVHJhbnNpdGlvbnNcbiAgICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBzLl9zbGlkZVRvID0gZnVuY3Rpb24gKHNsaWRlSW5kZXgsIHNwZWVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcy5zbGlkZVRvKHNsaWRlSW5kZXgsIHNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgcy5zbGlkZVRvID0gZnVuY3Rpb24gKHNsaWRlSW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJ1bkNhbGxiYWNrcyA9PT0gJ3VuZGVmaW5lZCcpIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNsaWRlSW5kZXggPT09ICd1bmRlZmluZWQnKSBzbGlkZUluZGV4ID0gMDtcbiAgICAgICAgICAgIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IDA7XG4gICAgICAgICAgICBzLnNuYXBJbmRleCA9IE1hdGguZmxvb3Ioc2xpZGVJbmRleCAvIHMucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgICAgICAgIGlmIChzLnNuYXBJbmRleCA+PSBzLnNuYXBHcmlkLmxlbmd0aCkgcy5zbmFwSW5kZXggPSBzLnNuYXBHcmlkLmxlbmd0aCAtIDE7XG4gICAgICAgIFxuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZSA9IC0gcy5zbmFwR3JpZFtzLnNuYXBJbmRleF07XG4gICAgICAgICAgICAvLyBTdG9wIGF1dG9wbGF5XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuYXV0b3BsYXkgJiYgcy5hdXRvcGxheWluZykge1xuICAgICAgICAgICAgICAgIGlmIChpbnRlcm5hbCB8fCAhcy5wYXJhbXMuYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBzLnBhdXNlQXV0b3BsYXkoc3BlZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcy5zdG9wQXV0b3BsYXkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgICAgICAgICAgIHMudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgICAgICAgXG4gICAgICAgICAgICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICAgICAgICAgICAgaWYocy5wYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCl7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLnNsaWRlc0dyaWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKC0gTWF0aC5mbG9vcih0cmFuc2xhdGUgKiAxMDApID49IE1hdGguZmxvb3Iocy5zbGlkZXNHcmlkW2ldICogMTAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuICAgICAgICAgICAgaWYgKCFzLnBhcmFtcy5hbGxvd1N3aXBlVG9OZXh0ICYmIHRyYW5zbGF0ZSA8IHMudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA8IHMubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXMucGFyYW1zLmFsbG93U3dpcGVUb1ByZXYgJiYgdHJhbnNsYXRlID4gcy50cmFuc2xhdGUgJiYgdHJhbnNsYXRlID4gcy5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgICAgICAgICAgIGlmICgocy5hY3RpdmVJbmRleCB8fCAwKSAhPT0gc2xpZGVJbmRleCApIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAvLyBVcGRhdGUgSW5kZXhcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSBzcGVlZCA9IHMucGFyYW1zLnNwZWVkO1xuICAgICAgICAgICAgcy5wcmV2aW91c0luZGV4ID0gcy5hY3RpdmVJbmRleCB8fCAwO1xuICAgICAgICAgICAgcy5hY3RpdmVJbmRleCA9IHNsaWRlSW5kZXg7XG4gICAgICAgICAgICBzLnVwZGF0ZVJlYWxJbmRleCgpO1xuICAgICAgICAgICAgaWYgKChzLnJ0bCAmJiAtdHJhbnNsYXRlID09PSBzLnRyYW5zbGF0ZSkgfHwgKCFzLnJ0bCAmJiB0cmFuc2xhdGUgPT09IHMudHJhbnNsYXRlKSkge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBIZWlnaHRcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBzLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcy51cGRhdGVDbGFzc2VzKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmVmZmVjdCAhPT0gJ3NsaWRlJykge1xuICAgICAgICAgICAgICAgICAgICBzLnNldFdyYXBwZXJUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcy51cGRhdGVDbGFzc2VzKCk7XG4gICAgICAgICAgICBzLm9uVHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcyk7XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKHNwZWVkID09PSAwIHx8IHMuYnJvd3Nlci5sdGVJRTkpIHtcbiAgICAgICAgICAgICAgICBzLnNldFdyYXBwZXJUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICAgICAgICAgICAgICBzLnNldFdyYXBwZXJUcmFuc2l0aW9uKDApO1xuICAgICAgICAgICAgICAgIHMub25UcmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzLnNldFdyYXBwZXJUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICAgICAgICAgICAgICBzLnNldFdyYXBwZXJUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICAgICAgICAgICAgICBpZiAoIXMuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHMuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcy53cmFwcGVyLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBzLm9uVHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgcy5vblRyYW5zaXRpb25TdGFydCA9IGZ1bmN0aW9uIChydW5DYWxsYmFja3MpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcnVuQ2FsbGJhY2tzID09PSAndW5kZWZpbmVkJykgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgcy51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5sYXp5KSBzLmxhenkub25UcmFuc2l0aW9uU3RhcnQoKTtcbiAgICAgICAgICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICBzLmVtaXQoJ29uVHJhbnNpdGlvblN0YXJ0Jywgcyk7XG4gICAgICAgICAgICAgICAgaWYgKHMuYWN0aXZlSW5kZXggIT09IHMucHJldmlvdXNJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBzLmVtaXQoJ29uU2xpZGVDaGFuZ2VTdGFydCcsIHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5hY3RpdmVJbmRleCA+IHMucHJldmlvdXNJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5lbWl0KCdvblNsaWRlTmV4dFN0YXJ0Jywgcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLmVtaXQoJ29uU2xpZGVQcmV2U3RhcnQnLCBzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHMub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKHJ1bkNhbGxiYWNrcykge1xuICAgICAgICAgICAgcy5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHMuc2V0V3JhcHBlclRyYW5zaXRpb24oMCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJ1bkNhbGxiYWNrcyA9PT0gJ3VuZGVmaW5lZCcpIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gICAgICAgICAgICBpZiAocy5sYXp5KSBzLmxhenkub25UcmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAgICAgcy5lbWl0KCdvblRyYW5zaXRpb25FbmQnLCBzKTtcbiAgICAgICAgICAgICAgICBpZiAocy5hY3RpdmVJbmRleCAhPT0gcy5wcmV2aW91c0luZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHMuZW1pdCgnb25TbGlkZUNoYW5nZUVuZCcsIHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5hY3RpdmVJbmRleCA+IHMucHJldmlvdXNJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5lbWl0KCdvblNsaWRlTmV4dEVuZCcsIHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5lbWl0KCdvblNsaWRlUHJldkVuZCcsIHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLmhpc3RvcnkgJiYgcy5oaXN0b3J5KSB7XG4gICAgICAgICAgICAgICAgcy5oaXN0b3J5LnNldEhpc3Rvcnkocy5wYXJhbXMuaGlzdG9yeSwgcy5hY3RpdmVJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuaGFzaG5hdiAmJiBzLmhhc2huYXYpIHtcbiAgICAgICAgICAgICAgICBzLmhhc2huYXYuc2V0SGFzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgfTtcbiAgICAgICAgcy5zbGlkZU5leHQgPSBmdW5jdGlvbiAocnVuQ2FsbGJhY2tzLCBzcGVlZCwgaW50ZXJuYWwpIHtcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICAgICAgaWYgKHMuYW5pbWF0aW5nKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgcy5maXhMb29wKCk7XG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudExlZnQgPSBzLmNvbnRhaW5lclswXS5jbGllbnRMZWZ0O1xuICAgICAgICAgICAgICAgIHJldHVybiBzLnNsaWRlVG8ocy5hY3RpdmVJbmRleCArIHMucGFyYW1zLnNsaWRlc1Blckdyb3VwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHJldHVybiBzLnNsaWRlVG8ocy5hY3RpdmVJbmRleCArIHMucGFyYW1zLnNsaWRlc1Blckdyb3VwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gICAgICAgIH07XG4gICAgICAgIHMuX3NsaWRlTmV4dCA9IGZ1bmN0aW9uIChzcGVlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHMuc2xpZGVOZXh0KHRydWUsIHNwZWVkLCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgcy5zbGlkZVByZXYgPSBmdW5jdGlvbiAocnVuQ2FsbGJhY2tzLCBzcGVlZCwgaW50ZXJuYWwpIHtcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICAgICAgaWYgKHMuYW5pbWF0aW5nKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgcy5maXhMb29wKCk7XG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudExlZnQgPSBzLmNvbnRhaW5lclswXS5jbGllbnRMZWZ0O1xuICAgICAgICAgICAgICAgIHJldHVybiBzLnNsaWRlVG8ocy5hY3RpdmVJbmRleCAtIDEsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgcmV0dXJuIHMuc2xpZGVUbyhzLmFjdGl2ZUluZGV4IC0gMSwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICAgICAgICB9O1xuICAgICAgICBzLl9zbGlkZVByZXYgPSBmdW5jdGlvbiAoc3BlZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzLnNsaWRlUHJldih0cnVlLCBzcGVlZCwgdHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHMuc2xpZGVSZXNldCA9IGZ1bmN0aW9uIChydW5DYWxsYmFja3MsIHNwZWVkLCBpbnRlcm5hbCkge1xuICAgICAgICAgICAgcmV0dXJuIHMuc2xpZGVUbyhzLmFjdGl2ZUluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHMuZGlzYWJsZVRvdWNoQ29udHJvbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHMucGFyYW1zLm9ubHlFeHRlcm5hbCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgcy5lbmFibGVUb3VjaENvbnRyb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzLnBhcmFtcy5vbmx5RXh0ZXJuYWwgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgVHJhbnNsYXRlL3RyYW5zaXRpb24gaGVscGVyc1xuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIHMuc2V0V3JhcHBlclRyYW5zaXRpb24gPSBmdW5jdGlvbiAoZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICAgICAgICAgICAgcy53cmFwcGVyLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgICAgICAgaWYgKHMucGFyYW1zLmVmZmVjdCAhPT0gJ3NsaWRlJyAmJiBzLmVmZmVjdHNbcy5wYXJhbXMuZWZmZWN0XSkge1xuICAgICAgICAgICAgICAgIHMuZWZmZWN0c1tzLnBhcmFtcy5lZmZlY3RdLnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLnBhcmFsbGF4ICYmIHMucGFyYWxsYXgpIHtcbiAgICAgICAgICAgICAgICBzLnBhcmFsbGF4LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLnNjcm9sbGJhciAmJiBzLnNjcm9sbGJhcikge1xuICAgICAgICAgICAgICAgIHMuc2Nyb2xsYmFyLnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLmNvbnRyb2wgJiYgcy5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgcy5jb250cm9sbGVyLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzLmVtaXQoJ29uU2V0VHJhbnNpdGlvbicsIHMsIGR1cmF0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgICAgcy5zZXRXcmFwcGVyVHJhbnNsYXRlID0gZnVuY3Rpb24gKHRyYW5zbGF0ZSwgdXBkYXRlQWN0aXZlSW5kZXgsIGJ5Q29udHJvbGxlcikge1xuICAgICAgICAgICAgdmFyIHggPSAwLCB5ID0gMCwgeiA9IDA7XG4gICAgICAgICAgICBpZiAocy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgICAgIHggPSBzLnJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB5ID0gdHJhbnNsYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgICAgICAgICB4ID0gcm91bmQoeCk7XG4gICAgICAgICAgICAgICAgeSA9IHJvdW5kKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIGlmICghcy5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChzLnN1cHBvcnQudHJhbnNmb3JtczNkKSBzLndyYXBwZXIudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgnICsgeCArICdweCwgJyArIHkgKyAncHgsICcgKyB6ICsgJ3B4KScpO1xuICAgICAgICAgICAgICAgIGVsc2Ugcy53cmFwcGVyLnRyYW5zZm9ybSgndHJhbnNsYXRlKCcgKyB4ICsgJ3B4LCAnICsgeSArICdweCknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICBzLnRyYW5zbGF0ZSA9IHMuaXNIb3Jpem9udGFsKCkgPyB4IDogeTtcbiAgICAgICAgXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIHVwZGF0ZSBwcm9ncmVzc1xuICAgICAgICAgICAgdmFyIHByb2dyZXNzO1xuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZXNEaWZmID0gcy5tYXhUcmFuc2xhdGUoKSAtIHMubWluVHJhbnNsYXRlKCk7XG4gICAgICAgICAgICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwcm9ncmVzcyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzLm1pblRyYW5zbGF0ZSgpKSAvICh0cmFuc2xhdGVzRGlmZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvZ3Jlc3MgIT09IHMucHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICBzLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKHVwZGF0ZUFjdGl2ZUluZGV4KSBzLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuZWZmZWN0ICE9PSAnc2xpZGUnICYmIHMuZWZmZWN0c1tzLnBhcmFtcy5lZmZlY3RdKSB7XG4gICAgICAgICAgICAgICAgcy5lZmZlY3RzW3MucGFyYW1zLmVmZmVjdF0uc2V0VHJhbnNsYXRlKHMudHJhbnNsYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5wYXJhbGxheCAmJiBzLnBhcmFsbGF4KSB7XG4gICAgICAgICAgICAgICAgcy5wYXJhbGxheC5zZXRUcmFuc2xhdGUocy50cmFuc2xhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLnNjcm9sbGJhciAmJiBzLnNjcm9sbGJhcikge1xuICAgICAgICAgICAgICAgIHMuc2Nyb2xsYmFyLnNldFRyYW5zbGF0ZShzLnRyYW5zbGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuY29udHJvbCAmJiBzLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBzLmNvbnRyb2xsZXIuc2V0VHJhbnNsYXRlKHMudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcy5lbWl0KCdvblNldFRyYW5zbGF0ZScsIHMsIHMudHJhbnNsYXRlKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHMuZ2V0VHJhbnNsYXRlID0gZnVuY3Rpb24gKGVsLCBheGlzKSB7XG4gICAgICAgICAgICB2YXIgbWF0cml4LCBjdXJUcmFuc2Zvcm0sIGN1clN0eWxlLCB0cmFuc2Zvcm1NYXRyaXg7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gYXV0b21hdGljIGF4aXMgZGV0ZWN0aW9uXG4gICAgICAgICAgICBpZiAodHlwZW9mIGF4aXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgYXhpcyA9ICd4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICBpZiAocy5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzLnJ0bCA/IC1zLnRyYW5zbGF0ZSA6IHMudHJhbnNsYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIGN1clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgIGlmIChjdXJUcmFuc2Zvcm0uc3BsaXQoJywnKS5sZW5ndGggPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIGN1clRyYW5zZm9ybSA9IGN1clRyYW5zZm9ybS5zcGxpdCgnLCAnKS5tYXAoZnVuY3Rpb24oYSl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5yZXBsYWNlKCcsJywnLicpO1xuICAgICAgICAgICAgICAgICAgICB9KS5qb2luKCcsICcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgICAgICAgICAgICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtTWF0cml4ID0gbmV3IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgoY3VyVHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IGN1clRyYW5zZm9ybSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1NYXRyaXggPSBjdXJTdHlsZS5Nb3pUcmFuc2Zvcm0gfHwgY3VyU3R5bGUuT1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5Nc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5tc1RyYW5zZm9ybSAgfHwgY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpLnJlcGxhY2UoJ3RyYW5zbGF0ZSgnLCAnbWF0cml4KDEsIDAsIDAsIDEsJyk7XG4gICAgICAgICAgICAgICAgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4LnRvU3RyaW5nKCkuc3BsaXQoJywnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICAgICAgICAgICAgLy9MYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KVxuICAgICAgICAgICAgICAgICAgICBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQxO1xuICAgICAgICAgICAgICAgIC8vQ3JhenkgSUUxMCBNYXRyaXhcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNilcbiAgICAgICAgICAgICAgICAgICAgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTJdKTtcbiAgICAgICAgICAgICAgICAvL05vcm1hbCBCcm93c2Vyc1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgICAgICAgICAgIC8vTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeClcbiAgICAgICAgICAgICAgICAgICAgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MjtcbiAgICAgICAgICAgICAgICAvL0NyYXp5IElFMTAgTWF0cml4XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpXG4gICAgICAgICAgICAgICAgICAgIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEzXSk7XG4gICAgICAgICAgICAgICAgLy9Ob3JtYWwgQnJvd3NlcnNcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnJ0bCAmJiBjdXJUcmFuc2Zvcm0pIGN1clRyYW5zZm9ybSA9IC1jdXJUcmFuc2Zvcm07XG4gICAgICAgICAgICByZXR1cm4gY3VyVHJhbnNmb3JtIHx8IDA7XG4gICAgICAgIH07XG4gICAgICAgIHMuZ2V0V3JhcHBlclRyYW5zbGF0ZSA9IGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGF4aXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgYXhpcyA9IHMuaXNIb3Jpem9udGFsKCkgPyAneCcgOiAneSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcy5nZXRUcmFuc2xhdGUocy53cmFwcGVyWzBdLCBheGlzKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIE9ic2VydmVyXG4gICAgICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbiAgICAgICAgcy5vYnNlcnZlcnMgPSBbXTtcbiAgICAgICAgZnVuY3Rpb24gaW5pdE9ic2VydmVyKHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICAgICAvLyBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2VcbiAgICAgICAgICAgIHZhciBPYnNlcnZlckZ1bmMgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcjtcbiAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBPYnNlcnZlckZ1bmMoZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgICAgICAgICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBzLm9uUmVzaXplKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBzLmVtaXQoJ29uT2JzZXJ2ZXJVcGRhdGUnLCBzLCBtdXRhdGlvbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyRGF0YTogdHlwZW9mIG9wdGlvbnMuY2hhcmFjdGVyRGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGFyYWN0ZXJEYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgICAgICBzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgICAgICAgfVxuICAgICAgICBzLmluaXRPYnNlcnZlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMub2JzZXJ2ZVBhcmVudHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyUGFyZW50cyA9IHMuY29udGFpbmVyLnBhcmVudHMoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRhaW5lclBhcmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdE9ic2VydmVyKGNvbnRhaW5lclBhcmVudHNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAvLyBPYnNlcnZlIGNvbnRhaW5lclxuICAgICAgICAgICAgaW5pdE9ic2VydmVyKHMuY29udGFpbmVyWzBdLCB7Y2hpbGRMaXN0OiBmYWxzZX0pO1xuICAgICAgICBcbiAgICAgICAgICAgIC8vIE9ic2VydmUgd3JhcHBlclxuICAgICAgICAgICAgaW5pdE9ic2VydmVyKHMud3JhcHBlclswXSwge2F0dHJpYnV0ZXM6IGZhbHNlfSk7XG4gICAgICAgIH07XG4gICAgICAgIHMuZGlzY29ubmVjdE9ic2VydmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcy5vYnNlcnZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzLm9ic2VydmVyc1tpXS5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzLm9ic2VydmVycyA9IFtdO1xuICAgICAgICB9O1xuICAgICAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICBMb29wXG4gICAgICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbiAgICAgICAgLy8gQ3JlYXRlIGxvb3BlZCBzbGlkZXNcbiAgICAgICAgcy5jcmVhdGVMb29wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZWQgc2xpZGVzXG4gICAgICAgICAgICBzLndyYXBwZXIuY2hpbGRyZW4oJy4nICsgcy5wYXJhbXMuc2xpZGVDbGFzcyArICcuJyArIHMucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpLnJlbW92ZSgpO1xuICAgICAgICBcbiAgICAgICAgICAgIHZhciBzbGlkZXMgPSBzLndyYXBwZXIuY2hpbGRyZW4oJy4nICsgcy5wYXJhbXMuc2xpZGVDbGFzcyk7XG4gICAgICAgIFxuICAgICAgICAgICAgaWYocy5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmICFzLnBhcmFtcy5sb29wZWRTbGlkZXMpIHMucGFyYW1zLmxvb3BlZFNsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gICAgICAgIFxuICAgICAgICAgICAgcy5sb29wZWRTbGlkZXMgPSBwYXJzZUludChzLnBhcmFtcy5sb29wZWRTbGlkZXMgfHwgcy5wYXJhbXMuc2xpZGVzUGVyVmlldywgMTApO1xuICAgICAgICAgICAgcy5sb29wZWRTbGlkZXMgPSBzLmxvb3BlZFNsaWRlcyArIHMucGFyYW1zLmxvb3BBZGRpdGlvbmFsU2xpZGVzO1xuICAgICAgICAgICAgaWYgKHMubG9vcGVkU2xpZGVzID4gc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHMubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICB2YXIgcHJlcGVuZFNsaWRlcyA9IFtdLCBhcHBlbmRTbGlkZXMgPSBbXSwgaTtcbiAgICAgICAgICAgIHNsaWRlcy5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IHMubG9vcGVkU2xpZGVzKSBhcHBlbmRTbGlkZXMucHVzaChlbCk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgc2xpZGVzLmxlbmd0aCAmJiBpbmRleCA+PSBzbGlkZXMubGVuZ3RoIC0gcy5sb29wZWRTbGlkZXMpIHByZXBlbmRTbGlkZXMucHVzaChlbCk7XG4gICAgICAgICAgICAgICAgc2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcHBlbmRTbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzLndyYXBwZXIuYXBwZW5kKCQoYXBwZW5kU2xpZGVzW2ldLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3Mocy5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gcHJlcGVuZFNsaWRlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIHMud3JhcHBlci5wcmVwZW5kKCQocHJlcGVuZFNsaWRlc1tpXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHMucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcy5kZXN0cm95TG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHMud3JhcHBlci5jaGlsZHJlbignLicgKyBzLnBhcmFtcy5zbGlkZUNsYXNzICsgJy4nICsgcy5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykucmVtb3ZlKCk7XG4gICAgICAgICAgICBzLnNsaWRlcy5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgICAgICB9O1xuICAgICAgICBzLnJlTG9vcCA9IGZ1bmN0aW9uICh1cGRhdGVQb3NpdGlvbikge1xuICAgICAgICAgICAgdmFyIG9sZEluZGV4ID0gcy5hY3RpdmVJbmRleCAtIHMubG9vcGVkU2xpZGVzO1xuICAgICAgICAgICAgcy5kZXN0cm95TG9vcCgpO1xuICAgICAgICAgICAgcy5jcmVhdGVMb29wKCk7XG4gICAgICAgICAgICBzLnVwZGF0ZVNsaWRlc1NpemUoKTtcbiAgICAgICAgICAgIGlmICh1cGRhdGVQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHMuc2xpZGVUbyhvbGRJbmRleCArIHMubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB9O1xuICAgICAgICBzLmZpeExvb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbmV3SW5kZXg7XG4gICAgICAgICAgICAvL0ZpeCBGb3IgTmVnYXRpdmUgT3ZlcnNsaWRpbmdcbiAgICAgICAgICAgIGlmIChzLmFjdGl2ZUluZGV4IDwgcy5sb29wZWRTbGlkZXMpIHtcbiAgICAgICAgICAgICAgICBuZXdJbmRleCA9IHMuc2xpZGVzLmxlbmd0aCAtIHMubG9vcGVkU2xpZGVzICogMyArIHMuYWN0aXZlSW5kZXg7XG4gICAgICAgICAgICAgICAgbmV3SW5kZXggPSBuZXdJbmRleCArIHMubG9vcGVkU2xpZGVzO1xuICAgICAgICAgICAgICAgIHMuc2xpZGVUbyhuZXdJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9GaXggRm9yIFBvc2l0aXZlIE92ZXJzbGlkaW5nXG4gICAgICAgICAgICBlbHNlIGlmICgocy5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHMuYWN0aXZlSW5kZXggPj0gcy5sb29wZWRTbGlkZXMgKiAyKSB8fCAocy5hY3RpdmVJbmRleCA+IHMuc2xpZGVzLmxlbmd0aCAtIHMucGFyYW1zLnNsaWRlc1BlclZpZXcgKiAyKSkge1xuICAgICAgICAgICAgICAgIG5ld0luZGV4ID0gLXMuc2xpZGVzLmxlbmd0aCArIHMuYWN0aXZlSW5kZXggKyBzLmxvb3BlZFNsaWRlcztcbiAgICAgICAgICAgICAgICBuZXdJbmRleCA9IG5ld0luZGV4ICsgcy5sb29wZWRTbGlkZXM7XG4gICAgICAgICAgICAgICAgcy5zbGlkZVRvKG5ld0luZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIEFwcGVuZC9QcmVwZW5kL1JlbW92ZSBTbGlkZXNcbiAgICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBzLmFwcGVuZFNsaWRlID0gZnVuY3Rpb24gKHNsaWRlcykge1xuICAgICAgICAgICAgaWYgKHMucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgICAgICBzLmRlc3Ryb3lMb29wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZXNbaV0pIHMud3JhcHBlci5hcHBlbmQoc2xpZGVzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzLndyYXBwZXIuYXBwZW5kKHNsaWRlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMubG9vcCkge1xuICAgICAgICAgICAgICAgIHMuY3JlYXRlTG9vcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEocy5wYXJhbXMub2JzZXJ2ZXIgJiYgcy5zdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgICAgICAgICAgICAgIHMudXBkYXRlKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzLnByZXBlbmRTbGlkZSA9IGZ1bmN0aW9uIChzbGlkZXMpIHtcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICAgICAgcy5kZXN0cm95TG9vcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gcy5hY3RpdmVJbmRleCArIDE7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZXNbaV0pIHMud3JhcHBlci5wcmVwZW5kKHNsaWRlc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld0FjdGl2ZUluZGV4ID0gcy5hY3RpdmVJbmRleCArIHNsaWRlcy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzLndyYXBwZXIucHJlcGVuZChzbGlkZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgICAgICBzLmNyZWF0ZUxvb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKHMucGFyYW1zLm9ic2VydmVyICYmIHMuc3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICAgICAgICAgICAgICBzLnVwZGF0ZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHMuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xuICAgICAgICB9O1xuICAgICAgICBzLnJlbW92ZVNsaWRlID0gZnVuY3Rpb24gKHNsaWRlc0luZGV4ZXMpIHtcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICAgICAgcy5kZXN0cm95TG9vcCgpO1xuICAgICAgICAgICAgICAgIHMuc2xpZGVzID0gcy53cmFwcGVyLmNoaWxkcmVuKCcuJyArIHMucGFyYW1zLnNsaWRlQ2xhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gcy5hY3RpdmVJbmRleCxcbiAgICAgICAgICAgICAgICBpbmRleFRvUmVtb3ZlO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAnb2JqZWN0JyAmJiBzbGlkZXNJbmRleGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzSW5kZXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzLnNsaWRlcy5lcShpbmRleFRvUmVtb3ZlKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXgtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlcztcbiAgICAgICAgICAgICAgICBpZiAocy5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHMuc2xpZGVzLmVxKGluZGV4VG9SZW1vdmUpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIG5ld0FjdGl2ZUluZGV4LS07XG4gICAgICAgICAgICAgICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgICAgICBzLmNyZWF0ZUxvb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICBpZiAoIShzLnBhcmFtcy5vYnNlcnZlciAmJiBzLnN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgICAgICAgICAgICAgcy51cGRhdGUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMubG9vcCkge1xuICAgICAgICAgICAgICAgIHMuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCArIHMubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIH07XG4gICAgICAgIHMucmVtb3ZlQWxsU2xpZGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcy5zbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzbGlkZXNJbmRleGVzLnB1c2goaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzLnJlbW92ZVNsaWRlKHNsaWRlc0luZGV4ZXMpO1xuICAgICAgICB9O1xuICAgICAgICBcblxuICAgICAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICBFZmZlY3RzXG4gICAgICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbiAgICAgICAgcy5lZmZlY3RzID0ge1xuICAgICAgICAgICAgZmFkZToge1xuICAgICAgICAgICAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHMuc2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBzLnNsaWRlcy5lcShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBzbGlkZVswXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eCA9IC1vZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXMucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHR4ID0gdHggLSBzLnRyYW5zbGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eSA9IHR4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzbGlkZU9wYWNpdHkgPSBzLnBhcmFtcy5mYWRlLmNyb3NzRmFkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWF4KDEgLSBNYXRoLmFicyhzbGlkZVswXS5wcm9ncmVzcyksIDApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSArIE1hdGgubWluKE1hdGgubWF4KHNsaWRlWzBdLnByb2dyZXNzLCAtMSksIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogc2xpZGVPcGFjaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgnICsgdHggKyAncHgsICcgKyB0eSArICdweCwgMHB4KScpO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBzLnNsaWRlcy50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudFRyaWdnZXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5zbGlkZXMudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50VHJpZ2dlcmVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyaWdnZXJFdmVudHMgPSBbJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAndHJhbnNpdGlvbmVuZCcsICdvVHJhbnNpdGlvbkVuZCcsICdNU1RyYW5zaXRpb25FbmQnLCAnbXNUcmFuc2l0aW9uRW5kJ107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmlnZ2VyRXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMud3JhcHBlci50cmlnZ2VyKHRyaWdnZXJFdmVudHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZsaXA6IHtcbiAgICAgICAgICAgICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLnNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gcy5zbGlkZXMuZXEoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBzbGlkZVswXS5wcm9ncmVzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5mbGlwLmxpbWl0Um90YXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKHNsaWRlWzBdLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IHNsaWRlWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvdGF0ZSA9IC0xODAgKiBwcm9ncmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGVZID0gcm90YXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZVggPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4ID0gLW9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eSA9IHR4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGVYID0gLXJvdGF0ZVk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlWSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzLnJ0bCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZVkgPSAtcm90YXRlWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZVswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChwcm9ncmVzcykpICsgcy5zbGlkZXMubGVuZ3RoO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5mbGlwLnNsaWRlU2hhZG93cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vU2V0IHNoYWRvd3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hhZG93QmVmb3JlID0gcy5pc0hvcml6b250YWwoKSA/IHNsaWRlLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6IHNsaWRlLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaGFkb3dBZnRlciA9IHMuaXNIb3Jpem9udGFsKCkgPyBzbGlkZS5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogc2xpZGUuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhZG93QmVmb3JlID0gJCgnPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJyArIChzLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCcpICsgJ1wiPjwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5hcHBlbmQoc2hhZG93QmVmb3JlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3dBZnRlciA9ICQoJzxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LScgKyAocy5pc0hvcml6b250YWwoKSA/ICdyaWdodCcgOiAnYm90dG9tJykgKyAnXCI+PC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLmFwcGVuZChzaGFkb3dBZnRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoKSBzaGFkb3dCZWZvcmVbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1wcm9ncmVzcywgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCkgc2hhZG93QWZ0ZXJbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKCcgKyB0eCArICdweCwgJyArIHR5ICsgJ3B4LCAwcHgpIHJvdGF0ZVgoJyArIHJvdGF0ZVggKyAnZGVnKSByb3RhdGVZKCcgKyByb3RhdGVZICsgJ2RlZyknKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHMuc2xpZGVzLnRyYW5zaXRpb24oZHVyYXRpb24pLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiBkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50VHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnNsaWRlcy5lcShzLmFjdGl2ZUluZGV4KS50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXMpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISQodGhpcykuaGFzQ2xhc3Mocy5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJpZ2dlckV2ZW50cyA9IFsnd2Via2l0VHJhbnNpdGlvbkVuZCcsICd0cmFuc2l0aW9uZW5kJywgJ29UcmFuc2l0aW9uRW5kJywgJ01TVHJhbnNpdGlvbkVuZCcsICdtc1RyYW5zaXRpb25FbmQnXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyaWdnZXJFdmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy53cmFwcGVyLnRyaWdnZXIodHJpZ2dlckV2ZW50c1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY3ViZToge1xuICAgICAgICAgICAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd3JhcHBlclJvdGF0ZSA9IDAsIGN1YmVTaGFkb3c7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5jdWJlLnNoYWRvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdWJlU2hhZG93ID0gcy53cmFwcGVyLmZpbmQoJy5zd2lwZXItY3ViZS1zaGFkb3cnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3ViZVNoYWRvdy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3ViZVNoYWRvdyA9ICQoJzxkaXYgY2xhc3M9XCJzd2lwZXItY3ViZS1zaGFkb3dcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy53cmFwcGVyLmFwcGVuZChjdWJlU2hhZG93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3ViZVNoYWRvdy5jc3Moe2hlaWdodDogcy53aWR0aCArICdweCd9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1YmVTaGFkb3cgPSBzLmNvbnRhaW5lci5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1YmVTaGFkb3cubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1YmVTaGFkb3cgPSAkKCc8ZGl2IGNsYXNzPVwic3dpcGVyLWN1YmUtc2hhZG93XCI+PC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuY29udGFpbmVyLmFwcGVuZChjdWJlU2hhZG93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLnNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gcy5zbGlkZXMuZXEoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVBbmdsZSA9IGkgKiA5MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3VuZCA9IE1hdGguZmxvb3Ioc2xpZGVBbmdsZSAvIDM2MCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5ydGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZUFuZ2xlID0gLXNsaWRlQW5nbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91bmQgPSBNYXRoLmZsb29yKC1zbGlkZUFuZ2xlIC8gMzYwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKHNsaWRlWzBdLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR4ID0gMCwgdHkgPSAwLCB0eiA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAlIDQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eCA9IC0gcm91bmQgKiA0ICogcy5zaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR6ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChpIC0gMSkgJSA0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR6ID0gLSByb3VuZCAqIDQgKiBzLnNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgoaSAtIDIpICUgNCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4ID0gcy5zaXplICsgcm91bmQgKiA0ICogcy5zaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR6ID0gcy5zaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKGkgLSAzKSAlIDQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eCA9IC0gcy5zaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR6ID0gMyAqIHMuc2l6ZSArIHMuc2l6ZSAqIDQgKiByb3VuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLnJ0bCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4ID0gLXR4O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5ID0gdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSAncm90YXRlWCgnICsgKHMuaXNIb3Jpem9udGFsKCkgPyAwIDogLXNsaWRlQW5nbGUpICsgJ2RlZykgcm90YXRlWSgnICsgKHMuaXNIb3Jpem9udGFsKCkgPyBzbGlkZUFuZ2xlIDogMCkgKyAnZGVnKSB0cmFuc2xhdGUzZCgnICsgdHggKyAncHgsICcgKyB0eSArICdweCwgJyArIHR6ICsgJ3B4KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3MgPD0gMSAmJiBwcm9ncmVzcyA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JhcHBlclJvdGF0ZSA9IGkgKiA5MCArIHByb2dyZXNzICogOTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMucnRsKSB3cmFwcGVyUm90YXRlID0gLWkgKiA5MCAtIHByb2dyZXNzICogOTA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS50cmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5jdWJlLnNsaWRlU2hhZG93cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vU2V0IHNoYWRvd3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hhZG93QmVmb3JlID0gcy5pc0hvcml6b250YWwoKSA/IHNsaWRlLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6IHNsaWRlLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaGFkb3dBZnRlciA9IHMuaXNIb3Jpem9udGFsKCkgPyBzbGlkZS5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogc2xpZGUuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhZG93QmVmb3JlID0gJCgnPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJyArIChzLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCcpICsgJ1wiPjwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5hcHBlbmQoc2hhZG93QmVmb3JlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3dBZnRlciA9ICQoJzxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LScgKyAocy5pc0hvcml6b250YWwoKSA/ICdyaWdodCcgOiAnYm90dG9tJykgKyAnXCI+PC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLmFwcGVuZChzaGFkb3dBZnRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoKSBzaGFkb3dCZWZvcmVbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1wcm9ncmVzcywgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCkgc2hhZG93QWZ0ZXJbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzLndyYXBwZXIuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybS1vcmlnaW4nOiAnNTAlIDUwJSAtJyArIChzLnNpemUgLyAyKSArICdweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAnLW1vei10cmFuc2Zvcm0tb3JpZ2luJzogJzUwJSA1MCUgLScgKyAocy5zaXplIC8gMikgKyAncHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJy1tcy10cmFuc2Zvcm0tb3JpZ2luJzogJzUwJSA1MCUgLScgKyAocy5zaXplIC8gMikgKyAncHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybS1vcmlnaW4nOiAnNTAlIDUwJSAtJyArIChzLnNpemUgLyAyKSArICdweCdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMuY3ViZS5zaGFkb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3ViZVNoYWRvdy50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDBweCwgJyArIChzLndpZHRoIC8gMiArIHMucGFyYW1zLmN1YmUuc2hhZG93T2Zmc2V0KSArICdweCwgJyArICgtcy53aWR0aCAvIDIpICsgJ3B4KSByb3RhdGVYKDkwZGVnKSByb3RhdGVaKDBkZWcpIHNjYWxlKCcgKyAocy5wYXJhbXMuY3ViZS5zaGFkb3dTY2FsZSkgKyAnKScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYWRvd0FuZ2xlID0gTWF0aC5hYnMod3JhcHBlclJvdGF0ZSkgLSBNYXRoLmZsb29yKE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC8gOTApICogOTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG11bHRpcGxpZXIgPSAxLjUgLSAoTWF0aC5zaW4oc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSAvIDM2MCkgLyAyICsgTWF0aC5jb3Moc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSAvIDM2MCkgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2NhbGUxID0gcy5wYXJhbXMuY3ViZS5zaGFkb3dTY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUyID0gcy5wYXJhbXMuY3ViZS5zaGFkb3dTY2FsZSAvIG11bHRpcGxpZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHMucGFyYW1zLmN1YmUuc2hhZG93T2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1YmVTaGFkb3cudHJhbnNmb3JtKCdzY2FsZTNkKCcgKyBzY2FsZTEgKyAnLCAxLCAnICsgc2NhbGUyICsgJykgdHJhbnNsYXRlM2QoMHB4LCAnICsgKHMuaGVpZ2h0IC8gMiArIG9mZnNldCkgKyAncHgsICcgKyAoLXMuaGVpZ2h0IC8gMiAvIHNjYWxlMikgKyAncHgpIHJvdGF0ZVgoLTkwZGVnKScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciB6RmFjdG9yID0gKHMuaXNTYWZhcmkgfHwgcy5pc1VpV2ViVmlldykgPyAoLXMuc2l6ZSAvIDIpIDogMDtcbiAgICAgICAgICAgICAgICAgICAgcy53cmFwcGVyLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMHB4LDAsJyArIHpGYWN0b3IgKyAncHgpIHJvdGF0ZVgoJyArIChzLmlzSG9yaXpvbnRhbCgpID8gMCA6IHdyYXBwZXJSb3RhdGUpICsgJ2RlZykgcm90YXRlWSgnICsgKHMuaXNIb3Jpem9udGFsKCkgPyAtd3JhcHBlclJvdGF0ZSA6IDApICsgJ2RlZyknKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBzLnNsaWRlcy50cmFuc2l0aW9uKGR1cmF0aW9uKS5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmN1YmUuc2hhZG93ICYmICFzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLmNvbnRhaW5lci5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93JykudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY292ZXJmbG93OiB7XG4gICAgICAgICAgICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSBzLnRyYW5zbGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNlbnRlciA9IHMuaXNIb3Jpem9udGFsKCkgPyAtdHJhbnNmb3JtICsgcy53aWR0aCAvIDIgOiAtdHJhbnNmb3JtICsgcy5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm90YXRlID0gcy5pc0hvcml6b250YWwoKSA/IHMucGFyYW1zLmNvdmVyZmxvdy5yb3RhdGU6IC1zLnBhcmFtcy5jb3ZlcmZsb3cucm90YXRlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlID0gcy5wYXJhbXMuY292ZXJmbG93LmRlcHRoO1xuICAgICAgICAgICAgICAgICAgICAvL0VhY2ggc2xpZGUgb2Zmc2V0IGZyb20gY2VudGVyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzLnNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gcy5zbGlkZXMuZXEoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVTaXplID0gcy5zbGlkZXNTaXplc0dyaWRbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVPZmZzZXQgPSBzbGlkZVswXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXRNdWx0aXBsaWVyID0gKGNlbnRlciAtIHNsaWRlT2Zmc2V0IC0gc2xpZGVTaXplIC8gMikgLyBzbGlkZVNpemUgKiBzLnBhcmFtcy5jb3ZlcmZsb3cubW9kaWZpZXI7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvdGF0ZVkgPSBzLmlzSG9yaXpvbnRhbCgpID8gcm90YXRlICogb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm90YXRlWCA9IHMuaXNIb3Jpem9udGFsKCkgPyAwIDogcm90YXRlICogb2Zmc2V0TXVsdGlwbGllcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZhciByb3RhdGVaID0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZVogPSAtdHJhbnNsYXRlICogTWF0aC5hYnMob2Zmc2V0TXVsdGlwbGllcik7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZVkgPSBzLmlzSG9yaXpvbnRhbCgpID8gMCA6IHMucGFyYW1zLmNvdmVyZmxvdy5zdHJldGNoICogKG9mZnNldE11bHRpcGxpZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZVggPSBzLmlzSG9yaXpvbnRhbCgpID8gcy5wYXJhbXMuY292ZXJmbG93LnN0cmV0Y2ggKiAob2Zmc2V0TXVsdGlwbGllcikgOiAwO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vRml4IGZvciB1bHRyYSBzbWFsbCB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVYKSA8IDAuMDAxKSB0cmFuc2xhdGVYID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVZKSA8IDAuMDAxKSB0cmFuc2xhdGVZID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVaKSA8IDAuMDAxKSB0cmFuc2xhdGVaID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhyb3RhdGVZKSA8IDAuMDAxKSByb3RhdGVZID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhyb3RhdGVYKSA8IDAuMDAxKSByb3RhdGVYID0gMDtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVUcmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoJyArIHRyYW5zbGF0ZVggKyAncHgsJyArIHRyYW5zbGF0ZVkgKyAncHgsJyArIHRyYW5zbGF0ZVogKyAncHgpICByb3RhdGVYKCcgKyByb3RhdGVYICsgJ2RlZykgcm90YXRlWSgnICsgcm90YXRlWSArICdkZWcpJztcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS50cmFuc2Zvcm0oc2xpZGVUcmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVbMF0uc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQob2Zmc2V0TXVsdGlwbGllcikpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5jb3ZlcmZsb3cuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9TZXQgc2hhZG93c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaGFkb3dCZWZvcmUgPSBzLmlzSG9yaXpvbnRhbCgpID8gc2xpZGUuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogc2xpZGUuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYWRvd0FmdGVyID0gcy5pc0hvcml6b250YWwoKSA/IHNsaWRlLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiBzbGlkZS5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hhZG93QmVmb3JlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3dCZWZvcmUgPSAkKCc8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0nICsgKHMuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJykgKyAnXCI+PC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLmFwcGVuZChzaGFkb3dCZWZvcmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRvd0FmdGVyID0gJCgnPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJyArIChzLmlzSG9yaXpvbnRhbCgpID8gJ3JpZ2h0JyA6ICdib3R0b20nKSArICdcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUuYXBwZW5kKHNoYWRvd0FmdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGgpIHNoYWRvd0JlZm9yZVswXS5zdHlsZS5vcGFjaXR5ID0gb2Zmc2V0TXVsdGlwbGllciA+IDAgPyBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoKSBzaGFkb3dBZnRlclswXS5zdHlsZS5vcGFjaXR5ID0gKC1vZmZzZXRNdWx0aXBsaWVyKSA+IDAgPyAtb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vU2V0IGNvcnJlY3QgcGVyc3BlY3RpdmUgZm9yIElFMTBcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMuYnJvd3Nlci5pZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdzID0gcy53cmFwcGVyWzBdLnN0eWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgd3MucGVyc3BlY3RpdmVPcmlnaW4gPSBjZW50ZXIgKyAncHggNTAlJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHMuc2xpZGVzLnRyYW5zaXRpb24oZHVyYXRpb24pLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG5cbiAgICAgICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgSW1hZ2VzIExhenkgTG9hZGluZ1xuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIHMubGF6eSA9IHtcbiAgICAgICAgICAgIGluaXRpYWxJbWFnZUxvYWRlZDogZmFsc2UsXG4gICAgICAgICAgICBsb2FkSW1hZ2VJblNsaWRlOiBmdW5jdGlvbiAoaW5kZXgsIGxvYWRJbkR1cGxpY2F0ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsb2FkSW5EdXBsaWNhdGUgPT09ICd1bmRlZmluZWQnKSBsb2FkSW5EdXBsaWNhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChzLnNsaWRlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gcy5zbGlkZXMuZXEoaW5kZXgpO1xuICAgICAgICAgICAgICAgIHZhciBpbWcgPSBzbGlkZS5maW5kKCcuJyArIHMucGFyYW1zLmxhenlMb2FkaW5nQ2xhc3MgKyAnOm5vdCguJyArIHMucGFyYW1zLmxhenlTdGF0dXNMb2FkZWRDbGFzcyArICcpOm5vdCguJyArIHMucGFyYW1zLmxhenlTdGF0dXNMb2FkaW5nQ2xhc3MgKyAnKScpO1xuICAgICAgICAgICAgICAgIGlmIChzbGlkZS5oYXNDbGFzcyhzLnBhcmFtcy5sYXp5TG9hZGluZ0NsYXNzKSAmJiAhc2xpZGUuaGFzQ2xhc3Mocy5wYXJhbXMubGF6eVN0YXR1c0xvYWRlZENsYXNzKSAmJiAhc2xpZGUuaGFzQ2xhc3Mocy5wYXJhbXMubGF6eVN0YXR1c0xvYWRpbmdDbGFzcykpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1nID0gaW1nLmFkZChzbGlkZVswXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbWcubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGltZy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9pbWcgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBfaW1nLmFkZENsYXNzKHMucGFyYW1zLmxhenlTdGF0dXNMb2FkaW5nQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmFja2dyb3VuZCA9IF9pbWcuYXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcmMgPSBfaW1nLmF0dHIoJ2RhdGEtc3JjJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmNzZXQgPSBfaW1nLmF0dHIoJ2RhdGEtc3Jjc2V0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplcyA9IF9pbWcuYXR0cignZGF0YS1zaXplcycpO1xuICAgICAgICAgICAgICAgICAgICBzLmxvYWRJbWFnZShfaW1nWzBdLCAoc3JjIHx8IGJhY2tncm91bmQpLCBzcmNzZXQsIHNpemVzLCBmYWxzZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzID09PSAndW5kZWZpbmVkJyB8fCBzID09PSBudWxsIHx8ICFzKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmFja2dyb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbWcuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJywgJ3VybChcIicgKyBiYWNrZ3JvdW5kICsgJ1wiKScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbWcucmVtb3ZlQXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbWcuYXR0cignc3Jjc2V0Jywgc3Jjc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ltZy5yZW1vdmVBdHRyKCdkYXRhLXNyY3NldCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2l6ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ltZy5hdHRyKCdzaXplcycsIHNpemVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ltZy5yZW1vdmVBdHRyKCdkYXRhLXNpemVzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ltZy5hdHRyKCdzcmMnLCBzcmMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaW1nLnJlbW92ZUF0dHIoJ2RhdGEtc3JjJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW1nLmFkZENsYXNzKHMucGFyYW1zLmxhenlTdGF0dXNMb2FkZWRDbGFzcykucmVtb3ZlQ2xhc3Mocy5wYXJhbXMubGF6eVN0YXR1c0xvYWRpbmdDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5maW5kKCcuJyArIHMucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzcyArICcsIC4nICsgcy5wYXJhbXMucHJlbG9hZGVyQ2xhc3MpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmxvb3AgJiYgbG9hZEluRHVwbGljYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlT3JpZ2luYWxJbmRleCA9IHNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlLmhhc0NsYXNzKHMucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbFNsaWRlID0gcy53cmFwcGVyLmNoaWxkcmVuKCdbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCInICsgc2xpZGVPcmlnaW5hbEluZGV4ICsgJ1wiXTpub3QoLicgKyBzLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgJyknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5sYXp5LmxvYWRJbWFnZUluU2xpZGUob3JpZ2luYWxTbGlkZS5pbmRleCgpLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHVwbGljYXRlZFNsaWRlID0gcy53cmFwcGVyLmNoaWxkcmVuKCcuJyArIHMucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyAnW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJyArIHNsaWRlT3JpZ2luYWxJbmRleCArICdcIl0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5sYXp5LmxvYWRJbWFnZUluU2xpZGUoZHVwbGljYXRlZFNsaWRlLmluZGV4KCksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzLmVtaXQoJ29uTGF6eUltYWdlUmVhZHknLCBzLCBzbGlkZVswXSwgX2ltZ1swXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcy5lbWl0KCdvbkxhenlJbWFnZUxvYWQnLCBzLCBzbGlkZVswXSwgX2ltZ1swXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGVzUGVyVmlldyA9IHMucGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFzLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkKSBzLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHMud3JhcHBlci5jaGlsZHJlbignLicgKyBzLnBhcmFtcy5zbGlkZVZpc2libGVDbGFzcykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLmxhenkubG9hZEltYWdlSW5TbGlkZSgkKHRoaXMpLmluZGV4KCkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gcy5hY3RpdmVJbmRleDsgaSA8IHMuYWN0aXZlSW5kZXggKyBzbGlkZXNQZXJWaWV3IDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMuc2xpZGVzW2ldKSBzLmxhenkubG9hZEltYWdlSW5TbGlkZShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMubGF6eS5sb2FkSW1hZ2VJblNsaWRlKHMuYWN0aXZlSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5sYXp5TG9hZGluZ0luUHJldk5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlc1BlclZpZXcgPiAxIHx8IChzLnBhcmFtcy5sYXp5TG9hZGluZ0luUHJldk5leHRBbW91bnQgJiYgcy5wYXJhbXMubGF6eUxvYWRpbmdJblByZXZOZXh0QW1vdW50ID4gMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbW91bnQgPSBzLnBhcmFtcy5sYXp5TG9hZGluZ0luUHJldk5leHRBbW91bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3B2ID0gc2xpZGVzUGVyVmlldztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXhJbmRleCA9IE1hdGgubWluKHMuYWN0aXZlSW5kZXggKyBzcHYgKyBNYXRoLm1heChhbW91bnQsIHNwdiksIHMuc2xpZGVzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWluSW5kZXggPSBNYXRoLm1heChzLmFjdGl2ZUluZGV4IC0gTWF0aC5tYXgoc3B2LCBhbW91bnQpLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5leHQgU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBzLmFjdGl2ZUluZGV4ICsgc2xpZGVzUGVyVmlldzsgaSA8IG1heEluZGV4OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5zbGlkZXNbaV0pIHMubGF6eS5sb2FkSW1hZ2VJblNsaWRlKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJldiBTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IG1pbkluZGV4OyBpIDwgcy5hY3RpdmVJbmRleCA7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLnNsaWRlc1tpXSkgcy5sYXp5LmxvYWRJbWFnZUluU2xpZGUoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFNsaWRlID0gcy53cmFwcGVyLmNoaWxkcmVuKCcuJyArIHMucGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0U2xpZGUubGVuZ3RoID4gMCkgcy5sYXp5LmxvYWRJbWFnZUluU2xpZGUobmV4dFNsaWRlLmluZGV4KCkpO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2U2xpZGUgPSBzLndyYXBwZXIuY2hpbGRyZW4oJy4nICsgcy5wYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZTbGlkZS5sZW5ndGggPiAwKSBzLmxhenkubG9hZEltYWdlSW5TbGlkZShwcmV2U2xpZGUuaW5kZXgoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25UcmFuc2l0aW9uU3RhcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMubGF6eUxvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmxhenlMb2FkaW5nT25UcmFuc2l0aW9uU3RhcnQgfHwgKCFzLnBhcmFtcy5sYXp5TG9hZGluZ09uVHJhbnNpdGlvblN0YXJ0ICYmICFzLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5sYXp5LmxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMubGF6eUxvYWRpbmcgJiYgIXMucGFyYW1zLmxhenlMb2FkaW5nT25UcmFuc2l0aW9uU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcy5sYXp5LmxvYWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIFNjcm9sbGJhclxuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIHMuc2Nyb2xsYmFyID0ge1xuICAgICAgICAgICAgaXNUb3VjaGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHNldERyYWdQb3NpdGlvbjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2IgPSBzLnNjcm9sbGJhcjtcbiAgICAgICAgICAgICAgICB2YXIgeCA9IDAsIHkgPSAwO1xuICAgICAgICAgICAgICAgIHZhciB0cmFuc2xhdGU7XG4gICAgICAgICAgICAgICAgdmFyIHBvaW50ZXJQb3NpdGlvbiA9IHMuaXNIb3Jpem9udGFsKCkgP1xuICAgICAgICAgICAgICAgICAgICAoKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScpID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCB8fCBlLmNsaWVudFgpIDpcbiAgICAgICAgICAgICAgICAgICAgKChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnKSA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVkgfHwgZS5jbGllbnRZKSA7XG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gKHBvaW50ZXJQb3NpdGlvbikgLSBzYi50cmFjay5vZmZzZXQoKVtzLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIC0gc2IuZHJhZ1NpemUgLyAyO1xuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbk1pbiA9IC1zLm1pblRyYW5zbGF0ZSgpICogc2IubW92ZURpdmlkZXI7XG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uTWF4ID0gLXMubWF4VHJhbnNsYXRlKCkgKiBzYi5tb3ZlRGl2aWRlcjtcbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPCBwb3NpdGlvbk1pbikge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uTWluO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwb3NpdGlvbiA+IHBvc2l0aW9uTWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb25NYXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gLXBvc2l0aW9uIC8gc2IubW92ZURpdmlkZXI7XG4gICAgICAgICAgICAgICAgcy51cGRhdGVQcm9ncmVzcyhwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgcy5zZXRXcmFwcGVyVHJhbnNsYXRlKHBvc2l0aW9uLCB0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkcmFnU3RhcnQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNiID0gcy5zY3JvbGxiYXI7XG4gICAgICAgICAgICAgICAgc2IuaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgc2Iuc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChzYi5kcmFnVGltZW91dCk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIHNiLnRyYWNrLnRyYW5zaXRpb24oMCk7XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnNjcm9sbGJhckhpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2IudHJhY2suY3NzKCdvcGFjaXR5JywgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHMud3JhcHBlci50cmFuc2l0aW9uKDEwMCk7XG4gICAgICAgICAgICAgICAgc2IuZHJhZy50cmFuc2l0aW9uKDEwMCk7XG4gICAgICAgICAgICAgICAgcy5lbWl0KCdvblNjcm9sbGJhckRyYWdTdGFydCcsIHMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRyYWdNb3ZlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciBzYiA9IHMuc2Nyb2xsYmFyO1xuICAgICAgICAgICAgICAgIGlmICghc2IuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzYi5zZXREcmFnUG9zaXRpb24oZSk7XG4gICAgICAgICAgICAgICAgcy53cmFwcGVyLnRyYW5zaXRpb24oMCk7XG4gICAgICAgICAgICAgICAgc2IudHJhY2sudHJhbnNpdGlvbigwKTtcbiAgICAgICAgICAgICAgICBzYi5kcmFnLnRyYW5zaXRpb24oMCk7XG4gICAgICAgICAgICAgICAgcy5lbWl0KCdvblNjcm9sbGJhckRyYWdNb3ZlJywgcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZHJhZ0VuZDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2IgPSBzLnNjcm9sbGJhcjtcbiAgICAgICAgICAgICAgICBpZiAoIXNiLmlzVG91Y2hlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNiLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5zY3JvbGxiYXJIaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChzYi5kcmFnVGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIHNiLmRyYWdUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYi50cmFjay5jc3MoJ29wYWNpdHknLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNiLnRyYWNrLnRyYW5zaXRpb24oNDAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzLmVtaXQoJ29uU2Nyb2xsYmFyRHJhZ0VuZCcsIHMpO1xuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5zY3JvbGxiYXJTbmFwT25SZWxlYXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHMuc2xpZGVSZXNldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkcmFnZ2FibGVFdmVudHM6IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKChzLnBhcmFtcy5zaW11bGF0ZVRvdWNoID09PSBmYWxzZSAmJiAhcy5zdXBwb3J0LnRvdWNoKSkgcmV0dXJuIHMudG91Y2hFdmVudHNEZXNrdG9wO1xuICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIHMudG91Y2hFdmVudHM7XG4gICAgICAgICAgICB9KSgpLFxuICAgICAgICAgICAgZW5hYmxlRHJhZ2dhYmxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNiID0gcy5zY3JvbGxiYXI7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHMuc3VwcG9ydC50b3VjaCA/IHNiLnRyYWNrIDogZG9jdW1lbnQ7XG4gICAgICAgICAgICAgICAgJChzYi50cmFjaykub24oc2IuZHJhZ2dhYmxlRXZlbnRzLnN0YXJ0LCBzYi5kcmFnU3RhcnQpO1xuICAgICAgICAgICAgICAgICQodGFyZ2V0KS5vbihzYi5kcmFnZ2FibGVFdmVudHMubW92ZSwgc2IuZHJhZ01vdmUpO1xuICAgICAgICAgICAgICAgICQodGFyZ2V0KS5vbihzYi5kcmFnZ2FibGVFdmVudHMuZW5kLCBzYi5kcmFnRW5kKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXNhYmxlRHJhZ2dhYmxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNiID0gcy5zY3JvbGxiYXI7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHMuc3VwcG9ydC50b3VjaCA/IHNiLnRyYWNrIDogZG9jdW1lbnQ7XG4gICAgICAgICAgICAgICAgJChzYi50cmFjaykub2ZmKHNiLmRyYWdnYWJsZUV2ZW50cy5zdGFydCwgc2IuZHJhZ1N0YXJ0KTtcbiAgICAgICAgICAgICAgICAkKHRhcmdldCkub2ZmKHNiLmRyYWdnYWJsZUV2ZW50cy5tb3ZlLCBzYi5kcmFnTW92ZSk7XG4gICAgICAgICAgICAgICAgJCh0YXJnZXQpLm9mZihzYi5kcmFnZ2FibGVFdmVudHMuZW5kLCBzYi5kcmFnRW5kKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXMucGFyYW1zLnNjcm9sbGJhcikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHZhciBzYiA9IHMuc2Nyb2xsYmFyO1xuICAgICAgICAgICAgICAgIHNiLnRyYWNrID0gJChzLnBhcmFtcy5zY3JvbGxiYXIpO1xuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2Ygcy5wYXJhbXMuc2Nyb2xsYmFyID09PSAnc3RyaW5nJyAmJiBzYi50cmFjay5sZW5ndGggPiAxICYmIHMuY29udGFpbmVyLmZpbmQocy5wYXJhbXMuc2Nyb2xsYmFyKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2IudHJhY2sgPSBzLmNvbnRhaW5lci5maW5kKHMucGFyYW1zLnNjcm9sbGJhcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNiLmRyYWcgPSBzYi50cmFjay5maW5kKCcuc3dpcGVyLXNjcm9sbGJhci1kcmFnJyk7XG4gICAgICAgICAgICAgICAgaWYgKHNiLmRyYWcubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNiLmRyYWcgPSAkKCc8ZGl2IGNsYXNzPVwic3dpcGVyLXNjcm9sbGJhci1kcmFnXCI+PC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgIHNiLnRyYWNrLmFwcGVuZChzYi5kcmFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2IuZHJhZ1swXS5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgICAgICAgICAgIHNiLmRyYWdbMF0uc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICAgICAgICAgICAgc2IudHJhY2tTaXplID0gcy5pc0hvcml6b250YWwoKSA/IHNiLnRyYWNrWzBdLm9mZnNldFdpZHRoIDogc2IudHJhY2tbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBzYi5kaXZpZGVyID0gcy5zaXplIC8gcy52aXJ0dWFsU2l6ZTtcbiAgICAgICAgICAgICAgICBzYi5tb3ZlRGl2aWRlciA9IHNiLmRpdmlkZXIgKiAoc2IudHJhY2tTaXplIC8gcy5zaXplKTtcbiAgICAgICAgICAgICAgICBzYi5kcmFnU2l6ZSA9IHNiLnRyYWNrU2l6ZSAqIHNiLmRpdmlkZXI7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNiLmRyYWdbMF0uc3R5bGUud2lkdGggPSBzYi5kcmFnU2l6ZSArICdweCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzYi5kcmFnWzBdLnN0eWxlLmhlaWdodCA9IHNiLmRyYWdTaXplICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChzYi5kaXZpZGVyID49IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2IudHJhY2tbMF0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNiLnRyYWNrWzBdLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnNjcm9sbGJhckhpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2IudHJhY2tbMF0uc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICghcy5wYXJhbXMuc2Nyb2xsYmFyKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdmFyIGRpZmY7XG4gICAgICAgICAgICAgICAgdmFyIHNiID0gcy5zY3JvbGxiYXI7XG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZSA9IHMudHJhbnNsYXRlIHx8IDA7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1BvcztcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIG5ld1NpemUgPSBzYi5kcmFnU2l6ZTtcbiAgICAgICAgICAgICAgICBuZXdQb3MgPSAoc2IudHJhY2tTaXplIC0gc2IuZHJhZ1NpemUpICogcy5wcm9ncmVzcztcbiAgICAgICAgICAgICAgICBpZiAocy5ydGwgJiYgcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdQb3MgPSAtbmV3UG9zO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3UG9zID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9IHNiLmRyYWdTaXplIC0gbmV3UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3UG9zID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgtbmV3UG9zICsgc2IuZHJhZ1NpemUgPiBzYi50cmFja1NpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NpemUgPSBzYi50cmFja1NpemUgKyBuZXdQb3M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdQb3MgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0gc2IuZHJhZ1NpemUgKyBuZXdQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQb3MgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5ld1BvcyArIHNiLmRyYWdTaXplID4gc2IudHJhY2tTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0gc2IudHJhY2tTaXplIC0gbmV3UG9zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzLnN1cHBvcnQudHJhbnNmb3JtczNkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYi5kcmFnLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoJyArIChuZXdQb3MpICsgJ3B4LCAwLCAwKScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2IuZHJhZy50cmFuc2Zvcm0oJ3RyYW5zbGF0ZVgoJyArIChuZXdQb3MpICsgJ3B4KScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNiLmRyYWdbMF0uc3R5bGUud2lkdGggPSBuZXdTaXplICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzLnN1cHBvcnQudHJhbnNmb3JtczNkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYi5kcmFnLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMHB4LCAnICsgKG5ld1BvcykgKyAncHgsIDApJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYi5kcmFnLnRyYW5zZm9ybSgndHJhbnNsYXRlWSgnICsgKG5ld1BvcykgKyAncHgpJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2IuZHJhZ1swXS5zdHlsZS5oZWlnaHQgPSBuZXdTaXplICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnNjcm9sbGJhckhpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNiLnRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICBzYi50cmFja1swXS5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgc2IudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2IudHJhY2tbMF0uc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYi50cmFjay50cmFuc2l0aW9uKDQwMCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoIXMucGFyYW1zLnNjcm9sbGJhcikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHMuc2Nyb2xsYmFyLmRyYWcudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIENvbnRyb2xsZXJcbiAgICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBzLmNvbnRyb2xsZXIgPSB7XG4gICAgICAgICAgICBMaW5lYXJTcGxpbmU6IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGJpbmFyeVNlYXJjaCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heEluZGV4LCBtaW5JbmRleCwgZ3Vlc3M7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwgdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5JbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4SW5kZXggPSBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobWF4SW5kZXggLSBtaW5JbmRleCA+IDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFycmF5W2d1ZXNzID0gbWF4SW5kZXggKyBtaW5JbmRleCA+PiAxXSA8PSB2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluSW5kZXggPSBndWVzcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhJbmRleCA9IGd1ZXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXhJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgICAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbmRleCA9IHgubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAvLyBHaXZlbiBhbiB4IHZhbHVlICh4MiksIHJldHVybiB0aGUgZXhwZWN0ZWQgeTIgdmFsdWU6XG4gICAgICAgICAgICAgICAgLy8gKHgxLHkxKSBpcyB0aGUga25vd24gcG9pbnQgYmVmb3JlIGdpdmVuIHZhbHVlLFxuICAgICAgICAgICAgICAgIC8vICh4Myx5MykgaXMgdGhlIGtub3duIHBvaW50IGFmdGVyIGdpdmVuIHZhbHVlLlxuICAgICAgICAgICAgICAgIHZhciBpMSwgaTM7XG4gICAgICAgICAgICAgICAgdmFyIGwgPSB0aGlzLngubGVuZ3RoO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLmludGVycG9sYXRlID0gZnVuY3Rpb24gKHgyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgheDIpIHJldHVybiAwO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBpbmRleGVzIG9mIHgxIGFuZCB4MyAodGhlIGFycmF5IGluZGV4ZXMgYmVmb3JlIGFuZCBhZnRlciBnaXZlbiB4Mik6XG4gICAgICAgICAgICAgICAgICAgIGkzID0gYmluYXJ5U2VhcmNoKHRoaXMueCwgeDIpO1xuICAgICAgICAgICAgICAgICAgICBpMSA9IGkzIC0gMTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgb3VyIGluZGV4ZXMgaTEgJiBpMywgc28gd2UgY2FuIGNhbGN1bGF0ZSBhbHJlYWR5OlxuICAgICAgICAgICAgICAgICAgICAvLyB5MiA6PSAoKHgy4oiSeDEpIMOXICh5M+KIknkxKSkgw7cgKHgz4oiSeDEpICsgeTFcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgoeDIgLSB0aGlzLnhbaTFdKSAqICh0aGlzLnlbaTNdIC0gdGhpcy55W2kxXSkpIC8gKHRoaXMueFtpM10gLSB0aGlzLnhbaTFdKSArIHRoaXMueVtpMV07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvL3h4eDogZm9yIG5vdyBpIHdpbGwganVzdCBzYXZlIG9uZSBzcGxpbmUgZnVuY3Rpb24gdG8gdG9cbiAgICAgICAgICAgIGdldEludGVycG9sYXRlRnVuY3Rpb246IGZ1bmN0aW9uKGMpe1xuICAgICAgICAgICAgICAgIGlmKCFzLmNvbnRyb2xsZXIuc3BsaW5lKSBzLmNvbnRyb2xsZXIuc3BsaW5lID0gcy5wYXJhbXMubG9vcCA/XG4gICAgICAgICAgICAgICAgICAgIG5ldyBzLmNvbnRyb2xsZXIuTGluZWFyU3BsaW5lKHMuc2xpZGVzR3JpZCwgYy5zbGlkZXNHcmlkKSA6XG4gICAgICAgICAgICAgICAgICAgIG5ldyBzLmNvbnRyb2xsZXIuTGluZWFyU3BsaW5lKHMuc25hcEdyaWQsIGMuc25hcEdyaWQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICB2YXIgY29udHJvbGxlZCA9IHMucGFyYW1zLmNvbnRyb2w7XG4gICAgICAgICAgICAgICB2YXIgbXVsdGlwbGllciwgY29udHJvbGxlZFRyYW5zbGF0ZTtcbiAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoYykge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHdpbGwgY3JlYXRlIGFuIEludGVycG9sYXRlIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBzbmFwR3JpZHNcbiAgICAgICAgICAgICAgICAgICAgLy8geCBpcyB0aGUgR3JpZCBvZiB0aGUgc2Nyb2xsZWQgc2Nyb2xsZXIgYW5kIHkgd2lsbCBiZSB0aGUgY29udHJvbGxlZCBzY3JvbGxlclxuICAgICAgICAgICAgICAgICAgICAvLyBpdCBtYWtlcyBzZW5zZSB0byBjcmVhdGUgdGhpcyBvbmx5IG9uY2UgYW5kIHJlY2FsbCBpdCBmb3IgdGhlIGludGVycG9sYXRpb25cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGZ1bmN0aW9uIGRvZXMgYSBsb3Qgb2YgdmFsdWUgY2FjaGluZyBmb3IgcGVyZm9ybWFuY2VcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlID0gYy5ydGwgJiYgYy5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAtcy50cmFuc2xhdGUgOiBzLnRyYW5zbGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmNvbnRyb2xCeSA9PT0gJ3NsaWRlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5jb250cm9sbGVyLmdldEludGVycG9sYXRlRnVuY3Rpb24oYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpIGFtIG5vdCBzdXJlIHdoeSB0aGUgdmFsdWVzIGhhdmUgdG8gYmUgbXVsdGlwbGljYXRlZCB0aGlzIHdheSwgdHJpZWQgdG8gaW52ZXJ0IHRoZSBzbmFwR3JpZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGl0IGRpZCBub3Qgd29yayBvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAtcy5jb250cm9sbGVyLnNwbGluZS5pbnRlcnBvbGF0ZSgtdHJhbnNsYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYoIWNvbnRyb2xsZWRUcmFuc2xhdGUgfHwgcy5wYXJhbXMuY29udHJvbEJ5ID09PSAnY29udGFpbmVyJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsaWVyID0gKGMubWF4VHJhbnNsYXRlKCkgLSBjLm1pblRyYW5zbGF0ZSgpKSAvIChzLm1heFRyYW5zbGF0ZSgpIC0gcy5taW5UcmFuc2xhdGUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gKHRyYW5zbGF0ZSAtIHMubWluVHJhbnNsYXRlKCkpICogbXVsdGlwbGllciArIGMubWluVHJhbnNsYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5jb250cm9sSW52ZXJzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9IGMubWF4VHJhbnNsYXRlKCkgLSBjb250cm9sbGVkVHJhbnNsYXRlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGMudXBkYXRlUHJvZ3Jlc3MoY29udHJvbGxlZFRyYW5zbGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGMuc2V0V3JhcHBlclRyYW5zbGF0ZShjb250cm9sbGVkVHJhbnNsYXRlLCBmYWxzZSwgcyk7XG4gICAgICAgICAgICAgICAgICAgIGMudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRyb2xsZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250cm9sbGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjb250cm9sbGVkW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoY29udHJvbGxlZCk7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udHJvbGxlZCA9IHMucGFyYW1zLmNvbnRyb2w7XG4gICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oYykge1xuICAgICAgICAgICAgICAgICAgICBjLnNldFdyYXBwZXJUcmFuc2l0aW9uKGR1cmF0aW9uLCBzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLm9uVHJhbnNpdGlvblN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLndyYXBwZXIudHJhbnNpdGlvbkVuZChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29udHJvbGxlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjLnBhcmFtcy5sb29wICYmIHMucGFyYW1zLmNvbnRyb2xCeSA9PT0gJ3NsaWRlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmZpeExvb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5vblRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xsZWRbaV0gIT09IGJ5Q29udHJvbGxlciAmJiBjb250cm9sbGVkW2ldIGluc3RhbmNlb2YgU3dpcGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZFtpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29udHJvbGxlZCBpbnN0YW5jZW9mIFN3aXBlciAmJiBieUNvbnRyb2xsZXIgIT09IGNvbnRyb2xsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcblxuICAgICAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICBIYXNoIE5hdmlnYXRpb25cbiAgICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBzLmhhc2huYXYgPSB7XG4gICAgICAgICAgICBvbkhhc2hDYW5nZTogZnVuY3Rpb24gKGUsIGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3SGFzaCA9IGRvY3VtZW50LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlU2xpZGVIYXNoID0gcy5zbGlkZXMuZXEocy5hY3RpdmVJbmRleCkuYXR0cignZGF0YS1oYXNoJyk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0hhc2ggIT09IGFjdGl2ZVNsaWRlSGFzaCkge1xuICAgICAgICAgICAgICAgICAgICBzLnNsaWRlVG8ocy53cmFwcGVyLmNoaWxkcmVuKCcuJyArIHMucGFyYW1zLnNsaWRlQ2xhc3MgKyAnW2RhdGEtaGFzaD1cIicgKyAobmV3SGFzaCkgKyAnXCJdJykuaW5kZXgoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF0dGFjaEV2ZW50czogZnVuY3Rpb24gKGRldGFjaCkge1xuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBkZXRhY2ggPyAnb2ZmJyA6ICdvbic7XG4gICAgICAgICAgICAgICAgJCh3aW5kb3cpW2FjdGlvbl0oJ2hhc2hjaGFuZ2UnLCBzLmhhc2huYXYub25IYXNoQ2FuZ2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldEhhc2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXMuaGFzaG5hdi5pbml0aWFsaXplZCB8fCAhcy5wYXJhbXMuaGFzaG5hdikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5yZXBsYWNlU3RhdGUgJiYgd2luZG93Lmhpc3RvcnkgJiYgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShudWxsLCBudWxsLCAoJyMnICsgcy5zbGlkZXMuZXEocy5hY3RpdmVJbmRleCkuYXR0cignZGF0YS1oYXNoJykgfHwgJycpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBzLnNsaWRlcy5lcShzLmFjdGl2ZUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc2ggPSBzbGlkZS5hdHRyKCdkYXRhLWhhc2gnKSB8fCBzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKTtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24uaGFzaCA9IGhhc2ggfHwgJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXMucGFyYW1zLmhhc2huYXYgfHwgcy5wYXJhbXMuaGlzdG9yeSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHMuaGFzaG5hdi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIGhhc2ggPSBkb2N1bWVudC5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJyk7XG4gICAgICAgICAgICAgICAgaWYgKGhhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNwZWVkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHMuc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBzLnNsaWRlcy5lcShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzbGlkZUhhc2ggPSBzbGlkZS5hdHRyKCdkYXRhLWhhc2gnKSB8fCBzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZUhhc2ggPT09IGhhc2ggJiYgIXNsaWRlLmhhc0NsYXNzKHMucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBzLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5oYXNobmF2V2F0Y2hTdGF0ZSkgcy5oYXNobmF2LmF0dGFjaEV2ZW50cygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMuaGFzaG5hdldhdGNoU3RhdGUpIHMuaGFzaG5hdi5hdHRhY2hFdmVudHModHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIEhpc3RvcnkgQXBpIHdpdGggZmFsbGJhY2sgdG8gSGFzaG5hdlxuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIHMuaGlzdG9yeSA9IHtcbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXMucGFyYW1zLmhpc3RvcnkpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoIXdpbmRvdy5oaXN0b3J5IHx8ICF3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcy5wYXJhbXMuaGlzdG9yeSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzLnBhcmFtcy5oYXNobmF2ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzLmhpc3RvcnkuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aHMgPSB0aGlzLmdldFBhdGhWYWx1ZXMoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucGF0aHMua2V5ICYmICF0aGlzLnBhdGhzLnZhbHVlKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUb1NsaWRlKDAsIHRoaXMucGF0aHMudmFsdWUsIHMucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgICAgICAgICAgICAgaWYgKCFzLnBhcmFtcy5yZXBsYWNlU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgdGhpcy5zZXRIaXN0b3J5UG9wU3RhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRIaXN0b3J5UG9wU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHMuaGlzdG9yeS5wYXRocyA9IHMuaGlzdG9yeS5nZXRQYXRoVmFsdWVzKCk7XG4gICAgICAgICAgICAgICAgcy5oaXN0b3J5LnNjcm9sbFRvU2xpZGUocy5wYXJhbXMuc3BlZWQsIHMuaGlzdG9yeS5wYXRocy52YWx1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFBhdGhWYWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBwYXRoQXJyYXkgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc2xpY2UoMSkuc3BsaXQoJy8nKTtcbiAgICAgICAgICAgICAgICB2YXIgdG90YWwgPSBwYXRoQXJyYXkubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBwYXRoQXJyYXlbdG90YWwgLSAyXTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXRoQXJyYXlbdG90YWwgLSAxXTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBrZXk6IGtleSwgdmFsdWU6IHZhbHVlIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0SGlzdG9yeTogZnVuY3Rpb24gKGtleSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXMuaGlzdG9yeS5pbml0aWFsaXplZCB8fCAhcy5wYXJhbXMuaGlzdG9yeSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZSA9IHMuc2xpZGVzLmVxKGluZGV4KTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnNsdWdpZnkoc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5JykpO1xuICAgICAgICAgICAgICAgIGlmICghd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBrZXkgKyAnLycgKyB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNsdWdpZnk6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dC50b1N0cmluZygpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xccysvZywgJy0nKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvW15cXHdcXC1dKy9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcLVxcLSsvZywgJy0nKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXi0rLywgJycpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8tKyQvLCAnJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2Nyb2xsVG9TbGlkZTogZnVuY3Rpb24oc3BlZWQsIHZhbHVlLCBydW5DYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHMuc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBzLnNsaWRlcy5lcShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzbGlkZUhpc3RvcnkgPSB0aGlzLnNsdWdpZnkoc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlSGlzdG9yeSA9PT0gdmFsdWUgJiYgIXNsaWRlLmhhc0NsYXNzKHMucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcy5zbGlkZVRvKDAsIHNwZWVkLCBydW5DYWxsYmFja3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG5cbiAgICAgICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgS2V5Ym9hcmQgQ29udHJvbFxuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUtleWJvYXJkKGUpIHtcbiAgICAgICAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vanF1ZXJ5IGZpeFxuICAgICAgICAgICAgdmFyIGtjID0gZS5rZXlDb2RlIHx8IGUuY2hhckNvZGU7XG4gICAgICAgICAgICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gICAgICAgICAgICBpZiAoIXMucGFyYW1zLmFsbG93U3dpcGVUb05leHQgJiYgKHMuaXNIb3Jpem9udGFsKCkgJiYga2MgPT09IDM5IHx8ICFzLmlzSG9yaXpvbnRhbCgpICYmIGtjID09PSA0MCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXMucGFyYW1zLmFsbG93U3dpcGVUb1ByZXYgJiYgKHMuaXNIb3Jpem9udGFsKCkgJiYga2MgPT09IDM3IHx8ICFzLmlzSG9yaXpvbnRhbCgpICYmIGtjID09PSAzOCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZS5zaGlmdEtleSB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZSAmJiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2MgPT09IDM3IHx8IGtjID09PSAzOSB8fCBrYyA9PT0gMzggfHwga2MgPT09IDQwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluVmlldyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vQ2hlY2sgdGhhdCBzd2lwZXIgc2hvdWxkIGJlIGluc2lkZSBvZiB2aXNpYmxlIGFyZWEgb2Ygd2luZG93XG4gICAgICAgICAgICAgICAgaWYgKHMuY29udGFpbmVyLnBhcmVudHMoJy4nICsgcy5wYXJhbXMuc2xpZGVDbGFzcykubGVuZ3RoID4gMCAmJiBzLmNvbnRhaW5lci5wYXJlbnRzKCcuJyArIHMucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB3aW5kb3dTY3JvbGwgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgICAgICAgdmFyIHN3aXBlck9mZnNldCA9IHMuY29udGFpbmVyLm9mZnNldCgpO1xuICAgICAgICAgICAgICAgIGlmIChzLnJ0bCkgc3dpcGVyT2Zmc2V0LmxlZnQgPSBzd2lwZXJPZmZzZXQubGVmdCAtIHMuY29udGFpbmVyWzBdLnNjcm9sbExlZnQ7XG4gICAgICAgICAgICAgICAgdmFyIHN3aXBlckNvb3JkID0gW1xuICAgICAgICAgICAgICAgICAgICBbc3dpcGVyT2Zmc2V0LmxlZnQsIHN3aXBlck9mZnNldC50b3BdLFxuICAgICAgICAgICAgICAgICAgICBbc3dpcGVyT2Zmc2V0LmxlZnQgKyBzLndpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSxcbiAgICAgICAgICAgICAgICAgICAgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wICsgcy5oZWlnaHRdLFxuICAgICAgICAgICAgICAgICAgICBbc3dpcGVyT2Zmc2V0LmxlZnQgKyBzLndpZHRoLCBzd2lwZXJPZmZzZXQudG9wICsgcy5oZWlnaHRdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN3aXBlckNvb3JkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2ludCA9IHN3aXBlckNvb3JkW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludFswXSA+PSB3aW5kb3dTY3JvbGwubGVmdCAmJiBwb2ludFswXSA8PSB3aW5kb3dTY3JvbGwubGVmdCArIHdpbmRvd1dpZHRoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludFsxXSA+PSB3aW5kb3dTY3JvbGwudG9wICYmIHBvaW50WzFdIDw9IHdpbmRvd1Njcm9sbC50b3AgKyB3aW5kb3dIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpblZpZXcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWluVmlldykgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2MgPT09IDM3IHx8IGtjID09PSAzOSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChrYyA9PT0gMzkgJiYgIXMucnRsKSB8fCAoa2MgPT09IDM3ICYmIHMucnRsKSkgcy5zbGlkZU5leHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoKGtjID09PSAzNyAmJiAhcy5ydGwpIHx8IChrYyA9PT0gMzkgJiYgcy5ydGwpKSBzLnNsaWRlUHJldigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGtjID09PSAzOCB8fCBrYyA9PT0gNDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChrYyA9PT0gNDApIHMuc2xpZGVOZXh0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGtjID09PSAzOCkgcy5zbGlkZVByZXYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHMuZW1pdCgnb25LZXlQcmVzcycsIHMsIGtjKTtcbiAgICAgICAgfVxuICAgICAgICBzLmRpc2FibGVLZXlib2FyZENvbnRyb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzLnBhcmFtcy5rZXlib2FyZENvbnRyb2wgPSBmYWxzZTtcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZigna2V5ZG93bicsIGhhbmRsZUtleWJvYXJkKTtcbiAgICAgICAgfTtcbiAgICAgICAgcy5lbmFibGVLZXlib2FyZENvbnRyb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzLnBhcmFtcy5rZXlib2FyZENvbnRyb2wgPSB0cnVlO1xuICAgICAgICAgICAgJChkb2N1bWVudCkub24oJ2tleWRvd24nLCBoYW5kbGVLZXlib2FyZCk7XG4gICAgICAgIH07XG4gICAgICAgIFxuXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIE1vdXNld2hlZWwgQ29udHJvbFxuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIHMubW91c2V3aGVlbCA9IHtcbiAgICAgICAgICAgIGV2ZW50OiBmYWxzZSxcbiAgICAgICAgICAgIGxhc3RTY3JvbGxUaW1lOiAobmV3IHdpbmRvdy5EYXRlKCkpLmdldFRpbWUoKVxuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiBpc0V2ZW50U3VwcG9ydGVkKCkge1xuICAgICAgICAgICAgdmFyIGV2ZW50TmFtZSA9ICdvbndoZWVsJztcbiAgICAgICAgICAgIHZhciBpc1N1cHBvcnRlZCA9IGV2ZW50TmFtZSBpbiBkb2N1bWVudDtcbiAgICAgICAgXG4gICAgICAgICAgICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShldmVudE5hbWUsICdyZXR1cm47Jyk7XG4gICAgICAgICAgICAgICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxlbWVudFtldmVudE5hbWVdID09PSAnZnVuY3Rpb24nO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIGlmICghaXNTdXBwb3J0ZWQgJiZcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJlxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUgJiZcbiAgICAgICAgICAgICAgICAgICAgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuICAgICAgICAgICAgICAgICAgICAvLyBAc2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZG9taW1wbGVtZW50YXRpb24taGFzZmVhdHVyZVxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJycsICcnKSAhPT0gdHJ1ZSApIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBvbmx5IHdheSB0byB0ZXN0IHN1cHBvcnQgZm9yIHRoZSBgd2hlZWxgIGV2ZW50IGluIElFOSsuXG4gICAgICAgICAgICAgICAgaXNTdXBwb3J0ZWQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdFdmVudHMud2hlZWwnLCAnMy4wJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNb3VzZSB3aGVlbCAoYW5kIDItZmluZ2VyIHRyYWNrcGFkKSBzdXBwb3J0IG9uIHRoZSB3ZWIgc3Vja3MuICBJdCBpc1xuICAgICAgICAgKiBjb21wbGljYXRlZCwgdGh1cyB0aGlzIGRvYyBpcyBsb25nIGFuZCAoaG9wZWZ1bGx5KSBkZXRhaWxlZCBlbm91Z2ggdG8gYW5zd2VyXG4gICAgICAgICAqIHlvdXIgcXVlc3Rpb25zLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJZiB5b3UgbmVlZCB0byByZWFjdCB0byB0aGUgbW91c2Ugd2hlZWwgaW4gYSBwcmVkaWN0YWJsZSB3YXksIHRoaXMgY29kZSBpc1xuICAgICAgICAgKiBsaWtlIHlvdXIgYmVzdGVzdCBmcmllbmQuICogaHVncyAqXG4gICAgICAgICAqXG4gICAgICAgICAqIEFzIG9mIHRvZGF5LCB0aGVyZSBhcmUgNCBET00gZXZlbnQgdHlwZXMgeW91IGNhbiBsaXN0ZW4gdG86XG4gICAgICAgICAqXG4gICAgICAgICAqICAgJ3doZWVsJyAgICAgICAgICAgICAgICAtLSBDaHJvbWUoMzErKSwgRkYoMTcrKSwgSUUoOSspXG4gICAgICAgICAqICAgJ21vdXNld2hlZWwnICAgICAgICAgICAtLSBDaHJvbWUsIElFKDYrKSwgT3BlcmEsIFNhZmFyaVxuICAgICAgICAgKiAgICdNb3pNb3VzZVBpeGVsU2Nyb2xsJyAgLS0gRkYoMy41IG9ubHkhKSAoMjAxMC0yMDEzKSAtLSBkb24ndCBib3RoZXIhXG4gICAgICAgICAqICAgJ0RPTU1vdXNlU2Nyb2xsJyAgICAgICAtLSBGRigwLjkuNyspIHNpbmNlIDIwMDNcbiAgICAgICAgICpcbiAgICAgICAgICogU28gd2hhdCB0byBkbz8gIFRoZSBpcyB0aGUgYmVzdDpcbiAgICAgICAgICpcbiAgICAgICAgICogICBub3JtYWxpemVXaGVlbC5nZXRFdmVudFR5cGUoKTtcbiAgICAgICAgICpcbiAgICAgICAgICogSW4geW91ciBldmVudCBjYWxsYmFjaywgdXNlIHRoaXMgY29kZSB0byBnZXQgc2FuZSBpbnRlcnByZXRhdGlvbiBvZiB0aGVcbiAgICAgICAgICogZGVsdGFzLiAgVGhpcyBjb2RlIHdpbGwgcmV0dXJuIGFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXM6XG4gICAgICAgICAqXG4gICAgICAgICAqICAgc3BpblggICAtLSBub3JtYWxpemVkIHNwaW4gc3BlZWQgKHVzZSBmb3Igem9vbSkgLSB4IHBsYW5lXG4gICAgICAgICAqICAgc3BpblkgICAtLSBcIiAtIHkgcGxhbmVcbiAgICAgICAgICogICBwaXhlbFggIC0tIG5vcm1hbGl6ZWQgZGlzdGFuY2UgKHRvIHBpeGVscykgLSB4IHBsYW5lXG4gICAgICAgICAqICAgcGl4ZWxZICAtLSBcIiAtIHkgcGxhbmVcbiAgICAgICAgICpcbiAgICAgICAgICogV2hlZWwgdmFsdWVzIGFyZSBwcm92aWRlZCBieSB0aGUgYnJvd3NlciBhc3N1bWluZyB5b3UgYXJlIHVzaW5nIHRoZSB3aGVlbCB0b1xuICAgICAgICAgKiBzY3JvbGwgYSB3ZWIgcGFnZSBieSBhIG51bWJlciBvZiBsaW5lcyBvciBwaXhlbHMgKG9yIHBhZ2VzKS4gIFZhbHVlcyBjYW4gdmFyeVxuICAgICAgICAgKiBzaWduaWZpY2FudGx5IG9uIGRpZmZlcmVudCBwbGF0Zm9ybXMgYW5kIGJyb3dzZXJzLCBmb3JnZXR0aW5nIHRoYXQgeW91IGNhblxuICAgICAgICAgKiBzY3JvbGwgYXQgZGlmZmVyZW50IHNwZWVkcy4gIFNvbWUgZGV2aWNlcyAobGlrZSB0cmFja3BhZHMpIGVtaXQgbW9yZSBldmVudHNcbiAgICAgICAgICogYXQgc21hbGxlciBpbmNyZW1lbnRzIHdpdGggZmluZSBncmFudWxhcml0eSwgYW5kIHNvbWUgZW1pdCBtYXNzaXZlIGp1bXBzIHdpdGhcbiAgICAgICAgICogbGluZWFyIHNwZWVkIG9yIGFjY2VsZXJhdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBjb2RlIGRvZXMgaXRzIGJlc3QgdG8gbm9ybWFsaXplIHRoZSBkZWx0YXMgZm9yIHlvdTpcbiAgICAgICAgICpcbiAgICAgICAgICogICAtIHNwaW4gaXMgdHJ5aW5nIHRvIG5vcm1hbGl6ZSBob3cgZmFyIHRoZSB3aGVlbCB3YXMgc3B1biAob3IgdHJhY2twYWRcbiAgICAgICAgICogICAgIGRyYWdnZWQpLiAgVGhpcyBpcyBzdXBlciB1c2VmdWwgZm9yIHpvb20gc3VwcG9ydCB3aGVyZSB5b3Ugd2FudCB0b1xuICAgICAgICAgKiAgICAgdGhyb3cgYXdheSB0aGUgY2h1bmt5IHNjcm9sbCBzdGVwcyBvbiB0aGUgUEMgYW5kIG1ha2UgdGhvc2UgZXF1YWwgdG9cbiAgICAgICAgICogICAgIHRoZSBzbG93IGFuZCBzbW9vdGggdGlueSBzdGVwcyBvbiB0aGUgTWFjLiBLZXkgZGF0YTogVGhpcyBjb2RlIHRyaWVzIHRvXG4gICAgICAgICAqICAgICByZXNvbHZlIGEgc2luZ2xlIHNsb3cgc3RlcCBvbiBhIHdoZWVsIHRvIDEuXG4gICAgICAgICAqXG4gICAgICAgICAqICAgLSBwaXhlbCBpcyBub3JtYWxpemluZyB0aGUgZGVzaXJlZCBzY3JvbGwgZGVsdGEgaW4gcGl4ZWwgdW5pdHMuICBZb3UnbGxcbiAgICAgICAgICogICAgIGdldCB0aGUgY3JhenkgZGlmZmVyZW5jZXMgYmV0d2VlbiBicm93c2VycywgYnV0IGF0IGxlYXN0IGl0J2xsIGJlIGluXG4gICAgICAgICAqICAgICBwaXhlbHMhXG4gICAgICAgICAqXG4gICAgICAgICAqICAgLSBwb3NpdGl2ZSB2YWx1ZSBpbmRpY2F0ZXMgc2Nyb2xsaW5nIERPV04vUklHSFQsIG5lZ2F0aXZlIFVQL0xFRlQuICBUaGlzXG4gICAgICAgICAqICAgICBzaG91bGQgdHJhbnNsYXRlIHRvIHBvc2l0aXZlIHZhbHVlIHpvb21pbmcgSU4sIG5lZ2F0aXZlIHpvb21pbmcgT1VULlxuICAgICAgICAgKiAgICAgVGhpcyBtYXRjaGVzIHRoZSBuZXdlciAnd2hlZWwnIGV2ZW50LlxuICAgICAgICAgKlxuICAgICAgICAgKiBXaHkgYXJlIHRoZXJlIHNwaW5YLCBzcGluWSAob3IgcGl4ZWxzKT9cbiAgICAgICAgICpcbiAgICAgICAgICogICAtIHNwaW5YIGlzIGEgMi1maW5nZXIgc2lkZSBkcmFnIG9uIHRoZSB0cmFja3BhZCwgYW5kIGEgc2hpZnQgKyB3aGVlbCB0dXJuXG4gICAgICAgICAqICAgICB3aXRoIGEgbW91c2UuICBJdCByZXN1bHRzIGluIHNpZGUtc2Nyb2xsaW5nIGluIHRoZSBicm93c2VyIGJ5IGRlZmF1bHQuXG4gICAgICAgICAqXG4gICAgICAgICAqICAgLSBzcGluWSBpcyB3aGF0IHlvdSBleHBlY3QgLS0gaXQncyB0aGUgY2xhc3NpYyBheGlzIG9mIGEgbW91c2Ugd2hlZWwuXG4gICAgICAgICAqXG4gICAgICAgICAqICAgLSBJIGRyb3BwZWQgc3BpblovcGl4ZWxaLiAgSXQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBET00gMyAnd2hlZWwnIGV2ZW50IGFuZFxuICAgICAgICAgKiAgICAgcHJvYmFibHkgaXMgYnkgYnJvd3NlcnMgaW4gY29uanVuY3Rpb24gd2l0aCBmYW5jeSAzRCBjb250cm9sbGVycyAuLiBidXRcbiAgICAgICAgICogICAgIHlvdSBrbm93LlxuICAgICAgICAgKlxuICAgICAgICAgKiBJbXBsZW1lbnRhdGlvbiBpbmZvOlxuICAgICAgICAgKlxuICAgICAgICAgKiBFeGFtcGxlcyBvZiAnd2hlZWwnIGV2ZW50IGlmIHlvdSBzY3JvbGwgc2xvd2x5IChkb3duKSBieSBvbmUgc3RlcCB3aXRoIGFuXG4gICAgICAgICAqIGF2ZXJhZ2UgbW91c2U6XG4gICAgICAgICAqXG4gICAgICAgICAqICAgT1MgWCArIENocm9tZSAgKG1vdXNlKSAgICAgLSAgICA0ICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gICAgICAgICAqICAgT1MgWCArIFNhZmFyaSAgKG1vdXNlKSAgICAgLSAgTi9BICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhICAtMTIpXG4gICAgICAgICAqICAgT1MgWCArIEZpcmVmb3ggKG1vdXNlKSAgICAgLSAgICAwLjEgbGluZSAgZGVsdGEgICh3aGVlbERlbHRhICBOL0EpXG4gICAgICAgICAqICAgV2luOCArIENocm9tZSAgKG1vdXNlKSAgICAgLSAgMTAwICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gICAgICAgICAqICAgV2luOCArIEZpcmVmb3ggKG1vdXNlKSAgICAgLSAgICAzICAgbGluZSAgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gICAgICAgICAqXG4gICAgICAgICAqIE9uIHRoZSB0cmFja3BhZDpcbiAgICAgICAgICpcbiAgICAgICAgICogICBPUyBYICsgQ2hyb21lICAodHJhY2twYWQpICAtICAgIDIgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgICAtNilcbiAgICAgICAgICogICBPUyBYICsgRmlyZWZveCAodHJhY2twYWQpICAtICAgIDEgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgIE4vQSlcbiAgICAgICAgICpcbiAgICAgICAgICogT24gb3RoZXIvb2xkZXIgYnJvd3NlcnMuLiBpdCdzIG1vcmUgY29tcGxpY2F0ZWQgYXMgdGhlcmUgY2FuIGJlIG11bHRpcGxlIGFuZFxuICAgICAgICAgKiBhbHNvIG1pc3NpbmcgZGVsdGEgdmFsdWVzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgJ3doZWVsJyBldmVudCBpcyBtb3JlIHN0YW5kYXJkOlxuICAgICAgICAgKlxuICAgICAgICAgKiBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy13aGVlbGV2ZW50c1xuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgYmFzaWNzIGlzIHRoYXQgaXQgaW5jbHVkZXMgYSB1bml0LCBkZWx0YU1vZGUgKHBpeGVscywgbGluZXMsIHBhZ2VzKSwgYW5kXG4gICAgICAgICAqIGRlbHRhWCwgZGVsdGFZIGFuZCBkZWx0YVouICBTb21lIGJyb3dzZXJzIHByb3ZpZGUgb3RoZXIgdmFsdWVzIHRvIG1haW50YWluXG4gICAgICAgICAqIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBvbGRlciBldmVudHMuICBUaG9zZSBvdGhlciB2YWx1ZXMgaGVscCB1c1xuICAgICAgICAgKiBiZXR0ZXIgbm9ybWFsaXplIHNwaW4gc3BlZWQuICBFeGFtcGxlIG9mIHdoYXQgdGhlIGJyb3dzZXJzIHByb3ZpZGU6XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICB8IGV2ZW50LndoZWVsRGVsdGEgfCBldmVudC5kZXRhaWxcbiAgICAgICAgICogICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICogICAgICAgICAgU2FmYXJpIHY1L09TIFggIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAgICAgICAgICogICAgICAgICAgU2FmYXJpIHY1L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAgICAgICAgICogICAgICAgICBDaHJvbWUgdjE3L09TIFggIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAgICAgICAgICogICAgICAgICBDaHJvbWUgdjE3L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAgICAgICAgICogICAgICAgICAgICAgICAgSUU5L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgdW5kZWZpbmVkXG4gICAgICAgICAqICAgICAgICAgRmlyZWZveCB2NC9PUyBYICB8ICAgICB1bmRlZmluZWQgICAgfCAgICAgICAxXG4gICAgICAgICAqICAgICAgICAgRmlyZWZveCB2NC9XaW43ICB8ICAgICB1bmRlZmluZWQgICAgfCAgICAgICAzXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBub3JtYWxpemVXaGVlbCggLypvYmplY3QqLyBldmVudCApIC8qb2JqZWN0Ki8ge1xuICAgICAgICAgICAgLy8gUmVhc29uYWJsZSBkZWZhdWx0c1xuICAgICAgICAgICAgdmFyIFBJWEVMX1NURVAgPSAxMDtcbiAgICAgICAgICAgIHZhciBMSU5FX0hFSUdIVCA9IDQwO1xuICAgICAgICAgICAgdmFyIFBBR0VfSEVJR0hUID0gODAwO1xuICAgICAgICBcbiAgICAgICAgICAgIHZhciBzWCA9IDAsIHNZID0gMCwgICAgICAgLy8gc3BpblgsIHNwaW5ZXG4gICAgICAgICAgICAgICAgcFggPSAwLCBwWSA9IDA7ICAgICAgIC8vIHBpeGVsWCwgcGl4ZWxZXG4gICAgICAgIFxuICAgICAgICAgICAgLy8gTGVnYWN5XG4gICAgICAgICAgICBpZiggJ2RldGFpbCcgaW4gZXZlbnQgKSB7XG4gICAgICAgICAgICAgICAgc1kgPSBldmVudC5kZXRhaWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiggJ3doZWVsRGVsdGEnIGluIGV2ZW50ICkge1xuICAgICAgICAgICAgICAgIHNZID0gLWV2ZW50LndoZWVsRGVsdGEgLyAxMjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiggJ3doZWVsRGVsdGFZJyBpbiBldmVudCApIHtcbiAgICAgICAgICAgICAgICBzWSA9IC1ldmVudC53aGVlbERlbHRhWSAvIDEyMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCAnd2hlZWxEZWx0YVgnIGluIGV2ZW50ICkge1xuICAgICAgICAgICAgICAgIHNYID0gLWV2ZW50LndoZWVsRGVsdGFYIC8gMTIwO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIC8vIHNpZGUgc2Nyb2xsaW5nIG9uIEZGIHdpdGggRE9NTW91c2VTY3JvbGxcbiAgICAgICAgICAgIGlmKCAnYXhpcycgaW4gZXZlbnQgJiYgZXZlbnQuYXhpcyA9PT0gZXZlbnQuSE9SSVpPTlRBTF9BWElTICkge1xuICAgICAgICAgICAgICAgIHNYID0gc1k7XG4gICAgICAgICAgICAgICAgc1kgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICAgICAgICAgICAgcFkgPSBzWSAqIFBJWEVMX1NURVA7XG4gICAgICAgIFxuICAgICAgICAgICAgaWYoICdkZWx0YVknIGluIGV2ZW50ICkge1xuICAgICAgICAgICAgICAgIHBZID0gZXZlbnQuZGVsdGFZO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoICdkZWx0YVgnIGluIGV2ZW50ICkge1xuICAgICAgICAgICAgICAgIHBYID0gZXZlbnQuZGVsdGFYO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIGlmKCAocFggfHwgcFkpICYmIGV2ZW50LmRlbHRhTW9kZSApIHtcbiAgICAgICAgICAgICAgICBpZiggZXZlbnQuZGVsdGFNb2RlID09PSAxICkgeyAgICAgICAgICAvLyBkZWx0YSBpbiBMSU5FIHVuaXRzXG4gICAgICAgICAgICAgICAgICAgIHBYICo9IExJTkVfSEVJR0hUO1xuICAgICAgICAgICAgICAgICAgICBwWSAqPSBMSU5FX0hFSUdIVDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsdGEgaW4gUEFHRSB1bml0c1xuICAgICAgICAgICAgICAgICAgICBwWCAqPSBQQUdFX0hFSUdIVDtcbiAgICAgICAgICAgICAgICAgICAgcFkgKj0gUEFHRV9IRUlHSFQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIC8vIEZhbGwtYmFjayBpZiBzcGluIGNhbm5vdCBiZSBkZXRlcm1pbmVkXG4gICAgICAgICAgICBpZiggcFggJiYgIXNYICkge1xuICAgICAgICAgICAgICAgIHNYID0gKHBYIDwgMSkgPyAtMSA6IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiggcFkgJiYgIXNZICkge1xuICAgICAgICAgICAgICAgIHNZID0gKHBZIDwgMSkgPyAtMSA6IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzcGluWDogc1gsXG4gICAgICAgICAgICAgICAgc3Bpblk6IHNZLFxuICAgICAgICAgICAgICAgIHBpeGVsWDogcFgsXG4gICAgICAgICAgICAgICAgcGl4ZWxZOiBwWVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocy5wYXJhbXMubW91c2V3aGVlbENvbnRyb2wpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIGJlc3QgY29tYmluYXRpb24gaWYgeW91IHByZWZlciBzcGluWCArIHNwaW5ZIG5vcm1hbGl6YXRpb24uICBJdCBmYXZvcnNcbiAgICAgICAgICAgICAqIHRoZSBvbGRlciBET01Nb3VzZVNjcm9sbCBmb3IgRmlyZWZveCwgYXMgRkYgZG9lcyBub3QgaW5jbHVkZSB3aGVlbERlbHRhIHdpdGhcbiAgICAgICAgICAgICAqICd3aGVlbCcgZXZlbnQsIG1ha2luZyBzcGluIHNwZWVkIGRldGVybWluYXRpb24gaW1wb3NzaWJsZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcy5tb3VzZXdoZWVsLmV2ZW50ID0gKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignZmlyZWZveCcpID4gLTEpID9cbiAgICAgICAgICAgICAgICAnRE9NTW91c2VTY3JvbGwnIDpcbiAgICAgICAgICAgICAgICBpc0V2ZW50U3VwcG9ydGVkKCkgP1xuICAgICAgICAgICAgICAgICAgICAnd2hlZWwnIDogJ21vdXNld2hlZWwnO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZU1vdXNld2hlZWwoZSkge1xuICAgICAgICAgICAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDsgLy9qcXVlcnkgZml4XG4gICAgICAgICAgICB2YXIgZGVsdGEgPSAwO1xuICAgICAgICAgICAgdmFyIHJ0bEZhY3RvciA9IHMucnRsID8gLTEgOiAxO1xuICAgICAgICBcbiAgICAgICAgICAgIHZhciBkYXRhID0gbm9ybWFsaXplV2hlZWwoIGUgKTtcbiAgICAgICAgXG4gICAgICAgICAgICBpZiAocy5wYXJhbXMubW91c2V3aGVlbEZvcmNlVG9BeGlzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSkgZGVsdGEgPSBkYXRhLnBpeGVsWCAqIHJ0bEZhY3RvcjtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoZGF0YS5waXhlbFkpID4gTWF0aC5hYnMoZGF0YS5waXhlbFgpKSBkZWx0YSA9IGRhdGEucGl4ZWxZO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWx0YSA9IE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSA/IC0gZGF0YS5waXhlbFggKiBydGxGYWN0b3IgOiAtIGRhdGEucGl4ZWxZO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIGlmIChkZWx0YSA9PT0gMCkgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5tb3VzZXdoZWVsSW52ZXJ0KSBkZWx0YSA9IC1kZWx0YTtcbiAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXMucGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKChuZXcgd2luZG93LkRhdGUoKSkuZ2V0VGltZSgpIC0gcy5tb3VzZXdoZWVsLmxhc3RTY3JvbGxUaW1lID4gNjApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlbHRhIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCghcy5pc0VuZCB8fCBzLnBhcmFtcy5sb29wKSAmJiAhcy5hbmltYXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnNsaWRlTmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuZW1pdCgnb25TY3JvbGwnLCBzLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHMucGFyYW1zLm1vdXNld2hlZWxSZWxlYXNlT25FZGdlcykgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCFzLmlzQmVnaW5uaW5nIHx8IHMucGFyYW1zLmxvb3ApICYmICFzLmFuaW1hdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuc2xpZGVQcmV2KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5lbWl0KCdvblNjcm9sbCcsIHMsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocy5wYXJhbXMubW91c2V3aGVlbFJlbGVhc2VPbkVkZ2VzKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzLm1vdXNld2hlZWwubGFzdFNjcm9sbFRpbWUgPSAobmV3IHdpbmRvdy5EYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL0ZyZWVtb2RlIG9yIHNjcm9sbENvbnRhaW5lcjpcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBzLmdldFdyYXBwZXJUcmFuc2xhdGUoKSArIGRlbHRhICogcy5wYXJhbXMubW91c2V3aGVlbFNlbnNpdGl2aXR5O1xuICAgICAgICAgICAgICAgIHZhciB3YXNCZWdpbm5pbmcgPSBzLmlzQmVnaW5uaW5nLFxuICAgICAgICAgICAgICAgICAgICB3YXNFbmQgPSBzLmlzRW5kO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPj0gcy5taW5UcmFuc2xhdGUoKSkgcG9zaXRpb24gPSBzLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA8PSBzLm1heFRyYW5zbGF0ZSgpKSBwb3NpdGlvbiA9IHMubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIHMuc2V0V3JhcHBlclRyYW5zaXRpb24oMCk7XG4gICAgICAgICAgICAgICAgcy5zZXRXcmFwcGVyVHJhbnNsYXRlKHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBzLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICAgICAgICAgICAgcy51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoIXdhc0JlZ2lubmluZyAmJiBzLmlzQmVnaW5uaW5nIHx8ICF3YXNFbmQgJiYgcy5pc0VuZCkge1xuICAgICAgICAgICAgICAgICAgICBzLnVwZGF0ZUNsYXNzZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChzLnBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQocy5tb3VzZXdoZWVsLnRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICBzLm1vdXNld2hlZWwudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5zbGlkZVJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDMwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMubGF6eUxvYWRpbmcgJiYgcy5sYXp5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLmxhenkubG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEVtaXQgZXZlbnRcbiAgICAgICAgICAgICAgICBzLmVtaXQoJ29uU2Nyb2xsJywgcywgZSk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFN0b3AgYXV0b3BsYXlcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMuYXV0b3BsYXkgJiYgcy5wYXJhbXMuYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbikgcy5zdG9wQXV0b3BsYXkoKTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIHBhZ2Ugc2Nyb2xsIG9uIGVkZ2UgcG9zaXRpb25zXG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwIHx8IHBvc2l0aW9uID09PSBzLm1heFRyYW5zbGF0ZSgpKSByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGVsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHMuZGlzYWJsZU1vdXNld2hlZWxDb250cm9sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFzLm1vdXNld2hlZWwuZXZlbnQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBzLmNvbnRhaW5lcjtcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5tb3VzZXdoZWVsRXZlbnRzVGFyZ2VkICE9PSAnY29udGFpbmVyJykge1xuICAgICAgICAgICAgICAgIHRhcmdldCA9ICQocy5wYXJhbXMubW91c2V3aGVlbEV2ZW50c1RhcmdlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXJnZXQub2ZmKHMubW91c2V3aGVlbC5ldmVudCwgaGFuZGxlTW91c2V3aGVlbCk7XG4gICAgICAgICAgICBzLnBhcmFtcy5tb3VzZXdoZWVsQ29udHJvbCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBzLmVuYWJsZU1vdXNld2hlZWxDb250cm9sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFzLm1vdXNld2hlZWwuZXZlbnQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBzLmNvbnRhaW5lcjtcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5tb3VzZXdoZWVsRXZlbnRzVGFyZ2VkICE9PSAnY29udGFpbmVyJykge1xuICAgICAgICAgICAgICAgIHRhcmdldCA9ICQocy5wYXJhbXMubW91c2V3aGVlbEV2ZW50c1RhcmdlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXJnZXQub24ocy5tb3VzZXdoZWVsLmV2ZW50LCBoYW5kbGVNb3VzZXdoZWVsKTtcbiAgICAgICAgICAgIHMucGFyYW1zLm1vdXNld2hlZWxDb250cm9sID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBcblxuICAgICAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICBQYXJhbGxheFxuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIGZ1bmN0aW9uIHNldFBhcmFsbGF4VHJhbnNmb3JtKGVsLCBwcm9ncmVzcykge1xuICAgICAgICAgICAgZWwgPSAkKGVsKTtcbiAgICAgICAgICAgIHZhciBwLCBwWCwgcFk7XG4gICAgICAgICAgICB2YXIgcnRsRmFjdG9yID0gcy5ydGwgPyAtMSA6IDE7XG4gICAgICAgIFxuICAgICAgICAgICAgcCA9IGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4JykgfHwgJzAnO1xuICAgICAgICAgICAgcFggPSBlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC14Jyk7XG4gICAgICAgICAgICBwWSA9IGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXknKTtcbiAgICAgICAgICAgIGlmIChwWCB8fCBwWSkge1xuICAgICAgICAgICAgICAgIHBYID0gcFggfHwgJzAnO1xuICAgICAgICAgICAgICAgIHBZID0gcFkgfHwgJzAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcFggPSBwO1xuICAgICAgICAgICAgICAgICAgICBwWSA9ICcwJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBZID0gcDtcbiAgICAgICAgICAgICAgICAgICAgcFggPSAnMCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIGlmICgocFgpLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcFggPSBwYXJzZUludChwWCwgMTApICogcHJvZ3Jlc3MgKiBydGxGYWN0b3IgKyAnJSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwWCA9IHBYICogcHJvZ3Jlc3MgKiBydGxGYWN0b3IgKyAncHgnIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgocFkpLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcFkgPSBwYXJzZUludChwWSwgMTApICogcHJvZ3Jlc3MgKyAnJSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwWSA9IHBZICogcHJvZ3Jlc3MgKyAncHgnIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICBlbC50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKCcgKyBwWCArICcsICcgKyBwWSArICcsMHB4KScpO1xuICAgICAgICB9XG4gICAgICAgIHMucGFyYWxsYXggPSB7XG4gICAgICAgICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzLmNvbnRhaW5lci5jaGlsZHJlbignW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0nKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHNldFBhcmFsbGF4VHJhbnNmb3JtKHRoaXMsIHMucHJvZ3Jlc3MpO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzLnNsaWRlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuZmluZCgnW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRlWzBdLnByb2dyZXNzLCAtMSksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFyYWxsYXhUcmFuc2Zvcm0odGhpcywgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGR1cmF0aW9uID09PSAndW5kZWZpbmVkJykgZHVyYXRpb24gPSBzLnBhcmFtcy5zcGVlZDtcbiAgICAgICAgICAgICAgICBzLmNvbnRhaW5lci5maW5kKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XScpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFsbGF4RHVyYXRpb24gPSBwYXJzZUludChlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1kdXJhdGlvbicpLCAxMCkgfHwgZHVyYXRpb247XG4gICAgICAgICAgICAgICAgICAgIGlmIChkdXJhdGlvbiA9PT0gMCkgcGFyYWxsYXhEdXJhdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGVsLnRyYW5zaXRpb24ocGFyYWxsYXhEdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIFpvb21cbiAgICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBzLnpvb20gPSB7XG4gICAgICAgICAgICAvLyBcIkdsb2JhbFwiIFByb3BzXG4gICAgICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgICAgIGN1cnJlbnRTY2FsZTogMSxcbiAgICAgICAgICAgIGlzU2NhbGluZzogZmFsc2UsXG4gICAgICAgICAgICBnZXN0dXJlOiB7XG4gICAgICAgICAgICAgICAgc2xpZGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBzbGlkZVdpZHRoOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgc2xpZGVIZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBpbWFnZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGltYWdlV3JhcDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHpvb21NYXg6IHMucGFyYW1zLnpvb21NYXhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbWFnZToge1xuICAgICAgICAgICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjdXJyZW50WDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRZOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgbWluWDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIG1pblk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBtYXhYOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgbWF4WTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHdpZHRoOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgc3RhcnRYOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgc3RhcnRZOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdG91Y2hlc1N0YXJ0OiB7fSxcbiAgICAgICAgICAgICAgICB0b3VjaGVzQ3VycmVudDoge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZWxvY2l0eToge1xuICAgICAgICAgICAgICAgIHg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB5OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgcHJldlBvc2l0aW9uWDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHByZXZQb3NpdGlvblk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBwcmV2VGltZTogdW5kZWZpbmVkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gQ2FsYyBTY2FsZSBGcm9tIE11bHRpLXRvdWNoZXNcbiAgICAgICAgICAgIGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXM6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB2YXIgeDEgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVgsXG4gICAgICAgICAgICAgICAgICAgIHkxID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZLFxuICAgICAgICAgICAgICAgICAgICB4MiA9IGUudGFyZ2V0VG91Y2hlc1sxXS5wYWdlWCxcbiAgICAgICAgICAgICAgICAgICAgeTIgPSBlLnRhcmdldFRvdWNoZXNbMV0ucGFnZVk7XG4gICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KE1hdGgucG93KHgyIC0geDEsIDIpICsgTWF0aC5wb3coeTIgLSB5MSwgMikpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkaXN0YW5jZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBFdmVudHNcbiAgICAgICAgICAgIG9uR2VzdHVyZVN0YXJ0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciB6ID0gcy56b29tO1xuICAgICAgICAgICAgICAgIGlmICghcy5zdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHouZ2VzdHVyZS5zY2FsZVN0YXJ0ID0gei5nZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXouZ2VzdHVyZS5zbGlkZSB8fCAhei5nZXN0dXJlLnNsaWRlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB6Lmdlc3R1cmUuc2xpZGUgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoei5nZXN0dXJlLnNsaWRlLmxlbmd0aCA9PT0gMCkgei5nZXN0dXJlLnNsaWRlID0gcy5zbGlkZXMuZXEocy5hY3RpdmVJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHouZ2VzdHVyZS5pbWFnZSA9IHouZ2VzdHVyZS5zbGlkZS5maW5kKCdpbWcsIHN2ZywgY2FudmFzJyk7XG4gICAgICAgICAgICAgICAgICAgIHouZ2VzdHVyZS5pbWFnZVdyYXAgPSB6Lmdlc3R1cmUuaW1hZ2UucGFyZW50KCcuJyArIHMucGFyYW1zLnpvb21Db250YWluZXJDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIHouZ2VzdHVyZS56b29tTWF4ID0gei5nZXN0dXJlLmltYWdlV3JhcC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcy5wYXJhbXMuem9vbU1heCA7XG4gICAgICAgICAgICAgICAgICAgIGlmICh6Lmdlc3R1cmUuaW1hZ2VXcmFwLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgei5nZXN0dXJlLmltYWdlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHouZ2VzdHVyZS5pbWFnZS50cmFuc2l0aW9uKDApO1xuICAgICAgICAgICAgICAgIHouaXNTY2FsaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkdlc3R1cmVDaGFuZ2U6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHogPSBzLnpvb207XG4gICAgICAgICAgICAgICAgaWYgKCFzLnN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNobW92ZScgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHouZ2VzdHVyZS5zY2FsZU1vdmUgPSB6LmdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghei5nZXN0dXJlLmltYWdlIHx8IHouZ2VzdHVyZS5pbWFnZS5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAocy5zdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHouc2NhbGUgPSBlLnNjYWxlICogei5jdXJyZW50U2NhbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB6LnNjYWxlID0gKHouZ2VzdHVyZS5zY2FsZU1vdmUgLyB6Lmdlc3R1cmUuc2NhbGVTdGFydCkgKiB6LmN1cnJlbnRTY2FsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHouc2NhbGUgPiB6Lmdlc3R1cmUuem9vbU1heCkge1xuICAgICAgICAgICAgICAgICAgICB6LnNjYWxlID0gei5nZXN0dXJlLnpvb21NYXggLSAxICsgTWF0aC5wb3coKHouc2NhbGUgLSB6Lmdlc3R1cmUuem9vbU1heCArIDEpLCAwLjUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoei5zY2FsZSA8IHMucGFyYW1zLnpvb21NaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgei5zY2FsZSA9ICBzLnBhcmFtcy56b29tTWluICsgMSAtIE1hdGgucG93KChzLnBhcmFtcy56b29tTWluIC0gei5zY2FsZSArIDEpLCAwLjUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB6Lmdlc3R1cmUuaW1hZ2UudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJyArIHouc2NhbGUgKyAnKScpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uR2VzdHVyZUVuZDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgeiA9IHMuem9vbTtcbiAgICAgICAgICAgICAgICBpZiAoIXMuc3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS50eXBlICE9PSAndG91Y2hlbmQnIHx8IGUudHlwZSA9PT0gJ3RvdWNoZW5kJyAmJiBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXouZ2VzdHVyZS5pbWFnZSB8fCB6Lmdlc3R1cmUuaW1hZ2UubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgICAgICAgICAgei5zY2FsZSA9IE1hdGgubWF4KE1hdGgubWluKHouc2NhbGUsIHouZ2VzdHVyZS56b29tTWF4KSwgcy5wYXJhbXMuem9vbU1pbik7XG4gICAgICAgICAgICAgICAgei5nZXN0dXJlLmltYWdlLnRyYW5zaXRpb24ocy5wYXJhbXMuc3BlZWQpLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCcgKyB6LnNjYWxlICsgJyknKTtcbiAgICAgICAgICAgICAgICB6LmN1cnJlbnRTY2FsZSA9IHouc2NhbGU7XG4gICAgICAgICAgICAgICAgei5pc1NjYWxpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoei5zY2FsZSA9PT0gMSkgei5nZXN0dXJlLnNsaWRlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVG91Y2hTdGFydDogZnVuY3Rpb24gKHMsIGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgeiA9IHMuem9vbTtcbiAgICAgICAgICAgICAgICBpZiAoIXouZ2VzdHVyZS5pbWFnZSB8fCB6Lmdlc3R1cmUuaW1hZ2UubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKHouaW1hZ2UuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKHMuZGV2aWNlLm9zID09PSAnYW5kcm9pZCcpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB6LmltYWdlLmlzVG91Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgei5pbWFnZS50b3VjaGVzU3RhcnQueCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgICAgICAgICAgICB6LmltYWdlLnRvdWNoZXNTdGFydC55ID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVG91Y2hNb3ZlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciB6ID0gcy56b29tO1xuICAgICAgICAgICAgICAgIGlmICghei5nZXN0dXJlLmltYWdlIHx8IHouZ2VzdHVyZS5pbWFnZS5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgICAgICAgICAgICBzLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoIXouaW1hZ2UuaXNUb3VjaGVkIHx8ICF6Lmdlc3R1cmUuc2xpZGUpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCF6LmltYWdlLmlzTW92ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgei5pbWFnZS53aWR0aCA9IHouZ2VzdHVyZS5pbWFnZVswXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgei5pbWFnZS5oZWlnaHQgPSB6Lmdlc3R1cmUuaW1hZ2VbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB6LmltYWdlLnN0YXJ0WCA9IHMuZ2V0VHJhbnNsYXRlKHouZ2VzdHVyZS5pbWFnZVdyYXBbMF0sICd4JykgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgei5pbWFnZS5zdGFydFkgPSBzLmdldFRyYW5zbGF0ZSh6Lmdlc3R1cmUuaW1hZ2VXcmFwWzBdLCAneScpIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIHouZ2VzdHVyZS5zbGlkZVdpZHRoID0gei5nZXN0dXJlLnNsaWRlWzBdLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICB6Lmdlc3R1cmUuc2xpZGVIZWlnaHQgPSB6Lmdlc3R1cmUuc2xpZGVbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB6Lmdlc3R1cmUuaW1hZ2VXcmFwLnRyYW5zaXRpb24oMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzLnJ0bCkgei5pbWFnZS5zdGFydFggPSAtei5pbWFnZS5zdGFydFg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzLnJ0bCkgei5pbWFnZS5zdGFydFkgPSAtei5pbWFnZS5zdGFydFk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIERlZmluZSBpZiB3ZSBuZWVkIGltYWdlIGRyYWdcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGVkV2lkdGggPSB6LmltYWdlLndpZHRoICogei5zY2FsZTtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGVkSGVpZ2h0ID0gei5pbWFnZS5oZWlnaHQgKiB6LnNjYWxlO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoc2NhbGVkV2lkdGggPCB6Lmdlc3R1cmUuc2xpZGVXaWR0aCAmJiBzY2FsZWRIZWlnaHQgPCB6Lmdlc3R1cmUuc2xpZGVIZWlnaHQpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgei5pbWFnZS5taW5YID0gTWF0aC5taW4oKHouZ2VzdHVyZS5zbGlkZVdpZHRoIC8gMiAtIHNjYWxlZFdpZHRoIC8gMiksIDApO1xuICAgICAgICAgICAgICAgIHouaW1hZ2UubWF4WCA9IC16LmltYWdlLm1pblg7XG4gICAgICAgICAgICAgICAgei5pbWFnZS5taW5ZID0gTWF0aC5taW4oKHouZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyKSwgMCk7XG4gICAgICAgICAgICAgICAgei5pbWFnZS5tYXhZID0gLXouaW1hZ2UubWluWTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgei5pbWFnZS50b3VjaGVzQ3VycmVudC54ID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICAgICAgICAgICAgei5pbWFnZS50b3VjaGVzQ3VycmVudC55ID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICghei5pbWFnZS5pc01vdmVkICYmICF6LmlzU2NhbGluZykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5pc0hvcml6b250YWwoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKE1hdGguZmxvb3Ioei5pbWFnZS5taW5YKSA9PT0gTWF0aC5mbG9vcih6LmltYWdlLnN0YXJ0WCkgJiYgei5pbWFnZS50b3VjaGVzQ3VycmVudC54IDwgei5pbWFnZS50b3VjaGVzU3RhcnQueCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChNYXRoLmZsb29yKHouaW1hZ2UubWF4WCkgPT09IE1hdGguZmxvb3Ioei5pbWFnZS5zdGFydFgpICYmIHouaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA+IHouaW1hZ2UudG91Y2hlc1N0YXJ0LngpXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHouaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIXMuaXNIb3Jpem9udGFsKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChNYXRoLmZsb29yKHouaW1hZ2UubWluWSkgPT09IE1hdGguZmxvb3Ioei5pbWFnZS5zdGFydFkpICYmIHouaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA8IHouaW1hZ2UudG91Y2hlc1N0YXJ0LnkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoTWF0aC5mbG9vcih6LmltYWdlLm1heFkpID09PSBNYXRoLmZsb29yKHouaW1hZ2Uuc3RhcnRZKSAmJiB6LmltYWdlLnRvdWNoZXNDdXJyZW50LnkgPiB6LmltYWdlLnRvdWNoZXNTdGFydC55KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB6LmltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICB6LmltYWdlLmlzTW92ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHouaW1hZ2UuY3VycmVudFggPSB6LmltYWdlLnRvdWNoZXNDdXJyZW50LnggLSB6LmltYWdlLnRvdWNoZXNTdGFydC54ICsgei5pbWFnZS5zdGFydFg7XG4gICAgICAgICAgICAgICAgei5pbWFnZS5jdXJyZW50WSA9IHouaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHouaW1hZ2UudG91Y2hlc1N0YXJ0LnkgKyB6LmltYWdlLnN0YXJ0WTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHouaW1hZ2UuY3VycmVudFggPCB6LmltYWdlLm1pblgpIHtcbiAgICAgICAgICAgICAgICAgICAgei5pbWFnZS5jdXJyZW50WCA9ICB6LmltYWdlLm1pblggKyAxIC0gTWF0aC5wb3coKHouaW1hZ2UubWluWCAtIHouaW1hZ2UuY3VycmVudFggKyAxKSwgMC44KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHouaW1hZ2UuY3VycmVudFggPiB6LmltYWdlLm1heFgpIHtcbiAgICAgICAgICAgICAgICAgICAgei5pbWFnZS5jdXJyZW50WCA9IHouaW1hZ2UubWF4WCAtIDEgKyBNYXRoLnBvdygoei5pbWFnZS5jdXJyZW50WCAtIHouaW1hZ2UubWF4WCArIDEpLCAwLjgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHouaW1hZ2UuY3VycmVudFkgPCB6LmltYWdlLm1pblkpIHtcbiAgICAgICAgICAgICAgICAgICAgei5pbWFnZS5jdXJyZW50WSA9ICB6LmltYWdlLm1pblkgKyAxIC0gTWF0aC5wb3coKHouaW1hZ2UubWluWSAtIHouaW1hZ2UuY3VycmVudFkgKyAxKSwgMC44KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHouaW1hZ2UuY3VycmVudFkgPiB6LmltYWdlLm1heFkpIHtcbiAgICAgICAgICAgICAgICAgICAgei5pbWFnZS5jdXJyZW50WSA9IHouaW1hZ2UubWF4WSAtIDEgKyBNYXRoLnBvdygoei5pbWFnZS5jdXJyZW50WSAtIHouaW1hZ2UubWF4WSArIDEpLCAwLjgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9WZWxvY2l0eVxuICAgICAgICAgICAgICAgIGlmICghei52ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSB6LnZlbG9jaXR5LnByZXZQb3NpdGlvblggPSB6LmltYWdlLnRvdWNoZXNDdXJyZW50Lng7XG4gICAgICAgICAgICAgICAgaWYgKCF6LnZlbG9jaXR5LnByZXZQb3NpdGlvblkpIHoudmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IHouaW1hZ2UudG91Y2hlc0N1cnJlbnQueTtcbiAgICAgICAgICAgICAgICBpZiAoIXoudmVsb2NpdHkucHJldlRpbWUpIHoudmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIHoudmVsb2NpdHkueCA9ICh6LmltYWdlLnRvdWNoZXNDdXJyZW50LnggLSB6LnZlbG9jaXR5LnByZXZQb3NpdGlvblgpIC8gKERhdGUubm93KCkgLSB6LnZlbG9jaXR5LnByZXZUaW1lKSAvIDI7XG4gICAgICAgICAgICAgICAgei52ZWxvY2l0eS55ID0gKHouaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHoudmVsb2NpdHkucHJldlBvc2l0aW9uWSkgLyAoRGF0ZS5ub3coKSAtIHoudmVsb2NpdHkucHJldlRpbWUpIC8gMjtcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoei5pbWFnZS50b3VjaGVzQ3VycmVudC54IC0gei52ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSA8IDIpIHoudmVsb2NpdHkueCA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHouaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHoudmVsb2NpdHkucHJldlBvc2l0aW9uWSkgPCAyKSB6LnZlbG9jaXR5LnkgPSAwO1xuICAgICAgICAgICAgICAgIHoudmVsb2NpdHkucHJldlBvc2l0aW9uWCA9IHouaW1hZ2UudG91Y2hlc0N1cnJlbnQueDtcbiAgICAgICAgICAgICAgICB6LnZlbG9jaXR5LnByZXZQb3NpdGlvblkgPSB6LmltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgICAgICAgICAgICAgei52ZWxvY2l0eS5wcmV2VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIHouZ2VzdHVyZS5pbWFnZVdyYXAudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgnICsgei5pbWFnZS5jdXJyZW50WCArICdweCwgJyArIHouaW1hZ2UuY3VycmVudFkgKyAncHgsMCknKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblRvdWNoRW5kOiBmdW5jdGlvbiAocywgZSkge1xuICAgICAgICAgICAgICAgIHZhciB6ID0gcy56b29tO1xuICAgICAgICAgICAgICAgIGlmICghei5nZXN0dXJlLmltYWdlIHx8IHouZ2VzdHVyZS5pbWFnZS5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoIXouaW1hZ2UuaXNUb3VjaGVkIHx8ICF6LmltYWdlLmlzTW92ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgei5pbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgei5pbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgei5pbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB6LmltYWdlLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgbW9tZW50dW1EdXJhdGlvblggPSAzMDA7XG4gICAgICAgICAgICAgICAgdmFyIG1vbWVudHVtRHVyYXRpb25ZID0gMzAwO1xuICAgICAgICAgICAgICAgIHZhciBtb21lbnR1bURpc3RhbmNlWCA9IHoudmVsb2NpdHkueCAqIG1vbWVudHVtRHVyYXRpb25YO1xuICAgICAgICAgICAgICAgIHZhciBuZXdQb3NpdGlvblggPSB6LmltYWdlLmN1cnJlbnRYICsgbW9tZW50dW1EaXN0YW5jZVg7XG4gICAgICAgICAgICAgICAgdmFyIG1vbWVudHVtRGlzdGFuY2VZID0gei52ZWxvY2l0eS55ICogbW9tZW50dW1EdXJhdGlvblk7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1Bvc2l0aW9uWSA9IHouaW1hZ2UuY3VycmVudFkgKyBtb21lbnR1bURpc3RhbmNlWTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9GaXggZHVyYXRpb25cbiAgICAgICAgICAgICAgICBpZiAoei52ZWxvY2l0eS54ICE9PSAwKSBtb21lbnR1bUR1cmF0aW9uWCA9IE1hdGguYWJzKChuZXdQb3NpdGlvblggLSB6LmltYWdlLmN1cnJlbnRYKSAvIHoudmVsb2NpdHkueCk7XG4gICAgICAgICAgICAgICAgaWYgKHoudmVsb2NpdHkueSAhPT0gMCkgbW9tZW50dW1EdXJhdGlvblkgPSBNYXRoLmFicygobmV3UG9zaXRpb25ZIC0gei5pbWFnZS5jdXJyZW50WSkgLyB6LnZlbG9jaXR5LnkpO1xuICAgICAgICAgICAgICAgIHZhciBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5tYXgobW9tZW50dW1EdXJhdGlvblgsIG1vbWVudHVtRHVyYXRpb25ZKTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgei5pbWFnZS5jdXJyZW50WCA9IG5ld1Bvc2l0aW9uWDtcbiAgICAgICAgICAgICAgICB6LmltYWdlLmN1cnJlbnRZID0gbmV3UG9zaXRpb25ZO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBEZWZpbmUgaWYgd2UgbmVlZCBpbWFnZSBkcmFnXG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlZFdpZHRoID0gei5pbWFnZS53aWR0aCAqIHouc2NhbGU7XG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlZEhlaWdodCA9IHouaW1hZ2UuaGVpZ2h0ICogei5zY2FsZTtcbiAgICAgICAgICAgICAgICB6LmltYWdlLm1pblggPSBNYXRoLm1pbigoei5nZXN0dXJlLnNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyKSwgMCk7XG4gICAgICAgICAgICAgICAgei5pbWFnZS5tYXhYID0gLXouaW1hZ2UubWluWDtcbiAgICAgICAgICAgICAgICB6LmltYWdlLm1pblkgPSBNYXRoLm1pbigoei5nZXN0dXJlLnNsaWRlSGVpZ2h0IC8gMiAtIHNjYWxlZEhlaWdodCAvIDIpLCAwKTtcbiAgICAgICAgICAgICAgICB6LmltYWdlLm1heFkgPSAtei5pbWFnZS5taW5ZO1xuICAgICAgICAgICAgICAgIHouaW1hZ2UuY3VycmVudFggPSBNYXRoLm1heChNYXRoLm1pbih6LmltYWdlLmN1cnJlbnRYLCB6LmltYWdlLm1heFgpLCB6LmltYWdlLm1pblgpO1xuICAgICAgICAgICAgICAgIHouaW1hZ2UuY3VycmVudFkgPSBNYXRoLm1heChNYXRoLm1pbih6LmltYWdlLmN1cnJlbnRZLCB6LmltYWdlLm1heFkpLCB6LmltYWdlLm1pblkpO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICB6Lmdlc3R1cmUuaW1hZ2VXcmFwLnRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbikudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgnICsgei5pbWFnZS5jdXJyZW50WCArICdweCwgJyArIHouaW1hZ2UuY3VycmVudFkgKyAncHgsMCknKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHogPSBzLnpvb207XG4gICAgICAgICAgICAgICAgaWYgKHouZ2VzdHVyZS5zbGlkZSAmJiBzLnByZXZpb3VzSW5kZXggIT09IHMuYWN0aXZlSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgei5nZXN0dXJlLmltYWdlLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpJyk7XG4gICAgICAgICAgICAgICAgICAgIHouZ2VzdHVyZS5pbWFnZVdyYXAudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCknKTtcbiAgICAgICAgICAgICAgICAgICAgei5nZXN0dXJlLnNsaWRlID0gei5nZXN0dXJlLmltYWdlID0gei5nZXN0dXJlLmltYWdlV3JhcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgei5zY2FsZSA9IHouY3VycmVudFNjYWxlID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gVG9nZ2xlIFpvb21cbiAgICAgICAgICAgIHRvZ2dsZVpvb206IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHogPSBzLnpvb207XG4gICAgICAgICAgICAgICAgaWYgKCF6Lmdlc3R1cmUuc2xpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgei5nZXN0dXJlLnNsaWRlID0gcy5jbGlja2VkU2xpZGUgPyAkKHMuY2xpY2tlZFNsaWRlKSA6IHMuc2xpZGVzLmVxKHMuYWN0aXZlSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB6Lmdlc3R1cmUuaW1hZ2UgPSB6Lmdlc3R1cmUuc2xpZGUuZmluZCgnaW1nLCBzdmcsIGNhbnZhcycpO1xuICAgICAgICAgICAgICAgICAgICB6Lmdlc3R1cmUuaW1hZ2VXcmFwID0gei5nZXN0dXJlLmltYWdlLnBhcmVudCgnLicgKyBzLnBhcmFtcy56b29tQ29udGFpbmVyQ2xhc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXouZ2VzdHVyZS5pbWFnZSB8fCB6Lmdlc3R1cmUuaW1hZ2UubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciB0b3VjaFgsIHRvdWNoWSwgb2Zmc2V0WCwgb2Zmc2V0WSwgZGlmZlgsIGRpZmZZLCB0cmFuc2xhdGVYLCB0cmFuc2xhdGVZLCBpbWFnZVdpZHRoLCBpbWFnZUhlaWdodCwgc2NhbGVkV2lkdGgsIHNjYWxlZEhlaWdodCwgdHJhbnNsYXRlTWluWCwgdHJhbnNsYXRlTWluWSwgdHJhbnNsYXRlTWF4WCwgdHJhbnNsYXRlTWF4WSwgc2xpZGVXaWR0aCwgc2xpZGVIZWlnaHQ7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygei5pbWFnZS50b3VjaGVzU3RhcnQueCA9PT0gJ3VuZGVmaW5lZCcgJiYgZSkge1xuICAgICAgICAgICAgICAgICAgICB0b3VjaFggPSBlLnR5cGUgPT09ICd0b3VjaGVuZCcgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hZID0gZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b3VjaFggPSB6LmltYWdlLnRvdWNoZXNTdGFydC54O1xuICAgICAgICAgICAgICAgICAgICB0b3VjaFkgPSB6LmltYWdlLnRvdWNoZXNTdGFydC55O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHouc2NhbGUgJiYgei5zY2FsZSAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBab29tIE91dFxuICAgICAgICAgICAgICAgICAgICB6LnNjYWxlID0gei5jdXJyZW50U2NhbGUgPSAxO1xuICAgICAgICAgICAgICAgICAgICB6Lmdlc3R1cmUuaW1hZ2VXcmFwLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuICAgICAgICAgICAgICAgICAgICB6Lmdlc3R1cmUuaW1hZ2UudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpJyk7XG4gICAgICAgICAgICAgICAgICAgIHouZ2VzdHVyZS5zbGlkZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFpvb20gSW5cbiAgICAgICAgICAgICAgICAgICAgei5zY2FsZSA9IHouY3VycmVudFNjYWxlID0gei5nZXN0dXJlLmltYWdlV3JhcC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcy5wYXJhbXMuem9vbU1heDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlV2lkdGggPSB6Lmdlc3R1cmUuc2xpZGVbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZUhlaWdodCA9IHouZ2VzdHVyZS5zbGlkZVswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRYID0gei5nZXN0dXJlLnNsaWRlLm9mZnNldCgpLmxlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZID0gei5nZXN0dXJlLnNsaWRlLm9mZnNldCgpLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZYID0gb2Zmc2V0WCArIHNsaWRlV2lkdGgvMiAtIHRvdWNoWDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZZID0gb2Zmc2V0WSArIHNsaWRlSGVpZ2h0LzIgLSB0b3VjaFk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VXaWR0aCA9IHouZ2VzdHVyZS5pbWFnZVswXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlSGVpZ2h0ID0gei5nZXN0dXJlLmltYWdlWzBdLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlZFdpZHRoID0gaW1hZ2VXaWR0aCAqIHouc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZWRIZWlnaHQgPSBpbWFnZUhlaWdodCAqIHouc2NhbGU7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlTWluWCA9IE1hdGgubWluKChzbGlkZVdpZHRoIC8gMiAtIHNjYWxlZFdpZHRoIC8gMiksIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlTWluWSA9IE1hdGgubWluKChzbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyKSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVNYXhYID0gLXRyYW5zbGF0ZU1pblg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVNYXhZID0gLXRyYW5zbGF0ZU1pblk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlWCA9IGRpZmZYICogei5zY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZVkgPSBkaWZmWSAqIHouc2NhbGU7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0ZVggPCB0cmFuc2xhdGVNaW5YKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlWCA9ICB0cmFuc2xhdGVNaW5YO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0ZVggPiB0cmFuc2xhdGVNYXhYKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlWCA9IHRyYW5zbGF0ZU1heFg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0ZVkgPCB0cmFuc2xhdGVNaW5ZKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlWSA9ICB0cmFuc2xhdGVNaW5ZO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0ZVkgPiB0cmFuc2xhdGVNYXhZKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZU1heFk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVYID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZVkgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHouZ2VzdHVyZS5pbWFnZVdyYXAudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoJyArIHRyYW5zbGF0ZVggKyAncHgsICcgKyB0cmFuc2xhdGVZICsgJ3B4LDApJyk7XG4gICAgICAgICAgICAgICAgICAgIHouZ2VzdHVyZS5pbWFnZS50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJyArIHouc2NhbGUgKyAnKScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBBdHRhY2gvRGV0YWNoIEV2ZW50c1xuICAgICAgICAgICAgYXR0YWNoRXZlbnRzOiBmdW5jdGlvbiAoZGV0YWNoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IGRldGFjaCA/ICdvZmYnIDogJ29uJztcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnpvb20pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHMuc2xpZGVzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gcy50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHMuc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcy5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZX0gOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2NhbGUgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMuc3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5zbGlkZXNbYWN0aW9uXSgnZ2VzdHVyZXN0YXJ0Jywgcy56b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5zbGlkZXNbYWN0aW9uXSgnZ2VzdHVyZWNoYW5nZScsIHMuem9vbS5vbkdlc3R1cmVDaGFuZ2UsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnNsaWRlc1thY3Rpb25dKCdnZXN0dXJlZW5kJywgcy56b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuc2xpZGVzW2FjdGlvbl0ocy50b3VjaEV2ZW50cy5zdGFydCwgcy56b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5zbGlkZXNbYWN0aW9uXShzLnRvdWNoRXZlbnRzLm1vdmUsIHMuem9vbS5vbkdlc3R1cmVDaGFuZ2UsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnNsaWRlc1thY3Rpb25dKHMudG91Y2hFdmVudHMuZW5kLCBzLnpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBNb3ZlIGltYWdlXG4gICAgICAgICAgICAgICAgICAgIHNbYWN0aW9uXSgndG91Y2hTdGFydCcsIHMuem9vbS5vblRvdWNoU3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICBzLnNsaWRlcy5lYWNoKGZ1bmN0aW9uIChpbmRleCwgc2xpZGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQoc2xpZGUpLmZpbmQoJy4nICsgcy5wYXJhbXMuem9vbUNvbnRhaW5lckNsYXNzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChzbGlkZSlbYWN0aW9uXShzLnRvdWNoRXZlbnRzLm1vdmUsIHMuem9vbS5vblRvdWNoTW92ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzW2FjdGlvbl0oJ3RvdWNoRW5kJywgcy56b29tLm9uVG91Y2hFbmQpO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gU2NhbGUgT3V0XG4gICAgICAgICAgICAgICAgICAgIHNbYWN0aW9uXSgndHJhbnNpdGlvbkVuZCcsIHMuem9vbS5vblRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMuem9vbVRvZ2dsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5vbignZG91YmxlVGFwJywgcy56b29tLnRvZ2dsZVpvb20pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzLnpvb20uYXR0YWNoRXZlbnRzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHMuem9vbS5hdHRhY2hFdmVudHModHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIFBsdWdpbnMgQVBJLiBDb2xsZWN0IGFsbCBhbmQgaW5pdCBhbGwgcGx1Z2luc1xuICAgICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIHMuX3BsdWdpbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgcGx1Z2luIGluIHMucGx1Z2lucykge1xuICAgICAgICAgICAgdmFyIHAgPSBzLnBsdWdpbnNbcGx1Z2luXShzLCBzLnBhcmFtc1twbHVnaW5dKTtcbiAgICAgICAgICAgIGlmIChwKSBzLl9wbHVnaW5zLnB1c2gocCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWV0aG9kIHRvIGNhbGwgYWxsIHBsdWdpbnMgZXZlbnQvbWV0aG9kXG4gICAgICAgIHMuY2FsbFBsdWdpbnMgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHMuX3BsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lIGluIHMuX3BsdWdpbnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcy5fcGx1Z2luc1tpXVtldmVudE5hbWVdKGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10sIGFyZ3VtZW50c1s0XSwgYXJndW1lbnRzWzVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuXG4gICAgICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgIEV2ZW50cy9DYWxsYmFja3MvUGx1Z2lucyBFbWl0dGVyXG4gICAgICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbiAgICAgICAgZnVuY3Rpb24gbm9ybWFsaXplRXZlbnROYW1lIChldmVudE5hbWUpIHtcbiAgICAgICAgICAgIGlmIChldmVudE5hbWUuaW5kZXhPZignb24nKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWVbMF0gIT09IGV2ZW50TmFtZVswXS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWVbMF0udG9VcHBlckNhc2UoKSArIGV2ZW50TmFtZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBldmVudE5hbWUgPSAnb24nICsgZXZlbnROYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldmVudE5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcy5lbWl0dGVyRXZlbnRMaXN0ZW5lcnMgPSB7XG4gICAgICAgIFxuICAgICAgICB9O1xuICAgICAgICBzLmVtaXQgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAvLyBUcmlnZ2VyIGNhbGxiYWNrc1xuICAgICAgICAgICAgaWYgKHMucGFyYW1zW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgICAgICBzLnBhcmFtc1tldmVudE5hbWVdKGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10sIGFyZ3VtZW50c1s0XSwgYXJndW1lbnRzWzVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgLy8gVHJpZ2dlciBldmVudHNcbiAgICAgICAgICAgIGlmIChzLmVtaXR0ZXJFdmVudExpc3RlbmVyc1tldmVudE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHMuZW1pdHRlckV2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgcy5lbWl0dGVyRXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXVtpXShhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSwgYXJndW1lbnRzWzNdLCBhcmd1bWVudHNbNF0sIGFyZ3VtZW50c1s1XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVHJpZ2dlciBwbHVnaW5zXG4gICAgICAgICAgICBpZiAocy5jYWxsUGx1Z2lucykgcy5jYWxsUGx1Z2lucyhldmVudE5hbWUsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10sIGFyZ3VtZW50c1s0XSwgYXJndW1lbnRzWzVdKTtcbiAgICAgICAgfTtcbiAgICAgICAgcy5vbiA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGV2ZW50TmFtZSA9IG5vcm1hbGl6ZUV2ZW50TmFtZShldmVudE5hbWUpO1xuICAgICAgICAgICAgaWYgKCFzLmVtaXR0ZXJFdmVudExpc3RlbmVyc1tldmVudE5hbWVdKSBzLmVtaXR0ZXJFdmVudExpc3RlbmVyc1tldmVudE5hbWVdID0gW107XG4gICAgICAgICAgICBzLmVtaXR0ZXJFdmVudExpc3RlbmVyc1tldmVudE5hbWVdLnB1c2goaGFuZGxlcik7XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfTtcbiAgICAgICAgcy5vZmYgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGV2ZW50TmFtZSA9IG5vcm1hbGl6ZUV2ZW50TmFtZShldmVudE5hbWUpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgaGFuZGxlcnMgZm9yIHN1Y2ggZXZlbnRcbiAgICAgICAgICAgICAgICBzLmVtaXR0ZXJFdmVudExpc3RlbmVyc1tldmVudE5hbWVdID0gW107XG4gICAgICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXMuZW1pdHRlckV2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0gfHwgcy5lbWl0dGVyRXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXS5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzLmVtaXR0ZXJFdmVudExpc3RlbmVyc1tldmVudE5hbWVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYocy5lbWl0dGVyRXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXVtpXSA9PT0gaGFuZGxlcikgcy5lbWl0dGVyRXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfTtcbiAgICAgICAgcy5vbmNlID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgZXZlbnROYW1lID0gbm9ybWFsaXplRXZlbnROYW1lKGV2ZW50TmFtZSk7XG4gICAgICAgICAgICB2YXIgX2hhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcihhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10sIGFyZ3VtZW50c1s0XSk7XG4gICAgICAgICAgICAgICAgcy5vZmYoZXZlbnROYW1lLCBfaGFuZGxlcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcy5vbihldmVudE5hbWUsIF9oYW5kbGVyKTtcbiAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB9O1xuICAgICAgICBcblxuICAgICAgICAvLyBBY2Nlc3NpYmlsaXR5IHRvb2xzXG4gICAgICAgIHMuYTExeSA9IHtcbiAgICAgICAgICAgIG1ha2VGb2N1c2FibGU6IGZ1bmN0aW9uICgkZWwpIHtcbiAgICAgICAgICAgICAgICAkZWwuYXR0cigndGFiSW5kZXgnLCAnMCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiAkZWw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWRkUm9sZTogZnVuY3Rpb24gKCRlbCwgcm9sZSkge1xuICAgICAgICAgICAgICAgICRlbC5hdHRyKCdyb2xlJywgcm9sZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRlbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAgICAgYWRkTGFiZWw6IGZ1bmN0aW9uICgkZWwsIGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgJGVsLmF0dHIoJ2FyaWEtbGFiZWwnLCBsYWJlbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRlbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAgICAgZGlzYWJsZTogZnVuY3Rpb24gKCRlbCkge1xuICAgICAgICAgICAgICAgICRlbC5hdHRyKCdhcmlhLWRpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRlbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAgICAgZW5hYmxlOiBmdW5jdGlvbiAoJGVsKSB7XG4gICAgICAgICAgICAgICAgJGVsLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRlbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAgICAgb25FbnRlcktleTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgIT09IDEzKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKCQoZXZlbnQudGFyZ2V0KS5pcyhzLnBhcmFtcy5uZXh0QnV0dG9uKSkge1xuICAgICAgICAgICAgICAgICAgICBzLm9uQ2xpY2tOZXh0KGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMuaXNFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuYTExeS5ub3RpZnkocy5wYXJhbXMubGFzdFNsaWRlTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLmExMXkubm90aWZ5KHMucGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCQoZXZlbnQudGFyZ2V0KS5pcyhzLnBhcmFtcy5wcmV2QnV0dG9uKSkge1xuICAgICAgICAgICAgICAgICAgICBzLm9uQ2xpY2tQcmV2KGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuYTExeS5ub3RpZnkocy5wYXJhbXMuZmlyc3RTbGlkZU1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5hMTF5Lm5vdGlmeShzLnBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmlzKCcuJyArIHMucGFyYW1zLmJ1bGxldENsYXNzKSkge1xuICAgICAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldClbMF0uY2xpY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgICAgIGxpdmVSZWdpb246ICQoJzxzcGFuIGNsYXNzPVwiJyArIHMucGFyYW1zLm5vdGlmaWNhdGlvbkNsYXNzICsgJ1wiIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiIGFyaWEtYXRvbWljPVwidHJ1ZVwiPjwvc3Bhbj4nKSxcbiAgICAgICAgXG4gICAgICAgICAgICBub3RpZnk6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vdGlmaWNhdGlvbiA9IHMuYTExeS5saXZlUmVnaW9uO1xuICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24ubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLmh0bWwoJycpO1xuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5odG1sKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBTZXR1cCBhY2Nlc3NpYmlsaXR5XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLm5leHRCdXR0b24gJiYgcy5uZXh0QnV0dG9uICYmIHMubmV4dEJ1dHRvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHMuYTExeS5tYWtlRm9jdXNhYmxlKHMubmV4dEJ1dHRvbik7XG4gICAgICAgICAgICAgICAgICAgIHMuYTExeS5hZGRSb2xlKHMubmV4dEJ1dHRvbiwgJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICBzLmExMXkuYWRkTGFiZWwocy5uZXh0QnV0dG9uLCBzLnBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnByZXZCdXR0b24gJiYgcy5wcmV2QnV0dG9uICYmIHMucHJldkJ1dHRvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHMuYTExeS5tYWtlRm9jdXNhYmxlKHMucHJldkJ1dHRvbik7XG4gICAgICAgICAgICAgICAgICAgIHMuYTExeS5hZGRSb2xlKHMucHJldkJ1dHRvbiwgJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICBzLmExMXkuYWRkTGFiZWwocy5wcmV2QnV0dG9uLCBzLnBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICQocy5jb250YWluZXIpLmFwcGVuZChzLmExMXkubGl2ZVJlZ2lvbik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5pdFBhZ2luYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMucGFnaW5hdGlvbiAmJiBzLnBhcmFtcy5wYWdpbmF0aW9uQ2xpY2thYmxlICYmIHMuYnVsbGV0cyAmJiBzLmJ1bGxldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHMuYnVsbGV0cy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWxsZXQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5hMTF5Lm1ha2VGb2N1c2FibGUoYnVsbGV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuYTExeS5hZGRSb2xlKGJ1bGxldCwgJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5hMTF5LmFkZExhYmVsKGJ1bGxldCwgcy5wYXJhbXMucGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2UucmVwbGFjZSgve3tpbmRleH19LywgYnVsbGV0LmluZGV4KCkgKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHMuYTExeS5saXZlUmVnaW9uICYmIHMuYTExeS5saXZlUmVnaW9uLmxlbmd0aCA+IDApIHMuYTExeS5saXZlUmVnaW9uLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcblxuICAgICAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICBJbml0L0Rlc3Ryb3lcbiAgICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBzLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMubG9vcCkgcy5jcmVhdGVMb29wKCk7XG4gICAgICAgICAgICBzLnVwZGF0ZUNvbnRhaW5lclNpemUoKTtcbiAgICAgICAgICAgIHMudXBkYXRlU2xpZGVzU2l6ZSgpO1xuICAgICAgICAgICAgcy51cGRhdGVQYWdpbmF0aW9uKCk7XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuc2Nyb2xsYmFyICYmIHMuc2Nyb2xsYmFyKSB7XG4gICAgICAgICAgICAgICAgcy5zY3JvbGxiYXIuc2V0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLnNjcm9sbGJhckRyYWdnYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBzLnNjcm9sbGJhci5lbmFibGVEcmFnZ2FibGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuZWZmZWN0ICE9PSAnc2xpZGUnICYmIHMuZWZmZWN0c1tzLnBhcmFtcy5lZmZlY3RdKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzLnBhcmFtcy5sb29wKSBzLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICAgICAgICAgICAgcy5lZmZlY3RzW3MucGFyYW1zLmVmZmVjdF0uc2V0VHJhbnNsYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMubG9vcCkge1xuICAgICAgICAgICAgICAgIHMuc2xpZGVUbyhzLnBhcmFtcy5pbml0aWFsU2xpZGUgKyBzLmxvb3BlZFNsaWRlcywgMCwgcy5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHMuc2xpZGVUbyhzLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHMucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgICAgICAgICAgICAgaWYgKHMucGFyYW1zLmluaXRpYWxTbGlkZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5wYXJhbGxheCAmJiBzLnBhcmFtcy5wYXJhbGxheCkgcy5wYXJhbGxheC5zZXRUcmFuc2xhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMubGF6eSAmJiBzLnBhcmFtcy5sYXp5TG9hZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5sYXp5LmxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcy5hdHRhY2hFdmVudHMoKTtcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5vYnNlcnZlciAmJiBzLnN1cHBvcnQub2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICBzLmluaXRPYnNlcnZlcnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5wcmVsb2FkSW1hZ2VzICYmICFzLnBhcmFtcy5sYXp5TG9hZGluZykge1xuICAgICAgICAgICAgICAgIHMucHJlbG9hZEltYWdlcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLnpvb20gJiYgcy56b29tKSB7XG4gICAgICAgICAgICAgICAgcy56b29tLmluaXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5hdXRvcGxheSkge1xuICAgICAgICAgICAgICAgIHMuc3RhcnRBdXRvcGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLmtleWJvYXJkQ29udHJvbCkge1xuICAgICAgICAgICAgICAgIGlmIChzLmVuYWJsZUtleWJvYXJkQ29udHJvbCkgcy5lbmFibGVLZXlib2FyZENvbnRyb2woKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5tb3VzZXdoZWVsQ29udHJvbCkge1xuICAgICAgICAgICAgICAgIGlmIChzLmVuYWJsZU1vdXNld2hlZWxDb250cm9sKSBzLmVuYWJsZU1vdXNld2hlZWxDb250cm9sKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEZXByZWNhdGVkIGhhc2huYXZSZXBsYWNlU3RhdGUgY2hhbmdlZCB0byByZXBsYWNlU3RhdGUgZm9yIHVzZSBpbiBoYXNobmF2IGFuZCBoaXN0b3J5XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuaGFzaG5hdlJlcGxhY2VTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHMucGFyYW1zLnJlcGxhY2VTdGF0ZSA9IHMucGFyYW1zLmhhc2huYXZSZXBsYWNlU3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuaGlzdG9yeSkge1xuICAgICAgICAgICAgICAgIGlmIChzLmhpc3RvcnkpIHMuaGlzdG9yeS5pbml0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuaGFzaG5hdikge1xuICAgICAgICAgICAgICAgIGlmIChzLmhhc2huYXYpIHMuaGFzaG5hdi5pbml0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuYTExeSAmJiBzLmExMXkpIHMuYTExeS5pbml0KCk7XG4gICAgICAgICAgICBzLmVtaXQoJ29uSW5pdCcsIHMpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gQ2xlYW51cCBkeW5hbWljIHN0eWxlc1xuICAgICAgICBzLmNsZWFudXBTdHlsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBDb250YWluZXJcbiAgICAgICAgICAgIHMuY29udGFpbmVyLnJlbW92ZUNsYXNzKHMuY2xhc3NOYW1lcy5qb2luKCcgJykpLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gV3JhcHBlclxuICAgICAgICAgICAgcy53cmFwcGVyLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gU2xpZGVzXG4gICAgICAgICAgICBpZiAocy5zbGlkZXMgJiYgcy5zbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcy5zbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFtcbiAgICAgICAgICAgICAgICAgICAgICBzLnBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyxcbiAgICAgICAgICAgICAgICAgICAgICBzLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLFxuICAgICAgICAgICAgICAgICAgICAgIHMucGFyYW1zLnNsaWRlTmV4dENsYXNzLFxuICAgICAgICAgICAgICAgICAgICAgIHMucGFyYW1zLnNsaWRlUHJldkNsYXNzXG4gICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignc3R5bGUnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItY29sdW1uJylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXJvdycpO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIC8vIFBhZ2luYXRpb24vQnVsbGV0c1xuICAgICAgICAgICAgaWYgKHMucGFnaW5hdGlvbkNvbnRhaW5lciAmJiBzLnBhZ2luYXRpb25Db250YWluZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcy5wYWdpbmF0aW9uQ29udGFpbmVyLnJlbW92ZUNsYXNzKHMucGFyYW1zLnBhZ2luYXRpb25IaWRkZW5DbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5idWxsZXRzICYmIHMuYnVsbGV0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzLmJ1bGxldHMucmVtb3ZlQ2xhc3Mocy5wYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIC8vIEJ1dHRvbnNcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5wcmV2QnV0dG9uKSAkKHMucGFyYW1zLnByZXZCdXR0b24pLnJlbW92ZUNsYXNzKHMucGFyYW1zLmJ1dHRvbkRpc2FibGVkQ2xhc3MpO1xuICAgICAgICAgICAgaWYgKHMucGFyYW1zLm5leHRCdXR0b24pICQocy5wYXJhbXMubmV4dEJ1dHRvbikucmVtb3ZlQ2xhc3Mocy5wYXJhbXMuYnV0dG9uRGlzYWJsZWRDbGFzcyk7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gU2Nyb2xsYmFyXG4gICAgICAgICAgICBpZiAocy5wYXJhbXMuc2Nyb2xsYmFyICYmIHMuc2Nyb2xsYmFyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHMuc2Nyb2xsYmFyLnRyYWNrICYmIHMuc2Nyb2xsYmFyLnRyYWNrLmxlbmd0aCkgcy5zY3JvbGxiYXIudHJhY2sucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgICAgICAgICBpZiAocy5zY3JvbGxiYXIuZHJhZyAmJiBzLnNjcm9sbGJhci5kcmFnLmxlbmd0aCkgcy5zY3JvbGxiYXIuZHJhZy5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gRGVzdHJveVxuICAgICAgICBzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoZGVsZXRlSW5zdGFuY2UsIGNsZWFudXBTdHlsZXMpIHtcbiAgICAgICAgICAgIC8vIERldGFjaCBldmVidHNcbiAgICAgICAgICAgIHMuZGV0YWNoRXZlbnRzKCk7XG4gICAgICAgICAgICAvLyBTdG9wIGF1dG9wbGF5XG4gICAgICAgICAgICBzLnN0b3BBdXRvcGxheSgpO1xuICAgICAgICAgICAgLy8gRGlzYWJsZSBkcmFnZ2FibGVcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5zY3JvbGxiYXIgJiYgcy5zY3JvbGxiYXIpIHtcbiAgICAgICAgICAgICAgICBpZiAocy5wYXJhbXMuc2Nyb2xsYmFyRHJhZ2dhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHMuc2Nyb2xsYmFyLmRpc2FibGVEcmFnZ2FibGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEZXN0cm95IGxvb3BcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICAgICAgcy5kZXN0cm95TG9vcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2xlYW51cCBzdHlsZXNcbiAgICAgICAgICAgIGlmIChjbGVhbnVwU3R5bGVzKSB7XG4gICAgICAgICAgICAgICAgcy5jbGVhbnVwU3R5bGVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEaXNjb25uZWN0IG9ic2VydmVyXG4gICAgICAgICAgICBzLmRpc2Nvbm5lY3RPYnNlcnZlcnMoKTtcbiAgICAgICAgXG4gICAgICAgICAgICAvLyBEZXN0cm95IHpvb21cbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy56b29tICYmIHMuem9vbSkge1xuICAgICAgICAgICAgICAgIHMuem9vbS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEaXNhYmxlIGtleWJvYXJkL21vdXNld2hlZWxcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5rZXlib2FyZENvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICBpZiAocy5kaXNhYmxlS2V5Ym9hcmRDb250cm9sKSBzLmRpc2FibGVLZXlib2FyZENvbnRyb2woKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5tb3VzZXdoZWVsQ29udHJvbCkge1xuICAgICAgICAgICAgICAgIGlmIChzLmRpc2FibGVNb3VzZXdoZWVsQ29udHJvbCkgcy5kaXNhYmxlTW91c2V3aGVlbENvbnRyb2woKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERpc2FibGUgYTExeVxuICAgICAgICAgICAgaWYgKHMucGFyYW1zLmExMXkgJiYgcy5hMTF5KSBzLmExMXkuZGVzdHJveSgpO1xuICAgICAgICAgICAgLy8gRGVsZXRlIGhpc3RvcnkgcG9wc3RhdGVcbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5oaXN0b3J5ICYmICFzLnBhcmFtcy5yZXBsYWNlU3RhdGUpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBzLmhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLnBhcmFtcy5oYXNobmF2ICYmIHMuaGFzaG5hdikgIHtcbiAgICAgICAgICAgICAgICBzLmhhc2huYXYuZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRGVzdHJveSBjYWxsYmFja1xuICAgICAgICAgICAgcy5lbWl0KCdvbkRlc3Ryb3knKTtcbiAgICAgICAgICAgIC8vIERlbGV0ZSBpbnN0YW5jZVxuICAgICAgICAgICAgaWYgKGRlbGV0ZUluc3RhbmNlICE9PSBmYWxzZSkgcyA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBzLmluaXQoKTtcbiAgICAgICAgXG5cbiAgICBcbiAgICAgICAgLy8gUmV0dXJuIHN3aXBlciBpbnN0YW5jZVxuICAgICAgICByZXR1cm4gcztcbiAgICB9O1xuICAgIFxuXG4gICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICBQcm90b3R5cGVcbiAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbiAgICBTd2lwZXIucHJvdG90eXBlID0ge1xuICAgICAgICBpc1NhZmFyaTogKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICByZXR1cm4gKHVhLmluZGV4T2YoJ3NhZmFyaScpID49IDAgJiYgdWEuaW5kZXhPZignY2hyb21lJykgPCAwICYmIHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA8IDApO1xuICAgICAgICB9KSgpLFxuICAgICAgICBpc1VpV2ViVmlldzogLyhpUGhvbmV8aVBvZHxpUGFkKS4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KSxcbiAgICAgICAgaXNBcnJheTogZnVuY3Rpb24gKGFycikge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkoYXJyKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICAgICAgfSxcbiAgICAgICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICBCcm93c2VyXG4gICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBicm93c2VyOiB7XG4gICAgICAgICAgICBpZTogd2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCB8fCB3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQsXG4gICAgICAgICAgICBpZVRvdWNoOiAod2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkICYmIHdpbmRvdy5uYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyA+IDEpIHx8ICh3aW5kb3cubmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkICYmIHdpbmRvdy5uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAxKSxcbiAgICAgICAgICAgIGx0ZUlFOTogKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSB0ZW1wb3JhcnkgRElWXG4gICAgICAgICAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIC8vIGFkZCBjb250ZW50IHRvIHRtcCBESVYgd2hpY2ggaXMgd3JhcHBlZCBpbnRvIHRoZSBJRSBIVE1MIGNvbmRpdGlvbmFsIHN0YXRlbWVudFxuICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSAnPCEtLVtpZiBsdGUgSUUgOV0+PGk+PC9pPjwhW2VuZGlmXS0tPic7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRydWUgLyBmYWxzZSB2YWx1ZSBiYXNlZCBvbiB3aGF0IHdpbGwgYnJvd3NlciByZW5kZXJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpJykubGVuZ3RoID09PSAxO1xuICAgICAgICAgICAgfSkoKVxuICAgICAgICB9LFxuICAgICAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIERldmljZXNcbiAgICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgICAgIGRldmljZTogKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgICAgICAgICAgdmFyIGFuZHJvaWQgPSB1YS5tYXRjaCgvKEFuZHJvaWQpOz9bXFxzXFwvXSsoW1xcZC5dKyk/Lyk7XG4gICAgICAgICAgICB2YXIgaXBhZCA9IHVhLm1hdGNoKC8oaVBhZCkuKk9TXFxzKFtcXGRfXSspLyk7XG4gICAgICAgICAgICB2YXIgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xccyhbXFxkX10rKSk/Lyk7XG4gICAgICAgICAgICB2YXIgaXBob25lID0gIWlwYWQgJiYgdWEubWF0Y2goLyhpUGhvbmVcXHNPU3xpT1MpXFxzKFtcXGRfXSspLyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlvczogaXBhZCB8fCBpcGhvbmUgfHwgaXBvZCxcbiAgICAgICAgICAgICAgICBhbmRyb2lkOiBhbmRyb2lkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSgpLFxuICAgICAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIEZlYXR1cmUgRGV0ZWN0aW9uXG4gICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBzdXBwb3J0OiB7XG4gICAgICAgICAgICB0b3VjaCA6ICh3aW5kb3cuTW9kZXJuaXpyICYmIE1vZGVybml6ci50b3VjaCA9PT0gdHJ1ZSkgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISEoKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiBEb2N1bWVudFRvdWNoKTtcbiAgICAgICAgICAgIH0pKCksXG4gICAgXG4gICAgICAgICAgICB0cmFuc2Zvcm1zM2QgOiAod2luZG93Lk1vZGVybml6ciAmJiBNb2Rlcm5penIuY3NzdHJhbnNmb3JtczNkID09PSB0cnVlKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCd3ZWJraXRQZXJzcGVjdGl2ZScgaW4gZGl2IHx8ICdNb3pQZXJzcGVjdGl2ZScgaW4gZGl2IHx8ICdPUGVyc3BlY3RpdmUnIGluIGRpdiB8fCAnTXNQZXJzcGVjdGl2ZScgaW4gZGl2IHx8ICdwZXJzcGVjdGl2ZScgaW4gZGl2KTtcbiAgICAgICAgICAgIH0pKCksXG4gICAgXG4gICAgICAgICAgICBmbGV4Ym94OiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgICAgICAgICAgICAgICB2YXIgc3R5bGVzID0gKCdhbGlnbkl0ZW1zIHdlYmtpdEFsaWduSXRlbXMgd2Via2l0Qm94QWxpZ24gbXNGbGV4QWxpZ24gbW96Qm94QWxpZ24gd2Via2l0RmxleERpcmVjdGlvbiBtc0ZsZXhEaXJlY3Rpb24gbW96Qm94RGlyZWN0aW9uIG1vekJveE9yaWVudCB3ZWJraXRCb3hEaXJlY3Rpb24gd2Via2l0Qm94T3JpZW50Jykuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVzW2ldIGluIGRpdikgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKSxcbiAgICBcbiAgICAgICAgICAgIG9ic2VydmVyOiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdyB8fCAnV2Via2l0TXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93KTtcbiAgICAgICAgICAgIH0pKCksXG4gICAgXG4gICAgICAgICAgICBwYXNzaXZlTGlzdGVuZXI6IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0UGFzc2l2ZUxpc3RlbmVyJywgbnVsbCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgICAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlO1xuICAgICAgICAgICAgfSkoKSxcbiAgICBcbiAgICAgICAgICAgIGdlc3R1cmVzOiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnb25nZXN0dXJlc3RhcnQnIGluIHdpbmRvdztcbiAgICAgICAgICAgIH0pKClcbiAgICAgICAgfSxcbiAgICAgICAgLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICBQbHVnaW5zXG4gICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBwbHVnaW5zOiB7fVxuICAgIH07XG4gICAgXG5cbiAgICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICBHZXQgRG9tIGxpYnJhcmllc1xuICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuICAgIHZhciBzd2lwZXJEb21QbHVnaW5zID0gWydqUXVlcnknLCAnWmVwdG8nLCAnRG9tNyddO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3dpcGVyRG9tUGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgIFx0aWYgKHdpbmRvd1tzd2lwZXJEb21QbHVnaW5zW2ldXSkge1xuICAgIFx0XHRhZGRMaWJyYXJ5UGx1Z2luKHdpbmRvd1tzd2lwZXJEb21QbHVnaW5zW2ldXSk7XG4gICAgXHR9XG4gICAgfVxuICAgIC8vIFJlcXVpcmVkIERPTSBQbHVnaW5zXG4gICAgdmFyIGRvbUxpYjtcbiAgICBpZiAodHlwZW9mIERvbTcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgXHRkb21MaWIgPSB3aW5kb3cuRG9tNyB8fCB3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgXHRkb21MaWIgPSBEb203O1xuICAgIH1cbiAgICBcblxuICAgIC8qPT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgQWRkIC5zd2lwZXIgcGx1Z2luIGZyb20gRG9tIGxpYnJhcmllc1xuICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4gICAgZnVuY3Rpb24gYWRkTGlicmFyeVBsdWdpbihsaWIpIHtcbiAgICAgICAgbGliLmZuLnN3aXBlciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciBmaXJzdEluc3RhbmNlO1xuICAgICAgICAgICAgbGliKHRoaXMpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzID0gbmV3IFN3aXBlcih0aGlzLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIGlmICghZmlyc3RJbnN0YW5jZSkgZmlyc3RJbnN0YW5jZSA9IHM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBmaXJzdEluc3RhbmNlO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBcbiAgICBpZiAoZG9tTGliKSB7XG4gICAgICAgIGlmICghKCd0cmFuc2l0aW9uRW5kJyBpbiBkb21MaWIuZm4pKSB7XG4gICAgICAgICAgICBkb21MaWIuZm4udHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciBldmVudHMgPSBbJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAndHJhbnNpdGlvbmVuZCcsICdvVHJhbnNpdGlvbkVuZCcsICdNU1RyYW5zaXRpb25FbmQnLCAnbXNUcmFuc2l0aW9uRW5kJ10sXG4gICAgICAgICAgICAgICAgICAgIGksIGosIGRvbSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZmlyZUNhbGxCYWNrKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbS5vZmYoZXZlbnRzW2ldLCBmaXJlQ2FsbEJhY2spO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb20ub24oZXZlbnRzW2ldLCBmaXJlQ2FsbEJhY2spO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISgndHJhbnNmb3JtJyBpbiBkb21MaWIuZm4pKSB7XG4gICAgICAgICAgICBkb21MaWIuZm4udHJhbnNmb3JtID0gZnVuY3Rpb24gKHRyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxTdHlsZSA9IHRoaXNbaV0uc3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIGVsU3R5bGUud2Via2l0VHJhbnNmb3JtID0gZWxTdHlsZS5Nc1RyYW5zZm9ybSA9IGVsU3R5bGUubXNUcmFuc2Zvcm0gPSBlbFN0eWxlLk1velRyYW5zZm9ybSA9IGVsU3R5bGUuT1RyYW5zZm9ybSA9IGVsU3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoJ3RyYW5zaXRpb24nIGluIGRvbUxpYi5mbikpIHtcbiAgICAgICAgICAgIGRvbUxpYi5mbi50cmFuc2l0aW9uID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkdXJhdGlvbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSBkdXJhdGlvbiArICdtcyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxTdHlsZSA9IHRoaXNbaV0uc3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIGVsU3R5bGUud2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uID0gZWxTdHlsZS5Nc1RyYW5zaXRpb25EdXJhdGlvbiA9IGVsU3R5bGUubXNUcmFuc2l0aW9uRHVyYXRpb24gPSBlbFN0eWxlLk1velRyYW5zaXRpb25EdXJhdGlvbiA9IGVsU3R5bGUuT1RyYW5zaXRpb25EdXJhdGlvbiA9IGVsU3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISgnb3V0ZXJXaWR0aCcgaW4gZG9tTGliLmZuKSkge1xuICAgICAgICAgICAgZG9tTGliLmZuLm91dGVyV2lkdGggPSBmdW5jdGlvbiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlTWFyZ2lucylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoICsgcGFyc2VGbG9hdCh0aGlzLmNzcygnbWFyZ2luLXJpZ2h0JykpICsgcGFyc2VGbG9hdCh0aGlzLmNzcygnbWFyZ2luLWxlZnQnKSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcblxuICAgIHdpbmRvdy5Td2lwZXIgPSBTd2lwZXI7XG59KSgpO1xuXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PVxuU3dpcGVyIEFNRCBFeHBvcnRcbj09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5pZiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnKVxue1xuICAgIG1vZHVsZS5leHBvcnRzID0gd2luZG93LlN3aXBlcjtcbn1cbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAndXNlIHN0cmljdCc7XG4gICAgICAgIHJldHVybiB3aW5kb3cuU3dpcGVyO1xuICAgIH0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBzL3N3aXBlci5qcXVlcnkuanMubWFwXG4iLCIvKiEgSGFtbWVyLkpTIC0gdjIuMC43IC0gMjAxNi0wNC0yMlxuICogaHR0cDovL2hhbW1lcmpzLmdpdGh1Yi5pby9cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgSm9yaWsgVGFuZ2VsZGVyO1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlICovXG4oZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCwgZXhwb3J0TmFtZSwgdW5kZWZpbmVkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxudmFyIFZFTkRPUl9QUkVGSVhFUyA9IFsnJywgJ3dlYmtpdCcsICdNb3onLCAnTVMnLCAnbXMnLCAnbyddO1xudmFyIFRFU1RfRUxFTUVOVCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG52YXIgVFlQRV9GVU5DVElPTiA9ICdmdW5jdGlvbic7XG5cbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgbm93ID0gRGF0ZS5ub3c7XG5cbi8qKlxuICogc2V0IGEgdGltZW91dCB3aXRoIGEgZ2l2ZW4gc2NvcGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge051bWJlcn0gdGltZW91dFxuICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIHNldFRpbWVvdXRDb250ZXh0KGZuLCB0aW1lb3V0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoYmluZEZuKGZuLCBjb250ZXh0KSwgdGltZW91dCk7XG59XG5cbi8qKlxuICogaWYgdGhlIGFyZ3VtZW50IGlzIGFuIGFycmF5LCB3ZSB3YW50IHRvIGV4ZWN1dGUgdGhlIGZuIG9uIGVhY2ggZW50cnlcbiAqIGlmIGl0IGFpbnQgYW4gYXJyYXkgd2UgZG9uJ3Qgd2FudCB0byBkbyBhIHRoaW5nLlxuICogdGhpcyBpcyB1c2VkIGJ5IGFsbCB0aGUgbWV0aG9kcyB0aGF0IGFjY2VwdCBhIHNpbmdsZSBhbmQgYXJyYXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp8QXJyYXl9IGFyZ1xuICogQHBhcmFtIHtTdHJpbmd9IGZuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHRdXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaW52b2tlQXJyYXlBcmcoYXJnLCBmbiwgY29udGV4dCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgZWFjaChhcmcsIGNvbnRleHRbZm5dLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiB3YWxrIG9iamVjdHMgYW5kIGFycmF5c1xuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIGVhY2gob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciBpO1xuXG4gICAgaWYgKCFvYmopIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvYmouZm9yRWFjaCkge1xuICAgICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCk7XG4gICAgfSBlbHNlIGlmIChvYmoubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgb2JqLmxlbmd0aCkge1xuICAgICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaik7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICBvYmouaGFzT3duUHJvcGVydHkoaSkgJiYgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogd3JhcCBhIG1ldGhvZCB3aXRoIGEgZGVwcmVjYXRpb24gd2FybmluZyBhbmQgc3RhY2sgdHJhY2VcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgbmV3IGZ1bmN0aW9uIHdyYXBwaW5nIHRoZSBzdXBwbGllZCBtZXRob2QuXG4gKi9cbmZ1bmN0aW9uIGRlcHJlY2F0ZShtZXRob2QsIG5hbWUsIG1lc3NhZ2UpIHtcbiAgICB2YXIgZGVwcmVjYXRpb25NZXNzYWdlID0gJ0RFUFJFQ0FURUQgTUVUSE9EOiAnICsgbmFtZSArICdcXG4nICsgbWVzc2FnZSArICcgQVQgXFxuJztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlID0gbmV3IEVycm9yKCdnZXQtc3RhY2stdHJhY2UnKTtcbiAgICAgICAgdmFyIHN0YWNrID0gZSAmJiBlLnN0YWNrID8gZS5zdGFjay5yZXBsYWNlKC9eW15cXChdKz9bXFxuJF0vZ20sICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL15cXHMrYXRcXHMrL2dtLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eT2JqZWN0Ljxhbm9ueW1vdXM+XFxzKlxcKC9nbSwgJ3thbm9ueW1vdXN9KClAJykgOiAnVW5rbm93biBTdGFjayBUcmFjZSc7XG5cbiAgICAgICAgdmFyIGxvZyA9IHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS53YXJuIHx8IHdpbmRvdy5jb25zb2xlLmxvZyk7XG4gICAgICAgIGlmIChsb2cpIHtcbiAgICAgICAgICAgIGxvZy5jYWxsKHdpbmRvdy5jb25zb2xlLCBkZXByZWNhdGlvbk1lc3NhZ2UsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBleHRlbmQgb2JqZWN0LlxuICogbWVhbnMgdGhhdCBwcm9wZXJ0aWVzIGluIGRlc3Qgd2lsbCBiZSBvdmVyd3JpdHRlbiBieSB0aGUgb25lcyBpbiBzcmMuXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XG4gKiBAcGFyYW0gey4uLk9iamVjdH0gb2JqZWN0c190b19hc3NpZ25cbiAqIEByZXR1cm5zIHtPYmplY3R9IHRhcmdldFxuICovXG52YXIgYXNzaWduO1xuaWYgKHR5cGVvZiBPYmplY3QuYXNzaWduICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgYXNzaWduID0gZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvdXRwdXQgPSBPYmplY3QodGFyZ2V0KTtcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG5leHRLZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkobmV4dEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtuZXh0S2V5XSA9IHNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG59IGVsc2Uge1xuICAgIGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG59XG5cbi8qKlxuICogZXh0ZW5kIG9iamVjdC5cbiAqIG1lYW5zIHRoYXQgcHJvcGVydGllcyBpbiBkZXN0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gYnkgdGhlIG9uZXMgaW4gc3JjLlxuICogQHBhcmFtIHtPYmplY3R9IGRlc3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzcmNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW21lcmdlPWZhbHNlXVxuICogQHJldHVybnMge09iamVjdH0gZGVzdFxuICovXG52YXIgZXh0ZW5kID0gZGVwcmVjYXRlKGZ1bmN0aW9uIGV4dGVuZChkZXN0LCBzcmMsIG1lcmdlKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzcmMpO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGtleXMubGVuZ3RoKSB7XG4gICAgICAgIGlmICghbWVyZ2UgfHwgKG1lcmdlICYmIGRlc3Rba2V5c1tpXV0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIGRlc3Rba2V5c1tpXV0gPSBzcmNba2V5c1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gZGVzdDtcbn0sICdleHRlbmQnLCAnVXNlIGBhc3NpZ25gLicpO1xuXG4vKipcbiAqIG1lcmdlIHRoZSB2YWx1ZXMgZnJvbSBzcmMgaW4gdGhlIGRlc3QuXG4gKiBtZWFucyB0aGF0IHByb3BlcnRpZXMgdGhhdCBleGlzdCBpbiBkZXN0IHdpbGwgbm90IGJlIG92ZXJ3cml0dGVuIGJ5IHNyY1xuICogQHBhcmFtIHtPYmplY3R9IGRlc3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzcmNcbiAqIEByZXR1cm5zIHtPYmplY3R9IGRlc3RcbiAqL1xudmFyIG1lcmdlID0gZGVwcmVjYXRlKGZ1bmN0aW9uIG1lcmdlKGRlc3QsIHNyYykge1xuICAgIHJldHVybiBleHRlbmQoZGVzdCwgc3JjLCB0cnVlKTtcbn0sICdtZXJnZScsICdVc2UgYGFzc2lnbmAuJyk7XG5cbi8qKlxuICogc2ltcGxlIGNsYXNzIGluaGVyaXRhbmNlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaGlsZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gYmFzZVxuICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXVxuICovXG5mdW5jdGlvbiBpbmhlcml0KGNoaWxkLCBiYXNlLCBwcm9wZXJ0aWVzKSB7XG4gICAgdmFyIGJhc2VQID0gYmFzZS5wcm90b3R5cGUsXG4gICAgICAgIGNoaWxkUDtcblxuICAgIGNoaWxkUCA9IGNoaWxkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoYmFzZVApO1xuICAgIGNoaWxkUC5jb25zdHJ1Y3RvciA9IGNoaWxkO1xuICAgIGNoaWxkUC5fc3VwZXIgPSBiYXNlUDtcblxuICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGFzc2lnbihjaGlsZFAsIHByb3BlcnRpZXMpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBzaW1wbGUgZnVuY3Rpb24gYmluZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGJpbmRGbihmbiwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBib3VuZEZuKCkge1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoY29udGV4dCwgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuXG4vKipcbiAqIGxldCBhIGJvb2xlYW4gdmFsdWUgYWxzbyBiZSBhIGZ1bmN0aW9uIHRoYXQgbXVzdCByZXR1cm4gYSBib29sZWFuXG4gKiB0aGlzIGZpcnN0IGl0ZW0gaW4gYXJncyB3aWxsIGJlIHVzZWQgYXMgdGhlIGNvbnRleHRcbiAqIEBwYXJhbSB7Qm9vbGVhbnxGdW5jdGlvbn0gdmFsXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJnc11cbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBib29sT3JGbih2YWwsIGFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIHZhbCA9PSBUWVBFX0ZVTkNUSU9OKSB7XG4gICAgICAgIHJldHVybiB2YWwuYXBwbHkoYXJncyA/IGFyZ3NbMF0gfHwgdW5kZWZpbmVkIDogdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbn1cblxuLyoqXG4gKiB1c2UgdGhlIHZhbDIgd2hlbiB2YWwxIGlzIHVuZGVmaW5lZFxuICogQHBhcmFtIHsqfSB2YWwxXG4gKiBAcGFyYW0geyp9IHZhbDJcbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiBpZlVuZGVmaW5lZCh2YWwxLCB2YWwyKSB7XG4gICAgcmV0dXJuICh2YWwxID09PSB1bmRlZmluZWQpID8gdmFsMiA6IHZhbDE7XG59XG5cbi8qKlxuICogYWRkRXZlbnRMaXN0ZW5lciB3aXRoIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSB0YXJnZXRcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICovXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVycyh0YXJnZXQsIHR5cGVzLCBoYW5kbGVyKSB7XG4gICAgZWFjaChzcGxpdFN0cih0eXBlcyksIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIHJlbW92ZUV2ZW50TGlzdGVuZXIgd2l0aCBtdWx0aXBsZSBldmVudHMgYXQgb25jZVxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGFyZ2V0LCB0eXBlcywgaGFuZGxlcikge1xuICAgIGVhY2goc3BsaXRTdHIodHlwZXMpLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBmaW5kIGlmIGEgbm9kZSBpcyBpbiB0aGUgZ2l2ZW4gcGFyZW50XG4gKiBAbWV0aG9kIGhhc1BhcmVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50XG4gKiBAcmV0dXJuIHtCb29sZWFufSBmb3VuZFxuICovXG5mdW5jdGlvbiBoYXNQYXJlbnQobm9kZSwgcGFyZW50KSB7XG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUgPT0gcGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogc21hbGwgaW5kZXhPZiB3cmFwcGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gZmluZFxuICogQHJldHVybnMge0Jvb2xlYW59IGZvdW5kXG4gKi9cbmZ1bmN0aW9uIGluU3RyKHN0ciwgZmluZCkge1xuICAgIHJldHVybiBzdHIuaW5kZXhPZihmaW5kKSA+IC0xO1xufVxuXG4vKipcbiAqIHNwbGl0IHN0cmluZyBvbiB3aGl0ZXNwYWNlXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7QXJyYXl9IHdvcmRzXG4gKi9cbmZ1bmN0aW9uIHNwbGl0U3RyKHN0cikge1xuICAgIHJldHVybiBzdHIudHJpbSgpLnNwbGl0KC9cXHMrL2cpO1xufVxuXG4vKipcbiAqIGZpbmQgaWYgYSBhcnJheSBjb250YWlucyB0aGUgb2JqZWN0IHVzaW5nIGluZGV4T2Ygb3IgYSBzaW1wbGUgcG9seUZpbGxcbiAqIEBwYXJhbSB7QXJyYXl9IHNyY1xuICogQHBhcmFtIHtTdHJpbmd9IGZpbmRcbiAqIEBwYXJhbSB7U3RyaW5nfSBbZmluZEJ5S2V5XVxuICogQHJldHVybiB7Qm9vbGVhbnxOdW1iZXJ9IGZhbHNlIHdoZW4gbm90IGZvdW5kLCBvciB0aGUgaW5kZXhcbiAqL1xuZnVuY3Rpb24gaW5BcnJheShzcmMsIGZpbmQsIGZpbmRCeUtleSkge1xuICAgIGlmIChzcmMuaW5kZXhPZiAmJiAhZmluZEJ5S2V5KSB7XG4gICAgICAgIHJldHVybiBzcmMuaW5kZXhPZihmaW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgc3JjLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKChmaW5kQnlLZXkgJiYgc3JjW2ldW2ZpbmRCeUtleV0gPT0gZmluZCkgfHwgKCFmaW5kQnlLZXkgJiYgc3JjW2ldID09PSBmaW5kKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG59XG5cbi8qKlxuICogY29udmVydCBhcnJheS1saWtlIG9iamVjdHMgdG8gcmVhbCBhcnJheXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gdG9BcnJheShvYmopIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqLCAwKTtcbn1cblxuLyoqXG4gKiB1bmlxdWUgYXJyYXkgd2l0aCBvYmplY3RzIGJhc2VkIG9uIGEga2V5IChsaWtlICdpZCcpIG9yIGp1c3QgYnkgdGhlIGFycmF5J3MgdmFsdWVcbiAqIEBwYXJhbSB7QXJyYXl9IHNyYyBbe2lkOjF9LHtpZDoyfSx7aWQ6MX1dXG4gKiBAcGFyYW0ge1N0cmluZ30gW2tleV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3NvcnQ9RmFsc2VdXG4gKiBAcmV0dXJucyB7QXJyYXl9IFt7aWQ6MX0se2lkOjJ9XVxuICovXG5mdW5jdGlvbiB1bmlxdWVBcnJheShzcmMsIGtleSwgc29ydCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgc3JjLmxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsID0ga2V5ID8gc3JjW2ldW2tleV0gOiBzcmNbaV07XG4gICAgICAgIGlmIChpbkFycmF5KHZhbHVlcywgdmFsKSA8IDApIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChzcmNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlc1tpXSA9IHZhbDtcbiAgICAgICAgaSsrO1xuICAgIH1cblxuICAgIGlmIChzb3J0KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5zb3J0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5zb3J0KGZ1bmN0aW9uIHNvcnRVbmlxdWVBcnJheShhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFba2V5XSA+IGJba2V5XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogZ2V0IHRoZSBwcmVmaXhlZCBwcm9wZXJ0eVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gKiBAcmV0dXJucyB7U3RyaW5nfFVuZGVmaW5lZH0gcHJlZml4ZWRcbiAqL1xuZnVuY3Rpb24gcHJlZml4ZWQob2JqLCBwcm9wZXJ0eSkge1xuICAgIHZhciBwcmVmaXgsIHByb3A7XG4gICAgdmFyIGNhbWVsUHJvcCA9IHByb3BlcnR5WzBdLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IFZFTkRPUl9QUkVGSVhFUy5sZW5ndGgpIHtcbiAgICAgICAgcHJlZml4ID0gVkVORE9SX1BSRUZJWEVTW2ldO1xuICAgICAgICBwcm9wID0gKHByZWZpeCkgPyBwcmVmaXggKyBjYW1lbFByb3AgOiBwcm9wZXJ0eTtcblxuICAgICAgICBpZiAocHJvcCBpbiBvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wO1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBnZXQgYSB1bmlxdWUgaWRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHVuaXF1ZUlkXG4gKi9cbnZhciBfdW5pcXVlSWQgPSAxO1xuZnVuY3Rpb24gdW5pcXVlSWQoKSB7XG4gICAgcmV0dXJuIF91bmlxdWVJZCsrO1xufVxuXG4vKipcbiAqIGdldCB0aGUgd2luZG93IG9iamVjdCBvZiBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RG9jdW1lbnRWaWV3fFdpbmRvd31cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93Rm9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgdmFyIGRvYyA9IGVsZW1lbnQub3duZXJEb2N1bWVudCB8fCBlbGVtZW50O1xuICAgIHJldHVybiAoZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3cgfHwgd2luZG93KTtcbn1cblxudmFyIE1PQklMRV9SRUdFWCA9IC9tb2JpbGV8dGFibGV0fGlwKGFkfGhvbmV8b2QpfGFuZHJvaWQvaTtcblxudmFyIFNVUFBPUlRfVE9VQ0ggPSAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KTtcbnZhciBTVVBQT1JUX1BPSU5URVJfRVZFTlRTID0gcHJlZml4ZWQod2luZG93LCAnUG9pbnRlckV2ZW50JykgIT09IHVuZGVmaW5lZDtcbnZhciBTVVBQT1JUX09OTFlfVE9VQ0ggPSBTVVBQT1JUX1RPVUNIICYmIE1PQklMRV9SRUdFWC50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG52YXIgSU5QVVRfVFlQRV9UT1VDSCA9ICd0b3VjaCc7XG52YXIgSU5QVVRfVFlQRV9QRU4gPSAncGVuJztcbnZhciBJTlBVVF9UWVBFX01PVVNFID0gJ21vdXNlJztcbnZhciBJTlBVVF9UWVBFX0tJTkVDVCA9ICdraW5lY3QnO1xuXG52YXIgQ09NUFVURV9JTlRFUlZBTCA9IDI1O1xuXG52YXIgSU5QVVRfU1RBUlQgPSAxO1xudmFyIElOUFVUX01PVkUgPSAyO1xudmFyIElOUFVUX0VORCA9IDQ7XG52YXIgSU5QVVRfQ0FOQ0VMID0gODtcblxudmFyIERJUkVDVElPTl9OT05FID0gMTtcbnZhciBESVJFQ1RJT05fTEVGVCA9IDI7XG52YXIgRElSRUNUSU9OX1JJR0hUID0gNDtcbnZhciBESVJFQ1RJT05fVVAgPSA4O1xudmFyIERJUkVDVElPTl9ET1dOID0gMTY7XG5cbnZhciBESVJFQ1RJT05fSE9SSVpPTlRBTCA9IERJUkVDVElPTl9MRUZUIHwgRElSRUNUSU9OX1JJR0hUO1xudmFyIERJUkVDVElPTl9WRVJUSUNBTCA9IERJUkVDVElPTl9VUCB8IERJUkVDVElPTl9ET1dOO1xudmFyIERJUkVDVElPTl9BTEwgPSBESVJFQ1RJT05fSE9SSVpPTlRBTCB8IERJUkVDVElPTl9WRVJUSUNBTDtcblxudmFyIFBST1BTX1hZID0gWyd4JywgJ3knXTtcbnZhciBQUk9QU19DTElFTlRfWFkgPSBbJ2NsaWVudFgnLCAnY2xpZW50WSddO1xuXG4vKipcbiAqIGNyZWF0ZSBuZXcgaW5wdXQgdHlwZSBtYW5hZ2VyXG4gKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7SW5wdXR9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSW5wdXQobWFuYWdlciwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5tYW5hZ2VyID0gbWFuYWdlcjtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5lbGVtZW50ID0gbWFuYWdlci5lbGVtZW50O1xuICAgIHRoaXMudGFyZ2V0ID0gbWFuYWdlci5vcHRpb25zLmlucHV0VGFyZ2V0O1xuXG4gICAgLy8gc21hbGxlciB3cmFwcGVyIGFyb3VuZCB0aGUgaGFuZGxlciwgZm9yIHRoZSBzY29wZSBhbmQgdGhlIGVuYWJsZWQgc3RhdGUgb2YgdGhlIG1hbmFnZXIsXG4gICAgLy8gc28gd2hlbiBkaXNhYmxlZCB0aGUgaW5wdXQgZXZlbnRzIGFyZSBjb21wbGV0ZWx5IGJ5cGFzc2VkLlxuICAgIHRoaXMuZG9tSGFuZGxlciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGlmIChib29sT3JGbihtYW5hZ2VyLm9wdGlvbnMuZW5hYmxlLCBbbWFuYWdlcl0pKSB7XG4gICAgICAgICAgICBzZWxmLmhhbmRsZXIoZXYpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuaW5pdCgpO1xuXG59XG5cbklucHV0LnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBzaG91bGQgaGFuZGxlIHRoZSBpbnB1dEV2ZW50IGRhdGEgYW5kIHRyaWdnZXIgdGhlIGNhbGxiYWNrXG4gICAgICogQHZpcnR1YWxcbiAgICAgKi9cbiAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHsgfSxcblxuICAgIC8qKlxuICAgICAqIGJpbmQgdGhlIGV2ZW50c1xuICAgICAqL1xuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmV2RWwgJiYgYWRkRXZlbnRMaXN0ZW5lcnModGhpcy5lbGVtZW50LCB0aGlzLmV2RWwsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICAgIHRoaXMuZXZUYXJnZXQgJiYgYWRkRXZlbnRMaXN0ZW5lcnModGhpcy50YXJnZXQsIHRoaXMuZXZUYXJnZXQsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICAgIHRoaXMuZXZXaW4gJiYgYWRkRXZlbnRMaXN0ZW5lcnMoZ2V0V2luZG93Rm9yRWxlbWVudCh0aGlzLmVsZW1lbnQpLCB0aGlzLmV2V2luLCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB1bmJpbmQgdGhlIGV2ZW50c1xuICAgICAqL1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmV2RWwgJiYgcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy5lbGVtZW50LCB0aGlzLmV2RWwsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICAgIHRoaXMuZXZUYXJnZXQgJiYgcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy50YXJnZXQsIHRoaXMuZXZUYXJnZXQsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICAgIHRoaXMuZXZXaW4gJiYgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoZ2V0V2luZG93Rm9yRWxlbWVudCh0aGlzLmVsZW1lbnQpLCB0aGlzLmV2V2luLCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgIH1cbn07XG5cbi8qKlxuICogY3JlYXRlIG5ldyBpbnB1dCB0eXBlIG1hbmFnZXJcbiAqIGNhbGxlZCBieSB0aGUgTWFuYWdlciBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtIYW1tZXJ9IG1hbmFnZXJcbiAqIEByZXR1cm5zIHtJbnB1dH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRJbnN0YW5jZShtYW5hZ2VyKSB7XG4gICAgdmFyIFR5cGU7XG4gICAgdmFyIGlucHV0Q2xhc3MgPSBtYW5hZ2VyLm9wdGlvbnMuaW5wdXRDbGFzcztcblxuICAgIGlmIChpbnB1dENsYXNzKSB7XG4gICAgICAgIFR5cGUgPSBpbnB1dENsYXNzO1xuICAgIH0gZWxzZSBpZiAoU1VQUE9SVF9QT0lOVEVSX0VWRU5UUykge1xuICAgICAgICBUeXBlID0gUG9pbnRlckV2ZW50SW5wdXQ7XG4gICAgfSBlbHNlIGlmIChTVVBQT1JUX09OTFlfVE9VQ0gpIHtcbiAgICAgICAgVHlwZSA9IFRvdWNoSW5wdXQ7XG4gICAgfSBlbHNlIGlmICghU1VQUE9SVF9UT1VDSCkge1xuICAgICAgICBUeXBlID0gTW91c2VJbnB1dDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBUeXBlID0gVG91Y2hNb3VzZUlucHV0O1xuICAgIH1cbiAgICByZXR1cm4gbmV3IChUeXBlKShtYW5hZ2VyLCBpbnB1dEhhbmRsZXIpO1xufVxuXG4vKipcbiAqIGhhbmRsZSBpbnB1dCBldmVudHNcbiAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50VHlwZVxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gKi9cbmZ1bmN0aW9uIGlucHV0SGFuZGxlcihtYW5hZ2VyLCBldmVudFR5cGUsIGlucHV0KSB7XG4gICAgdmFyIHBvaW50ZXJzTGVuID0gaW5wdXQucG9pbnRlcnMubGVuZ3RoO1xuICAgIHZhciBjaGFuZ2VkUG9pbnRlcnNMZW4gPSBpbnB1dC5jaGFuZ2VkUG9pbnRlcnMubGVuZ3RoO1xuICAgIHZhciBpc0ZpcnN0ID0gKGV2ZW50VHlwZSAmIElOUFVUX1NUQVJUICYmIChwb2ludGVyc0xlbiAtIGNoYW5nZWRQb2ludGVyc0xlbiA9PT0gMCkpO1xuICAgIHZhciBpc0ZpbmFsID0gKGV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpICYmIChwb2ludGVyc0xlbiAtIGNoYW5nZWRQb2ludGVyc0xlbiA9PT0gMCkpO1xuXG4gICAgaW5wdXQuaXNGaXJzdCA9ICEhaXNGaXJzdDtcbiAgICBpbnB1dC5pc0ZpbmFsID0gISFpc0ZpbmFsO1xuXG4gICAgaWYgKGlzRmlyc3QpIHtcbiAgICAgICAgbWFuYWdlci5zZXNzaW9uID0ge307XG4gICAgfVxuXG4gICAgLy8gc291cmNlIGV2ZW50IGlzIHRoZSBub3JtYWxpemVkIHZhbHVlIG9mIHRoZSBkb21FdmVudHNcbiAgICAvLyBsaWtlICd0b3VjaHN0YXJ0LCBtb3VzZXVwLCBwb2ludGVyZG93bidcbiAgICBpbnB1dC5ldmVudFR5cGUgPSBldmVudFR5cGU7XG5cbiAgICAvLyBjb21wdXRlIHNjYWxlLCByb3RhdGlvbiBldGNcbiAgICBjb21wdXRlSW5wdXREYXRhKG1hbmFnZXIsIGlucHV0KTtcblxuICAgIC8vIGVtaXQgc2VjcmV0IGV2ZW50XG4gICAgbWFuYWdlci5lbWl0KCdoYW1tZXIuaW5wdXQnLCBpbnB1dCk7XG5cbiAgICBtYW5hZ2VyLnJlY29nbml6ZShpbnB1dCk7XG4gICAgbWFuYWdlci5zZXNzaW9uLnByZXZJbnB1dCA9IGlucHV0O1xufVxuXG4vKipcbiAqIGV4dGVuZCB0aGUgZGF0YSB3aXRoIHNvbWUgdXNhYmxlIHByb3BlcnRpZXMgbGlrZSBzY2FsZSwgcm90YXRlLCB2ZWxvY2l0eSBldGNcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYW5hZ2VyXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUlucHV0RGF0YShtYW5hZ2VyLCBpbnB1dCkge1xuICAgIHZhciBzZXNzaW9uID0gbWFuYWdlci5zZXNzaW9uO1xuICAgIHZhciBwb2ludGVycyA9IGlucHV0LnBvaW50ZXJzO1xuICAgIHZhciBwb2ludGVyc0xlbmd0aCA9IHBvaW50ZXJzLmxlbmd0aDtcblxuICAgIC8vIHN0b3JlIHRoZSBmaXJzdCBpbnB1dCB0byBjYWxjdWxhdGUgdGhlIGRpc3RhbmNlIGFuZCBkaXJlY3Rpb25cbiAgICBpZiAoIXNlc3Npb24uZmlyc3RJbnB1dCkge1xuICAgICAgICBzZXNzaW9uLmZpcnN0SW5wdXQgPSBzaW1wbGVDbG9uZUlucHV0RGF0YShpbnB1dCk7XG4gICAgfVxuXG4gICAgLy8gdG8gY29tcHV0ZSBzY2FsZSBhbmQgcm90YXRpb24gd2UgbmVlZCB0byBzdG9yZSB0aGUgbXVsdGlwbGUgdG91Y2hlc1xuICAgIGlmIChwb2ludGVyc0xlbmd0aCA+IDEgJiYgIXNlc3Npb24uZmlyc3RNdWx0aXBsZSkge1xuICAgICAgICBzZXNzaW9uLmZpcnN0TXVsdGlwbGUgPSBzaW1wbGVDbG9uZUlucHV0RGF0YShpbnB1dCk7XG4gICAgfSBlbHNlIGlmIChwb2ludGVyc0xlbmd0aCA9PT0gMSkge1xuICAgICAgICBzZXNzaW9uLmZpcnN0TXVsdGlwbGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RJbnB1dCA9IHNlc3Npb24uZmlyc3RJbnB1dDtcbiAgICB2YXIgZmlyc3RNdWx0aXBsZSA9IHNlc3Npb24uZmlyc3RNdWx0aXBsZTtcbiAgICB2YXIgb2Zmc2V0Q2VudGVyID0gZmlyc3RNdWx0aXBsZSA/IGZpcnN0TXVsdGlwbGUuY2VudGVyIDogZmlyc3RJbnB1dC5jZW50ZXI7XG5cbiAgICB2YXIgY2VudGVyID0gaW5wdXQuY2VudGVyID0gZ2V0Q2VudGVyKHBvaW50ZXJzKTtcbiAgICBpbnB1dC50aW1lU3RhbXAgPSBub3coKTtcbiAgICBpbnB1dC5kZWx0YVRpbWUgPSBpbnB1dC50aW1lU3RhbXAgLSBmaXJzdElucHV0LnRpbWVTdGFtcDtcblxuICAgIGlucHV0LmFuZ2xlID0gZ2V0QW5nbGUob2Zmc2V0Q2VudGVyLCBjZW50ZXIpO1xuICAgIGlucHV0LmRpc3RhbmNlID0gZ2V0RGlzdGFuY2Uob2Zmc2V0Q2VudGVyLCBjZW50ZXIpO1xuXG4gICAgY29tcHV0ZURlbHRhWFkoc2Vzc2lvbiwgaW5wdXQpO1xuICAgIGlucHV0Lm9mZnNldERpcmVjdGlvbiA9IGdldERpcmVjdGlvbihpbnB1dC5kZWx0YVgsIGlucHV0LmRlbHRhWSk7XG5cbiAgICB2YXIgb3ZlcmFsbFZlbG9jaXR5ID0gZ2V0VmVsb2NpdHkoaW5wdXQuZGVsdGFUaW1lLCBpbnB1dC5kZWx0YVgsIGlucHV0LmRlbHRhWSk7XG4gICAgaW5wdXQub3ZlcmFsbFZlbG9jaXR5WCA9IG92ZXJhbGxWZWxvY2l0eS54O1xuICAgIGlucHV0Lm92ZXJhbGxWZWxvY2l0eVkgPSBvdmVyYWxsVmVsb2NpdHkueTtcbiAgICBpbnB1dC5vdmVyYWxsVmVsb2NpdHkgPSAoYWJzKG92ZXJhbGxWZWxvY2l0eS54KSA+IGFicyhvdmVyYWxsVmVsb2NpdHkueSkpID8gb3ZlcmFsbFZlbG9jaXR5LnggOiBvdmVyYWxsVmVsb2NpdHkueTtcblxuICAgIGlucHV0LnNjYWxlID0gZmlyc3RNdWx0aXBsZSA/IGdldFNjYWxlKGZpcnN0TXVsdGlwbGUucG9pbnRlcnMsIHBvaW50ZXJzKSA6IDE7XG4gICAgaW5wdXQucm90YXRpb24gPSBmaXJzdE11bHRpcGxlID8gZ2V0Um90YXRpb24oZmlyc3RNdWx0aXBsZS5wb2ludGVycywgcG9pbnRlcnMpIDogMDtcblxuICAgIGlucHV0Lm1heFBvaW50ZXJzID0gIXNlc3Npb24ucHJldklucHV0ID8gaW5wdXQucG9pbnRlcnMubGVuZ3RoIDogKChpbnB1dC5wb2ludGVycy5sZW5ndGggPlxuICAgICAgICBzZXNzaW9uLnByZXZJbnB1dC5tYXhQb2ludGVycykgPyBpbnB1dC5wb2ludGVycy5sZW5ndGggOiBzZXNzaW9uLnByZXZJbnB1dC5tYXhQb2ludGVycyk7XG5cbiAgICBjb21wdXRlSW50ZXJ2YWxJbnB1dERhdGEoc2Vzc2lvbiwgaW5wdXQpO1xuXG4gICAgLy8gZmluZCB0aGUgY29ycmVjdCB0YXJnZXRcbiAgICB2YXIgdGFyZ2V0ID0gbWFuYWdlci5lbGVtZW50O1xuICAgIGlmIChoYXNQYXJlbnQoaW5wdXQuc3JjRXZlbnQudGFyZ2V0LCB0YXJnZXQpKSB7XG4gICAgICAgIHRhcmdldCA9IGlucHV0LnNyY0V2ZW50LnRhcmdldDtcbiAgICB9XG4gICAgaW5wdXQudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBjb21wdXRlRGVsdGFYWShzZXNzaW9uLCBpbnB1dCkge1xuICAgIHZhciBjZW50ZXIgPSBpbnB1dC5jZW50ZXI7XG4gICAgdmFyIG9mZnNldCA9IHNlc3Npb24ub2Zmc2V0RGVsdGEgfHwge307XG4gICAgdmFyIHByZXZEZWx0YSA9IHNlc3Npb24ucHJldkRlbHRhIHx8IHt9O1xuICAgIHZhciBwcmV2SW5wdXQgPSBzZXNzaW9uLnByZXZJbnB1dCB8fCB7fTtcblxuICAgIGlmIChpbnB1dC5ldmVudFR5cGUgPT09IElOUFVUX1NUQVJUIHx8IHByZXZJbnB1dC5ldmVudFR5cGUgPT09IElOUFVUX0VORCkge1xuICAgICAgICBwcmV2RGVsdGEgPSBzZXNzaW9uLnByZXZEZWx0YSA9IHtcbiAgICAgICAgICAgIHg6IHByZXZJbnB1dC5kZWx0YVggfHwgMCxcbiAgICAgICAgICAgIHk6IHByZXZJbnB1dC5kZWx0YVkgfHwgMFxuICAgICAgICB9O1xuXG4gICAgICAgIG9mZnNldCA9IHNlc3Npb24ub2Zmc2V0RGVsdGEgPSB7XG4gICAgICAgICAgICB4OiBjZW50ZXIueCxcbiAgICAgICAgICAgIHk6IGNlbnRlci55XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaW5wdXQuZGVsdGFYID0gcHJldkRlbHRhLnggKyAoY2VudGVyLnggLSBvZmZzZXQueCk7XG4gICAgaW5wdXQuZGVsdGFZID0gcHJldkRlbHRhLnkgKyAoY2VudGVyLnkgLSBvZmZzZXQueSk7XG59XG5cbi8qKlxuICogdmVsb2NpdHkgaXMgY2FsY3VsYXRlZCBldmVyeSB4IG1zXG4gKiBAcGFyYW0ge09iamVjdH0gc2Vzc2lvblxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVJbnRlcnZhbElucHV0RGF0YShzZXNzaW9uLCBpbnB1dCkge1xuICAgIHZhciBsYXN0ID0gc2Vzc2lvbi5sYXN0SW50ZXJ2YWwgfHwgaW5wdXQsXG4gICAgICAgIGRlbHRhVGltZSA9IGlucHV0LnRpbWVTdGFtcCAtIGxhc3QudGltZVN0YW1wLFxuICAgICAgICB2ZWxvY2l0eSwgdmVsb2NpdHlYLCB2ZWxvY2l0eVksIGRpcmVjdGlvbjtcblxuICAgIGlmIChpbnB1dC5ldmVudFR5cGUgIT0gSU5QVVRfQ0FOQ0VMICYmIChkZWx0YVRpbWUgPiBDT01QVVRFX0lOVEVSVkFMIHx8IGxhc3QudmVsb2NpdHkgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgdmFyIGRlbHRhWCA9IGlucHV0LmRlbHRhWCAtIGxhc3QuZGVsdGFYO1xuICAgICAgICB2YXIgZGVsdGFZID0gaW5wdXQuZGVsdGFZIC0gbGFzdC5kZWx0YVk7XG5cbiAgICAgICAgdmFyIHYgPSBnZXRWZWxvY2l0eShkZWx0YVRpbWUsIGRlbHRhWCwgZGVsdGFZKTtcbiAgICAgICAgdmVsb2NpdHlYID0gdi54O1xuICAgICAgICB2ZWxvY2l0eVkgPSB2Lnk7XG4gICAgICAgIHZlbG9jaXR5ID0gKGFicyh2LngpID4gYWJzKHYueSkpID8gdi54IDogdi55O1xuICAgICAgICBkaXJlY3Rpb24gPSBnZXREaXJlY3Rpb24oZGVsdGFYLCBkZWx0YVkpO1xuXG4gICAgICAgIHNlc3Npb24ubGFzdEludGVydmFsID0gaW5wdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdXNlIGxhdGVzdCB2ZWxvY2l0eSBpbmZvIGlmIGl0IGRvZXNuJ3Qgb3ZlcnRha2UgYSBtaW5pbXVtIHBlcmlvZFxuICAgICAgICB2ZWxvY2l0eSA9IGxhc3QudmVsb2NpdHk7XG4gICAgICAgIHZlbG9jaXR5WCA9IGxhc3QudmVsb2NpdHlYO1xuICAgICAgICB2ZWxvY2l0eVkgPSBsYXN0LnZlbG9jaXR5WTtcbiAgICAgICAgZGlyZWN0aW9uID0gbGFzdC5kaXJlY3Rpb247XG4gICAgfVxuXG4gICAgaW5wdXQudmVsb2NpdHkgPSB2ZWxvY2l0eTtcbiAgICBpbnB1dC52ZWxvY2l0eVggPSB2ZWxvY2l0eVg7XG4gICAgaW5wdXQudmVsb2NpdHlZID0gdmVsb2NpdHlZO1xuICAgIGlucHV0LmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbn1cblxuLyoqXG4gKiBjcmVhdGUgYSBzaW1wbGUgY2xvbmUgZnJvbSB0aGUgaW5wdXQgdXNlZCBmb3Igc3RvcmFnZSBvZiBmaXJzdElucHV0IGFuZCBmaXJzdE11bHRpcGxlXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAqIEByZXR1cm5zIHtPYmplY3R9IGNsb25lZElucHV0RGF0YVxuICovXG5mdW5jdGlvbiBzaW1wbGVDbG9uZUlucHV0RGF0YShpbnB1dCkge1xuICAgIC8vIG1ha2UgYSBzaW1wbGUgY29weSBvZiB0aGUgcG9pbnRlcnMgYmVjYXVzZSB3ZSB3aWxsIGdldCBhIHJlZmVyZW5jZSBpZiB3ZSBkb24ndFxuICAgIC8vIHdlIG9ubHkgbmVlZCBjbGllbnRYWSBmb3IgdGhlIGNhbGN1bGF0aW9uc1xuICAgIHZhciBwb2ludGVycyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGlucHV0LnBvaW50ZXJzLmxlbmd0aCkge1xuICAgICAgICBwb2ludGVyc1tpXSA9IHtcbiAgICAgICAgICAgIGNsaWVudFg6IHJvdW5kKGlucHV0LnBvaW50ZXJzW2ldLmNsaWVudFgpLFxuICAgICAgICAgICAgY2xpZW50WTogcm91bmQoaW5wdXQucG9pbnRlcnNbaV0uY2xpZW50WSlcbiAgICAgICAgfTtcbiAgICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHRpbWVTdGFtcDogbm93KCksXG4gICAgICAgIHBvaW50ZXJzOiBwb2ludGVycyxcbiAgICAgICAgY2VudGVyOiBnZXRDZW50ZXIocG9pbnRlcnMpLFxuICAgICAgICBkZWx0YVg6IGlucHV0LmRlbHRhWCxcbiAgICAgICAgZGVsdGFZOiBpbnB1dC5kZWx0YVlcbiAgICB9O1xufVxuXG4vKipcbiAqIGdldCB0aGUgY2VudGVyIG9mIGFsbCB0aGUgcG9pbnRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IHBvaW50ZXJzXG4gKiBAcmV0dXJuIHtPYmplY3R9IGNlbnRlciBjb250YWlucyBgeGAgYW5kIGB5YCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdldENlbnRlcihwb2ludGVycykge1xuICAgIHZhciBwb2ludGVyc0xlbmd0aCA9IHBvaW50ZXJzLmxlbmd0aDtcblxuICAgIC8vIG5vIG5lZWQgdG8gbG9vcCB3aGVuIG9ubHkgb25lIHRvdWNoXG4gICAgaWYgKHBvaW50ZXJzTGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiByb3VuZChwb2ludGVyc1swXS5jbGllbnRYKSxcbiAgICAgICAgICAgIHk6IHJvdW5kKHBvaW50ZXJzWzBdLmNsaWVudFkpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHggPSAwLCB5ID0gMCwgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBwb2ludGVyc0xlbmd0aCkge1xuICAgICAgICB4ICs9IHBvaW50ZXJzW2ldLmNsaWVudFg7XG4gICAgICAgIHkgKz0gcG9pbnRlcnNbaV0uY2xpZW50WTtcbiAgICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHJvdW5kKHggLyBwb2ludGVyc0xlbmd0aCksXG4gICAgICAgIHk6IHJvdW5kKHkgLyBwb2ludGVyc0xlbmd0aClcbiAgICB9O1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgdmVsb2NpdHkgYmV0d2VlbiB0d28gcG9pbnRzLiB1bml0IGlzIGluIHB4IHBlciBtcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YVRpbWVcbiAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gKiBAcGFyYW0ge051bWJlcn0geVxuICogQHJldHVybiB7T2JqZWN0fSB2ZWxvY2l0eSBgeGAgYW5kIGB5YFxuICovXG5mdW5jdGlvbiBnZXRWZWxvY2l0eShkZWx0YVRpbWUsIHgsIHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiB4IC8gZGVsdGFUaW1lIHx8IDAsXG4gICAgICAgIHk6IHkgLyBkZWx0YVRpbWUgfHwgMFxuICAgIH07XG59XG5cbi8qKlxuICogZ2V0IHRoZSBkaXJlY3Rpb24gYmV0d2VlbiB0d28gcG9pbnRzXG4gKiBAcGFyYW0ge051bWJlcn0geFxuICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAqIEByZXR1cm4ge051bWJlcn0gZGlyZWN0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldERpcmVjdGlvbih4LCB5KSB7XG4gICAgaWYgKHggPT09IHkpIHtcbiAgICAgICAgcmV0dXJuIERJUkVDVElPTl9OT05FO1xuICAgIH1cblxuICAgIGlmIChhYnMoeCkgPj0gYWJzKHkpKSB7XG4gICAgICAgIHJldHVybiB4IDwgMCA/IERJUkVDVElPTl9MRUZUIDogRElSRUNUSU9OX1JJR0hUO1xuICAgIH1cbiAgICByZXR1cm4geSA8IDAgPyBESVJFQ1RJT05fVVAgOiBESVJFQ1RJT05fRE9XTjtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIGFic29sdXRlIGRpc3RhbmNlIGJldHdlZW4gdHdvIHBvaW50c1xuICogQHBhcmFtIHtPYmplY3R9IHAxIHt4LCB5fVxuICogQHBhcmFtIHtPYmplY3R9IHAyIHt4LCB5fVxuICogQHBhcmFtIHtBcnJheX0gW3Byb3BzXSBjb250YWluaW5nIHggYW5kIHkga2V5c1xuICogQHJldHVybiB7TnVtYmVyfSBkaXN0YW5jZVxuICovXG5mdW5jdGlvbiBnZXREaXN0YW5jZShwMSwgcDIsIHByb3BzKSB7XG4gICAgaWYgKCFwcm9wcykge1xuICAgICAgICBwcm9wcyA9IFBST1BTX1hZO1xuICAgIH1cbiAgICB2YXIgeCA9IHAyW3Byb3BzWzBdXSAtIHAxW3Byb3BzWzBdXSxcbiAgICAgICAgeSA9IHAyW3Byb3BzWzFdXSAtIHAxW3Byb3BzWzFdXTtcblxuICAgIHJldHVybiBNYXRoLnNxcnQoKHggKiB4KSArICh5ICogeSkpO1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgYW5nbGUgYmV0d2VlbiB0d28gY29vcmRpbmF0ZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwMVxuICogQHBhcmFtIHtPYmplY3R9IHAyXG4gKiBAcGFyYW0ge0FycmF5fSBbcHJvcHNdIGNvbnRhaW5pbmcgeCBhbmQgeSBrZXlzXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IGFuZ2xlXG4gKi9cbmZ1bmN0aW9uIGdldEFuZ2xlKHAxLCBwMiwgcHJvcHMpIHtcbiAgICBpZiAoIXByb3BzKSB7XG4gICAgICAgIHByb3BzID0gUFJPUFNfWFk7XG4gICAgfVxuICAgIHZhciB4ID0gcDJbcHJvcHNbMF1dIC0gcDFbcHJvcHNbMF1dLFxuICAgICAgICB5ID0gcDJbcHJvcHNbMV1dIC0gcDFbcHJvcHNbMV1dO1xuICAgIHJldHVybiBNYXRoLmF0YW4yKHksIHgpICogMTgwIC8gTWF0aC5QSTtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIHJvdGF0aW9uIGRlZ3JlZXMgYmV0d2VlbiB0d28gcG9pbnRlcnNldHNcbiAqIEBwYXJhbSB7QXJyYXl9IHN0YXJ0IGFycmF5IG9mIHBvaW50ZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBlbmQgYXJyYXkgb2YgcG9pbnRlcnNcbiAqIEByZXR1cm4ge051bWJlcn0gcm90YXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0Um90YXRpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBnZXRBbmdsZShlbmRbMV0sIGVuZFswXSwgUFJPUFNfQ0xJRU5UX1hZKSArIGdldEFuZ2xlKHN0YXJ0WzFdLCBzdGFydFswXSwgUFJPUFNfQ0xJRU5UX1hZKTtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIHNjYWxlIGZhY3RvciBiZXR3ZWVuIHR3byBwb2ludGVyc2V0c1xuICogbm8gc2NhbGUgaXMgMSwgYW5kIGdvZXMgZG93biB0byAwIHdoZW4gcGluY2hlZCB0b2dldGhlciwgYW5kIGJpZ2dlciB3aGVuIHBpbmNoZWQgb3V0XG4gKiBAcGFyYW0ge0FycmF5fSBzdGFydCBhcnJheSBvZiBwb2ludGVyc1xuICogQHBhcmFtIHtBcnJheX0gZW5kIGFycmF5IG9mIHBvaW50ZXJzXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHNjYWxlXG4gKi9cbmZ1bmN0aW9uIGdldFNjYWxlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gZ2V0RGlzdGFuY2UoZW5kWzBdLCBlbmRbMV0sIFBST1BTX0NMSUVOVF9YWSkgLyBnZXREaXN0YW5jZShzdGFydFswXSwgc3RhcnRbMV0sIFBST1BTX0NMSUVOVF9YWSk7XG59XG5cbnZhciBNT1VTRV9JTlBVVF9NQVAgPSB7XG4gICAgbW91c2Vkb3duOiBJTlBVVF9TVEFSVCxcbiAgICBtb3VzZW1vdmU6IElOUFVUX01PVkUsXG4gICAgbW91c2V1cDogSU5QVVRfRU5EXG59O1xuXG52YXIgTU9VU0VfRUxFTUVOVF9FVkVOVFMgPSAnbW91c2Vkb3duJztcbnZhciBNT1VTRV9XSU5ET1dfRVZFTlRTID0gJ21vdXNlbW92ZSBtb3VzZXVwJztcblxuLyoqXG4gKiBNb3VzZSBldmVudHMgaW5wdXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuZnVuY3Rpb24gTW91c2VJbnB1dCgpIHtcbiAgICB0aGlzLmV2RWwgPSBNT1VTRV9FTEVNRU5UX0VWRU5UUztcbiAgICB0aGlzLmV2V2luID0gTU9VU0VfV0lORE9XX0VWRU5UUztcblxuICAgIHRoaXMucHJlc3NlZCA9IGZhbHNlOyAvLyBtb3VzZWRvd24gc3RhdGVcblxuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoTW91c2VJbnB1dCwgSW5wdXQsIHtcbiAgICAvKipcbiAgICAgKiBoYW5kbGUgbW91c2UgZXZlbnRzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2XG4gICAgICovXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gTUVoYW5kbGVyKGV2KSB7XG4gICAgICAgIHZhciBldmVudFR5cGUgPSBNT1VTRV9JTlBVVF9NQVBbZXYudHlwZV07XG5cbiAgICAgICAgLy8gb24gc3RhcnQgd2Ugd2FudCB0byBoYXZlIHRoZSBsZWZ0IG1vdXNlIGJ1dHRvbiBkb3duXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiBldi5idXR0b24gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucHJlc3NlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfTU9WRSAmJiBldi53aGljaCAhPT0gMSkge1xuICAgICAgICAgICAgZXZlbnRUeXBlID0gSU5QVVRfRU5EO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbW91c2UgbXVzdCBiZSBkb3duXG4gICAgICAgIGlmICghdGhpcy5wcmVzc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICB0aGlzLnByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCBldmVudFR5cGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiBbZXZdLFxuICAgICAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiBbZXZdLFxuICAgICAgICAgICAgcG9pbnRlclR5cGU6IElOUFVUX1RZUEVfTU9VU0UsXG4gICAgICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cbnZhciBQT0lOVEVSX0lOUFVUX01BUCA9IHtcbiAgICBwb2ludGVyZG93bjogSU5QVVRfU1RBUlQsXG4gICAgcG9pbnRlcm1vdmU6IElOUFVUX01PVkUsXG4gICAgcG9pbnRlcnVwOiBJTlBVVF9FTkQsXG4gICAgcG9pbnRlcmNhbmNlbDogSU5QVVRfQ0FOQ0VMLFxuICAgIHBvaW50ZXJvdXQ6IElOUFVUX0NBTkNFTFxufTtcblxuLy8gaW4gSUUxMCB0aGUgcG9pbnRlciB0eXBlcyBpcyBkZWZpbmVkIGFzIGFuIGVudW1cbnZhciBJRTEwX1BPSU5URVJfVFlQRV9FTlVNID0ge1xuICAgIDI6IElOUFVUX1RZUEVfVE9VQ0gsXG4gICAgMzogSU5QVVRfVFlQRV9QRU4sXG4gICAgNDogSU5QVVRfVFlQRV9NT1VTRSxcbiAgICA1OiBJTlBVVF9UWVBFX0tJTkVDVCAvLyBzZWUgaHR0cHM6Ly90d2l0dGVyLmNvbS9qYWNvYnJvc3NpL3N0YXR1cy80ODA1OTY0Mzg0ODk4OTA4MTZcbn07XG5cbnZhciBQT0lOVEVSX0VMRU1FTlRfRVZFTlRTID0gJ3BvaW50ZXJkb3duJztcbnZhciBQT0lOVEVSX1dJTkRPV19FVkVOVFMgPSAncG9pbnRlcm1vdmUgcG9pbnRlcnVwIHBvaW50ZXJjYW5jZWwnO1xuXG4vLyBJRTEwIGhhcyBwcmVmaXhlZCBzdXBwb3J0LCBhbmQgY2FzZS1zZW5zaXRpdmVcbmlmICh3aW5kb3cuTVNQb2ludGVyRXZlbnQgJiYgIXdpbmRvdy5Qb2ludGVyRXZlbnQpIHtcbiAgICBQT0lOVEVSX0VMRU1FTlRfRVZFTlRTID0gJ01TUG9pbnRlckRvd24nO1xuICAgIFBPSU5URVJfV0lORE9XX0VWRU5UUyA9ICdNU1BvaW50ZXJNb3ZlIE1TUG9pbnRlclVwIE1TUG9pbnRlckNhbmNlbCc7XG59XG5cbi8qKlxuICogUG9pbnRlciBldmVudHMgaW5wdXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuZnVuY3Rpb24gUG9pbnRlckV2ZW50SW5wdXQoKSB7XG4gICAgdGhpcy5ldkVsID0gUE9JTlRFUl9FTEVNRU5UX0VWRU5UUztcbiAgICB0aGlzLmV2V2luID0gUE9JTlRFUl9XSU5ET1dfRVZFTlRTO1xuXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMuc3RvcmUgPSAodGhpcy5tYW5hZ2VyLnNlc3Npb24ucG9pbnRlckV2ZW50cyA9IFtdKTtcbn1cblxuaW5oZXJpdChQb2ludGVyRXZlbnRJbnB1dCwgSW5wdXQsIHtcbiAgICAvKipcbiAgICAgKiBoYW5kbGUgbW91c2UgZXZlbnRzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2XG4gICAgICovXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gUEVoYW5kbGVyKGV2KSB7XG4gICAgICAgIHZhciBzdG9yZSA9IHRoaXMuc3RvcmU7XG4gICAgICAgIHZhciByZW1vdmVQb2ludGVyID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIGV2ZW50VHlwZU5vcm1hbGl6ZWQgPSBldi50eXBlLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnbXMnLCAnJyk7XG4gICAgICAgIHZhciBldmVudFR5cGUgPSBQT0lOVEVSX0lOUFVUX01BUFtldmVudFR5cGVOb3JtYWxpemVkXTtcbiAgICAgICAgdmFyIHBvaW50ZXJUeXBlID0gSUUxMF9QT0lOVEVSX1RZUEVfRU5VTVtldi5wb2ludGVyVHlwZV0gfHwgZXYucG9pbnRlclR5cGU7XG5cbiAgICAgICAgdmFyIGlzVG91Y2ggPSAocG9pbnRlclR5cGUgPT0gSU5QVVRfVFlQRV9UT1VDSCk7XG5cbiAgICAgICAgLy8gZ2V0IGluZGV4IG9mIHRoZSBldmVudCBpbiB0aGUgc3RvcmVcbiAgICAgICAgdmFyIHN0b3JlSW5kZXggPSBpbkFycmF5KHN0b3JlLCBldi5wb2ludGVySWQsICdwb2ludGVySWQnKTtcblxuICAgICAgICAvLyBzdGFydCBhbmQgbW91c2UgbXVzdCBiZSBkb3duXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiAoZXYuYnV0dG9uID09PSAwIHx8IGlzVG91Y2gpKSB7XG4gICAgICAgICAgICBpZiAoc3RvcmVJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICBzdG9yZS5wdXNoKGV2KTtcbiAgICAgICAgICAgICAgICBzdG9yZUluZGV4ID0gc3RvcmUubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChldmVudFR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSkge1xuICAgICAgICAgICAgcmVtb3ZlUG9pbnRlciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpdCBub3QgZm91bmQsIHNvIHRoZSBwb2ludGVyIGhhc24ndCBiZWVuIGRvd24gKHNvIGl0J3MgcHJvYmFibHkgYSBob3ZlcilcbiAgICAgICAgaWYgKHN0b3JlSW5kZXggPCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgdGhlIGV2ZW50IGluIHRoZSBzdG9yZVxuICAgICAgICBzdG9yZVtzdG9yZUluZGV4XSA9IGV2O1xuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCBldmVudFR5cGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiBzdG9yZSxcbiAgICAgICAgICAgIGNoYW5nZWRQb2ludGVyczogW2V2XSxcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiBwb2ludGVyVHlwZSxcbiAgICAgICAgICAgIHNyY0V2ZW50OiBldlxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocmVtb3ZlUG9pbnRlcikge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGZyb20gdGhlIHN0b3JlXG4gICAgICAgICAgICBzdG9yZS5zcGxpY2Uoc3RvcmVJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxudmFyIFNJTkdMRV9UT1VDSF9JTlBVVF9NQVAgPSB7XG4gICAgdG91Y2hzdGFydDogSU5QVVRfU1RBUlQsXG4gICAgdG91Y2htb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIHRvdWNoZW5kOiBJTlBVVF9FTkQsXG4gICAgdG91Y2hjYW5jZWw6IElOUFVUX0NBTkNFTFxufTtcblxudmFyIFNJTkdMRV9UT1VDSF9UQVJHRVRfRVZFTlRTID0gJ3RvdWNoc3RhcnQnO1xudmFyIFNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTID0gJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJztcblxuLyoqXG4gKiBUb3VjaCBldmVudHMgaW5wdXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuZnVuY3Rpb24gU2luZ2xlVG91Y2hJbnB1dCgpIHtcbiAgICB0aGlzLmV2VGFyZ2V0ID0gU0lOR0xFX1RPVUNIX1RBUkdFVF9FVkVOVFM7XG4gICAgdGhpcy5ldldpbiA9IFNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTO1xuICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChTaW5nbGVUb3VjaElucHV0LCBJbnB1dCwge1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIFRFaGFuZGxlcihldikge1xuICAgICAgICB2YXIgdHlwZSA9IFNJTkdMRV9UT1VDSF9JTlBVVF9NQVBbZXYudHlwZV07XG5cbiAgICAgICAgLy8gc2hvdWxkIHdlIGhhbmRsZSB0aGUgdG91Y2ggZXZlbnRzP1xuICAgICAgICBpZiAodHlwZSA9PT0gSU5QVVRfU1RBUlQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuc3RhcnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdWNoZXMgPSBub3JtYWxpemVTaW5nbGVUb3VjaGVzLmNhbGwodGhpcywgZXYsIHR5cGUpO1xuXG4gICAgICAgIC8vIHdoZW4gZG9uZSwgcmVzZXQgdGhlIHN0YXJ0ZWQgc3RhdGVcbiAgICAgICAgaWYgKHR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSAmJiB0b3VjaGVzWzBdLmxlbmd0aCAtIHRvdWNoZXNbMV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCB0eXBlLCB7XG4gICAgICAgICAgICBwb2ludGVyczogdG91Y2hlc1swXSxcbiAgICAgICAgICAgIGNoYW5nZWRQb2ludGVyczogdG91Y2hlc1sxXSxcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiBJTlBVVF9UWVBFX1RPVUNILFxuICAgICAgICAgICAgc3JjRXZlbnQ6IGV2XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIEB0aGlzIHtUb3VjaElucHV0fVxuICogQHBhcmFtIHtPYmplY3R9IGV2XG4gKiBAcGFyYW0ge051bWJlcn0gdHlwZSBmbGFnXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfEFycmF5fSBbYWxsLCBjaGFuZ2VkXVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVTaW5nbGVUb3VjaGVzKGV2LCB0eXBlKSB7XG4gICAgdmFyIGFsbCA9IHRvQXJyYXkoZXYudG91Y2hlcyk7XG4gICAgdmFyIGNoYW5nZWQgPSB0b0FycmF5KGV2LmNoYW5nZWRUb3VjaGVzKTtcblxuICAgIGlmICh0eXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcbiAgICAgICAgYWxsID0gdW5pcXVlQXJyYXkoYWxsLmNvbmNhdChjaGFuZ2VkKSwgJ2lkZW50aWZpZXInLCB0cnVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW2FsbCwgY2hhbmdlZF07XG59XG5cbnZhciBUT1VDSF9JTlBVVF9NQVAgPSB7XG4gICAgdG91Y2hzdGFydDogSU5QVVRfU1RBUlQsXG4gICAgdG91Y2htb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIHRvdWNoZW5kOiBJTlBVVF9FTkQsXG4gICAgdG91Y2hjYW5jZWw6IElOUFVUX0NBTkNFTFxufTtcblxudmFyIFRPVUNIX1RBUkdFVF9FVkVOVFMgPSAndG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWwnO1xuXG4vKipcbiAqIE11bHRpLXVzZXIgdG91Y2ggZXZlbnRzIGlucHV0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIElucHV0XG4gKi9cbmZ1bmN0aW9uIFRvdWNoSW5wdXQoKSB7XG4gICAgdGhpcy5ldlRhcmdldCA9IFRPVUNIX1RBUkdFVF9FVkVOVFM7XG4gICAgdGhpcy50YXJnZXRJZHMgPSB7fTtcblxuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoVG91Y2hJbnB1dCwgSW5wdXQsIHtcbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBNVEVoYW5kbGVyKGV2KSB7XG4gICAgICAgIHZhciB0eXBlID0gVE9VQ0hfSU5QVVRfTUFQW2V2LnR5cGVdO1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGdldFRvdWNoZXMuY2FsbCh0aGlzLCBldiwgdHlwZSk7XG4gICAgICAgIGlmICghdG91Y2hlcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIHR5cGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiB0b3VjaGVzWzBdLFxuICAgICAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiB0b3VjaGVzWzFdLFxuICAgICAgICAgICAgcG9pbnRlclR5cGU6IElOUFVUX1RZUEVfVE9VQ0gsXG4gICAgICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogQHRoaXMge1RvdWNoSW5wdXR9XG4gKiBAcGFyYW0ge09iamVjdH0gZXZcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eXBlIGZsYWdcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR8QXJyYXl9IFthbGwsIGNoYW5nZWRdXG4gKi9cbmZ1bmN0aW9uIGdldFRvdWNoZXMoZXYsIHR5cGUpIHtcbiAgICB2YXIgYWxsVG91Y2hlcyA9IHRvQXJyYXkoZXYudG91Y2hlcyk7XG4gICAgdmFyIHRhcmdldElkcyA9IHRoaXMudGFyZ2V0SWRzO1xuXG4gICAgLy8gd2hlbiB0aGVyZSBpcyBvbmx5IG9uZSB0b3VjaCwgdGhlIHByb2Nlc3MgY2FuIGJlIHNpbXBsaWZpZWRcbiAgICBpZiAodHlwZSAmIChJTlBVVF9TVEFSVCB8IElOUFVUX01PVkUpICYmIGFsbFRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHRhcmdldElkc1thbGxUb3VjaGVzWzBdLmlkZW50aWZpZXJdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIFthbGxUb3VjaGVzLCBhbGxUb3VjaGVzXTtcbiAgICB9XG5cbiAgICB2YXIgaSxcbiAgICAgICAgdGFyZ2V0VG91Y2hlcyxcbiAgICAgICAgY2hhbmdlZFRvdWNoZXMgPSB0b0FycmF5KGV2LmNoYW5nZWRUb3VjaGVzKSxcbiAgICAgICAgY2hhbmdlZFRhcmdldFRvdWNoZXMgPSBbXSxcbiAgICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG5cbiAgICAvLyBnZXQgdGFyZ2V0IHRvdWNoZXMgZnJvbSB0b3VjaGVzXG4gICAgdGFyZ2V0VG91Y2hlcyA9IGFsbFRvdWNoZXMuZmlsdGVyKGZ1bmN0aW9uKHRvdWNoKSB7XG4gICAgICAgIHJldHVybiBoYXNQYXJlbnQodG91Y2gudGFyZ2V0LCB0YXJnZXQpO1xuICAgIH0pO1xuXG4gICAgLy8gY29sbGVjdCB0b3VjaGVzXG4gICAgaWYgKHR5cGUgPT09IElOUFVUX1NUQVJUKSB7XG4gICAgICAgIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHRhcmdldFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0YXJnZXRJZHNbdGFyZ2V0VG91Y2hlc1tpXS5pZGVudGlmaWVyXSA9IHRydWU7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgY2hhbmdlZCB0b3VjaGVzIHRvIG9ubHkgY29udGFpbiB0b3VjaGVzIHRoYXQgZXhpc3QgaW4gdGhlIGNvbGxlY3RlZCB0YXJnZXQgaWRzXG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBjaGFuZ2VkVG91Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRhcmdldElkc1tjaGFuZ2VkVG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICAgICAgY2hhbmdlZFRhcmdldFRvdWNoZXMucHVzaChjaGFuZ2VkVG91Y2hlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGVhbnVwIHJlbW92ZWQgdG91Y2hlc1xuICAgICAgICBpZiAodHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpKSB7XG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0SWRzW2NoYW5nZWRUb3VjaGVzW2ldLmlkZW50aWZpZXJdO1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG5cbiAgICBpZiAoIWNoYW5nZWRUYXJnZXRUb3VjaGVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIFtcbiAgICAgICAgLy8gbWVyZ2UgdGFyZ2V0VG91Y2hlcyB3aXRoIGNoYW5nZWRUYXJnZXRUb3VjaGVzIHNvIGl0IGNvbnRhaW5zIEFMTCB0b3VjaGVzLCBpbmNsdWRpbmcgJ2VuZCcgYW5kICdjYW5jZWwnXG4gICAgICAgIHVuaXF1ZUFycmF5KHRhcmdldFRvdWNoZXMuY29uY2F0KGNoYW5nZWRUYXJnZXRUb3VjaGVzKSwgJ2lkZW50aWZpZXInLCB0cnVlKSxcbiAgICAgICAgY2hhbmdlZFRhcmdldFRvdWNoZXNcbiAgICBdO1xufVxuXG4vKipcbiAqIENvbWJpbmVkIHRvdWNoIGFuZCBtb3VzZSBpbnB1dFxuICpcbiAqIFRvdWNoIGhhcyBhIGhpZ2hlciBwcmlvcml0eSB0aGVuIG1vdXNlLCBhbmQgd2hpbGUgdG91Y2hpbmcgbm8gbW91c2UgZXZlbnRzIGFyZSBhbGxvd2VkLlxuICogVGhpcyBiZWNhdXNlIHRvdWNoIGRldmljZXMgYWxzbyBlbWl0IG1vdXNlIGV2ZW50cyB3aGlsZSBkb2luZyBhIHRvdWNoLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuXG52YXIgREVEVVBfVElNRU9VVCA9IDI1MDA7XG52YXIgREVEVVBfRElTVEFOQ0UgPSAyNTtcblxuZnVuY3Rpb24gVG91Y2hNb3VzZUlucHV0KCkge1xuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB2YXIgaGFuZGxlciA9IGJpbmRGbih0aGlzLmhhbmRsZXIsIHRoaXMpO1xuICAgIHRoaXMudG91Y2ggPSBuZXcgVG91Y2hJbnB1dCh0aGlzLm1hbmFnZXIsIGhhbmRsZXIpO1xuICAgIHRoaXMubW91c2UgPSBuZXcgTW91c2VJbnB1dCh0aGlzLm1hbmFnZXIsIGhhbmRsZXIpO1xuXG4gICAgdGhpcy5wcmltYXJ5VG91Y2ggPSBudWxsO1xuICAgIHRoaXMubGFzdFRvdWNoZXMgPSBbXTtcbn1cblxuaW5oZXJpdChUb3VjaE1vdXNlSW5wdXQsIElucHV0LCB7XG4gICAgLyoqXG4gICAgICogaGFuZGxlIG1vdXNlIGFuZCB0b3VjaCBldmVudHNcbiAgICAgKiBAcGFyYW0ge0hhbW1lcn0gbWFuYWdlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dEV2ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxuICAgICAqL1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIFRNRWhhbmRsZXIobWFuYWdlciwgaW5wdXRFdmVudCwgaW5wdXREYXRhKSB7XG4gICAgICAgIHZhciBpc1RvdWNoID0gKGlucHV0RGF0YS5wb2ludGVyVHlwZSA9PSBJTlBVVF9UWVBFX1RPVUNIKSxcbiAgICAgICAgICAgIGlzTW91c2UgPSAoaW5wdXREYXRhLnBvaW50ZXJUeXBlID09IElOUFVUX1RZUEVfTU9VU0UpO1xuXG4gICAgICAgIGlmIChpc01vdXNlICYmIGlucHV0RGF0YS5zb3VyY2VDYXBhYmlsaXRpZXMgJiYgaW5wdXREYXRhLnNvdXJjZUNhcGFiaWxpdGllcy5maXJlc1RvdWNoRXZlbnRzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3aGVuIHdlJ3JlIGluIGEgdG91Y2ggZXZlbnQsIHJlY29yZCB0b3VjaGVzIHRvICBkZS1kdXBlIHN5bnRoZXRpYyBtb3VzZSBldmVudFxuICAgICAgICBpZiAoaXNUb3VjaCkge1xuICAgICAgICAgICAgcmVjb3JkVG91Y2hlcy5jYWxsKHRoaXMsIGlucHV0RXZlbnQsIGlucHV0RGF0YSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNNb3VzZSAmJiBpc1N5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgaW5wdXREYXRhKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWxsYmFjayhtYW5hZ2VyLCBpbnB1dEV2ZW50LCBpbnB1dERhdGEpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZW1vdmUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAqL1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMudG91Y2guZGVzdHJveSgpO1xuICAgICAgICB0aGlzLm1vdXNlLmRlc3Ryb3koKTtcbiAgICB9XG59KTtcblxuZnVuY3Rpb24gcmVjb3JkVG91Y2hlcyhldmVudFR5cGUsIGV2ZW50RGF0YSkge1xuICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCkge1xuICAgICAgICB0aGlzLnByaW1hcnlUb3VjaCA9IGV2ZW50RGF0YS5jaGFuZ2VkUG9pbnRlcnNbMF0uaWRlbnRpZmllcjtcbiAgICAgICAgc2V0TGFzdFRvdWNoLmNhbGwodGhpcywgZXZlbnREYXRhKTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpKSB7XG4gICAgICAgIHNldExhc3RUb3VjaC5jYWxsKHRoaXMsIGV2ZW50RGF0YSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRMYXN0VG91Y2goZXZlbnREYXRhKSB7XG4gICAgdmFyIHRvdWNoID0gZXZlbnREYXRhLmNoYW5nZWRQb2ludGVyc1swXTtcblxuICAgIGlmICh0b3VjaC5pZGVudGlmaWVyID09PSB0aGlzLnByaW1hcnlUb3VjaCkge1xuICAgICAgICB2YXIgbGFzdFRvdWNoID0ge3g6IHRvdWNoLmNsaWVudFgsIHk6IHRvdWNoLmNsaWVudFl9O1xuICAgICAgICB0aGlzLmxhc3RUb3VjaGVzLnB1c2gobGFzdFRvdWNoKTtcbiAgICAgICAgdmFyIGx0cyA9IHRoaXMubGFzdFRvdWNoZXM7XG4gICAgICAgIHZhciByZW1vdmVMYXN0VG91Y2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpID0gbHRzLmluZGV4T2YobGFzdFRvdWNoKTtcbiAgICAgICAgICAgIGlmIChpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBsdHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzZXRUaW1lb3V0KHJlbW92ZUxhc3RUb3VjaCwgREVEVVBfVElNRU9VVCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc1N5bnRoZXRpY0V2ZW50KGV2ZW50RGF0YSkge1xuICAgIHZhciB4ID0gZXZlbnREYXRhLnNyY0V2ZW50LmNsaWVudFgsIHkgPSBldmVudERhdGEuc3JjRXZlbnQuY2xpZW50WTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGFzdFRvdWNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLmxhc3RUb3VjaGVzW2ldO1xuICAgICAgICB2YXIgZHggPSBNYXRoLmFicyh4IC0gdC54KSwgZHkgPSBNYXRoLmFicyh5IC0gdC55KTtcbiAgICAgICAgaWYgKGR4IDw9IERFRFVQX0RJU1RBTkNFICYmIGR5IDw9IERFRFVQX0RJU1RBTkNFKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBQUkVGSVhFRF9UT1VDSF9BQ1RJT04gPSBwcmVmaXhlZChURVNUX0VMRU1FTlQuc3R5bGUsICd0b3VjaEFjdGlvbicpO1xudmFyIE5BVElWRV9UT1VDSF9BQ1RJT04gPSBQUkVGSVhFRF9UT1VDSF9BQ1RJT04gIT09IHVuZGVmaW5lZDtcblxuLy8gbWFnaWNhbCB0b3VjaEFjdGlvbiB2YWx1ZVxudmFyIFRPVUNIX0FDVElPTl9DT01QVVRFID0gJ2NvbXB1dGUnO1xudmFyIFRPVUNIX0FDVElPTl9BVVRPID0gJ2F1dG8nO1xudmFyIFRPVUNIX0FDVElPTl9NQU5JUFVMQVRJT04gPSAnbWFuaXB1bGF0aW9uJzsgLy8gbm90IGltcGxlbWVudGVkXG52YXIgVE9VQ0hfQUNUSU9OX05PTkUgPSAnbm9uZSc7XG52YXIgVE9VQ0hfQUNUSU9OX1BBTl9YID0gJ3Bhbi14JztcbnZhciBUT1VDSF9BQ1RJT05fUEFOX1kgPSAncGFuLXknO1xudmFyIFRPVUNIX0FDVElPTl9NQVAgPSBnZXRUb3VjaEFjdGlvblByb3BzKCk7XG5cbi8qKlxuICogVG91Y2ggQWN0aW9uXG4gKiBzZXRzIHRoZSB0b3VjaEFjdGlvbiBwcm9wZXJ0eSBvciB1c2VzIHRoZSBqcyBhbHRlcm5hdGl2ZVxuICogQHBhcmFtIHtNYW5hZ2VyfSBtYW5hZ2VyXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBUb3VjaEFjdGlvbihtYW5hZ2VyLCB2YWx1ZSkge1xuICAgIHRoaXMubWFuYWdlciA9IG1hbmFnZXI7XG4gICAgdGhpcy5zZXQodmFsdWUpO1xufVxuXG5Ub3VjaEFjdGlvbi5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogc2V0IHRoZSB0b3VjaEFjdGlvbiB2YWx1ZSBvbiB0aGUgZWxlbWVudCBvciBlbmFibGUgdGhlIHBvbHlmaWxsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAvLyBmaW5kIG91dCB0aGUgdG91Y2gtYWN0aW9uIGJ5IHRoZSBldmVudCBoYW5kbGVyc1xuICAgICAgICBpZiAodmFsdWUgPT0gVE9VQ0hfQUNUSU9OX0NPTVBVVEUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5jb21wdXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTkFUSVZFX1RPVUNIX0FDVElPTiAmJiB0aGlzLm1hbmFnZXIuZWxlbWVudC5zdHlsZSAmJiBUT1VDSF9BQ1RJT05fTUFQW3ZhbHVlXSkge1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVsZW1lbnQuc3R5bGVbUFJFRklYRURfVE9VQ0hfQUNUSU9OXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IHZhbHVlLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBqdXN0IHJlLXNldCB0aGUgdG91Y2hBY3Rpb24gdmFsdWVcbiAgICAgKi9cbiAgICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNldCh0aGlzLm1hbmFnZXIub3B0aW9ucy50b3VjaEFjdGlvbik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNvbXB1dGUgdGhlIHZhbHVlIGZvciB0aGUgdG91Y2hBY3Rpb24gcHJvcGVydHkgYmFzZWQgb24gdGhlIHJlY29nbml6ZXIncyBzZXR0aW5nc1xuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHZhbHVlXG4gICAgICovXG4gICAgY29tcHV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhY3Rpb25zID0gW107XG4gICAgICAgIGVhY2godGhpcy5tYW5hZ2VyLnJlY29nbml6ZXJzLCBmdW5jdGlvbihyZWNvZ25pemVyKSB7XG4gICAgICAgICAgICBpZiAoYm9vbE9yRm4ocmVjb2duaXplci5vcHRpb25zLmVuYWJsZSwgW3JlY29nbml6ZXJdKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zLmNvbmNhdChyZWNvZ25pemVyLmdldFRvdWNoQWN0aW9uKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNsZWFuVG91Y2hBY3Rpb25zKGFjdGlvbnMuam9pbignICcpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdGhpcyBtZXRob2QgaXMgY2FsbGVkIG9uIGVhY2ggaW5wdXQgY3ljbGUgYW5kIHByb3ZpZGVzIHRoZSBwcmV2ZW50aW5nIG9mIHRoZSBicm93c2VyIGJlaGF2aW9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICovXG4gICAgcHJldmVudERlZmF1bHRzOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgc3JjRXZlbnQgPSBpbnB1dC5zcmNFdmVudDtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGlucHV0Lm9mZnNldERpcmVjdGlvbjtcblxuICAgICAgICAvLyBpZiB0aGUgdG91Y2ggYWN0aW9uIGRpZCBwcmV2ZW50ZWQgb25jZSB0aGlzIHNlc3Npb25cbiAgICAgICAgaWYgKHRoaXMubWFuYWdlci5zZXNzaW9uLnByZXZlbnRlZCkge1xuICAgICAgICAgICAgc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICB2YXIgaGFzTm9uZSA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9OT05FKSAmJiAhVE9VQ0hfQUNUSU9OX01BUFtUT1VDSF9BQ1RJT05fTk9ORV07XG4gICAgICAgIHZhciBoYXNQYW5ZID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9ZKSAmJiAhVE9VQ0hfQUNUSU9OX01BUFtUT1VDSF9BQ1RJT05fUEFOX1ldO1xuICAgICAgICB2YXIgaGFzUGFuWCA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9QQU5fWCkgJiYgIVRPVUNIX0FDVElPTl9NQVBbVE9VQ0hfQUNUSU9OX1BBTl9YXTtcblxuICAgICAgICBpZiAoaGFzTm9uZSkge1xuICAgICAgICAgICAgLy9kbyBub3QgcHJldmVudCBkZWZhdWx0cyBpZiB0aGlzIGlzIGEgdGFwIGdlc3R1cmVcblxuICAgICAgICAgICAgdmFyIGlzVGFwUG9pbnRlciA9IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA9PT0gMTtcbiAgICAgICAgICAgIHZhciBpc1RhcE1vdmVtZW50ID0gaW5wdXQuZGlzdGFuY2UgPCAyO1xuICAgICAgICAgICAgdmFyIGlzVGFwVG91Y2hUaW1lID0gaW5wdXQuZGVsdGFUaW1lIDwgMjUwO1xuXG4gICAgICAgICAgICBpZiAoaXNUYXBQb2ludGVyICYmIGlzVGFwTW92ZW1lbnQgJiYgaXNUYXBUb3VjaFRpbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzUGFuWCAmJiBoYXNQYW5ZKSB7XG4gICAgICAgICAgICAvLyBgcGFuLXggcGFuLXlgIG1lYW5zIGJyb3dzZXIgaGFuZGxlcyBhbGwgc2Nyb2xsaW5nL3Bhbm5pbmcsIGRvIG5vdCBwcmV2ZW50XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzTm9uZSB8fFxuICAgICAgICAgICAgKGhhc1BhblkgJiYgZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHx8XG4gICAgICAgICAgICAoaGFzUGFuWCAmJiBkaXJlY3Rpb24gJiBESVJFQ1RJT05fVkVSVElDQUwpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmV2ZW50U3JjKHNyY0V2ZW50KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYWxsIHByZXZlbnREZWZhdWx0IHRvIHByZXZlbnQgdGhlIGJyb3dzZXIncyBkZWZhdWx0IGJlaGF2aW9yIChzY3JvbGxpbmcgaW4gbW9zdCBjYXNlcylcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3JjRXZlbnRcbiAgICAgKi9cbiAgICBwcmV2ZW50U3JjOiBmdW5jdGlvbihzcmNFdmVudCkge1xuICAgICAgICB0aGlzLm1hbmFnZXIuc2Vzc2lvbi5wcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICBzcmNFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbn07XG5cbi8qKlxuICogd2hlbiB0aGUgdG91Y2hBY3Rpb25zIGFyZSBjb2xsZWN0ZWQgdGhleSBhcmUgbm90IGEgdmFsaWQgdmFsdWUsIHNvIHdlIG5lZWQgdG8gY2xlYW4gdGhpbmdzIHVwLiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYWN0aW9uc1xuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGNsZWFuVG91Y2hBY3Rpb25zKGFjdGlvbnMpIHtcbiAgICAvLyBub25lXG4gICAgaWYgKGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9OT05FKSkge1xuICAgICAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX05PTkU7XG4gICAgfVxuXG4gICAgdmFyIGhhc1BhblggPSBpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fUEFOX1gpO1xuICAgIHZhciBoYXNQYW5ZID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9ZKTtcblxuICAgIC8vIGlmIGJvdGggcGFuLXggYW5kIHBhbi15IGFyZSBzZXQgKGRpZmZlcmVudCByZWNvZ25pemVyc1xuICAgIC8vIGZvciBkaWZmZXJlbnQgZGlyZWN0aW9ucywgZS5nLiBob3Jpem9udGFsIHBhbiBidXQgdmVydGljYWwgc3dpcGU/KVxuICAgIC8vIHdlIG5lZWQgbm9uZSAoYXMgb3RoZXJ3aXNlIHdpdGggcGFuLXggcGFuLXkgY29tYmluZWQgbm9uZSBvZiB0aGVzZVxuICAgIC8vIHJlY29nbml6ZXJzIHdpbGwgd29yaywgc2luY2UgdGhlIGJyb3dzZXIgd291bGQgaGFuZGxlIGFsbCBwYW5uaW5nXG4gICAgaWYgKGhhc1BhblggJiYgaGFzUGFuWSkge1xuICAgICAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX05PTkU7XG4gICAgfVxuXG4gICAgLy8gcGFuLXggT1IgcGFuLXlcbiAgICBpZiAoaGFzUGFuWCB8fCBoYXNQYW5ZKSB7XG4gICAgICAgIHJldHVybiBoYXNQYW5YID8gVE9VQ0hfQUNUSU9OX1BBTl9YIDogVE9VQ0hfQUNUSU9OX1BBTl9ZO1xuICAgIH1cblxuICAgIC8vIG1hbmlwdWxhdGlvblxuICAgIGlmIChpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OKSkge1xuICAgICAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTjtcbiAgICB9XG5cbiAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX0FVVE87XG59XG5cbmZ1bmN0aW9uIGdldFRvdWNoQWN0aW9uUHJvcHMoKSB7XG4gICAgaWYgKCFOQVRJVkVfVE9VQ0hfQUNUSU9OKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHRvdWNoTWFwID0ge307XG4gICAgdmFyIGNzc1N1cHBvcnRzID0gd2luZG93LkNTUyAmJiB3aW5kb3cuQ1NTLnN1cHBvcnRzO1xuICAgIFsnYXV0bycsICdtYW5pcHVsYXRpb24nLCAncGFuLXknLCAncGFuLXgnLCAncGFuLXggcGFuLXknLCAnbm9uZSddLmZvckVhY2goZnVuY3Rpb24odmFsKSB7XG5cbiAgICAgICAgLy8gSWYgY3NzLnN1cHBvcnRzIGlzIG5vdCBzdXBwb3J0ZWQgYnV0IHRoZXJlIGlzIG5hdGl2ZSB0b3VjaC1hY3Rpb24gYXNzdW1lIGl0IHN1cHBvcnRzXG4gICAgICAgIC8vIGFsbCB2YWx1ZXMuIFRoaXMgaXMgdGhlIGNhc2UgZm9yIElFIDEwIGFuZCAxMS5cbiAgICAgICAgdG91Y2hNYXBbdmFsXSA9IGNzc1N1cHBvcnRzID8gd2luZG93LkNTUy5zdXBwb3J0cygndG91Y2gtYWN0aW9uJywgdmFsKSA6IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRvdWNoTWFwO1xufVxuXG4vKipcbiAqIFJlY29nbml6ZXIgZmxvdyBleHBsYWluZWQ7ICpcbiAqIEFsbCByZWNvZ25pemVycyBoYXZlIHRoZSBpbml0aWFsIHN0YXRlIG9mIFBPU1NJQkxFIHdoZW4gYSBpbnB1dCBzZXNzaW9uIHN0YXJ0cy5cbiAqIFRoZSBkZWZpbml0aW9uIG9mIGEgaW5wdXQgc2Vzc2lvbiBpcyBmcm9tIHRoZSBmaXJzdCBpbnB1dCB1bnRpbCB0aGUgbGFzdCBpbnB1dCwgd2l0aCBhbGwgaXQncyBtb3ZlbWVudCBpbiBpdC4gKlxuICogRXhhbXBsZSBzZXNzaW9uIGZvciBtb3VzZS1pbnB1dDogbW91c2Vkb3duIC0+IG1vdXNlbW92ZSAtPiBtb3VzZXVwXG4gKlxuICogT24gZWFjaCByZWNvZ25pemluZyBjeWNsZSAoc2VlIE1hbmFnZXIucmVjb2duaXplKSB0aGUgLnJlY29nbml6ZSgpIG1ldGhvZCBpcyBleGVjdXRlZFxuICogd2hpY2ggZGV0ZXJtaW5lcyB3aXRoIHN0YXRlIGl0IHNob3VsZCBiZS5cbiAqXG4gKiBJZiB0aGUgcmVjb2duaXplciBoYXMgdGhlIHN0YXRlIEZBSUxFRCwgQ0FOQ0VMTEVEIG9yIFJFQ09HTklaRUQgKGVxdWFscyBFTkRFRCksIGl0IGlzIHJlc2V0IHRvXG4gKiBQT1NTSUJMRSB0byBnaXZlIGl0IGFub3RoZXIgY2hhbmdlIG9uIHRoZSBuZXh0IGN5Y2xlLlxuICpcbiAqICAgICAgICAgICAgICAgUG9zc2libGVcbiAqICAgICAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICArLS0tLS0rLS0tLS0tLS0tLS0tLS0tK1xuICogICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgfFxuICogICAgICArLS0tLS0rLS0tLS0rICAgICAgICAgICAgICAgfFxuICogICAgICB8ICAgICAgICAgICB8ICAgICAgICAgICAgICAgfFxuICogICBGYWlsZWQgICAgICBDYW5jZWxsZWQgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tKy0tLS0tLStcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgICBSZWNvZ25pemVkICAgICAgIEJlZ2FuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYW5nZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbmRlZC9SZWNvZ25pemVkXG4gKi9cbnZhciBTVEFURV9QT1NTSUJMRSA9IDE7XG52YXIgU1RBVEVfQkVHQU4gPSAyO1xudmFyIFNUQVRFX0NIQU5HRUQgPSA0O1xudmFyIFNUQVRFX0VOREVEID0gODtcbnZhciBTVEFURV9SRUNPR05JWkVEID0gU1RBVEVfRU5ERUQ7XG52YXIgU1RBVEVfQ0FOQ0VMTEVEID0gMTY7XG52YXIgU1RBVEVfRkFJTEVEID0gMzI7XG5cbi8qKlxuICogUmVjb2duaXplclxuICogRXZlcnkgcmVjb2duaXplciBuZWVkcyB0byBleHRlbmQgZnJvbSB0aGlzIGNsYXNzLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICovXG5mdW5jdGlvbiBSZWNvZ25pemVyKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBhc3NpZ24oe30sIHRoaXMuZGVmYXVsdHMsIG9wdGlvbnMgfHwge30pO1xuXG4gICAgdGhpcy5pZCA9IHVuaXF1ZUlkKCk7XG5cbiAgICB0aGlzLm1hbmFnZXIgPSBudWxsO1xuXG4gICAgLy8gZGVmYXVsdCBpcyBlbmFibGUgdHJ1ZVxuICAgIHRoaXMub3B0aW9ucy5lbmFibGUgPSBpZlVuZGVmaW5lZCh0aGlzLm9wdGlvbnMuZW5hYmxlLCB0cnVlKTtcblxuICAgIHRoaXMuc3RhdGUgPSBTVEFURV9QT1NTSUJMRTtcblxuICAgIHRoaXMuc2ltdWx0YW5lb3VzID0ge307XG4gICAgdGhpcy5yZXF1aXJlRmFpbCA9IFtdO1xufVxuXG5SZWNvZ25pemVyLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBAdmlydHVhbFxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgZGVmYXVsdHM6IHt9LFxuXG4gICAgLyoqXG4gICAgICogc2V0IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge1JlY29nbml6ZXJ9XG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIGFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIGFsc28gdXBkYXRlIHRoZSB0b3VjaEFjdGlvbiwgaW4gY2FzZSBzb21ldGhpbmcgY2hhbmdlZCBhYm91dCB0aGUgZGlyZWN0aW9ucy9lbmFibGVkIHN0YXRlXG4gICAgICAgIHRoaXMubWFuYWdlciAmJiB0aGlzLm1hbmFnZXIudG91Y2hBY3Rpb24udXBkYXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZWNvZ25pemUgc2ltdWx0YW5lb3VzIHdpdGggYW4gb3RoZXIgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG4gICAgcmVjb2duaXplV2l0aDogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdyZWNvZ25pemVXaXRoJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNpbXVsdGFuZW91cyA9IHRoaXMuc2ltdWx0YW5lb3VzO1xuICAgICAgICBvdGhlclJlY29nbml6ZXIgPSBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgdGhpcyk7XG4gICAgICAgIGlmICghc2ltdWx0YW5lb3VzW290aGVyUmVjb2duaXplci5pZF0pIHtcbiAgICAgICAgICAgIHNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdID0gb3RoZXJSZWNvZ25pemVyO1xuICAgICAgICAgICAgb3RoZXJSZWNvZ25pemVyLnJlY29nbml6ZVdpdGgodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGRyb3AgdGhlIHNpbXVsdGFuZW91cyBsaW5rLiBpdCBkb2VzbnQgcmVtb3ZlIHRoZSBsaW5rIG9uIHRoZSBvdGhlciByZWNvZ25pemVyLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBkcm9wUmVjb2duaXplV2l0aDogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdkcm9wUmVjb2duaXplV2l0aCcsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuc2ltdWx0YW5lb3VzW290aGVyUmVjb2duaXplci5pZF07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZWNvZ25pemVyIGNhbiBvbmx5IHJ1biB3aGVuIGFuIG90aGVyIGlzIGZhaWxpbmdcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG4gICAgcmVxdWlyZUZhaWx1cmU6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAncmVxdWlyZUZhaWx1cmUnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVxdWlyZUZhaWwgPSB0aGlzLnJlcXVpcmVGYWlsO1xuICAgICAgICBvdGhlclJlY29nbml6ZXIgPSBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgdGhpcyk7XG4gICAgICAgIGlmIChpbkFycmF5KHJlcXVpcmVGYWlsLCBvdGhlclJlY29nbml6ZXIpID09PSAtMSkge1xuICAgICAgICAgICAgcmVxdWlyZUZhaWwucHVzaChvdGhlclJlY29nbml6ZXIpO1xuICAgICAgICAgICAgb3RoZXJSZWNvZ25pemVyLnJlcXVpcmVGYWlsdXJlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBkcm9wIHRoZSByZXF1aXJlRmFpbHVyZSBsaW5rLiBpdCBkb2VzIG5vdCByZW1vdmUgdGhlIGxpbmsgb24gdGhlIG90aGVyIHJlY29nbml6ZXIuXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcn0gdGhpc1xuICAgICAqL1xuICAgIGRyb3BSZXF1aXJlRmFpbHVyZTogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdkcm9wUmVxdWlyZUZhaWx1cmUnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlclJlY29nbml6ZXIgPSBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgdGhpcyk7XG4gICAgICAgIHZhciBpbmRleCA9IGluQXJyYXkodGhpcy5yZXF1aXJlRmFpbCwgb3RoZXJSZWNvZ25pemVyKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWlyZUZhaWwuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogaGFzIHJlcXVpcmUgZmFpbHVyZXMgYm9vbGVhblxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGhhc1JlcXVpcmVGYWlsdXJlczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVpcmVGYWlsLmxlbmd0aCA+IDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGlmIHRoZSByZWNvZ25pemVyIGNhbiByZWNvZ25pemUgc2ltdWx0YW5lb3VzIHdpdGggYW4gb3RoZXIgcmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgY2FuUmVjb2duaXplV2l0aDogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuc2ltdWx0YW5lb3VzW290aGVyUmVjb2duaXplci5pZF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFlvdSBzaG91bGQgdXNlIGB0cnlFbWl0YCBpbnN0ZWFkIG9mIGBlbWl0YCBkaXJlY3RseSB0byBjaGVja1xuICAgICAqIHRoYXQgYWxsIHRoZSBuZWVkZWQgcmVjb2duaXplcnMgaGFzIGZhaWxlZCBiZWZvcmUgZW1pdHRpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICovXG4gICAgZW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xuXG4gICAgICAgIGZ1bmN0aW9uIGVtaXQoZXZlbnQpIHtcbiAgICAgICAgICAgIHNlbGYubWFuYWdlci5lbWl0KGV2ZW50LCBpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAncGFuc3RhcnQnIGFuZCAncGFubW92ZSdcbiAgICAgICAgaWYgKHN0YXRlIDwgU1RBVEVfRU5ERUQpIHtcbiAgICAgICAgICAgIGVtaXQoc2VsZi5vcHRpb25zLmV2ZW50ICsgc3RhdGVTdHIoc3RhdGUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVtaXQoc2VsZi5vcHRpb25zLmV2ZW50KTsgLy8gc2ltcGxlICdldmVudE5hbWUnIGV2ZW50c1xuXG4gICAgICAgIGlmIChpbnB1dC5hZGRpdGlvbmFsRXZlbnQpIHsgLy8gYWRkaXRpb25hbCBldmVudChwYW5sZWZ0LCBwYW5yaWdodCwgcGluY2hpbiwgcGluY2hvdXQuLi4pXG4gICAgICAgICAgICBlbWl0KGlucHV0LmFkZGl0aW9uYWxFdmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwYW5lbmQgYW5kIHBhbmNhbmNlbFxuICAgICAgICBpZiAoc3RhdGUgPj0gU1RBVEVfRU5ERUQpIHtcbiAgICAgICAgICAgIGVtaXQoc2VsZi5vcHRpb25zLmV2ZW50ICsgc3RhdGVTdHIoc3RhdGUpKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGF0IGFsbCB0aGUgcmVxdWlyZSBmYWlsdXJlIHJlY29nbml6ZXJzIGhhcyBmYWlsZWQsXG4gICAgICogaWYgdHJ1ZSwgaXQgZW1pdHMgYSBnZXN0dXJlIGV2ZW50LFxuICAgICAqIG90aGVyd2lzZSwgc2V0dXAgdGhlIHN0YXRlIHRvIEZBSUxFRC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKi9cbiAgICB0cnlFbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5jYW5FbWl0KCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVtaXQoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGl0J3MgZmFpbGluZyBhbnl3YXlcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2FuIHdlIGVtaXQ/XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgY2FuRW1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnJlcXVpcmVGYWlsLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKCEodGhpcy5yZXF1aXJlRmFpbFtpXS5zdGF0ZSAmIChTVEFURV9GQUlMRUQgfCBTVEFURV9QT1NTSUJMRSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB1cGRhdGUgdGhlIHJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICovXG4gICAgcmVjb2duaXplOiBmdW5jdGlvbihpbnB1dERhdGEpIHtcbiAgICAgICAgLy8gbWFrZSBhIG5ldyBjb3B5IG9mIHRoZSBpbnB1dERhdGFcbiAgICAgICAgLy8gc28gd2UgY2FuIGNoYW5nZSB0aGUgaW5wdXREYXRhIHdpdGhvdXQgbWVzc2luZyB1cCB0aGUgb3RoZXIgcmVjb2duaXplcnNcbiAgICAgICAgdmFyIGlucHV0RGF0YUNsb25lID0gYXNzaWduKHt9LCBpbnB1dERhdGEpO1xuXG4gICAgICAgIC8vIGlzIGlzIGVuYWJsZWQgYW5kIGFsbG93IHJlY29nbml6aW5nP1xuICAgICAgICBpZiAoIWJvb2xPckZuKHRoaXMub3B0aW9ucy5lbmFibGUsIFt0aGlzLCBpbnB1dERhdGFDbG9uZV0pKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfRkFJTEVEO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVzZXQgd2hlbiB3ZSd2ZSByZWFjaGVkIHRoZSBlbmRcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgJiAoU1RBVEVfUkVDT0dOSVpFRCB8IFNUQVRFX0NBTkNFTExFRCB8IFNUQVRFX0ZBSUxFRCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9QT1NTSUJMRTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLnByb2Nlc3MoaW5wdXREYXRhQ2xvbmUpO1xuXG4gICAgICAgIC8vIHRoZSByZWNvZ25pemVyIGhhcyByZWNvZ25pemVkIGEgZ2VzdHVyZVxuICAgICAgICAvLyBzbyB0cmlnZ2VyIGFuIGV2ZW50XG4gICAgICAgIGlmICh0aGlzLnN0YXRlICYgKFNUQVRFX0JFR0FOIHwgU1RBVEVfQ0hBTkdFRCB8IFNUQVRFX0VOREVEIHwgU1RBVEVfQ0FOQ0VMTEVEKSkge1xuICAgICAgICAgICAgdGhpcy50cnlFbWl0KGlucHV0RGF0YUNsb25lKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gdGhlIHN0YXRlIG9mIHRoZSByZWNvZ25pemVyXG4gICAgICogdGhlIGFjdHVhbCByZWNvZ25pemluZyBoYXBwZW5zIGluIHRoaXMgbWV0aG9kXG4gICAgICogQHZpcnR1YWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICogQHJldHVybnMge0NvbnN0fSBTVEFURVxuICAgICAqL1xuICAgIHByb2Nlc3M6IGZ1bmN0aW9uKGlucHV0RGF0YSkgeyB9LCAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblxuICAgIC8qKlxuICAgICAqIHJldHVybiB0aGUgcHJlZmVycmVkIHRvdWNoLWFjdGlvblxuICAgICAqIEB2aXJ0dWFsXG4gICAgICogQHJldHVybnMge0FycmF5fVxuICAgICAqL1xuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHsgfSxcblxuICAgIC8qKlxuICAgICAqIGNhbGxlZCB3aGVuIHRoZSBnZXN0dXJlIGlzbid0IGFsbG93ZWQgdG8gcmVjb2duaXplXG4gICAgICogbGlrZSB3aGVuIGFub3RoZXIgaXMgYmVpbmcgcmVjb2duaXplZCBvciBpdCBpcyBkaXNhYmxlZFxuICAgICAqIEB2aXJ0dWFsXG4gICAgICovXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkgeyB9XG59O1xuXG4vKipcbiAqIGdldCBhIHVzYWJsZSBzdHJpbmcsIHVzZWQgYXMgZXZlbnQgcG9zdGZpeFxuICogQHBhcmFtIHtDb25zdH0gc3RhdGVcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0YXRlXG4gKi9cbmZ1bmN0aW9uIHN0YXRlU3RyKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlICYgU1RBVEVfQ0FOQ0VMTEVEKSB7XG4gICAgICAgIHJldHVybiAnY2FuY2VsJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlICYgU1RBVEVfRU5ERUQpIHtcbiAgICAgICAgcmV0dXJuICdlbmQnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUgJiBTVEFURV9DSEFOR0VEKSB7XG4gICAgICAgIHJldHVybiAnbW92ZSc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZSAmIFNUQVRFX0JFR0FOKSB7XG4gICAgICAgIHJldHVybiAnc3RhcnQnO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogZGlyZWN0aW9uIGNvbnMgdG8gc3RyaW5nXG4gKiBAcGFyYW0ge0NvbnN0fSBkaXJlY3Rpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGRpcmVjdGlvblN0cihkaXJlY3Rpb24pIHtcbiAgICBpZiAoZGlyZWN0aW9uID09IERJUkVDVElPTl9ET1dOKSB7XG4gICAgICAgIHJldHVybiAnZG93bic7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX1VQKSB7XG4gICAgICAgIHJldHVybiAndXAnO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09IERJUkVDVElPTl9MRUZUKSB7XG4gICAgICAgIHJldHVybiAnbGVmdCc7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX1JJR0hUKSB7XG4gICAgICAgIHJldHVybiAncmlnaHQnO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogZ2V0IGEgcmVjb2duaXplciBieSBuYW1lIGlmIGl0IGlzIGJvdW5kIHRvIGEgbWFuYWdlclxuICogQHBhcmFtIHtSZWNvZ25pemVyfFN0cmluZ30gb3RoZXJSZWNvZ25pemVyXG4gKiBAcGFyYW0ge1JlY29nbml6ZXJ9IHJlY29nbml6ZXJcbiAqIEByZXR1cm5zIHtSZWNvZ25pemVyfVxuICovXG5mdW5jdGlvbiBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgcmVjb2duaXplcikge1xuICAgIHZhciBtYW5hZ2VyID0gcmVjb2duaXplci5tYW5hZ2VyO1xuICAgIGlmIChtYW5hZ2VyKSB7XG4gICAgICAgIHJldHVybiBtYW5hZ2VyLmdldChvdGhlclJlY29nbml6ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gb3RoZXJSZWNvZ25pemVyO1xufVxuXG4vKipcbiAqIFRoaXMgcmVjb2duaXplciBpcyBqdXN0IHVzZWQgYXMgYSBiYXNlIGZvciB0aGUgc2ltcGxlIGF0dHJpYnV0ZSByZWNvZ25pemVycy5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBBdHRyUmVjb2duaXplcigpIHtcbiAgICBSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoQXR0clJlY29nbml6ZXIsIFJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIEF0dHJSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDFcbiAgICAgICAgICovXG4gICAgICAgIHBvaW50ZXJzOiAxXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gY2hlY2sgaWYgaXQgdGhlIHJlY29nbml6ZXIgcmVjZWl2ZXMgdmFsaWQgaW5wdXQsIGxpa2UgaW5wdXQuZGlzdGFuY2UgPiAxMC5cbiAgICAgKiBAbWVtYmVyb2YgQXR0clJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gcmVjb2duaXplZFxuICAgICAqL1xuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgb3B0aW9uUG9pbnRlcnMgPSB0aGlzLm9wdGlvbnMucG9pbnRlcnM7XG4gICAgICAgIHJldHVybiBvcHRpb25Qb2ludGVycyA9PT0gMCB8fCBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IG9wdGlvblBvaW50ZXJzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIHRoZSBpbnB1dCBhbmQgcmV0dXJuIHRoZSBzdGF0ZSBmb3IgdGhlIHJlY29nbml6ZXJcbiAgICAgKiBAbWVtYmVyb2YgQXR0clJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKiBAcmV0dXJucyB7Kn0gU3RhdGVcbiAgICAgKi9cbiAgICBwcm9jZXNzOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICB2YXIgZXZlbnRUeXBlID0gaW5wdXQuZXZlbnRUeXBlO1xuXG4gICAgICAgIHZhciBpc1JlY29nbml6ZWQgPSBzdGF0ZSAmIChTVEFURV9CRUdBTiB8IFNUQVRFX0NIQU5HRUQpO1xuICAgICAgICB2YXIgaXNWYWxpZCA9IHRoaXMuYXR0clRlc3QoaW5wdXQpO1xuXG4gICAgICAgIC8vIG9uIGNhbmNlbCBpbnB1dCBhbmQgd2UndmUgcmVjb2duaXplZCBiZWZvcmUsIHJldHVybiBTVEFURV9DQU5DRUxMRURcbiAgICAgICAgaWYgKGlzUmVjb2duaXplZCAmJiAoZXZlbnRUeXBlICYgSU5QVVRfQ0FOQ0VMIHx8ICFpc1ZhbGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlIHwgU1RBVEVfQ0FOQ0VMTEVEO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUmVjb2duaXplZCB8fCBpc1ZhbGlkKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlIHwgU1RBVEVfRU5ERUQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCEoc3RhdGUgJiBTVEFURV9CRUdBTikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEVfQkVHQU47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9DSEFOR0VEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XG4gICAgfVxufSk7XG5cbi8qKlxuICogUGFuXG4gKiBSZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgZG93biBhbmQgbW92ZWQgaW4gdGhlIGFsbG93ZWQgZGlyZWN0aW9uLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBQYW5SZWNvZ25pemVyKCkge1xuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLnBYID0gbnVsbDtcbiAgICB0aGlzLnBZID0gbnVsbDtcbn1cblxuaW5oZXJpdChQYW5SZWNvZ25pemVyLCBBdHRyUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUGFuUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAncGFuJyxcbiAgICAgICAgdGhyZXNob2xkOiAxMCxcbiAgICAgICAgcG9pbnRlcnM6IDEsXG4gICAgICAgIGRpcmVjdGlvbjogRElSRUNUSU9OX0FMTFxuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uO1xuICAgICAgICB2YXIgYWN0aW9ucyA9IFtdO1xuICAgICAgICBpZiAoZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChUT1VDSF9BQ1RJT05fUEFOX1kpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fVkVSVElDQUwpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChUT1VDSF9BQ1RJT05fUEFOX1gpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY3Rpb25zO1xuICAgIH0sXG5cbiAgICBkaXJlY3Rpb25UZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgdmFyIGhhc01vdmVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gaW5wdXQuZGlzdGFuY2U7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBpbnB1dC5kaXJlY3Rpb247XG4gICAgICAgIHZhciB4ID0gaW5wdXQuZGVsdGFYO1xuICAgICAgICB2YXIgeSA9IGlucHV0LmRlbHRhWTtcblxuICAgICAgICAvLyBsb2NrIHRvIGF4aXM/XG4gICAgICAgIGlmICghKGRpcmVjdGlvbiAmIG9wdGlvbnMuZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAoeCA9PT0gMCkgPyBESVJFQ1RJT05fTk9ORSA6ICh4IDwgMCkgPyBESVJFQ1RJT05fTEVGVCA6IERJUkVDVElPTl9SSUdIVDtcbiAgICAgICAgICAgICAgICBoYXNNb3ZlZCA9IHggIT0gdGhpcy5wWDtcbiAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguYWJzKGlucHV0LmRlbHRhWCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICh5ID09PSAwKSA/IERJUkVDVElPTl9OT05FIDogKHkgPCAwKSA/IERJUkVDVElPTl9VUCA6IERJUkVDVElPTl9ET1dOO1xuICAgICAgICAgICAgICAgIGhhc01vdmVkID0geSAhPSB0aGlzLnBZO1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoaW5wdXQuZGVsdGFZKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbnB1dC5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHJldHVybiBoYXNNb3ZlZCAmJiBkaXN0YW5jZSA+IG9wdGlvbnMudGhyZXNob2xkICYmIGRpcmVjdGlvbiAmIG9wdGlvbnMuZGlyZWN0aW9uO1xuICAgIH0sXG5cbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIEF0dHJSZWNvZ25pemVyLnByb3RvdHlwZS5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJlxuICAgICAgICAgICAgKHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTiB8fCAoISh0aGlzLnN0YXRlICYgU1RBVEVfQkVHQU4pICYmIHRoaXMuZGlyZWN0aW9uVGVzdChpbnB1dCkpKTtcbiAgICB9LFxuXG4gICAgZW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcblxuICAgICAgICB0aGlzLnBYID0gaW5wdXQuZGVsdGFYO1xuICAgICAgICB0aGlzLnBZID0gaW5wdXQuZGVsdGFZO1xuXG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBkaXJlY3Rpb25TdHIoaW5wdXQuZGlyZWN0aW9uKTtcblxuICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBpbnB1dC5hZGRpdGlvbmFsRXZlbnQgPSB0aGlzLm9wdGlvbnMuZXZlbnQgKyBkaXJlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3VwZXIuZW1pdC5jYWxsKHRoaXMsIGlucHV0KTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBQaW5jaFxuICogUmVjb2duaXplZCB3aGVuIHR3byBvciBtb3JlIHBvaW50ZXJzIGFyZSBtb3ZpbmcgdG93YXJkICh6b29tLWluKSBvciBhd2F5IGZyb20gZWFjaCBvdGhlciAoem9vbS1vdXQpLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBQaW5jaFJlY29nbml6ZXIoKSB7XG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChQaW5jaFJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQaW5jaFJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3BpbmNoJyxcbiAgICAgICAgdGhyZXNob2xkOiAwLFxuICAgICAgICBwb2ludGVyczogMlxuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBbVE9VQ0hfQUNUSU9OX05PTkVdO1xuICAgIH0sXG5cbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cGVyLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmXG4gICAgICAgICAgICAoTWF0aC5hYnMoaW5wdXQuc2NhbGUgLSAxKSA+IHRoaXMub3B0aW9ucy50aHJlc2hvbGQgfHwgdGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOKTtcbiAgICB9LFxuXG4gICAgZW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0LnNjYWxlICE9PSAxKSB7XG4gICAgICAgICAgICB2YXIgaW5PdXQgPSBpbnB1dC5zY2FsZSA8IDEgPyAnaW4nIDogJ291dCc7XG4gICAgICAgICAgICBpbnB1dC5hZGRpdGlvbmFsRXZlbnQgPSB0aGlzLm9wdGlvbnMuZXZlbnQgKyBpbk91dDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdXBlci5lbWl0LmNhbGwodGhpcywgaW5wdXQpO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIFByZXNzXG4gKiBSZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgZG93biBmb3IgeCBtcyB3aXRob3V0IGFueSBtb3ZlbWVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBQcmVzc1JlY29nbml6ZXIoKSB7XG4gICAgUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgIHRoaXMuX2lucHV0ID0gbnVsbDtcbn1cblxuaW5oZXJpdChQcmVzc1JlY29nbml6ZXIsIFJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFByZXNzUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAncHJlc3MnLFxuICAgICAgICBwb2ludGVyczogMSxcbiAgICAgICAgdGltZTogMjUxLCAvLyBtaW5pbWFsIHRpbWUgb2YgdGhlIHBvaW50ZXIgdG8gYmUgcHJlc3NlZFxuICAgICAgICB0aHJlc2hvbGQ6IDkgLy8gYSBtaW5pbWFsIG1vdmVtZW50IGlzIG9rLCBidXQga2VlcCBpdCBsb3dcbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9BVVRPXTtcbiAgICB9LFxuXG4gICAgcHJvY2VzczogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHZhciB2YWxpZFBvaW50ZXJzID0gaW5wdXQucG9pbnRlcnMubGVuZ3RoID09PSBvcHRpb25zLnBvaW50ZXJzO1xuICAgICAgICB2YXIgdmFsaWRNb3ZlbWVudCA9IGlucHV0LmRpc3RhbmNlIDwgb3B0aW9ucy50aHJlc2hvbGQ7XG4gICAgICAgIHZhciB2YWxpZFRpbWUgPSBpbnB1dC5kZWx0YVRpbWUgPiBvcHRpb25zLnRpbWU7XG5cbiAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcblxuICAgICAgICAvLyB3ZSBvbmx5IGFsbG93IGxpdHRsZSBtb3ZlbWVudFxuICAgICAgICAvLyBhbmQgd2UndmUgcmVhY2hlZCBhbiBlbmQgZXZlbnQsIHNvIGEgdGFwIGlzIHBvc3NpYmxlXG4gICAgICAgIGlmICghdmFsaWRNb3ZlbWVudCB8fCAhdmFsaWRQb2ludGVycyB8fCAoaW5wdXQuZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkgJiYgIXZhbGlkVGltZSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9TVEFSVCkge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0Q29udGV4dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgICAgICAgICB0aGlzLnRyeUVtaXQoKTtcbiAgICAgICAgICAgIH0sIG9wdGlvbnMudGltZSwgdGhpcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICByZXR1cm4gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xuICAgIH0sXG5cbiAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gICAgfSxcblxuICAgIGVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBTVEFURV9SRUNPR05JWkVEKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXQgJiYgKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX0VORCkpIHtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCArICd1cCcsIGlucHV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2lucHV0LnRpbWVTdGFtcCA9IG5vdygpO1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCB0aGlzLl9pbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLyoqXG4gKiBSb3RhdGVcbiAqIFJlY29nbml6ZWQgd2hlbiB0d28gb3IgbW9yZSBwb2ludGVyIGFyZSBtb3ZpbmcgaW4gYSBjaXJjdWxhciBtb3Rpb24uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEF0dHJSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFJvdGF0ZVJlY29nbml6ZXIoKSB7XG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChSb3RhdGVSZWNvZ25pemVyLCBBdHRyUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUm90YXRlUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAncm90YXRlJyxcbiAgICAgICAgdGhyZXNob2xkOiAwLFxuICAgICAgICBwb2ludGVyczogMlxuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBbVE9VQ0hfQUNUSU9OX05PTkVdO1xuICAgIH0sXG5cbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cGVyLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmXG4gICAgICAgICAgICAoTWF0aC5hYnMoaW5wdXQucm90YXRpb24pID4gdGhpcy5vcHRpb25zLnRocmVzaG9sZCB8fCB0aGlzLnN0YXRlICYgU1RBVEVfQkVHQU4pO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIFN3aXBlXG4gKiBSZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgbW92aW5nIGZhc3QgKHZlbG9jaXR5KSwgd2l0aCBlbm91Z2ggZGlzdGFuY2UgaW4gdGhlIGFsbG93ZWQgZGlyZWN0aW9uLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBTd2lwZVJlY29nbml6ZXIoKSB7XG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChTd2lwZVJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBTd2lwZVJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3N3aXBlJyxcbiAgICAgICAgdGhyZXNob2xkOiAxMCxcbiAgICAgICAgdmVsb2NpdHk6IDAuMyxcbiAgICAgICAgZGlyZWN0aW9uOiBESVJFQ1RJT05fSE9SSVpPTlRBTCB8IERJUkVDVElPTl9WRVJUSUNBTCxcbiAgICAgICAgcG9pbnRlcnM6IDFcbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUGFuUmVjb2duaXplci5wcm90b3R5cGUuZ2V0VG91Y2hBY3Rpb24uY2FsbCh0aGlzKTtcbiAgICB9LFxuXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uO1xuICAgICAgICB2YXIgdmVsb2NpdHk7XG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiAmIChESVJFQ1RJT05fSE9SSVpPTlRBTCB8IERJUkVDVElPTl9WRVJUSUNBTCkpIHtcbiAgICAgICAgICAgIHZlbG9jaXR5ID0gaW5wdXQub3ZlcmFsbFZlbG9jaXR5O1xuICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMKSB7XG4gICAgICAgICAgICB2ZWxvY2l0eSA9IGlucHV0Lm92ZXJhbGxWZWxvY2l0eVg7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uICYgRElSRUNUSU9OX1ZFUlRJQ0FMKSB7XG4gICAgICAgICAgICB2ZWxvY2l0eSA9IGlucHV0Lm92ZXJhbGxWZWxvY2l0eVk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fc3VwZXIuYXR0clRlc3QuY2FsbCh0aGlzLCBpbnB1dCkgJiZcbiAgICAgICAgICAgIGRpcmVjdGlvbiAmIGlucHV0Lm9mZnNldERpcmVjdGlvbiAmJlxuICAgICAgICAgICAgaW5wdXQuZGlzdGFuY2UgPiB0aGlzLm9wdGlvbnMudGhyZXNob2xkICYmXG4gICAgICAgICAgICBpbnB1dC5tYXhQb2ludGVycyA9PSB0aGlzLm9wdGlvbnMucG9pbnRlcnMgJiZcbiAgICAgICAgICAgIGFicyh2ZWxvY2l0eSkgPiB0aGlzLm9wdGlvbnMudmVsb2NpdHkgJiYgaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfRU5EO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gZGlyZWN0aW9uU3RyKGlucHV0Lm9mZnNldERpcmVjdGlvbik7XG4gICAgICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCArIGRpcmVjdGlvbiwgaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCBpbnB1dCk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogQSB0YXAgaXMgZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgZG9pbmcgYSBzbWFsbCB0YXAvY2xpY2suIE11bHRpcGxlIHRhcHMgYXJlIHJlY29nbml6ZWQgaWYgdGhleSBvY2N1clxuICogYmV0d2VlbiB0aGUgZ2l2ZW4gaW50ZXJ2YWwgYW5kIHBvc2l0aW9uLiBUaGUgZGVsYXkgb3B0aW9uIGNhbiBiZSB1c2VkIHRvIHJlY29nbml6ZSBtdWx0aS10YXBzIHdpdGhvdXQgZmlyaW5nXG4gKiBhIHNpbmdsZSB0YXAuXG4gKlxuICogVGhlIGV2ZW50RGF0YSBmcm9tIHRoZSBlbWl0dGVkIGV2ZW50IGNvbnRhaW5zIHRoZSBwcm9wZXJ0eSBgdGFwQ291bnRgLCB3aGljaCBjb250YWlucyB0aGUgYW1vdW50IG9mXG4gKiBtdWx0aS10YXBzIGJlaW5nIHJlY29nbml6ZWQuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIFJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gVGFwUmVjb2duaXplcigpIHtcbiAgICBSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAvLyBwcmV2aW91cyB0aW1lIGFuZCBjZW50ZXIsXG4gICAgLy8gdXNlZCBmb3IgdGFwIGNvdW50aW5nXG4gICAgdGhpcy5wVGltZSA9IGZhbHNlO1xuICAgIHRoaXMucENlbnRlciA9IGZhbHNlO1xuXG4gICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgIHRoaXMuX2lucHV0ID0gbnVsbDtcbiAgICB0aGlzLmNvdW50ID0gMDtcbn1cblxuaW5oZXJpdChUYXBSZWNvZ25pemVyLCBSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQaW5jaFJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3RhcCcsXG4gICAgICAgIHBvaW50ZXJzOiAxLFxuICAgICAgICB0YXBzOiAxLFxuICAgICAgICBpbnRlcnZhbDogMzAwLCAvLyBtYXggdGltZSBiZXR3ZWVuIHRoZSBtdWx0aS10YXAgdGFwc1xuICAgICAgICB0aW1lOiAyNTAsIC8vIG1heCB0aW1lIG9mIHRoZSBwb2ludGVyIHRvIGJlIGRvd24gKGxpa2UgZmluZ2VyIG9uIHRoZSBzY3JlZW4pXG4gICAgICAgIHRocmVzaG9sZDogOSwgLy8gYSBtaW5pbWFsIG1vdmVtZW50IGlzIG9rLCBidXQga2VlcCBpdCBsb3dcbiAgICAgICAgcG9zVGhyZXNob2xkOiAxMCAvLyBhIG11bHRpLXRhcCBjYW4gYmUgYSBiaXQgb2ZmIHRoZSBpbml0aWFsIHBvc2l0aW9uXG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OXTtcbiAgICB9LFxuXG4gICAgcHJvY2VzczogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgdmFyIHZhbGlkUG9pbnRlcnMgPSBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IG9wdGlvbnMucG9pbnRlcnM7XG4gICAgICAgIHZhciB2YWxpZE1vdmVtZW50ID0gaW5wdXQuZGlzdGFuY2UgPCBvcHRpb25zLnRocmVzaG9sZDtcbiAgICAgICAgdmFyIHZhbGlkVG91Y2hUaW1lID0gaW5wdXQuZGVsdGFUaW1lIDwgb3B0aW9ucy50aW1lO1xuXG4gICAgICAgIHRoaXMucmVzZXQoKTtcblxuICAgICAgICBpZiAoKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX1NUQVJUKSAmJiAodGhpcy5jb3VudCA9PT0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZhaWxUaW1lb3V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3ZSBvbmx5IGFsbG93IGxpdHRsZSBtb3ZlbWVudFxuICAgICAgICAvLyBhbmQgd2UndmUgcmVhY2hlZCBhbiBlbmQgZXZlbnQsIHNvIGEgdGFwIGlzIHBvc3NpYmxlXG4gICAgICAgIGlmICh2YWxpZE1vdmVtZW50ICYmIHZhbGlkVG91Y2hUaW1lICYmIHZhbGlkUG9pbnRlcnMpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5ldmVudFR5cGUgIT0gSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFpbFRpbWVvdXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHZhbGlkSW50ZXJ2YWwgPSB0aGlzLnBUaW1lID8gKGlucHV0LnRpbWVTdGFtcCAtIHRoaXMucFRpbWUgPCBvcHRpb25zLmludGVydmFsKSA6IHRydWU7XG4gICAgICAgICAgICB2YXIgdmFsaWRNdWx0aVRhcCA9ICF0aGlzLnBDZW50ZXIgfHwgZ2V0RGlzdGFuY2UodGhpcy5wQ2VudGVyLCBpbnB1dC5jZW50ZXIpIDwgb3B0aW9ucy5wb3NUaHJlc2hvbGQ7XG5cbiAgICAgICAgICAgIHRoaXMucFRpbWUgPSBpbnB1dC50aW1lU3RhbXA7XG4gICAgICAgICAgICB0aGlzLnBDZW50ZXIgPSBpbnB1dC5jZW50ZXI7XG5cbiAgICAgICAgICAgIGlmICghdmFsaWRNdWx0aVRhcCB8fCAhdmFsaWRJbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY291bnQgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ICs9IDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG5cbiAgICAgICAgICAgIC8vIGlmIHRhcCBjb3VudCBtYXRjaGVzIHdlIGhhdmUgcmVjb2duaXplZCBpdCxcbiAgICAgICAgICAgIC8vIGVsc2UgaXQgaGFzIGJlZ2FuIHJlY29nbml6aW5nLi4uXG4gICAgICAgICAgICB2YXIgdGFwQ291bnQgPSB0aGlzLmNvdW50ICUgb3B0aW9ucy50YXBzO1xuICAgICAgICAgICAgaWYgKHRhcENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gbm8gZmFpbGluZyByZXF1aXJlbWVudHMsIGltbWVkaWF0ZWx5IHRyaWdnZXIgdGhlIHRhcCBldmVudFxuICAgICAgICAgICAgICAgIC8vIG9yIHdhaXQgYXMgbG9uZyBhcyB0aGUgbXVsdGl0YXAgaW50ZXJ2YWwgdG8gdHJpZ2dlclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5oYXNSZXF1aXJlRmFpbHVyZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXRDb250ZXh0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyeUVtaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgb3B0aW9ucy5pbnRlcnZhbCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTVEFURV9CRUdBTjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuXG4gICAgZmFpbFRpbWVvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXRDb250ZXh0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0ZBSUxFRDtcbiAgICAgICAgfSwgdGhpcy5vcHRpb25zLmludGVydmFsLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT0gU1RBVEVfUkVDT0dOSVpFRCkge1xuICAgICAgICAgICAgdGhpcy5faW5wdXQudGFwQ291bnQgPSB0aGlzLmNvdW50O1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCB0aGlzLl9pbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLyoqXG4gKiBTaW1wbGUgd2F5IHRvIGNyZWF0ZSBhIG1hbmFnZXIgd2l0aCBhIGRlZmF1bHQgc2V0IG9mIHJlY29nbml6ZXJzLlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEhhbW1lcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy5yZWNvZ25pemVycyA9IGlmVW5kZWZpbmVkKG9wdGlvbnMucmVjb2duaXplcnMsIEhhbW1lci5kZWZhdWx0cy5wcmVzZXQpO1xuICAgIHJldHVybiBuZXcgTWFuYWdlcihlbGVtZW50LCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBAY29uc3Qge3N0cmluZ31cbiAqL1xuSGFtbWVyLlZFUlNJT04gPSAnMi4wLjcnO1xuXG4vKipcbiAqIGRlZmF1bHQgc2V0dGluZ3NcbiAqIEBuYW1lc3BhY2VcbiAqL1xuSGFtbWVyLmRlZmF1bHRzID0ge1xuICAgIC8qKlxuICAgICAqIHNldCBpZiBET00gZXZlbnRzIGFyZSBiZWluZyB0cmlnZ2VyZWQuXG4gICAgICogQnV0IHRoaXMgaXMgc2xvd2VyIGFuZCB1bnVzZWQgYnkgc2ltcGxlIGltcGxlbWVudGF0aW9ucywgc28gZGlzYWJsZWQgYnkgZGVmYXVsdC5cbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGRvbUV2ZW50czogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgZm9yIHRoZSB0b3VjaEFjdGlvbiBwcm9wZXJ0eS9mYWxsYmFjay5cbiAgICAgKiBXaGVuIHNldCB0byBgY29tcHV0ZWAgaXQgd2lsbCBtYWdpY2FsbHkgc2V0IHRoZSBjb3JyZWN0IHZhbHVlIGJhc2VkIG9uIHRoZSBhZGRlZCByZWNvZ25pemVycy5cbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBkZWZhdWx0IGNvbXB1dGVcbiAgICAgKi9cbiAgICB0b3VjaEFjdGlvbjogVE9VQ0hfQUNUSU9OX0NPTVBVVEUsXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgZW5hYmxlOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRVhQRVJJTUVOVEFMIEZFQVRVUkUgLS0gY2FuIGJlIHJlbW92ZWQvY2hhbmdlZFxuICAgICAqIENoYW5nZSB0aGUgcGFyZW50IGlucHV0IHRhcmdldCBlbGVtZW50LlxuICAgICAqIElmIE51bGwsIHRoZW4gaXQgaXMgYmVpbmcgc2V0IHRoZSB0byBtYWluIGVsZW1lbnQuXG4gICAgICogQHR5cGUge051bGx8RXZlbnRUYXJnZXR9XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIGlucHV0VGFyZ2V0OiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogZm9yY2UgYW4gaW5wdXQgY2xhc3NcbiAgICAgKiBAdHlwZSB7TnVsbHxGdW5jdGlvbn1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgaW5wdXRDbGFzczogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgcmVjb2duaXplciBzZXR1cCB3aGVuIGNhbGxpbmcgYEhhbW1lcigpYFxuICAgICAqIFdoZW4gY3JlYXRpbmcgYSBuZXcgTWFuYWdlciB0aGVzZSB3aWxsIGJlIHNraXBwZWQuXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIHByZXNldDogW1xuICAgICAgICAvLyBSZWNvZ25pemVyQ2xhc3MsIG9wdGlvbnMsIFtyZWNvZ25pemVXaXRoLCAuLi5dLCBbcmVxdWlyZUZhaWx1cmUsIC4uLl1cbiAgICAgICAgW1JvdGF0ZVJlY29nbml6ZXIsIHtlbmFibGU6IGZhbHNlfV0sXG4gICAgICAgIFtQaW5jaFJlY29nbml6ZXIsIHtlbmFibGU6IGZhbHNlfSwgWydyb3RhdGUnXV0sXG4gICAgICAgIFtTd2lwZVJlY29nbml6ZXIsIHtkaXJlY3Rpb246IERJUkVDVElPTl9IT1JJWk9OVEFMfV0sXG4gICAgICAgIFtQYW5SZWNvZ25pemVyLCB7ZGlyZWN0aW9uOiBESVJFQ1RJT05fSE9SSVpPTlRBTH0sIFsnc3dpcGUnXV0sXG4gICAgICAgIFtUYXBSZWNvZ25pemVyXSxcbiAgICAgICAgW1RhcFJlY29nbml6ZXIsIHtldmVudDogJ2RvdWJsZXRhcCcsIHRhcHM6IDJ9LCBbJ3RhcCddXSxcbiAgICAgICAgW1ByZXNzUmVjb2duaXplcl1cbiAgICBdLFxuXG4gICAgLyoqXG4gICAgICogU29tZSBDU1MgcHJvcGVydGllcyBjYW4gYmUgdXNlZCB0byBpbXByb3ZlIHRoZSB3b3JraW5nIG9mIEhhbW1lci5cbiAgICAgKiBBZGQgdGhlbSB0byB0aGlzIG1ldGhvZCBhbmQgdGhleSB3aWxsIGJlIHNldCB3aGVuIGNyZWF0aW5nIGEgbmV3IE1hbmFnZXIuXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqL1xuICAgIGNzc1Byb3BzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNhYmxlcyB0ZXh0IHNlbGVjdGlvbiB0byBpbXByb3ZlIHRoZSBkcmFnZ2luZyBnZXN0dXJlLiBNYWlubHkgZm9yIGRlc2t0b3AgYnJvd3NlcnMuXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICAgKi9cbiAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNhYmxlIHRoZSBXaW5kb3dzIFBob25lIGdyaXBwZXJzIHdoZW4gcHJlc3NpbmcgYW4gZWxlbWVudC5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgICAqL1xuICAgICAgICB0b3VjaFNlbGVjdDogJ25vbmUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNhYmxlcyB0aGUgZGVmYXVsdCBjYWxsb3V0IHNob3duIHdoZW4geW91IHRvdWNoIGFuZCBob2xkIGEgdG91Y2ggdGFyZ2V0LlxuICAgICAgICAgKiBPbiBpT1MsIHdoZW4geW91IHRvdWNoIGFuZCBob2xkIGEgdG91Y2ggdGFyZ2V0IHN1Y2ggYXMgYSBsaW5rLCBTYWZhcmkgZGlzcGxheXNcbiAgICAgICAgICogYSBjYWxsb3V0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGxpbmsuIFRoaXMgcHJvcGVydHkgYWxsb3dzIHlvdSB0byBkaXNhYmxlIHRoYXQgY2FsbG91dC5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgICAqL1xuICAgICAgICB0b3VjaENhbGxvdXQ6ICdub25lJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWVzIHdoZXRoZXIgem9vbWluZyBpcyBlbmFibGVkLiBVc2VkIGJ5IElFMTA+XG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICAgKi9cbiAgICAgICAgY29udGVudFpvb21pbmc6ICdub25lJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWVzIHRoYXQgYW4gZW50aXJlIGVsZW1lbnQgc2hvdWxkIGJlIGRyYWdnYWJsZSBpbnN0ZWFkIG9mIGl0cyBjb250ZW50cy4gTWFpbmx5IGZvciBkZXNrdG9wIGJyb3dzZXJzLlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAgICovXG4gICAgICAgIHVzZXJEcmFnOiAnbm9uZScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE92ZXJyaWRlcyB0aGUgaGlnaGxpZ2h0IGNvbG9yIHNob3duIHdoZW4gdGhlIHVzZXIgdGFwcyBhIGxpbmsgb3IgYSBKYXZhU2NyaXB0XG4gICAgICAgICAqIGNsaWNrYWJsZSBlbGVtZW50IGluIGlPUy4gVGhpcyBwcm9wZXJ0eSBvYmV5cyB0aGUgYWxwaGEgdmFsdWUsIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ3JnYmEoMCwwLDAsMCknXG4gICAgICAgICAqL1xuICAgICAgICB0YXBIaWdobGlnaHRDb2xvcjogJ3JnYmEoMCwwLDAsMCknXG4gICAgfVxufTtcblxudmFyIFNUT1AgPSAxO1xudmFyIEZPUkNFRF9TVE9QID0gMjtcblxuLyoqXG4gKiBNYW5hZ2VyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFuYWdlcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gYXNzaWduKHt9LCBIYW1tZXIuZGVmYXVsdHMsIG9wdGlvbnMgfHwge30pO1xuXG4gICAgdGhpcy5vcHRpb25zLmlucHV0VGFyZ2V0ID0gdGhpcy5vcHRpb25zLmlucHV0VGFyZ2V0IHx8IGVsZW1lbnQ7XG5cbiAgICB0aGlzLmhhbmRsZXJzID0ge307XG4gICAgdGhpcy5zZXNzaW9uID0ge307XG4gICAgdGhpcy5yZWNvZ25pemVycyA9IFtdO1xuICAgIHRoaXMub2xkQ3NzUHJvcHMgPSB7fTtcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5pbnB1dCA9IGNyZWF0ZUlucHV0SW5zdGFuY2UodGhpcyk7XG4gICAgdGhpcy50b3VjaEFjdGlvbiA9IG5ldyBUb3VjaEFjdGlvbih0aGlzLCB0aGlzLm9wdGlvbnMudG91Y2hBY3Rpb24pO1xuXG4gICAgdG9nZ2xlQ3NzUHJvcHModGhpcywgdHJ1ZSk7XG5cbiAgICBlYWNoKHRoaXMub3B0aW9ucy5yZWNvZ25pemVycywgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB2YXIgcmVjb2duaXplciA9IHRoaXMuYWRkKG5ldyAoaXRlbVswXSkoaXRlbVsxXSkpO1xuICAgICAgICBpdGVtWzJdICYmIHJlY29nbml6ZXIucmVjb2duaXplV2l0aChpdGVtWzJdKTtcbiAgICAgICAgaXRlbVszXSAmJiByZWNvZ25pemVyLnJlcXVpcmVGYWlsdXJlKGl0ZW1bM10pO1xuICAgIH0sIHRoaXMpO1xufVxuXG5NYW5hZ2VyLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBzZXQgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybnMge01hbmFnZXJ9XG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIGFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIE9wdGlvbnMgdGhhdCBuZWVkIGEgbGl0dGxlIG1vcmUgc2V0dXBcbiAgICAgICAgaWYgKG9wdGlvbnMudG91Y2hBY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMudG91Y2hBY3Rpb24udXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW5wdXRUYXJnZXQpIHtcbiAgICAgICAgICAgIC8vIENsZWFuIHVwIGV4aXN0aW5nIGV2ZW50IGxpc3RlbmVycyBhbmQgcmVpbml0aWFsaXplXG4gICAgICAgICAgICB0aGlzLmlucHV0LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQudGFyZ2V0ID0gb3B0aW9ucy5pbnB1dFRhcmdldDtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuaW5pdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBzdG9wIHJlY29nbml6aW5nIGZvciB0aGlzIHNlc3Npb24uXG4gICAgICogVGhpcyBzZXNzaW9uIHdpbGwgYmUgZGlzY2FyZGVkLCB3aGVuIGEgbmV3IFtpbnB1dF1zdGFydCBldmVudCBpcyBmaXJlZC5cbiAgICAgKiBXaGVuIGZvcmNlZCwgdGhlIHJlY29nbml6ZXIgY3ljbGUgaXMgc3RvcHBlZCBpbW1lZGlhdGVseS5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtmb3JjZV1cbiAgICAgKi9cbiAgICBzdG9wOiBmdW5jdGlvbihmb3JjZSkge1xuICAgICAgICB0aGlzLnNlc3Npb24uc3RvcHBlZCA9IGZvcmNlID8gRk9SQ0VEX1NUT1AgOiBTVE9QO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBydW4gdGhlIHJlY29nbml6ZXJzIVxuICAgICAqIGNhbGxlZCBieSB0aGUgaW5wdXRIYW5kbGVyIGZ1bmN0aW9uIG9uIGV2ZXJ5IG1vdmVtZW50IG9mIHRoZSBwb2ludGVycyAodG91Y2hlcylcbiAgICAgKiBpdCB3YWxrcyB0aHJvdWdoIGFsbCB0aGUgcmVjb2duaXplcnMgYW5kIHRyaWVzIHRvIGRldGVjdCB0aGUgZ2VzdHVyZSB0aGF0IGlzIGJlaW5nIG1hZGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICovXG4gICAgcmVjb2duaXplOiBmdW5jdGlvbihpbnB1dERhdGEpIHtcbiAgICAgICAgdmFyIHNlc3Npb24gPSB0aGlzLnNlc3Npb247XG4gICAgICAgIGlmIChzZXNzaW9uLnN0b3BwZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJ1biB0aGUgdG91Y2gtYWN0aW9uIHBvbHlmaWxsXG4gICAgICAgIHRoaXMudG91Y2hBY3Rpb24ucHJldmVudERlZmF1bHRzKGlucHV0RGF0YSk7XG5cbiAgICAgICAgdmFyIHJlY29nbml6ZXI7XG4gICAgICAgIHZhciByZWNvZ25pemVycyA9IHRoaXMucmVjb2duaXplcnM7XG5cbiAgICAgICAgLy8gdGhpcyBob2xkcyB0aGUgcmVjb2duaXplciB0aGF0IGlzIGJlaW5nIHJlY29nbml6ZWQuXG4gICAgICAgIC8vIHNvIHRoZSByZWNvZ25pemVyJ3Mgc3RhdGUgbmVlZHMgdG8gYmUgQkVHQU4sIENIQU5HRUQsIEVOREVEIG9yIFJFQ09HTklaRURcbiAgICAgICAgLy8gaWYgbm8gcmVjb2duaXplciBpcyBkZXRlY3RpbmcgYSB0aGluZywgaXQgaXMgc2V0IHRvIGBudWxsYFxuICAgICAgICB2YXIgY3VyUmVjb2duaXplciA9IHNlc3Npb24uY3VyUmVjb2duaXplcjtcblxuICAgICAgICAvLyByZXNldCB3aGVuIHRoZSBsYXN0IHJlY29nbml6ZXIgaXMgcmVjb2duaXplZFxuICAgICAgICAvLyBvciB3aGVuIHdlJ3JlIGluIGEgbmV3IHNlc3Npb25cbiAgICAgICAgaWYgKCFjdXJSZWNvZ25pemVyIHx8IChjdXJSZWNvZ25pemVyICYmIGN1clJlY29nbml6ZXIuc3RhdGUgJiBTVEFURV9SRUNPR05JWkVEKSkge1xuICAgICAgICAgICAgY3VyUmVjb2duaXplciA9IHNlc3Npb24uY3VyUmVjb2duaXplciA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgcmVjb2duaXplcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZWNvZ25pemVyID0gcmVjb2duaXplcnNbaV07XG5cbiAgICAgICAgICAgIC8vIGZpbmQgb3V0IGlmIHdlIGFyZSBhbGxvd2VkIHRyeSB0byByZWNvZ25pemUgdGhlIGlucHV0IGZvciB0aGlzIG9uZS5cbiAgICAgICAgICAgIC8vIDEuICAgYWxsb3cgaWYgdGhlIHNlc3Npb24gaXMgTk9UIGZvcmNlZCBzdG9wcGVkIChzZWUgdGhlIC5zdG9wKCkgbWV0aG9kKVxuICAgICAgICAgICAgLy8gMi4gICBhbGxvdyBpZiB3ZSBzdGlsbCBoYXZlbid0IHJlY29nbml6ZWQgYSBnZXN0dXJlIGluIHRoaXMgc2Vzc2lvbiwgb3IgdGhlIHRoaXMgcmVjb2duaXplciBpcyB0aGUgb25lXG4gICAgICAgICAgICAvLyAgICAgIHRoYXQgaXMgYmVpbmcgcmVjb2duaXplZC5cbiAgICAgICAgICAgIC8vIDMuICAgYWxsb3cgaWYgdGhlIHJlY29nbml6ZXIgaXMgYWxsb3dlZCB0byBydW4gc2ltdWx0YW5lb3VzIHdpdGggdGhlIGN1cnJlbnQgcmVjb2duaXplZCByZWNvZ25pemVyLlxuICAgICAgICAgICAgLy8gICAgICB0aGlzIGNhbiBiZSBzZXR1cCB3aXRoIHRoZSBgcmVjb2duaXplV2l0aCgpYCBtZXRob2Qgb24gdGhlIHJlY29nbml6ZXIuXG4gICAgICAgICAgICBpZiAoc2Vzc2lvbi5zdG9wcGVkICE9PSBGT1JDRURfU1RPUCAmJiAoIC8vIDFcbiAgICAgICAgICAgICAgICAgICAgIWN1clJlY29nbml6ZXIgfHwgcmVjb2duaXplciA9PSBjdXJSZWNvZ25pemVyIHx8IC8vIDJcbiAgICAgICAgICAgICAgICAgICAgcmVjb2duaXplci5jYW5SZWNvZ25pemVXaXRoKGN1clJlY29nbml6ZXIpKSkgeyAvLyAzXG4gICAgICAgICAgICAgICAgcmVjb2duaXplci5yZWNvZ25pemUoaW5wdXREYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVjb2duaXplci5yZXNldCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGUgcmVjb2duaXplciBoYXMgYmVlbiByZWNvZ25pemluZyB0aGUgaW5wdXQgYXMgYSB2YWxpZCBnZXN0dXJlLCB3ZSB3YW50IHRvIHN0b3JlIHRoaXMgb25lIGFzIHRoZVxuICAgICAgICAgICAgLy8gY3VycmVudCBhY3RpdmUgcmVjb2duaXplci4gYnV0IG9ubHkgaWYgd2UgZG9uJ3QgYWxyZWFkeSBoYXZlIGFuIGFjdGl2ZSByZWNvZ25pemVyXG4gICAgICAgICAgICBpZiAoIWN1clJlY29nbml6ZXIgJiYgcmVjb2duaXplci5zdGF0ZSAmIChTVEFURV9CRUdBTiB8IFNUQVRFX0NIQU5HRUQgfCBTVEFURV9FTkRFRCkpIHtcbiAgICAgICAgICAgICAgICBjdXJSZWNvZ25pemVyID0gc2Vzc2lvbi5jdXJSZWNvZ25pemVyID0gcmVjb2duaXplcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBnZXQgYSByZWNvZ25pemVyIGJ5IGl0cyBldmVudCBuYW1lLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcnxTdHJpbmd9IHJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcnxOdWxsfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICBpZiAocmVjb2duaXplciBpbnN0YW5jZW9mIFJlY29nbml6ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiByZWNvZ25pemVyO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVycztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWNvZ25pemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHJlY29nbml6ZXJzW2ldLm9wdGlvbnMuZXZlbnQgPT0gcmVjb2duaXplcikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNvZ25pemVyc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogYWRkIGEgcmVjb2duaXplciB0byB0aGUgbWFuYWdlclxuICAgICAqIGV4aXN0aW5nIHJlY29nbml6ZXJzIHdpdGggdGhlIHNhbWUgZXZlbnQgbmFtZSB3aWxsIGJlIHJlbW92ZWRcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IHJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcnxNYW5hZ2VyfVxuICAgICAqL1xuICAgIGFkZDogZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcocmVjb2duaXplciwgJ2FkZCcsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlbW92ZSBleGlzdGluZ1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSB0aGlzLmdldChyZWNvZ25pemVyLm9wdGlvbnMuZXZlbnQpO1xuICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKGV4aXN0aW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVjb2duaXplcnMucHVzaChyZWNvZ25pemVyKTtcbiAgICAgICAgcmVjb2duaXplci5tYW5hZ2VyID0gdGhpcztcblxuICAgICAgICB0aGlzLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gcmVjb2duaXplcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVtb3ZlIGEgcmVjb2duaXplciBieSBuYW1lIG9yIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfFN0cmluZ30gcmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtNYW5hZ2VyfVxuICAgICAqL1xuICAgIHJlbW92ZTogZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcocmVjb2duaXplciwgJ3JlbW92ZScsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlY29nbml6ZXIgPSB0aGlzLmdldChyZWNvZ25pemVyKTtcblxuICAgICAgICAvLyBsZXQncyBtYWtlIHN1cmUgdGhpcyByZWNvZ25pemVyIGV4aXN0c1xuICAgICAgICBpZiAocmVjb2duaXplcikge1xuICAgICAgICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVycztcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGluQXJyYXkocmVjb2duaXplcnMsIHJlY29nbml6ZXIpO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmVjb2duaXplcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGJpbmQgZXZlbnRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICAgICAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBvbjogZnVuY3Rpb24oZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnM7XG4gICAgICAgIGVhY2goc3BsaXRTdHIoZXZlbnRzKSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGhhbmRsZXJzW2V2ZW50XSA9IGhhbmRsZXJzW2V2ZW50XSB8fCBbXTtcbiAgICAgICAgICAgIGhhbmRsZXJzW2V2ZW50XS5wdXNoKGhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVuYmluZCBldmVudCwgbGVhdmUgZW1pdCBibGFuayB0byByZW1vdmUgYWxsIGhhbmRsZXJzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50c1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtoYW5kbGVyXVxuICAgICAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBvZmY6IGZ1bmN0aW9uKGV2ZW50cywgaGFuZGxlcikge1xuICAgICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnM7XG4gICAgICAgIGVhY2goc3BsaXRTdHIoZXZlbnRzKSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICghaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBoYW5kbGVyc1tldmVudF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzW2V2ZW50XSAmJiBoYW5kbGVyc1tldmVudF0uc3BsaWNlKGluQXJyYXkoaGFuZGxlcnNbZXZlbnRdLCBoYW5kbGVyKSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZW1pdCBldmVudCB0byB0aGUgbGlzdGVuZXJzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBlbWl0OiBmdW5jdGlvbihldmVudCwgZGF0YSkge1xuICAgICAgICAvLyB3ZSBhbHNvIHdhbnQgdG8gdHJpZ2dlciBkb20gZXZlbnRzXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZG9tRXZlbnRzKSB7XG4gICAgICAgICAgICB0cmlnZ2VyRG9tRXZlbnQoZXZlbnQsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm8gaGFuZGxlcnMsIHNvIHNraXAgaXQgYWxsXG4gICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNbZXZlbnRdICYmIHRoaXMuaGFuZGxlcnNbZXZlbnRdLnNsaWNlKCk7XG4gICAgICAgIGlmICghaGFuZGxlcnMgfHwgIWhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YS50eXBlID0gZXZlbnQ7XG4gICAgICAgIGRhdGEucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRhdGEuc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBoYW5kbGVyc1tpXShkYXRhKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBkZXN0cm95IHRoZSBtYW5hZ2VyIGFuZCB1bmJpbmRzIGFsbCBldmVudHNcbiAgICAgKiBpdCBkb2Vzbid0IHVuYmluZCBkb20gZXZlbnRzLCB0aGF0IGlzIHRoZSB1c2VyIG93biByZXNwb25zaWJpbGl0eVxuICAgICAqL1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgJiYgdG9nZ2xlQ3NzUHJvcHModGhpcywgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5zZXNzaW9uID0ge307XG4gICAgICAgIHRoaXMuaW5wdXQuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuICAgIH1cbn07XG5cbi8qKlxuICogYWRkL3JlbW92ZSB0aGUgY3NzIHByb3BlcnRpZXMgYXMgZGVmaW5lZCBpbiBtYW5hZ2VyLm9wdGlvbnMuY3NzUHJvcHNcbiAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxuICogQHBhcmFtIHtCb29sZWFufSBhZGRcbiAqL1xuZnVuY3Rpb24gdG9nZ2xlQ3NzUHJvcHMobWFuYWdlciwgYWRkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBtYW5hZ2VyLmVsZW1lbnQ7XG4gICAgaWYgKCFlbGVtZW50LnN0eWxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHByb3A7XG4gICAgZWFjaChtYW5hZ2VyLm9wdGlvbnMuY3NzUHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHByb3AgPSBwcmVmaXhlZChlbGVtZW50LnN0eWxlLCBuYW1lKTtcbiAgICAgICAgaWYgKGFkZCkge1xuICAgICAgICAgICAgbWFuYWdlci5vbGRDc3NQcm9wc1twcm9wXSA9IGVsZW1lbnQuc3R5bGVbcHJvcF07XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gbWFuYWdlci5vbGRDc3NQcm9wc1twcm9wXSB8fCAnJztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghYWRkKSB7XG4gICAgICAgIG1hbmFnZXIub2xkQ3NzUHJvcHMgPSB7fTtcbiAgICB9XG59XG5cbi8qKlxuICogdHJpZ2dlciBkb20gZXZlbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqL1xuZnVuY3Rpb24gdHJpZ2dlckRvbUV2ZW50KGV2ZW50LCBkYXRhKSB7XG4gICAgdmFyIGdlc3R1cmVFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGdlc3R1cmVFdmVudC5pbml0RXZlbnQoZXZlbnQsIHRydWUsIHRydWUpO1xuICAgIGdlc3R1cmVFdmVudC5nZXN0dXJlID0gZGF0YTtcbiAgICBkYXRhLnRhcmdldC5kaXNwYXRjaEV2ZW50KGdlc3R1cmVFdmVudCk7XG59XG5cbmFzc2lnbihIYW1tZXIsIHtcbiAgICBJTlBVVF9TVEFSVDogSU5QVVRfU1RBUlQsXG4gICAgSU5QVVRfTU9WRTogSU5QVVRfTU9WRSxcbiAgICBJTlBVVF9FTkQ6IElOUFVUX0VORCxcbiAgICBJTlBVVF9DQU5DRUw6IElOUFVUX0NBTkNFTCxcblxuICAgIFNUQVRFX1BPU1NJQkxFOiBTVEFURV9QT1NTSUJMRSxcbiAgICBTVEFURV9CRUdBTjogU1RBVEVfQkVHQU4sXG4gICAgU1RBVEVfQ0hBTkdFRDogU1RBVEVfQ0hBTkdFRCxcbiAgICBTVEFURV9FTkRFRDogU1RBVEVfRU5ERUQsXG4gICAgU1RBVEVfUkVDT0dOSVpFRDogU1RBVEVfUkVDT0dOSVpFRCxcbiAgICBTVEFURV9DQU5DRUxMRUQ6IFNUQVRFX0NBTkNFTExFRCxcbiAgICBTVEFURV9GQUlMRUQ6IFNUQVRFX0ZBSUxFRCxcblxuICAgIERJUkVDVElPTl9OT05FOiBESVJFQ1RJT05fTk9ORSxcbiAgICBESVJFQ1RJT05fTEVGVDogRElSRUNUSU9OX0xFRlQsXG4gICAgRElSRUNUSU9OX1JJR0hUOiBESVJFQ1RJT05fUklHSFQsXG4gICAgRElSRUNUSU9OX1VQOiBESVJFQ1RJT05fVVAsXG4gICAgRElSRUNUSU9OX0RPV046IERJUkVDVElPTl9ET1dOLFxuICAgIERJUkVDVElPTl9IT1JJWk9OVEFMOiBESVJFQ1RJT05fSE9SSVpPTlRBTCxcbiAgICBESVJFQ1RJT05fVkVSVElDQUw6IERJUkVDVElPTl9WRVJUSUNBTCxcbiAgICBESVJFQ1RJT05fQUxMOiBESVJFQ1RJT05fQUxMLFxuXG4gICAgTWFuYWdlcjogTWFuYWdlcixcbiAgICBJbnB1dDogSW5wdXQsXG4gICAgVG91Y2hBY3Rpb246IFRvdWNoQWN0aW9uLFxuXG4gICAgVG91Y2hJbnB1dDogVG91Y2hJbnB1dCxcbiAgICBNb3VzZUlucHV0OiBNb3VzZUlucHV0LFxuICAgIFBvaW50ZXJFdmVudElucHV0OiBQb2ludGVyRXZlbnRJbnB1dCxcbiAgICBUb3VjaE1vdXNlSW5wdXQ6IFRvdWNoTW91c2VJbnB1dCxcbiAgICBTaW5nbGVUb3VjaElucHV0OiBTaW5nbGVUb3VjaElucHV0LFxuXG4gICAgUmVjb2duaXplcjogUmVjb2duaXplcixcbiAgICBBdHRyUmVjb2duaXplcjogQXR0clJlY29nbml6ZXIsXG4gICAgVGFwOiBUYXBSZWNvZ25pemVyLFxuICAgIFBhbjogUGFuUmVjb2duaXplcixcbiAgICBTd2lwZTogU3dpcGVSZWNvZ25pemVyLFxuICAgIFBpbmNoOiBQaW5jaFJlY29nbml6ZXIsXG4gICAgUm90YXRlOiBSb3RhdGVSZWNvZ25pemVyLFxuICAgIFByZXNzOiBQcmVzc1JlY29nbml6ZXIsXG5cbiAgICBvbjogYWRkRXZlbnRMaXN0ZW5lcnMsXG4gICAgb2ZmOiByZW1vdmVFdmVudExpc3RlbmVycyxcbiAgICBlYWNoOiBlYWNoLFxuICAgIG1lcmdlOiBtZXJnZSxcbiAgICBleHRlbmQ6IGV4dGVuZCxcbiAgICBhc3NpZ246IGFzc2lnbixcbiAgICBpbmhlcml0OiBpbmhlcml0LFxuICAgIGJpbmRGbjogYmluZEZuLFxuICAgIHByZWZpeGVkOiBwcmVmaXhlZFxufSk7XG5cbi8vIHRoaXMgcHJldmVudHMgZXJyb3JzIHdoZW4gSGFtbWVyIGlzIGxvYWRlZCBpbiB0aGUgcHJlc2VuY2Ugb2YgYW4gQU1EXG4vLyAgc3R5bGUgbG9hZGVyIGJ1dCBieSBzY3JpcHQgdGFnLCBub3QgYnkgdGhlIGxvYWRlci5cbnZhciBmcmVlR2xvYmFsID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fSkpOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbmZyZWVHbG9iYWwuSGFtbWVyID0gSGFtbWVyO1xuXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gSGFtbWVyO1xuICAgIH0pO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBIYW1tZXI7XG59IGVsc2Uge1xuICAgIHdpbmRvd1tleHBvcnROYW1lXSA9IEhhbW1lcjtcbn1cblxufSkod2luZG93LCBkb2N1bWVudCwgJ0hhbW1lcicpO1xuIiwiLyoqXG4gKiBqcXVlcnkubWFzay5qc1xuICogQHZlcnNpb246IHYxLjE0LjExXG4gKiBAYXV0aG9yOiBJZ29yIEVzY29iYXJcbiAqXG4gKiBDcmVhdGVkIGJ5IElnb3IgRXNjb2JhciBvbiAyMDEyLTAzLTEwLiBQbGVhc2UgcmVwb3J0IGFueSBidWcgYXQgaHR0cDovL2Jsb2cuaWdvcmVzY29iYXIuY29tXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIElnb3IgRXNjb2JhciBodHRwOi8vYmxvZy5pZ29yZXNjb2Jhci5jb21cbiAqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0XG4gKiByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSxcbiAqIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGVcbiAqIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nXG4gKiBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuICogTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbiAqIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLFxuICogV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HXG4gKiBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SXG4gKiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuLyoganNoaW50IGxheGJyZWFrOiB0cnVlICovXG4vKiBqc2hpbnQgbWF4Y29tcGxleGl0eToxNyAqL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIFVNRCAoVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uKSBwYXR0ZXJucyBmb3IgSmF2YVNjcmlwdCBtb2R1bGVzIHRoYXQgd29yayBldmVyeXdoZXJlLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci9qcXVlcnlQbHVnaW5Db21tb25qcy5qc1xuKGZ1bmN0aW9uIChmYWN0b3J5LCBqUXVlcnksIFplcHRvKSB7XG5cbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5IHx8IFplcHRvKTtcbiAgICB9XG5cbn0oZnVuY3Rpb24gKCQpIHtcblxuICAgIHZhciBNYXNrID0gZnVuY3Rpb24gKGVsLCBtYXNrLCBvcHRpb25zKSB7XG5cbiAgICAgICAgdmFyIHAgPSB7XG4gICAgICAgICAgICBpbnZhbGlkOiBbXSxcbiAgICAgICAgICAgIGdldENhcmV0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsID0gZWwuZ2V0KDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgZFNlbCA9IGRvY3VtZW50LnNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNTZWxTdGFydCA9IGN0cmwuc2VsZWN0aW9uU3RhcnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSUUgU3VwcG9ydFxuICAgICAgICAgICAgICAgICAgICBpZiAoZFNlbCAmJiBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdNU0lFIDEwJykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWwgPSBkU2VsLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWwubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCAtcC52YWwoKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gc2VsLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggc3VwcG9ydFxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjU2VsU3RhcnQgfHwgY1NlbFN0YXJ0ID09PSAnMCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IGNTZWxTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRDYXJldDogZnVuY3Rpb24ocG9zKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmlzKCc6Zm9jdXMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlLCBjdHJsID0gZWwuZ2V0KDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJlZm94LCBXZWJLaXQsIGV0Yy4uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3RybC5zZXRTZWxlY3Rpb25SYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuc2V0U2VsZWN0aW9uUmFuZ2UocG9zLCBwb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gSUVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGN0cmwuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICAgICAub24oJ2tleWRvd24ubWFzaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuZGF0YSgnbWFzay1rZXljb2RlJywgZS5rZXlDb2RlIHx8IGUud2hpY2gpO1xuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdtYXNrLXByZXZpdXMtdmFsdWUnLCBlbC52YWwoKSk7XG4gICAgICAgICAgICAgICAgICAgIGVsLmRhdGEoJ21hc2stcHJldml1cy1jYXJldC1wb3MnLCBwLmdldENhcmV0KCkpO1xuICAgICAgICAgICAgICAgICAgICBwLm1hc2tEaWdpdFBvc01hcE9sZCA9IHAubWFza0RpZ2l0UG9zTWFwO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKCQuak1hc2tHbG9iYWxzLnVzZUlucHV0ID8gJ2lucHV0Lm1hc2snIDogJ2tleXVwLm1hc2snLCBwLmJlaGF2aW91cilcbiAgICAgICAgICAgICAgICAub24oJ3Bhc3RlLm1hc2sgZHJvcC5tYXNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5rZXlkb3duKCkua2V5dXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbignY2hhbmdlLm1hc2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdjaGFuZ2VkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAub24oJ2JsdXIubWFzaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gcC52YWwoKSAmJiAhZWwuZGF0YSgnY2hhbmdlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdjaGFuZ2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gaXQncyB2ZXJ5IGltcG9ydGFudCB0aGF0IHRoaXMgY2FsbGJhY2sgcmVtYWlucyBpbiB0aGlzIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgLy8gb3RoZXJ3aGlzZSBvbGRWYWx1ZSBpdCdzIGdvaW5nIHRvIHdvcmsgYnVnZ3lcbiAgICAgICAgICAgICAgICAub24oJ2JsdXIubWFzaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IHAudmFsKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3QgYWxsIHRleHQgb24gZm9jdXNcbiAgICAgICAgICAgICAgICAub24oJ2ZvY3VzLm1hc2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zZWxlY3RPbkZvY3VzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGUudGFyZ2V0KS5zZWxlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gY2xlYXIgdGhlIHZhbHVlIGlmIGl0IG5vdCBjb21wbGV0ZSB0aGUgbWFza1xuICAgICAgICAgICAgICAgIC5vbignZm9jdXNvdXQubWFzaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5jbGVhcklmTm90TWF0Y2ggJiYgIXJlZ2V4TWFzay50ZXN0KHAudmFsKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHAudmFsKCcnKTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0UmVnZXhNYXNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFza0NodW5rcyA9IFtdLCB0cmFuc2xhdGlvbiwgcGF0dGVybiwgb3B0aW9uYWwsIHJlY3Vyc2l2ZSwgb1JlY3Vyc2l2ZSwgcjtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFzay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbiA9IGpNYXNrLnRyYW5zbGF0aW9uW21hc2suY2hhckF0KGkpXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRpb24pIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybiA9IHRyYW5zbGF0aW9uLnBhdHRlcm4udG9TdHJpbmcoKS5yZXBsYWNlKC8uezF9JHxeLnsxfS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbCA9IHRyYW5zbGF0aW9uLm9wdGlvbmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjdXJzaXZlID0gdHJhbnNsYXRpb24ucmVjdXJzaXZlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjdXJzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0NodW5rcy5wdXNoKG1hc2suY2hhckF0KGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvUmVjdXJzaXZlID0ge2RpZ2l0OiBtYXNrLmNoYXJBdChpKSwgcGF0dGVybjogcGF0dGVybn07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tDaHVua3MucHVzaCghb3B0aW9uYWwgJiYgIXJlY3Vyc2l2ZSA/IHBhdHRlcm4gOiAocGF0dGVybiArICc/JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrQ2h1bmtzLnB1c2gobWFzay5jaGFyQXQoaSkucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgciA9IG1hc2tDaHVua3Muam9pbignJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAob1JlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICByID0gci5yZXBsYWNlKG5ldyBSZWdFeHAoJygnICsgb1JlY3Vyc2l2ZS5kaWdpdCArICcoLionICsgb1JlY3Vyc2l2ZS5kaWdpdCArICcpPyknKSwgJygkMSk/JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShuZXcgUmVnRXhwKG9SZWN1cnNpdmUuZGlnaXQsICdnJyksIG9SZWN1cnNpdmUucGF0dGVybik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAocik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzdHJveUV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWwub2ZmKFsnaW5wdXQnLCAna2V5ZG93bicsICdrZXl1cCcsICdwYXN0ZScsICdkcm9wJywgJ2JsdXInLCAnZm9jdXNvdXQnLCAnJ10uam9pbignLm1hc2sgJykpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbDogZnVuY3Rpb24odikge1xuICAgICAgICAgICAgICAgIHZhciBpc0lucHV0ID0gZWwuaXMoJ2lucHV0JyksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IGlzSW5wdXQgPyAndmFsJyA6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgcjtcblxuICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxbbWV0aG9kXSgpICE9PSB2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbFttZXRob2RdKHYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHIgPSBlbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByID0gZWxbbWV0aG9kXSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGN1bGF0ZUNhcmV0UG9zaXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBvbGRWYWwgPSBlbC5kYXRhKCdtYXNrLXByZXZpdXMtdmFsdWUnKSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsID0gcC5nZXRNYXNrZWQoKSxcbiAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgPSBwLmdldENhcmV0KCk7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbCAhPT0gbmV3VmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvc09sZCA9IGVsLmRhdGEoJ21hc2stcHJldml1cy1jYXJldC1wb3MnKSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsTCA9IG5ld1ZhbC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRWYWxMID0gb2xkVmFsLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNCZWZvcmVDYXJldCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQWZ0ZXJDYXJldCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGwgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsT2xkID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGNhcmV0UG9zTmV3OyBpIDwgbmV3VmFsTDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXAubWFza0RpZ2l0UG9zTWFwW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQWZ0ZXJDYXJldCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gY2FyZXRQb3NOZXcgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwLm1hc2tEaWdpdFBvc01hcFtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0JlZm9yZUNhcmV0Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBjYXJldFBvc05ldyAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5tYXNrRGlnaXRQb3NNYXBbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGwrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGNhcmV0UG9zT2xkIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLm1hc2tEaWdpdFBvc01hcE9sZFtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbE9sZCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zTmV3ID4gb2xkVmFsTCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBjdXJzb3IgaXMgYXQgdGhlIGVuZCBrZWVwIGl0IHRoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgPSBuZXdWYWxMO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNhcmV0UG9zT2xkID49IGNhcmV0UG9zTmV3ICYmIGNhcmV0UG9zT2xkICE9PSBvbGRWYWxMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXAubWFza0RpZ2l0UG9zTWFwT2xkW2NhcmV0UG9zTmV3XSkgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY2FyZXRQb3NOZXc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3IC09IG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbE9sZCAtIG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgLT0gbWFza0RpZ2l0c0JlZm9yZUNhcmV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5tYXNrRGlnaXRQb3NNYXBbY2FyZXRQb3NOZXddKSAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3ID0gY2FyZXRQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjYXJldFBvc05ldyA+IGNhcmV0UG9zT2xkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvc05ldyArPSBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGwgLSBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGxPbGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvc05ldyArPSBtYXNrRGlnaXRzQWZ0ZXJDYXJldDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2FyZXRQb3NOZXc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmVoYXZpb3VyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuICAgICAgICAgICAgICAgIHAuaW52YWxpZCA9IFtdO1xuXG4gICAgICAgICAgICAgICAgdmFyIGtleUNvZGUgPSBlbC5kYXRhKCdtYXNrLWtleWNvZGUnKTtcblxuICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkoa2V5Q29kZSwgak1hc2suYnlQYXNzS2V5cykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdWYWwgICA9IHAuZ2V0TWFza2VkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvcyA9IHAuZ2V0Q2FyZXQoKTtcblxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgIHAuc2V0Q2FyZXQocC5jYWxjdWxhdGVDYXJldFBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcC52YWwobmV3VmFsKTtcbiAgICAgICAgICAgICAgICAgICAgcC5zZXRDYXJldChjYXJldFBvcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLmNhbGxiYWNrcyhlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0TWFza2VkOiBmdW5jdGlvbihza2lwTWFza0NoYXJzLCB2YWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnVmID0gW10sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsID09PSB1bmRlZmluZWQgPyBwLnZhbCgpIDogdmFsICsgJycsXG4gICAgICAgICAgICAgICAgICAgIG0gPSAwLCBtYXNrTGVuID0gbWFzay5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIHYgPSAwLCB2YWxMZW4gPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDEsIGFkZE1ldGhvZCA9ICdwdXNoJyxcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRQb3MgPSAtMSxcbiAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0Q291bnQgPSAwLFxuICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRQb3NBcnIgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdE1hc2tDaGFyLFxuICAgICAgICAgICAgICAgICAgICBjaGVjaztcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkTWV0aG9kID0gJ3Vuc2hpZnQnO1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdE1hc2tDaGFyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbSA9IG1hc2tMZW4gLSAxO1xuICAgICAgICAgICAgICAgICAgICB2ID0gdmFsTGVuIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSA+IC0xICYmIHYgPiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsYXN0TWFza0NoYXIgPSBtYXNrTGVuIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSA8IG1hc2tMZW4gJiYgdiA8IHZhbExlbjtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbGFzdFVudHJhbnNsYXRlZE1hc2tDaGFyO1xuICAgICAgICAgICAgICAgIHdoaWxlIChjaGVjaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrRGlnaXQgPSBtYXNrLmNoYXJBdChtKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbERpZ2l0ID0gdmFsdWUuY2hhckF0KHYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24gPSBqTWFzay50cmFuc2xhdGlvblttYXNrRGlnaXRdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbERpZ2l0Lm1hdGNoKHRyYW5zbGF0aW9uLnBhdHRlcm4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmW2FkZE1ldGhvZF0odmFsRGlnaXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRpb24ucmVjdXJzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNldFBvcyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0UG9zID0gbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtID09PSBsYXN0TWFza0NoYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSByZXNldFBvcyAtIG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TWFza0NoYXIgPT09IHJlc2V0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtIC09IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsRGlnaXQgPT09IGxhc3RVbnRyYW5zbGF0ZWRNYXNrQ2hhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoZWQgdGhlIGxhc3QgdW50cmFuc2xhdGVkIChyYXcpIG1hc2sgY2hhcmFjdGVyIHRoYXQgd2UgZW5jb3VudGVyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaWtlbHkgYW4gaW5zZXJ0IG9mZnNldCB0aGUgbWFzayBjaGFyYWN0ZXIgZnJvbSB0aGUgbGFzdCBlbnRyeTsgZmFsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRocm91Z2ggYW5kIG9ubHkgaW5jcmVtZW50IHZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRDb3VudC0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RVbnRyYW5zbGF0ZWRNYXNrQ2hhciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRpb24ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2IC09IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRpb24uZmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZbYWRkTWV0aG9kXSh0cmFuc2xhdGlvbi5mYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdiAtPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwLmludmFsaWQucHVzaCh7cDogdiwgdjogdmFsRGlnaXQsIGU6IHRyYW5zbGF0aW9uLnBhdHRlcm59KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHYgKz0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFza2lwTWFza0NoYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmW2FkZE1ldGhvZF0obWFza0RpZ2l0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbERpZ2l0ID09PSBtYXNrRGlnaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRQb3NBcnIucHVzaCh2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFVudHJhbnNsYXRlZE1hc2tDaGFyID0gbWFza0RpZ2l0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdFBvc0Fyci5wdXNoKHYgKyBtYXNrRGlnaXRDb3VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0Q291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbGFzdE1hc2tDaGFyRGlnaXQgPSBtYXNrLmNoYXJBdChsYXN0TWFza0NoYXIpO1xuICAgICAgICAgICAgICAgIGlmIChtYXNrTGVuID09PSB2YWxMZW4gKyAxICYmICFqTWFzay50cmFuc2xhdGlvbltsYXN0TWFza0NoYXJEaWdpdF0pIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmLnB1c2gobGFzdE1hc2tDaGFyRGlnaXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBuZXdWYWwgPSBidWYuam9pbignJyk7XG4gICAgICAgICAgICAgICAgcC5tYXBNYXNrZGlnaXRQb3NpdGlvbnMobmV3VmFsLCBtYXNrRGlnaXRQb3NBcnIsIHZhbExlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld1ZhbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXBNYXNrZGlnaXRQb3NpdGlvbnM6IGZ1bmN0aW9uKG5ld1ZhbCwgbWFza0RpZ2l0UG9zQXJyLCB2YWxMZW4pIHtcbiAgICAgICAgICAgICAgdmFyIG1hc2tEaWZmID0gb3B0aW9ucy5yZXZlcnNlID8gbmV3VmFsLmxlbmd0aCAtIHZhbExlbiA6IDA7XG4gICAgICAgICAgICAgIHAubWFza0RpZ2l0UG9zTWFwID0ge307XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFza0RpZ2l0UG9zQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcC5tYXNrRGlnaXRQb3NNYXBbbWFza0RpZ2l0UG9zQXJyW2ldICsgbWFza0RpZmZdID0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGxiYWNrczogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gcC52YWwoKSxcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCA9IHZhbCAhPT0gb2xkVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRBcmdzID0gW3ZhbCwgZSwgZWwsIG9wdGlvbnNdLFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uKG5hbWUsIGNyaXRlcmlhLCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnNbbmFtZV0gPT09ICdmdW5jdGlvbicgJiYgY3JpdGVyaWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zW25hbWVdLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soJ29uQ2hhbmdlJywgY2hhbmdlZCA9PT0gdHJ1ZSwgZGVmYXVsdEFyZ3MpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdvbktleVByZXNzJywgY2hhbmdlZCA9PT0gdHJ1ZSwgZGVmYXVsdEFyZ3MpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdvbkNvbXBsZXRlJywgdmFsLmxlbmd0aCA9PT0gbWFzay5sZW5ndGgsIGRlZmF1bHRBcmdzKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygnb25JbnZhbGlkJywgcC5pbnZhbGlkLmxlbmd0aCA+IDAsIFt2YWwsIGUsIGVsLCBwLmludmFsaWQsIG9wdGlvbnNdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBlbCA9ICQoZWwpO1xuICAgICAgICB2YXIgak1hc2sgPSB0aGlzLCBvbGRWYWx1ZSA9IHAudmFsKCksIHJlZ2V4TWFzaztcblxuICAgICAgICBtYXNrID0gdHlwZW9mIG1hc2sgPT09ICdmdW5jdGlvbicgPyBtYXNrKHAudmFsKCksIHVuZGVmaW5lZCwgZWwsICBvcHRpb25zKSA6IG1hc2s7XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgak1hc2subWFzayA9IG1hc2s7XG4gICAgICAgIGpNYXNrLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBqTWFzay5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjYXJldCA9IHAuZ2V0Q2FyZXQoKTtcbiAgICAgICAgICAgIHAuZGVzdHJveUV2ZW50cygpO1xuICAgICAgICAgICAgcC52YWwoak1hc2suZ2V0Q2xlYW5WYWwoKSk7XG4gICAgICAgICAgICBwLnNldENhcmV0KGNhcmV0KTtcbiAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBnZXQgdmFsdWUgd2l0aG91dCBtYXNrXG4gICAgICAgIGpNYXNrLmdldENsZWFuVmFsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHJldHVybiBwLmdldE1hc2tlZCh0cnVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBnZXQgbWFza2VkIHZhbHVlIHdpdGhvdXQgdGhlIHZhbHVlIGJlaW5nIGluIHRoZSBpbnB1dCBvciBlbGVtZW50XG4gICAgICAgIGpNYXNrLmdldE1hc2tlZFZhbCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICByZXR1cm4gcC5nZXRNYXNrZWQoZmFsc2UsIHZhbCk7XG4gICAgICAgIH07XG5cbiAgICAgICBqTWFzay5pbml0ID0gZnVuY3Rpb24ob25seU1hc2spIHtcbiAgICAgICAgICAgIG9ubHlNYXNrID0gb25seU1hc2sgfHwgZmFsc2U7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICAgICAgak1hc2suY2xlYXJJZk5vdE1hdGNoICA9ICQuak1hc2tHbG9iYWxzLmNsZWFySWZOb3RNYXRjaDtcbiAgICAgICAgICAgIGpNYXNrLmJ5UGFzc0tleXMgICAgICAgPSAkLmpNYXNrR2xvYmFscy5ieVBhc3NLZXlzO1xuICAgICAgICAgICAgak1hc2sudHJhbnNsYXRpb24gICAgICA9ICQuZXh0ZW5kKHt9LCAkLmpNYXNrR2xvYmFscy50cmFuc2xhdGlvbiwgb3B0aW9ucy50cmFuc2xhdGlvbik7XG5cbiAgICAgICAgICAgIGpNYXNrID0gJC5leHRlbmQodHJ1ZSwge30sIGpNYXNrLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgcmVnZXhNYXNrID0gcC5nZXRSZWdleE1hc2soKTtcblxuICAgICAgICAgICAgaWYgKG9ubHlNYXNrKSB7XG4gICAgICAgICAgICAgICAgcC5ldmVudHMoKTtcbiAgICAgICAgICAgICAgICBwLnZhbChwLmdldE1hc2tlZCgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuYXR0cigncGxhY2Vob2xkZXInICwgb3B0aW9ucy5wbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnksIG90aGVyd2lzZSBpZiB0aGUgdXNlciBzdWJtaXQgdGhlIGZvcm1cbiAgICAgICAgICAgICAgICAvLyBhbmQgdGhlbiBwcmVzcyB0aGUgXCJiYWNrXCIgYnV0dG9uLCB0aGUgYXV0b2NvbXBsZXRlIHdpbGwgZXJhc2VcbiAgICAgICAgICAgICAgICAvLyB0aGUgZGF0YS4gV29ya3MgZmluZSBvbiBJRTkrLCBGRiwgT3BlcmEsIFNhZmFyaS5cbiAgICAgICAgICAgICAgICBpZiAoZWwuZGF0YSgnbWFzaycpKSB7XG4gICAgICAgICAgICAgICAgICBlbC5hdHRyKCdhdXRvY29tcGxldGUnLCAnb2ZmJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZGV0ZWN0IGlmIGlzIG5lY2Vzc2FyeSBsZXQgdGhlIHVzZXIgdHlwZSBmcmVlbHkuXG4gICAgICAgICAgICAgICAgLy8gZm9yIGlzIGEgbG90IGZhc3RlciB0aGFuIGZvckVhY2guXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1heGxlbmd0aCA9IHRydWU7IGkgPCBtYXNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IGpNYXNrLnRyYW5zbGF0aW9uW21hc2suY2hhckF0KGkpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0aW9uICYmIHRyYW5zbGF0aW9uLnJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChtYXhsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuYXR0cignbWF4bGVuZ3RoJywgbWFzay5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHAuZGVzdHJveUV2ZW50cygpO1xuICAgICAgICAgICAgICAgIHAuZXZlbnRzKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgY2FyZXQgPSBwLmdldENhcmV0KCk7XG4gICAgICAgICAgICAgICAgcC52YWwocC5nZXRNYXNrZWQoKSk7XG4gICAgICAgICAgICAgICAgcC5zZXRDYXJldChjYXJldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgak1hc2suaW5pdCghZWwuaXMoJ2lucHV0JykpO1xuICAgIH07XG5cbiAgICAkLm1hc2tXYXRjaGVycyA9IHt9O1xuICAgIHZhciBIVE1MQXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gJCh0aGlzKSxcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fSxcbiAgICAgICAgICAgIHByZWZpeCA9ICdkYXRhLW1hc2stJyxcbiAgICAgICAgICAgIG1hc2sgPSBpbnB1dC5hdHRyKCdkYXRhLW1hc2snKTtcblxuICAgICAgICBpZiAoaW5wdXQuYXR0cihwcmVmaXggKyAncmV2ZXJzZScpKSB7XG4gICAgICAgICAgICBvcHRpb25zLnJldmVyc2UgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlucHV0LmF0dHIocHJlZml4ICsgJ2NsZWFyaWZub3RtYXRjaCcpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmNsZWFySWZOb3RNYXRjaCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXQuYXR0cihwcmVmaXggKyAnc2VsZWN0b25mb2N1cycpID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgb3B0aW9ucy5zZWxlY3RPbkZvY3VzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub3RTYW1lTWFza09iamVjdChpbnB1dCwgbWFzaywgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5kYXRhKCdtYXNrJywgbmV3IE1hc2sodGhpcywgbWFzaywgb3B0aW9ucykpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBub3RTYW1lTWFza09iamVjdCA9IGZ1bmN0aW9uKGZpZWxkLCBtYXNrLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgbWFza09iamVjdCA9ICQoZmllbGQpLmRhdGEoJ21hc2snKSxcbiAgICAgICAgICAgIHN0cmluZ2lmeSA9IEpTT04uc3RyaW5naWZ5LFxuICAgICAgICAgICAgdmFsdWUgPSAkKGZpZWxkKS52YWwoKSB8fCAkKGZpZWxkKS50ZXh0KCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1hc2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBtYXNrID0gbWFzayh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIG1hc2tPYmplY3QgIT09ICdvYmplY3QnIHx8IHN0cmluZ2lmeShtYXNrT2JqZWN0Lm9wdGlvbnMpICE9PSBzdHJpbmdpZnkob3B0aW9ucykgfHwgbWFza09iamVjdC5tYXNrICE9PSBtYXNrO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0sXG4gICAgZXZlbnRTdXBwb3J0ZWQgPSBmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIGlzU3VwcG9ydGVkO1xuXG4gICAgICAgIGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWU7XG4gICAgICAgIGlzU3VwcG9ydGVkID0gKGV2ZW50TmFtZSBpbiBlbCk7XG5cbiAgICAgICAgaWYgKCAhaXNTdXBwb3J0ZWQgKSB7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgICAgICAgICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgfVxuICAgICAgICBlbCA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkO1xuICAgIH07XG5cbiAgICAkLmZuLm1hc2sgPSBmdW5jdGlvbihtYXNrLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yLFxuICAgICAgICAgICAgZ2xvYmFscyA9ICQuak1hc2tHbG9iYWxzLFxuICAgICAgICAgICAgaW50ZXJ2YWwgPSBnbG9iYWxzLndhdGNoSW50ZXJ2YWwsXG4gICAgICAgICAgICB3YXRjaElucHV0cyA9IG9wdGlvbnMud2F0Y2hJbnB1dHMgfHwgZ2xvYmFscy53YXRjaElucHV0cyxcbiAgICAgICAgICAgIG1hc2tGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChub3RTYW1lTWFza09iamVjdCh0aGlzLCBtYXNrLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5kYXRhKCdtYXNrJywgbmV3IE1hc2sodGhpcywgbWFzaywgb3B0aW9ucykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgJCh0aGlzKS5lYWNoKG1hc2tGdW5jdGlvbik7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yICYmIHNlbGVjdG9yICE9PSAnJyAmJiB3YXRjaElucHV0cykge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCgkLm1hc2tXYXRjaGVyc1tzZWxlY3Rvcl0pO1xuICAgICAgICAgICAgJC5tYXNrV2F0Y2hlcnNbc2VsZWN0b3JdID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5maW5kKHNlbGVjdG9yKS5lYWNoKG1hc2tGdW5jdGlvbik7XG4gICAgICAgICAgICB9LCBpbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgICQuZm4ubWFza2VkID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEoJ21hc2snKS5nZXRNYXNrZWRWYWwodmFsKTtcbiAgICB9O1xuXG4gICAgJC5mbi51bm1hc2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCgkLm1hc2tXYXRjaGVyc1t0aGlzLnNlbGVjdG9yXSk7XG4gICAgICAgIGRlbGV0ZSAkLm1hc2tXYXRjaGVyc1t0aGlzLnNlbGVjdG9yXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkYXRhTWFzayA9ICQodGhpcykuZGF0YSgnbWFzaycpO1xuICAgICAgICAgICAgaWYgKGRhdGFNYXNrKSB7XG4gICAgICAgICAgICAgICAgZGF0YU1hc2sucmVtb3ZlKCkucmVtb3ZlRGF0YSgnbWFzaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJC5mbi5jbGVhblZhbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhKCdtYXNrJykuZ2V0Q2xlYW5WYWwoKTtcbiAgICB9O1xuXG4gICAgJC5hcHBseURhdGFNYXNrID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciB8fCAkLmpNYXNrR2xvYmFscy5tYXNrRWxlbWVudHM7XG4gICAgICAgIHZhciAkc2VsZWN0b3IgPSAoc2VsZWN0b3IgaW5zdGFuY2VvZiAkKSA/IHNlbGVjdG9yIDogJChzZWxlY3Rvcik7XG4gICAgICAgICRzZWxlY3Rvci5maWx0ZXIoJC5qTWFza0dsb2JhbHMuZGF0YU1hc2tBdHRyKS5lYWNoKEhUTUxBdHRyaWJ1dGVzKTtcbiAgICB9O1xuXG4gICAgdmFyIGdsb2JhbHMgPSB7XG4gICAgICAgIG1hc2tFbGVtZW50czogJ2lucHV0LHRkLHNwYW4sZGl2JyxcbiAgICAgICAgZGF0YU1hc2tBdHRyOiAnKltkYXRhLW1hc2tdJyxcbiAgICAgICAgZGF0YU1hc2s6IHRydWUsXG4gICAgICAgIHdhdGNoSW50ZXJ2YWw6IDMwMCxcbiAgICAgICAgd2F0Y2hJbnB1dHM6IHRydWUsXG4gICAgICAgIC8vIG9sZCB2ZXJzaW9ucyBvZiBjaHJvbWUgZG9udCB3b3JrIGdyZWF0IHdpdGggaW5wdXQgZXZlbnRcbiAgICAgICAgdXNlSW5wdXQ6ICEvQ2hyb21lXFwvWzItNF1bMC05XXxTYW1zdW5nQnJvd3Nlci8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgZXZlbnRTdXBwb3J0ZWQoJ2lucHV0JyksXG4gICAgICAgIHdhdGNoRGF0YU1hc2s6IGZhbHNlLFxuICAgICAgICBieVBhc3NLZXlzOiBbOSwgMTYsIDE3LCAxOCwgMzYsIDM3LCAzOCwgMzksIDQwLCA5MV0sXG4gICAgICAgIHRyYW5zbGF0aW9uOiB7XG4gICAgICAgICAgICAnMCc6IHtwYXR0ZXJuOiAvXFxkL30sXG4gICAgICAgICAgICAnOSc6IHtwYXR0ZXJuOiAvXFxkLywgb3B0aW9uYWw6IHRydWV9LFxuICAgICAgICAgICAgJyMnOiB7cGF0dGVybjogL1xcZC8sIHJlY3Vyc2l2ZTogdHJ1ZX0sXG4gICAgICAgICAgICAnQSc6IHtwYXR0ZXJuOiAvW2EtekEtWjAtOV0vfSxcbiAgICAgICAgICAgICdTJzoge3BhdHRlcm46IC9bYS16QS1aXS99XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5qTWFza0dsb2JhbHMgPSAkLmpNYXNrR2xvYmFscyB8fCB7fTtcbiAgICBnbG9iYWxzID0gJC5qTWFza0dsb2JhbHMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgZ2xvYmFscywgJC5qTWFza0dsb2JhbHMpO1xuXG4gICAgLy8gbG9va2luZyBmb3IgaW5wdXRzIHdpdGggZGF0YS1tYXNrIGF0dHJpYnV0ZVxuICAgIGlmIChnbG9iYWxzLmRhdGFNYXNrKSB7XG4gICAgICAgICQuYXBwbHlEYXRhTWFzaygpO1xuICAgIH1cblxuICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJC5qTWFza0dsb2JhbHMud2F0Y2hEYXRhTWFzaykge1xuICAgICAgICAgICAgJC5hcHBseURhdGFNYXNrKCk7XG4gICAgICAgIH1cbiAgICB9LCBnbG9iYWxzLndhdGNoSW50ZXJ2YWwpO1xufSwgd2luZG93LmpRdWVyeSwgd2luZG93LlplcHRvKSk7XG4iLCIvKiFcclxuICogalF1ZXJ5IFZhbGlkYXRpb24gUGx1Z2luIHYxLjE2LjBcclxuICpcclxuICogaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL1xyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgSsO2cm4gWmFlZmZlcmVyXHJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxyXG4gKi9cclxuKGZ1bmN0aW9uKCBmYWN0b3J5ICkge1xyXG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XHJcblx0XHRkZWZpbmUoIFtcImpxdWVyeVwiXSwgZmFjdG9yeSApO1xyXG5cdH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCByZXF1aXJlKCBcImpxdWVyeVwiICkgKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XHJcblx0fVxyXG59KGZ1bmN0aW9uKCAkICkge1xyXG5cclxuJC5leHRlbmQoICQuZm4sIHtcblxuXHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvdmFsaWRhdGUvXG5cdHZhbGlkYXRlOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIG5vdGhpbmcgaXMgc2VsZWN0ZWQsIHJldHVybiBub3RoaW5nOyBjYW4ndCBjaGFpbiBhbnl3YXlcblx0XHRpZiAoICF0aGlzLmxlbmd0aCApIHtcblx0XHRcdGlmICggb3B0aW9ucyAmJiBvcHRpb25zLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICkge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oIFwiTm90aGluZyBzZWxlY3RlZCwgY2FuJ3QgdmFsaWRhdGUsIHJldHVybmluZyBub3RoaW5nLlwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgaWYgYSB2YWxpZGF0b3IgZm9yIHRoaXMgZm9ybSB3YXMgYWxyZWFkeSBjcmVhdGVkXG5cdFx0dmFyIHZhbGlkYXRvciA9ICQuZGF0YSggdGhpc1sgMCBdLCBcInZhbGlkYXRvclwiICk7XG5cdFx0aWYgKCB2YWxpZGF0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdmFsaWRhdG9yO1xuXHRcdH1cblxuXHRcdC8vIEFkZCBub3ZhbGlkYXRlIHRhZyBpZiBIVE1MNS5cblx0XHR0aGlzLmF0dHIoIFwibm92YWxpZGF0ZVwiLCBcIm5vdmFsaWRhdGVcIiApO1xuXG5cdFx0dmFsaWRhdG9yID0gbmV3ICQudmFsaWRhdG9yKCBvcHRpb25zLCB0aGlzWyAwIF0gKTtcblx0XHQkLmRhdGEoIHRoaXNbIDAgXSwgXCJ2YWxpZGF0b3JcIiwgdmFsaWRhdG9yICk7XG5cblx0XHRpZiAoIHZhbGlkYXRvci5zZXR0aW5ncy5vbnN1Ym1pdCApIHtcblxuXHRcdFx0dGhpcy5vbiggXCJjbGljay52YWxpZGF0ZVwiLCBcIjpzdWJtaXRcIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpZiAoIHZhbGlkYXRvci5zZXR0aW5ncy5zdWJtaXRIYW5kbGVyICkge1xuXHRcdFx0XHRcdHZhbGlkYXRvci5zdWJtaXRCdXR0b24gPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBbGxvdyBzdXBwcmVzc2luZyB2YWxpZGF0aW9uIGJ5IGFkZGluZyBhIGNhbmNlbCBjbGFzcyB0byB0aGUgc3VibWl0IGJ1dHRvblxuXHRcdFx0XHRpZiAoICQoIHRoaXMgKS5oYXNDbGFzcyggXCJjYW5jZWxcIiApICkge1xuXHRcdFx0XHRcdHZhbGlkYXRvci5jYW5jZWxTdWJtaXQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWxsb3cgc3VwcHJlc3NpbmcgdmFsaWRhdGlvbiBieSBhZGRpbmcgdGhlIGh0bWw1IGZvcm1ub3ZhbGlkYXRlIGF0dHJpYnV0ZSB0byB0aGUgc3VibWl0IGJ1dHRvblxuXHRcdFx0XHRpZiAoICQoIHRoaXMgKS5hdHRyKCBcImZvcm1ub3ZhbGlkYXRlXCIgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHZhbGlkYXRvci5jYW5jZWxTdWJtaXQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIFZhbGlkYXRlIHRoZSBmb3JtIG9uIHN1Ym1pdFxuXHRcdFx0dGhpcy5vbiggXCJzdWJtaXQudmFsaWRhdGVcIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpZiAoIHZhbGlkYXRvci5zZXR0aW5ncy5kZWJ1ZyApIHtcblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgZm9ybSBzdWJtaXQgdG8gYmUgYWJsZSB0byBzZWUgY29uc29sZSBvdXRwdXRcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZ1bmN0aW9uIGhhbmRsZSgpIHtcblx0XHRcdFx0XHR2YXIgaGlkZGVuLCByZXN1bHQ7XG5cdFx0XHRcdFx0aWYgKCB2YWxpZGF0b3Iuc2V0dGluZ3Muc3VibWl0SGFuZGxlciApIHtcblx0XHRcdFx0XHRcdGlmICggdmFsaWRhdG9yLnN1Ym1pdEJ1dHRvbiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJbnNlcnQgYSBoaWRkZW4gaW5wdXQgYXMgYSByZXBsYWNlbWVudCBmb3IgdGhlIG1pc3Npbmcgc3VibWl0IGJ1dHRvblxuXHRcdFx0XHRcdFx0XHRoaWRkZW4gPSAkKCBcIjxpbnB1dCB0eXBlPSdoaWRkZW4nLz5cIiApXG5cdFx0XHRcdFx0XHRcdFx0LmF0dHIoIFwibmFtZVwiLCB2YWxpZGF0b3Iuc3VibWl0QnV0dG9uLm5hbWUgKVxuXHRcdFx0XHRcdFx0XHRcdC52YWwoICQoIHZhbGlkYXRvci5zdWJtaXRCdXR0b24gKS52YWwoKSApXG5cdFx0XHRcdFx0XHRcdFx0LmFwcGVuZFRvKCB2YWxpZGF0b3IuY3VycmVudEZvcm0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJlc3VsdCA9IHZhbGlkYXRvci5zZXR0aW5ncy5zdWJtaXRIYW5kbGVyLmNhbGwoIHZhbGlkYXRvciwgdmFsaWRhdG9yLmN1cnJlbnRGb3JtLCBldmVudCApO1xuXHRcdFx0XHRcdFx0aWYgKCB2YWxpZGF0b3Iuc3VibWl0QnV0dG9uICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFuZCBjbGVhbiB1cCBhZnRlcndhcmRzOyB0aGFua3MgdG8gbm8tYmxvY2stc2NvcGUsIGhpZGRlbiBjYW4gYmUgcmVmZXJlbmNlZFxuXHRcdFx0XHRcdFx0XHRoaWRkZW4ucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIHJlc3VsdCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByZXZlbnQgc3VibWl0IGZvciBpbnZhbGlkIGZvcm1zIG9yIGN1c3RvbSBzdWJtaXQgaGFuZGxlcnNcblx0XHRcdFx0aWYgKCB2YWxpZGF0b3IuY2FuY2VsU3VibWl0ICkge1xuXHRcdFx0XHRcdHZhbGlkYXRvci5jYW5jZWxTdWJtaXQgPSBmYWxzZTtcblx0XHRcdFx0XHRyZXR1cm4gaGFuZGxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCB2YWxpZGF0b3IuZm9ybSgpICkge1xuXHRcdFx0XHRcdGlmICggdmFsaWRhdG9yLnBlbmRpbmdSZXF1ZXN0ICkge1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLmZvcm1TdWJtaXR0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gaGFuZGxlKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsaWRhdG9yLmZvY3VzSW52YWxpZCgpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZGF0b3I7XG5cdH0sXG5cblx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3ZhbGlkL1xuXHR2YWxpZDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZhbGlkLCB2YWxpZGF0b3IsIGVycm9yTGlzdDtcblxuXHRcdGlmICggJCggdGhpc1sgMCBdICkuaXMoIFwiZm9ybVwiICkgKSB7XG5cdFx0XHR2YWxpZCA9IHRoaXMudmFsaWRhdGUoKS5mb3JtKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVycm9yTGlzdCA9IFtdO1xuXHRcdFx0dmFsaWQgPSB0cnVlO1xuXHRcdFx0dmFsaWRhdG9yID0gJCggdGhpc1sgMCBdLmZvcm0gKS52YWxpZGF0ZSgpO1xuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFsaWQgPSB2YWxpZGF0b3IuZWxlbWVudCggdGhpcyApICYmIHZhbGlkO1xuXHRcdFx0XHRpZiAoICF2YWxpZCApIHtcblx0XHRcdFx0XHRlcnJvckxpc3QgPSBlcnJvckxpc3QuY29uY2F0KCB2YWxpZGF0b3IuZXJyb3JMaXN0ICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHRcdHZhbGlkYXRvci5lcnJvckxpc3QgPSBlcnJvckxpc3Q7XG5cdFx0fVxuXHRcdHJldHVybiB2YWxpZDtcblx0fSxcblxuXHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcnVsZXMvXG5cdHJ1bGVzOiBmdW5jdGlvbiggY29tbWFuZCwgYXJndW1lbnQgKSB7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzWyAwIF0sXG5cdFx0XHRzZXR0aW5ncywgc3RhdGljUnVsZXMsIGV4aXN0aW5nUnVsZXMsIGRhdGEsIHBhcmFtLCBmaWx0ZXJlZDtcblxuXHRcdC8vIElmIG5vdGhpbmcgaXMgc2VsZWN0ZWQsIHJldHVybiBlbXB0eSBvYmplY3Q7IGNhbid0IGNoYWluIGFueXdheVxuXHRcdGlmICggZWxlbWVudCA9PSBudWxsIHx8IGVsZW1lbnQuZm9ybSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggY29tbWFuZCApIHtcblx0XHRcdHNldHRpbmdzID0gJC5kYXRhKCBlbGVtZW50LmZvcm0sIFwidmFsaWRhdG9yXCIgKS5zZXR0aW5ncztcblx0XHRcdHN0YXRpY1J1bGVzID0gc2V0dGluZ3MucnVsZXM7XG5cdFx0XHRleGlzdGluZ1J1bGVzID0gJC52YWxpZGF0b3Iuc3RhdGljUnVsZXMoIGVsZW1lbnQgKTtcblx0XHRcdHN3aXRjaCAoIGNvbW1hbmQgKSB7XG5cdFx0XHRjYXNlIFwiYWRkXCI6XG5cdFx0XHRcdCQuZXh0ZW5kKCBleGlzdGluZ1J1bGVzLCAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKCBhcmd1bWVudCApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIG1lc3NhZ2VzIGZyb20gcnVsZXMsIGJ1dCBhbGxvdyB0aGVtIHRvIGJlIHNldCBzZXBhcmF0ZWx5XG5cdFx0XHRcdGRlbGV0ZSBleGlzdGluZ1J1bGVzLm1lc3NhZ2VzO1xuXHRcdFx0XHRzdGF0aWNSdWxlc1sgZWxlbWVudC5uYW1lIF0gPSBleGlzdGluZ1J1bGVzO1xuXHRcdFx0XHRpZiAoIGFyZ3VtZW50Lm1lc3NhZ2VzICkge1xuXHRcdFx0XHRcdHNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXSA9ICQuZXh0ZW5kKCBzZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0sIGFyZ3VtZW50Lm1lc3NhZ2VzICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwicmVtb3ZlXCI6XG5cdFx0XHRcdGlmICggIWFyZ3VtZW50ICkge1xuXHRcdFx0XHRcdGRlbGV0ZSBzdGF0aWNSdWxlc1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHRcdFx0cmV0dXJuIGV4aXN0aW5nUnVsZXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZmlsdGVyZWQgPSB7fTtcblx0XHRcdFx0JC5lYWNoKCBhcmd1bWVudC5zcGxpdCggL1xccy8gKSwgZnVuY3Rpb24oIGluZGV4LCBtZXRob2QgKSB7XG5cdFx0XHRcdFx0ZmlsdGVyZWRbIG1ldGhvZCBdID0gZXhpc3RpbmdSdWxlc1sgbWV0aG9kIF07XG5cdFx0XHRcdFx0ZGVsZXRlIGV4aXN0aW5nUnVsZXNbIG1ldGhvZCBdO1xuXHRcdFx0XHRcdGlmICggbWV0aG9kID09PSBcInJlcXVpcmVkXCIgKSB7XG5cdFx0XHRcdFx0XHQkKCBlbGVtZW50ICkucmVtb3ZlQXR0ciggXCJhcmlhLXJlcXVpcmVkXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIGZpbHRlcmVkO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGRhdGEgPSAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlcyhcblx0XHQkLmV4dGVuZChcblx0XHRcdHt9LFxuXHRcdFx0JC52YWxpZGF0b3IuY2xhc3NSdWxlcyggZWxlbWVudCApLFxuXHRcdFx0JC52YWxpZGF0b3IuYXR0cmlidXRlUnVsZXMoIGVsZW1lbnQgKSxcblx0XHRcdCQudmFsaWRhdG9yLmRhdGFSdWxlcyggZWxlbWVudCApLFxuXHRcdFx0JC52YWxpZGF0b3Iuc3RhdGljUnVsZXMoIGVsZW1lbnQgKVxuXHRcdCksIGVsZW1lbnQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSByZXF1aXJlZCBpcyBhdCBmcm9udFxuXHRcdGlmICggZGF0YS5yZXF1aXJlZCApIHtcblx0XHRcdHBhcmFtID0gZGF0YS5yZXF1aXJlZDtcblx0XHRcdGRlbGV0ZSBkYXRhLnJlcXVpcmVkO1xuXHRcdFx0ZGF0YSA9ICQuZXh0ZW5kKCB7IHJlcXVpcmVkOiBwYXJhbSB9LCBkYXRhICk7XG5cdFx0XHQkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLXJlcXVpcmVkXCIsIFwidHJ1ZVwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHJlbW90ZSBpcyBhdCBiYWNrXG5cdFx0aWYgKCBkYXRhLnJlbW90ZSApIHtcblx0XHRcdHBhcmFtID0gZGF0YS5yZW1vdGU7XG5cdFx0XHRkZWxldGUgZGF0YS5yZW1vdGU7XG5cdFx0XHRkYXRhID0gJC5leHRlbmQoIGRhdGEsIHsgcmVtb3RlOiBwYXJhbSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cbn0gKTtcblxuLy8gQ3VzdG9tIHNlbGVjdG9yc1xuJC5leHRlbmQoICQuZXhwci5wc2V1ZG9zIHx8ICQuZXhwclsgXCI6XCIgXSwge1x0XHQvLyAnfHwgJC5leHByWyBcIjpcIiBdJyBoZXJlIGVuYWJsZXMgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgdG8galF1ZXJ5IDEuNy4gQ2FuIGJlIHJlbW92ZWQgd2hlbiBkcm9wcGluZyBqUSAxLjcueCBzdXBwb3J0XG5cblx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2JsYW5rLXNlbGVjdG9yL1xuXHRibGFuazogZnVuY3Rpb24oIGEgKSB7XG5cdFx0cmV0dXJuICEkLnRyaW0oIFwiXCIgKyAkKCBhICkudmFsKCkgKTtcblx0fSxcblxuXHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZmlsbGVkLXNlbGVjdG9yL1xuXHRmaWxsZWQ6IGZ1bmN0aW9uKCBhICkge1xuXHRcdHZhciB2YWwgPSAkKCBhICkudmFsKCk7XG5cdFx0cmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhISQudHJpbSggXCJcIiArIHZhbCApO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy91bmNoZWNrZWQtc2VsZWN0b3IvXG5cdHVuY2hlY2tlZDogZnVuY3Rpb24oIGEgKSB7XG5cdFx0cmV0dXJuICEkKCBhICkucHJvcCggXCJjaGVja2VkXCIgKTtcblx0fVxufSApO1xuXG4vLyBDb25zdHJ1Y3RvciBmb3IgdmFsaWRhdG9yXG4kLnZhbGlkYXRvciA9IGZ1bmN0aW9uKCBvcHRpb25zLCBmb3JtICkge1xuXHR0aGlzLnNldHRpbmdzID0gJC5leHRlbmQoIHRydWUsIHt9LCAkLnZhbGlkYXRvci5kZWZhdWx0cywgb3B0aW9ucyApO1xuXHR0aGlzLmN1cnJlbnRGb3JtID0gZm9ybTtcblx0dGhpcy5pbml0KCk7XG59O1xuXG4vLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvalF1ZXJ5LnZhbGlkYXRvci5mb3JtYXQvXG4kLnZhbGlkYXRvci5mb3JtYXQgPSBmdW5jdGlvbiggc291cmNlLCBwYXJhbXMgKSB7XG5cdGlmICggYXJndW1lbnRzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgYXJncyA9ICQubWFrZUFycmF5KCBhcmd1bWVudHMgKTtcblx0XHRcdGFyZ3MudW5zaGlmdCggc291cmNlICk7XG5cdFx0XHRyZXR1cm4gJC52YWxpZGF0b3IuZm9ybWF0LmFwcGx5KCB0aGlzLCBhcmdzICk7XG5cdFx0fTtcblx0fVxuXHRpZiAoIHBhcmFtcyA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHJldHVybiBzb3VyY2U7XG5cdH1cblx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBwYXJhbXMuY29uc3RydWN0b3IgIT09IEFycmF5ICApIHtcblx0XHRwYXJhbXMgPSAkLm1ha2VBcnJheSggYXJndW1lbnRzICkuc2xpY2UoIDEgKTtcblx0fVxuXHRpZiAoIHBhcmFtcy5jb25zdHJ1Y3RvciAhPT0gQXJyYXkgKSB7XG5cdFx0cGFyYW1zID0gWyBwYXJhbXMgXTtcblx0fVxuXHQkLmVhY2goIHBhcmFtcywgZnVuY3Rpb24oIGksIG4gKSB7XG5cdFx0c291cmNlID0gc291cmNlLnJlcGxhY2UoIG5ldyBSZWdFeHAoIFwiXFxcXHtcIiArIGkgKyBcIlxcXFx9XCIsIFwiZ1wiICksIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIG47XG5cdFx0fSApO1xuXHR9ICk7XG5cdHJldHVybiBzb3VyY2U7XG59O1xuXG4kLmV4dGVuZCggJC52YWxpZGF0b3IsIHtcblxuXHRkZWZhdWx0czoge1xuXHRcdG1lc3NhZ2VzOiB7fSxcblx0XHRncm91cHM6IHt9LFxuXHRcdHJ1bGVzOiB7fSxcblx0XHRlcnJvckNsYXNzOiBcImVycm9yXCIsXG5cdFx0cGVuZGluZ0NsYXNzOiBcInBlbmRpbmdcIixcblx0XHR2YWxpZENsYXNzOiBcInZhbGlkXCIsXG5cdFx0ZXJyb3JFbGVtZW50OiBcImxhYmVsXCIsXG5cdFx0Zm9jdXNDbGVhbnVwOiBmYWxzZSxcblx0XHRmb2N1c0ludmFsaWQ6IHRydWUsXG5cdFx0ZXJyb3JDb250YWluZXI6ICQoIFtdICksXG5cdFx0ZXJyb3JMYWJlbENvbnRhaW5lcjogJCggW10gKSxcblx0XHRvbnN1Ym1pdDogdHJ1ZSxcblx0XHRpZ25vcmU6IFwiOmhpZGRlblwiLFxuXHRcdGlnbm9yZVRpdGxlOiBmYWxzZSxcblx0XHRvbmZvY3VzaW46IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0dGhpcy5sYXN0QWN0aXZlID0gZWxlbWVudDtcblxuXHRcdFx0Ly8gSGlkZSBlcnJvciBsYWJlbCBhbmQgcmVtb3ZlIGVycm9yIGNsYXNzIG9uIGZvY3VzIGlmIGVuYWJsZWRcblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5mb2N1c0NsZWFudXAgKSB7XG5cdFx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodCApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0LmNhbGwoIHRoaXMsIGVsZW1lbnQsIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5oaWRlVGhlc2UoIHRoaXMuZXJyb3JzRm9yKCBlbGVtZW50ICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9uZm9jdXNvdXQ6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0aWYgKCAhdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSAmJiAoIGVsZW1lbnQubmFtZSBpbiB0aGlzLnN1Ym1pdHRlZCB8fCAhdGhpcy5vcHRpb25hbCggZWxlbWVudCApICkgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudCggZWxlbWVudCApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0b25rZXl1cDogZnVuY3Rpb24oIGVsZW1lbnQsIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBBdm9pZCByZXZhbGlkYXRlIHRoZSBmaWVsZCB3aGVuIHByZXNzaW5nIG9uZSBvZiB0aGUgZm9sbG93aW5nIGtleXNcblx0XHRcdC8vIFNoaWZ0ICAgICAgID0+IDE2XG5cdFx0XHQvLyBDdHJsICAgICAgICA9PiAxN1xuXHRcdFx0Ly8gQWx0ICAgICAgICAgPT4gMThcblx0XHRcdC8vIENhcHMgbG9jayAgID0+IDIwXG5cdFx0XHQvLyBFbmQgICAgICAgICA9PiAzNVxuXHRcdFx0Ly8gSG9tZSAgICAgICAgPT4gMzZcblx0XHRcdC8vIExlZnQgYXJyb3cgID0+IDM3XG5cdFx0XHQvLyBVcCBhcnJvdyAgICA9PiAzOFxuXHRcdFx0Ly8gUmlnaHQgYXJyb3cgPT4gMzlcblx0XHRcdC8vIERvd24gYXJyb3cgID0+IDQwXG5cdFx0XHQvLyBJbnNlcnQgICAgICA9PiA0NVxuXHRcdFx0Ly8gTnVtIGxvY2sgICAgPT4gMTQ0XG5cdFx0XHQvLyBBbHRHciBrZXkgICA9PiAyMjVcblx0XHRcdHZhciBleGNsdWRlZEtleXMgPSBbXG5cdFx0XHRcdDE2LCAxNywgMTgsIDIwLCAzNSwgMzYsIDM3LFxuXHRcdFx0XHQzOCwgMzksIDQwLCA0NSwgMTQ0LCAyMjVcblx0XHRcdF07XG5cblx0XHRcdGlmICggZXZlbnQud2hpY2ggPT09IDkgJiYgdGhpcy5lbGVtZW50VmFsdWUoIGVsZW1lbnQgKSA9PT0gXCJcIiB8fCAkLmluQXJyYXkoIGV2ZW50LmtleUNvZGUsIGV4Y2x1ZGVkS2V5cyApICE9PSAtMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbWVudC5uYW1lIGluIHRoaXMuc3VibWl0dGVkIHx8IGVsZW1lbnQubmFtZSBpbiB0aGlzLmludmFsaWQgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudCggZWxlbWVudCApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0b25jbGljazogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cblx0XHRcdC8vIENsaWNrIG9uIHNlbGVjdHMsIHJhZGlvYnV0dG9ucyBhbmQgY2hlY2tib3hlc1xuXHRcdFx0aWYgKCBlbGVtZW50Lm5hbWUgaW4gdGhpcy5zdWJtaXR0ZWQgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudCggZWxlbWVudCApO1xuXG5cdFx0XHQvLyBPciBvcHRpb24gZWxlbWVudHMsIGNoZWNrIHBhcmVudCBzZWxlY3QgaW4gdGhhdCBjYXNlXG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtZW50LnBhcmVudE5vZGUubmFtZSBpbiB0aGlzLnN1Ym1pdHRlZCApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50KCBlbGVtZW50LnBhcmVudE5vZGUgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGhpZ2hsaWdodDogZnVuY3Rpb24oIGVsZW1lbnQsIGVycm9yQ2xhc3MsIHZhbGlkQ2xhc3MgKSB7XG5cdFx0XHRpZiAoIGVsZW1lbnQudHlwZSA9PT0gXCJyYWRpb1wiICkge1xuXHRcdFx0XHR0aGlzLmZpbmRCeU5hbWUoIGVsZW1lbnQubmFtZSApLmFkZENsYXNzKCBlcnJvckNsYXNzICkucmVtb3ZlQ2xhc3MoIHZhbGlkQ2xhc3MgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCQoIGVsZW1lbnQgKS5hZGRDbGFzcyggZXJyb3JDbGFzcyApLnJlbW92ZUNsYXNzKCB2YWxpZENsYXNzICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR1bmhpZ2hsaWdodDogZnVuY3Rpb24oIGVsZW1lbnQsIGVycm9yQ2xhc3MsIHZhbGlkQ2xhc3MgKSB7XG5cdFx0XHRpZiAoIGVsZW1lbnQudHlwZSA9PT0gXCJyYWRpb1wiICkge1xuXHRcdFx0XHR0aGlzLmZpbmRCeU5hbWUoIGVsZW1lbnQubmFtZSApLnJlbW92ZUNsYXNzKCBlcnJvckNsYXNzICkuYWRkQ2xhc3MoIHZhbGlkQ2xhc3MgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCQoIGVsZW1lbnQgKS5yZW1vdmVDbGFzcyggZXJyb3JDbGFzcyApLmFkZENsYXNzKCB2YWxpZENsYXNzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9qUXVlcnkudmFsaWRhdG9yLnNldERlZmF1bHRzL1xuXHRzZXREZWZhdWx0czogZnVuY3Rpb24oIHNldHRpbmdzICkge1xuXHRcdCQuZXh0ZW5kKCAkLnZhbGlkYXRvci5kZWZhdWx0cywgc2V0dGluZ3MgKTtcblx0fSxcblxuXHRtZXNzYWdlczoge1xuXHRcdHJlcXVpcmVkOiBcIlRoaXMgZmllbGQgaXMgcmVxdWlyZWQuXCIsXG5cdFx0cmVtb3RlOiBcIlBsZWFzZSBmaXggdGhpcyBmaWVsZC5cIixcblx0XHRlbWFpbDogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLlwiLFxuXHRcdHVybDogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBVUkwuXCIsXG5cdFx0ZGF0ZTogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBkYXRlLlwiLFxuXHRcdGRhdGVJU086IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgZGF0ZSAoSVNPKS5cIixcblx0XHRudW1iZXI6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgbnVtYmVyLlwiLFxuXHRcdGRpZ2l0czogXCJQbGVhc2UgZW50ZXIgb25seSBkaWdpdHMuXCIsXG5cdFx0ZXF1YWxUbzogXCJQbGVhc2UgZW50ZXIgdGhlIHNhbWUgdmFsdWUgYWdhaW4uXCIsXG5cdFx0bWF4bGVuZ3RoOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIG5vIG1vcmUgdGhhbiB7MH0gY2hhcmFjdGVycy5cIiApLFxuXHRcdG1pbmxlbmd0aDogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhdCBsZWFzdCB7MH0gY2hhcmFjdGVycy5cIiApLFxuXHRcdHJhbmdlbGVuZ3RoOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGEgdmFsdWUgYmV0d2VlbiB7MH0gYW5kIHsxfSBjaGFyYWN0ZXJzIGxvbmcuXCIgKSxcblx0XHRyYW5nZTogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhIHZhbHVlIGJldHdlZW4gezB9IGFuZCB7MX0uXCIgKSxcblx0XHRtYXg6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYSB2YWx1ZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gezB9LlwiICksXG5cdFx0bWluOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGEgdmFsdWUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHswfS5cIiApLFxuXHRcdHN0ZXA6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYSBtdWx0aXBsZSBvZiB7MH0uXCIgKVxuXHR9LFxuXG5cdGF1dG9DcmVhdGVSYW5nZXM6IGZhbHNlLFxuXG5cdHByb3RvdHlwZToge1xuXG5cdFx0aW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmxhYmVsQ29udGFpbmVyID0gJCggdGhpcy5zZXR0aW5ncy5lcnJvckxhYmVsQ29udGFpbmVyICk7XG5cdFx0XHR0aGlzLmVycm9yQ29udGV4dCA9IHRoaXMubGFiZWxDb250YWluZXIubGVuZ3RoICYmIHRoaXMubGFiZWxDb250YWluZXIgfHwgJCggdGhpcy5jdXJyZW50Rm9ybSApO1xuXHRcdFx0dGhpcy5jb250YWluZXJzID0gJCggdGhpcy5zZXR0aW5ncy5lcnJvckNvbnRhaW5lciApLmFkZCggdGhpcy5zZXR0aW5ncy5lcnJvckxhYmVsQ29udGFpbmVyICk7XG5cdFx0XHR0aGlzLnN1Ym1pdHRlZCA9IHt9O1xuXHRcdFx0dGhpcy52YWx1ZUNhY2hlID0ge307XG5cdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0ID0gMDtcblx0XHRcdHRoaXMucGVuZGluZyA9IHt9O1xuXHRcdFx0dGhpcy5pbnZhbGlkID0ge307XG5cdFx0XHR0aGlzLnJlc2V0KCk7XG5cblx0XHRcdHZhciBncm91cHMgPSAoIHRoaXMuZ3JvdXBzID0ge30gKSxcblx0XHRcdFx0cnVsZXM7XG5cdFx0XHQkLmVhY2goIHRoaXMuc2V0dGluZ3MuZ3JvdXBzLCBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5zcGxpdCggL1xccy8gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQkLmVhY2goIHZhbHVlLCBmdW5jdGlvbiggaW5kZXgsIG5hbWUgKSB7XG5cdFx0XHRcdFx0Z3JvdXBzWyBuYW1lIF0gPSBrZXk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH0gKTtcblx0XHRcdHJ1bGVzID0gdGhpcy5zZXR0aW5ncy5ydWxlcztcblx0XHRcdCQuZWFjaCggcnVsZXMsIGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRydWxlc1sga2V5IF0gPSAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXG5cdFx0XHRmdW5jdGlvbiBkZWxlZ2F0ZSggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IGZvcm0gZXhwYW5kbyBvbiBjb250ZW50ZWRpdGFibGVcblx0XHRcdFx0aWYgKCAhdGhpcy5mb3JtICYmIHRoaXMuaGFzQXR0cmlidXRlKCBcImNvbnRlbnRlZGl0YWJsZVwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb3JtID0gJCggdGhpcyApLmNsb3Nlc3QoIFwiZm9ybVwiIClbIDAgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciB2YWxpZGF0b3IgPSAkLmRhdGEoIHRoaXMuZm9ybSwgXCJ2YWxpZGF0b3JcIiApLFxuXHRcdFx0XHRcdGV2ZW50VHlwZSA9IFwib25cIiArIGV2ZW50LnR5cGUucmVwbGFjZSggL152YWxpZGF0ZS8sIFwiXCIgKSxcblx0XHRcdFx0XHRzZXR0aW5ncyA9IHZhbGlkYXRvci5zZXR0aW5ncztcblx0XHRcdFx0aWYgKCBzZXR0aW5nc1sgZXZlbnRUeXBlIF0gJiYgISQoIHRoaXMgKS5pcyggc2V0dGluZ3MuaWdub3JlICkgKSB7XG5cdFx0XHRcdFx0c2V0dGluZ3NbIGV2ZW50VHlwZSBdLmNhbGwoIHZhbGlkYXRvciwgdGhpcywgZXZlbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtIClcblx0XHRcdFx0Lm9uKCBcImZvY3VzaW4udmFsaWRhdGUgZm9jdXNvdXQudmFsaWRhdGUga2V5dXAudmFsaWRhdGVcIixcblx0XHRcdFx0XHRcIjp0ZXh0LCBbdHlwZT0ncGFzc3dvcmQnXSwgW3R5cGU9J2ZpbGUnXSwgc2VsZWN0LCB0ZXh0YXJlYSwgW3R5cGU9J251bWJlciddLCBbdHlwZT0nc2VhcmNoJ10sIFwiICtcblx0XHRcdFx0XHRcIlt0eXBlPSd0ZWwnXSwgW3R5cGU9J3VybCddLCBbdHlwZT0nZW1haWwnXSwgW3R5cGU9J2RhdGV0aW1lJ10sIFt0eXBlPSdkYXRlJ10sIFt0eXBlPSdtb250aCddLCBcIiArXG5cdFx0XHRcdFx0XCJbdHlwZT0nd2VlayddLCBbdHlwZT0ndGltZSddLCBbdHlwZT0nZGF0ZXRpbWUtbG9jYWwnXSwgW3R5cGU9J3JhbmdlJ10sIFt0eXBlPSdjb2xvciddLCBcIiArXG5cdFx0XHRcdFx0XCJbdHlwZT0ncmFkaW8nXSwgW3R5cGU9J2NoZWNrYm94J10sIFtjb250ZW50ZWRpdGFibGVdLCBbdHlwZT0nYnV0dG9uJ11cIiwgZGVsZWdhdGUgKVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSwgb2xkSUVcblx0XHRcdFx0Ly8gXCJzZWxlY3RcIiBpcyBwcm92aWRlZCBhcyBldmVudC50YXJnZXQgd2hlbiBjbGlja2luZyBhIG9wdGlvblxuXHRcdFx0XHQub24oIFwiY2xpY2sudmFsaWRhdGVcIiwgXCJzZWxlY3QsIG9wdGlvbiwgW3R5cGU9J3JhZGlvJ10sIFt0eXBlPSdjaGVja2JveCddXCIsIGRlbGVnYXRlICk7XG5cblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5pbnZhbGlkSGFuZGxlciApIHtcblx0XHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApLm9uKCBcImludmFsaWQtZm9ybS52YWxpZGF0ZVwiLCB0aGlzLnNldHRpbmdzLmludmFsaWRIYW5kbGVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBhcmlhLXJlcXVpcmVkIHRvIGFueSBTdGF0aWMvRGF0YS9DbGFzcyByZXF1aXJlZCBmaWVsZHMgYmVmb3JlIGZpcnN0IHZhbGlkYXRpb25cblx0XHRcdC8vIFNjcmVlbiByZWFkZXJzIHJlcXVpcmUgdGhpcyBhdHRyaWJ1dGUgdG8gYmUgcHJlc2VudCBiZWZvcmUgdGhlIGluaXRpYWwgc3VibWlzc2lvbiBodHRwOi8vd3d3LnczLm9yZy9UUi9XQ0FHLVRFQ0hTL0FSSUEyLmh0bWxcblx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKS5maW5kKCBcIltyZXF1aXJlZF0sIFtkYXRhLXJ1bGUtcmVxdWlyZWRdLCAucmVxdWlyZWRcIiApLmF0dHIoIFwiYXJpYS1yZXF1aXJlZFwiLCBcInRydWVcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLmZvcm0vXG5cdFx0Zm9ybTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmNoZWNrRm9ybSgpO1xuXHRcdFx0JC5leHRlbmQoIHRoaXMuc3VibWl0dGVkLCB0aGlzLmVycm9yTWFwICk7XG5cdFx0XHR0aGlzLmludmFsaWQgPSAkLmV4dGVuZCgge30sIHRoaXMuZXJyb3JNYXAgKTtcblx0XHRcdGlmICggIXRoaXMudmFsaWQoKSApIHtcblx0XHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApLnRyaWdnZXJIYW5kbGVyKCBcImludmFsaWQtZm9ybVwiLCBbIHRoaXMgXSApO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5zaG93RXJyb3JzKCk7XG5cdFx0XHRyZXR1cm4gdGhpcy52YWxpZCgpO1xuXHRcdH0sXG5cblx0XHRjaGVja0Zvcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5wcmVwYXJlRm9ybSgpO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBlbGVtZW50cyA9ICggdGhpcy5jdXJyZW50RWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzKCkgKTsgZWxlbWVudHNbIGkgXTsgaSsrICkge1xuXHRcdFx0XHR0aGlzLmNoZWNrKCBlbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy52YWxpZCgpO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLmVsZW1lbnQvXG5cdFx0ZWxlbWVudDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR2YXIgY2xlYW5FbGVtZW50ID0gdGhpcy5jbGVhbiggZWxlbWVudCApLFxuXHRcdFx0XHRjaGVja0VsZW1lbnQgPSB0aGlzLnZhbGlkYXRpb25UYXJnZXRGb3IoIGNsZWFuRWxlbWVudCApLFxuXHRcdFx0XHR2ID0gdGhpcyxcblx0XHRcdFx0cmVzdWx0ID0gdHJ1ZSxcblx0XHRcdFx0cnMsIGdyb3VwO1xuXG5cdFx0XHRpZiAoIGNoZWNrRWxlbWVudCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRkZWxldGUgdGhpcy5pbnZhbGlkWyBjbGVhbkVsZW1lbnQubmFtZSBdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5wcmVwYXJlRWxlbWVudCggY2hlY2tFbGVtZW50ICk7XG5cdFx0XHRcdHRoaXMuY3VycmVudEVsZW1lbnRzID0gJCggY2hlY2tFbGVtZW50ICk7XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBlbGVtZW50IGlzIGdyb3VwZWQsIHRoZW4gdmFsaWRhdGUgYWxsIGdyb3VwIGVsZW1lbnRzIGFscmVhZHlcblx0XHRcdFx0Ly8gY29udGFpbmluZyBhIHZhbHVlXG5cdFx0XHRcdGdyb3VwID0gdGhpcy5ncm91cHNbIGNoZWNrRWxlbWVudC5uYW1lIF07XG5cdFx0XHRcdGlmICggZ3JvdXAgKSB7XG5cdFx0XHRcdFx0JC5lYWNoKCB0aGlzLmdyb3VwcywgZnVuY3Rpb24oIG5hbWUsIHRlc3Rncm91cCApIHtcblx0XHRcdFx0XHRcdGlmICggdGVzdGdyb3VwID09PSBncm91cCAmJiBuYW1lICE9PSBjaGVja0VsZW1lbnQubmFtZSApIHtcblx0XHRcdFx0XHRcdFx0Y2xlYW5FbGVtZW50ID0gdi52YWxpZGF0aW9uVGFyZ2V0Rm9yKCB2LmNsZWFuKCB2LmZpbmRCeU5hbWUoIG5hbWUgKSApICk7XG5cdFx0XHRcdFx0XHRcdGlmICggY2xlYW5FbGVtZW50ICYmIGNsZWFuRWxlbWVudC5uYW1lIGluIHYuaW52YWxpZCApIHtcblx0XHRcdFx0XHRcdFx0XHR2LmN1cnJlbnRFbGVtZW50cy5wdXNoKCBjbGVhbkVsZW1lbnQgKTtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQgPSB2LmNoZWNrKCBjbGVhbkVsZW1lbnQgKSAmJiByZXN1bHQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRycyA9IHRoaXMuY2hlY2soIGNoZWNrRWxlbWVudCApICE9PSBmYWxzZTtcblx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0ICYmIHJzO1xuXHRcdFx0XHRpZiAoIHJzICkge1xuXHRcdFx0XHRcdHRoaXMuaW52YWxpZFsgY2hlY2tFbGVtZW50Lm5hbWUgXSA9IGZhbHNlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuaW52YWxpZFsgY2hlY2tFbGVtZW50Lm5hbWUgXSA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoICF0aGlzLm51bWJlck9mSW52YWxpZHMoKSApIHtcblxuXHRcdFx0XHRcdC8vIEhpZGUgZXJyb3IgY29udGFpbmVycyBvbiBsYXN0IGVycm9yXG5cdFx0XHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLnRvSGlkZS5hZGQoIHRoaXMuY29udGFpbmVycyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuc2hvd0Vycm9ycygpO1xuXG5cdFx0XHRcdC8vIEFkZCBhcmlhLWludmFsaWQgc3RhdHVzIGZvciBzY3JlZW4gcmVhZGVyc1xuXHRcdFx0XHQkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWludmFsaWRcIiwgIXJzICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9WYWxpZGF0b3Iuc2hvd0Vycm9ycy9cblx0XHRzaG93RXJyb3JzOiBmdW5jdGlvbiggZXJyb3JzICkge1xuXHRcdFx0aWYgKCBlcnJvcnMgKSB7XG5cdFx0XHRcdHZhciB2YWxpZGF0b3IgPSB0aGlzO1xuXG5cdFx0XHRcdC8vIEFkZCBpdGVtcyB0byBlcnJvciBsaXN0IGFuZCBtYXBcblx0XHRcdFx0JC5leHRlbmQoIHRoaXMuZXJyb3JNYXAsIGVycm9ycyApO1xuXHRcdFx0XHR0aGlzLmVycm9yTGlzdCA9ICQubWFwKCB0aGlzLmVycm9yTWFwLCBmdW5jdGlvbiggbWVzc2FnZSwgbmFtZSApIHtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0bWVzc2FnZTogbWVzc2FnZSxcblx0XHRcdFx0XHRcdGVsZW1lbnQ6IHZhbGlkYXRvci5maW5kQnlOYW1lKCBuYW1lIClbIDAgXVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgaXRlbXMgZnJvbSBzdWNjZXNzIGxpc3Rcblx0XHRcdFx0dGhpcy5zdWNjZXNzTGlzdCA9ICQuZ3JlcCggdGhpcy5zdWNjZXNzTGlzdCwgZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEoIGVsZW1lbnQubmFtZSBpbiBlcnJvcnMgKTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnNob3dFcnJvcnMgKSB7XG5cdFx0XHRcdHRoaXMuc2V0dGluZ3Muc2hvd0Vycm9ycy5jYWxsKCB0aGlzLCB0aGlzLmVycm9yTWFwLCB0aGlzLmVycm9yTGlzdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5kZWZhdWx0U2hvd0Vycm9ycygpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLnJlc2V0Rm9ybS9cblx0XHRyZXNldEZvcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAkLmZuLnJlc2V0Rm9ybSApIHtcblx0XHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApLnJlc2V0Rm9ybSgpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5pbnZhbGlkID0ge307XG5cdFx0XHR0aGlzLnN1Ym1pdHRlZCA9IHt9O1xuXHRcdFx0dGhpcy5wcmVwYXJlRm9ybSgpO1xuXHRcdFx0dGhpcy5oaWRlRXJyb3JzKCk7XG5cdFx0XHR2YXIgZWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzKClcblx0XHRcdFx0LnJlbW92ZURhdGEoIFwicHJldmlvdXNWYWx1ZVwiIClcblx0XHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1pbnZhbGlkXCIgKTtcblxuXHRcdFx0dGhpcy5yZXNldEVsZW1lbnRzKCBlbGVtZW50cyApO1xuXHRcdH0sXG5cblx0XHRyZXNldEVsZW1lbnRzOiBmdW5jdGlvbiggZWxlbWVudHMgKSB7XG5cdFx0XHR2YXIgaTtcblxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgZWxlbWVudHNbIGkgXTsgaSsrICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQuY2FsbCggdGhpcywgZWxlbWVudHNbIGkgXSxcblx0XHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgXCJcIiApO1xuXHRcdFx0XHRcdHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudHNbIGkgXS5uYW1lICkucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50c1xuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRudW1iZXJPZkludmFsaWRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLm9iamVjdExlbmd0aCggdGhpcy5pbnZhbGlkICk7XG5cdFx0fSxcblxuXHRcdG9iamVjdExlbmd0aDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdC8qIGpzaGludCB1bnVzZWQ6IGZhbHNlICovXG5cdFx0XHR2YXIgY291bnQgPSAwLFxuXHRcdFx0XHRpO1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggb2JqWyBpIF0gKSB7XG5cdFx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNvdW50O1xuXHRcdH0sXG5cblx0XHRoaWRlRXJyb3JzOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuaGlkZVRoZXNlKCB0aGlzLnRvSGlkZSApO1xuXHRcdH0sXG5cblx0XHRoaWRlVGhlc2U6IGZ1bmN0aW9uKCBlcnJvcnMgKSB7XG5cdFx0XHRlcnJvcnMubm90KCB0aGlzLmNvbnRhaW5lcnMgKS50ZXh0KCBcIlwiICk7XG5cdFx0XHR0aGlzLmFkZFdyYXBwZXIoIGVycm9ycyApLmhpZGUoKTtcblx0XHR9LFxuXG5cdFx0dmFsaWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuc2l6ZSgpID09PSAwO1xuXHRcdH0sXG5cblx0XHRzaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmVycm9yTGlzdC5sZW5ndGg7XG5cdFx0fSxcblxuXHRcdGZvY3VzSW52YWxpZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuZm9jdXNJbnZhbGlkICkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdCQoIHRoaXMuZmluZExhc3RBY3RpdmUoKSB8fCB0aGlzLmVycm9yTGlzdC5sZW5ndGggJiYgdGhpcy5lcnJvckxpc3RbIDAgXS5lbGVtZW50IHx8IFtdIClcblx0XHRcdFx0XHQuZmlsdGVyKCBcIjp2aXNpYmxlXCIgKVxuXHRcdFx0XHRcdC5mb2N1cygpXG5cblx0XHRcdFx0XHQvLyBNYW51YWxseSB0cmlnZ2VyIGZvY3VzaW4gZXZlbnQ7IHdpdGhvdXQgaXQsIGZvY3VzaW4gaGFuZGxlciBpc24ndCBjYWxsZWQsIGZpbmRMYXN0QWN0aXZlIHdvbid0IGhhdmUgYW55dGhpbmcgdG8gZmluZFxuXHRcdFx0XHRcdC50cmlnZ2VyKCBcImZvY3VzaW5cIiApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vIElnbm9yZSBJRSB0aHJvd2luZyBlcnJvcnMgd2hlbiBmb2N1c2luZyBoaWRkZW4gZWxlbWVudHNcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRmaW5kTGFzdEFjdGl2ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbGFzdEFjdGl2ZSA9IHRoaXMubGFzdEFjdGl2ZTtcblx0XHRcdHJldHVybiBsYXN0QWN0aXZlICYmICQuZ3JlcCggdGhpcy5lcnJvckxpc3QsIGZ1bmN0aW9uKCBuICkge1xuXHRcdFx0XHRyZXR1cm4gbi5lbGVtZW50Lm5hbWUgPT09IGxhc3RBY3RpdmUubmFtZTtcblx0XHRcdH0gKS5sZW5ndGggPT09IDEgJiYgbGFzdEFjdGl2ZTtcblx0XHR9LFxuXG5cdFx0ZWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHZhbGlkYXRvciA9IHRoaXMsXG5cdFx0XHRcdHJ1bGVzQ2FjaGUgPSB7fTtcblxuXHRcdFx0Ly8gU2VsZWN0IGFsbCB2YWxpZCBpbnB1dHMgaW5zaWRlIHRoZSBmb3JtIChubyBzdWJtaXQgb3IgcmVzZXQgYnV0dG9ucylcblx0XHRcdHJldHVybiAkKCB0aGlzLmN1cnJlbnRGb3JtIClcblx0XHRcdC5maW5kKCBcImlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBbY29udGVudGVkaXRhYmxlXVwiIClcblx0XHRcdC5ub3QoIFwiOnN1Ym1pdCwgOnJlc2V0LCA6aW1hZ2UsIDpkaXNhYmxlZFwiIClcblx0XHRcdC5ub3QoIHRoaXMuc2V0dGluZ3MuaWdub3JlIClcblx0XHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgbmFtZSA9IHRoaXMubmFtZSB8fCAkKCB0aGlzICkuYXR0ciggXCJuYW1lXCIgKTsgLy8gRm9yIGNvbnRlbnRlZGl0YWJsZVxuXHRcdFx0XHRpZiAoICFuYW1lICYmIHZhbGlkYXRvci5zZXR0aW5ncy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSApIHtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBcIiVvIGhhcyBubyBuYW1lIGFzc2lnbmVkXCIsIHRoaXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBmb3JtIGV4cGFuZG8gb24gY29udGVudGVkaXRhYmxlXG5cdFx0XHRcdGlmICggdGhpcy5oYXNBdHRyaWJ1dGUoIFwiY29udGVudGVkaXRhYmxlXCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmZvcm0gPSAkKCB0aGlzICkuY2xvc2VzdCggXCJmb3JtXCIgKVsgMCBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2VsZWN0IG9ubHkgdGhlIGZpcnN0IGVsZW1lbnQgZm9yIGVhY2ggbmFtZSwgYW5kIG9ubHkgdGhvc2Ugd2l0aCBydWxlcyBzcGVjaWZpZWRcblx0XHRcdFx0aWYgKCBuYW1lIGluIHJ1bGVzQ2FjaGUgfHwgIXZhbGlkYXRvci5vYmplY3RMZW5ndGgoICQoIHRoaXMgKS5ydWxlcygpICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cnVsZXNDYWNoZVsgbmFtZSBdID0gdHJ1ZTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdGNsZWFuOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gJCggc2VsZWN0b3IgKVsgMCBdO1xuXHRcdH0sXG5cblx0XHRlcnJvcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGVycm9yQ2xhc3MgPSB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3Muc3BsaXQoIFwiIFwiICkuam9pbiggXCIuXCIgKTtcblx0XHRcdHJldHVybiAkKCB0aGlzLnNldHRpbmdzLmVycm9yRWxlbWVudCArIFwiLlwiICsgZXJyb3JDbGFzcywgdGhpcy5lcnJvckNvbnRleHQgKTtcblx0XHR9LFxuXG5cdFx0cmVzZXRJbnRlcm5hbHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5zdWNjZXNzTGlzdCA9IFtdO1xuXHRcdFx0dGhpcy5lcnJvckxpc3QgPSBbXTtcblx0XHRcdHRoaXMuZXJyb3JNYXAgPSB7fTtcblx0XHRcdHRoaXMudG9TaG93ID0gJCggW10gKTtcblx0XHRcdHRoaXMudG9IaWRlID0gJCggW10gKTtcblx0XHR9LFxuXG5cdFx0cmVzZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5yZXNldEludGVybmFscygpO1xuXHRcdFx0dGhpcy5jdXJyZW50RWxlbWVudHMgPSAkKCBbXSApO1xuXHRcdH0sXG5cblx0XHRwcmVwYXJlRm9ybTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnJlc2V0KCk7XG5cdFx0XHR0aGlzLnRvSGlkZSA9IHRoaXMuZXJyb3JzKCkuYWRkKCB0aGlzLmNvbnRhaW5lcnMgKTtcblx0XHR9LFxuXG5cdFx0cHJlcGFyZUVsZW1lbnQ6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0dGhpcy5yZXNldCgpO1xuXHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLmVycm9yc0ZvciggZWxlbWVudCApO1xuXHRcdH0sXG5cblx0XHRlbGVtZW50VmFsdWU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0dmFyICRlbGVtZW50ID0gJCggZWxlbWVudCApLFxuXHRcdFx0XHR0eXBlID0gZWxlbWVudC50eXBlLFxuXHRcdFx0XHR2YWwsIGlkeDtcblxuXHRcdFx0aWYgKCB0eXBlID09PSBcInJhZGlvXCIgfHwgdHlwZSA9PT0gXCJjaGVja2JveFwiICkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5maWx0ZXIoIFwiOmNoZWNrZWRcIiApLnZhbCgpO1xuXHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZWxlbWVudC52YWxpZGl0eSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQudmFsaWRpdHkuYmFkSW5wdXQgPyBcIk5hTlwiIDogJGVsZW1lbnQudmFsKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbWVudC5oYXNBdHRyaWJ1dGUoIFwiY29udGVudGVkaXRhYmxlXCIgKSApIHtcblx0XHRcdFx0dmFsID0gJGVsZW1lbnQudGV4dCgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gJGVsZW1lbnQudmFsKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJmaWxlXCIgKSB7XG5cblx0XHRcdFx0Ly8gTW9kZXJuIGJyb3dzZXIgKGNocm9tZSAmIHNhZmFyaSlcblx0XHRcdFx0aWYgKCB2YWwuc3Vic3RyKCAwLCAxMiApID09PSBcIkM6XFxcXGZha2VwYXRoXFxcXFwiICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWwuc3Vic3RyKCAxMiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTGVnYWN5IGJyb3dzZXJzXG5cdFx0XHRcdC8vIFVuaXgtYmFzZWQgcGF0aFxuXHRcdFx0XHRpZHggPSB2YWwubGFzdEluZGV4T2YoIFwiL1wiICk7XG5cdFx0XHRcdGlmICggaWR4ID49IDAgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbC5zdWJzdHIoIGlkeCArIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdpbmRvd3MtYmFzZWQgcGF0aFxuXHRcdFx0XHRpZHggPSB2YWwubGFzdEluZGV4T2YoIFwiXFxcXFwiICk7XG5cdFx0XHRcdGlmICggaWR4ID49IDAgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbC5zdWJzdHIoIGlkeCArIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEp1c3QgdGhlIGZpbGUgbmFtZVxuXHRcdFx0XHRyZXR1cm4gdmFsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdHJldHVybiB2YWwucmVwbGFjZSggL1xcci9nLCBcIlwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH0sXG5cblx0XHRjaGVjazogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHRlbGVtZW50ID0gdGhpcy52YWxpZGF0aW9uVGFyZ2V0Rm9yKCB0aGlzLmNsZWFuKCBlbGVtZW50ICkgKTtcblxuXHRcdFx0dmFyIHJ1bGVzID0gJCggZWxlbWVudCApLnJ1bGVzKCksXG5cdFx0XHRcdHJ1bGVzQ291bnQgPSAkLm1hcCggcnVsZXMsIGZ1bmN0aW9uKCBuLCBpICkge1xuXHRcdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0XHR9ICkubGVuZ3RoLFxuXHRcdFx0XHRkZXBlbmRlbmN5TWlzbWF0Y2ggPSBmYWxzZSxcblx0XHRcdFx0dmFsID0gdGhpcy5lbGVtZW50VmFsdWUoIGVsZW1lbnQgKSxcblx0XHRcdFx0cmVzdWx0LCBtZXRob2QsIHJ1bGU7XG5cblx0XHRcdC8vIElmIGEgbm9ybWFsaXplciBpcyBkZWZpbmVkIGZvciB0aGlzIGVsZW1lbnQsIHRoZW5cblx0XHRcdC8vIGNhbGwgaXQgdG8gcmV0cmVpdmUgdGhlIGNoYW5nZWQgdmFsdWUgaW5zdGVhZFxuXHRcdFx0Ly8gb2YgdXNpbmcgdGhlIHJlYWwgb25lLlxuXHRcdFx0Ly8gTm90ZSB0aGF0IGB0aGlzYCBpbiB0aGUgbm9ybWFsaXplciBpcyBgZWxlbWVudGAuXG5cdFx0XHRpZiAoIHR5cGVvZiBydWxlcy5ub3JtYWxpemVyID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdHZhbCA9IHJ1bGVzLm5vcm1hbGl6ZXIuY2FsbCggZWxlbWVudCwgdmFsICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlb2YgdmFsICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlIG5vcm1hbGl6ZXIgc2hvdWxkIHJldHVybiBhIHN0cmluZyB2YWx1ZS5cIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRGVsZXRlIHRoZSBub3JtYWxpemVyIGZyb20gcnVsZXMgdG8gYXZvaWQgdHJlYXRpbmdcblx0XHRcdFx0Ly8gaXQgYXMgYSBwcmUtZGVmaW5lZCBtZXRob2QuXG5cdFx0XHRcdGRlbGV0ZSBydWxlcy5ub3JtYWxpemVyO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBtZXRob2QgaW4gcnVsZXMgKSB7XG5cdFx0XHRcdHJ1bGUgPSB7IG1ldGhvZDogbWV0aG9kLCBwYXJhbWV0ZXJzOiBydWxlc1sgbWV0aG9kIF0gfTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRyZXN1bHQgPSAkLnZhbGlkYXRvci5tZXRob2RzWyBtZXRob2QgXS5jYWxsKCB0aGlzLCB2YWwsIGVsZW1lbnQsIHJ1bGUucGFyYW1ldGVycyApO1xuXG5cdFx0XHRcdFx0Ly8gSWYgYSBtZXRob2QgaW5kaWNhdGVzIHRoYXQgdGhlIGZpZWxkIGlzIG9wdGlvbmFsIGFuZCB0aGVyZWZvcmUgdmFsaWQsXG5cdFx0XHRcdFx0Ly8gZG9uJ3QgbWFyayBpdCBhcyB2YWxpZCB3aGVuIHRoZXJlIGFyZSBubyBvdGhlciBydWxlc1xuXHRcdFx0XHRcdGlmICggcmVzdWx0ID09PSBcImRlcGVuZGVuY3ktbWlzbWF0Y2hcIiAmJiBydWxlc0NvdW50ID09PSAxICkge1xuXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeU1pc21hdGNoID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkZXBlbmRlbmN5TWlzbWF0Y2ggPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcmVzdWx0ID09PSBcInBlbmRpbmdcIiApIHtcblx0XHRcdFx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy50b0hpZGUubm90KCB0aGlzLmVycm9yc0ZvciggZWxlbWVudCApICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAhcmVzdWx0ICkge1xuXHRcdFx0XHRcdFx0dGhpcy5mb3JtYXRBbmRBZGQoIGVsZW1lbnQsIHJ1bGUgKTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSApIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCBcIkV4Y2VwdGlvbiBvY2N1cnJlZCB3aGVuIGNoZWNraW5nIGVsZW1lbnQgXCIgKyBlbGVtZW50LmlkICsgXCIsIGNoZWNrIHRoZSAnXCIgKyBydWxlLm1ldGhvZCArIFwiJyBtZXRob2QuXCIsIGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBlIGluc3RhbmNlb2YgVHlwZUVycm9yICkge1xuXHRcdFx0XHRcdFx0ZS5tZXNzYWdlICs9IFwiLiAgRXhjZXB0aW9uIG9jY3VycmVkIHdoZW4gY2hlY2tpbmcgZWxlbWVudCBcIiArIGVsZW1lbnQuaWQgKyBcIiwgY2hlY2sgdGhlICdcIiArIHJ1bGUubWV0aG9kICsgXCInIG1ldGhvZC5cIjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGRlcGVuZGVuY3lNaXNtYXRjaCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLm9iamVjdExlbmd0aCggcnVsZXMgKSApIHtcblx0XHRcdFx0dGhpcy5zdWNjZXNzTGlzdC5wdXNoKCBlbGVtZW50ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjdXN0b20gbWVzc2FnZSBmb3IgdGhlIGdpdmVuIGVsZW1lbnQgYW5kIHZhbGlkYXRpb24gbWV0aG9kXG5cdFx0Ly8gc3BlY2lmaWVkIGluIHRoZSBlbGVtZW50J3MgSFRNTDUgZGF0YSBhdHRyaWJ1dGVcblx0XHQvLyByZXR1cm4gdGhlIGdlbmVyaWMgbWVzc2FnZSBpZiBwcmVzZW50IGFuZCBubyBtZXRob2Qgc3BlY2lmaWMgbWVzc2FnZSBpcyBwcmVzZW50XG5cdFx0Y3VzdG9tRGF0YU1lc3NhZ2U6IGZ1bmN0aW9uKCBlbGVtZW50LCBtZXRob2QgKSB7XG5cdFx0XHRyZXR1cm4gJCggZWxlbWVudCApLmRhdGEoIFwibXNnXCIgKyBtZXRob2QuY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArXG5cdFx0XHRcdG1ldGhvZC5zdWJzdHJpbmcoIDEgKS50b0xvd2VyQ2FzZSgpICkgfHwgJCggZWxlbWVudCApLmRhdGEoIFwibXNnXCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjdXN0b20gbWVzc2FnZSBmb3IgdGhlIGdpdmVuIGVsZW1lbnQgbmFtZSBhbmQgdmFsaWRhdGlvbiBtZXRob2Rcblx0XHRjdXN0b21NZXNzYWdlOiBmdW5jdGlvbiggbmFtZSwgbWV0aG9kICkge1xuXHRcdFx0dmFyIG0gPSB0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBuYW1lIF07XG5cdFx0XHRyZXR1cm4gbSAmJiAoIG0uY29uc3RydWN0b3IgPT09IFN0cmluZyA/IG0gOiBtWyBtZXRob2QgXSApO1xuXHRcdH0sXG5cblx0XHQvLyBSZXR1cm4gdGhlIGZpcnN0IGRlZmluZWQgYXJndW1lbnQsIGFsbG93aW5nIGVtcHR5IHN0cmluZ3Ncblx0XHRmaW5kRGVmaW5lZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYXJndW1lbnRzWyBpIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gYXJndW1lbnRzWyBpIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fSxcblxuXHRcdC8vIFRoZSBzZWNvbmQgcGFyYW1ldGVyICdydWxlJyB1c2VkIHRvIGJlIGEgc3RyaW5nLCBhbmQgZXh0ZW5kZWQgdG8gYW4gb2JqZWN0IGxpdGVyYWxcblx0XHQvLyBvZiB0aGUgZm9sbG93aW5nIGZvcm06XG5cdFx0Ly8gcnVsZSA9IHtcblx0XHQvLyAgICAgbWV0aG9kOiBcIm1ldGhvZCBuYW1lXCIsXG5cdFx0Ly8gICAgIHBhcmFtZXRlcnM6IFwidGhlIGdpdmVuIG1ldGhvZCBwYXJhbWV0ZXJzXCJcblx0XHQvLyB9XG5cdFx0Ly9cblx0XHQvLyBUaGUgb2xkIGJlaGF2aW9yIHN0aWxsIHN1cHBvcnRlZCwga2VwdCB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGhcblx0XHQvLyBvbGQgY29kZSwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXHRcdGRlZmF1bHRNZXNzYWdlOiBmdW5jdGlvbiggZWxlbWVudCwgcnVsZSApIHtcblx0XHRcdGlmICggdHlwZW9mIHJ1bGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdHJ1bGUgPSB7IG1ldGhvZDogcnVsZSB9O1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbWVzc2FnZSA9IHRoaXMuZmluZERlZmluZWQoXG5cdFx0XHRcdFx0dGhpcy5jdXN0b21NZXNzYWdlKCBlbGVtZW50Lm5hbWUsIHJ1bGUubWV0aG9kICksXG5cdFx0XHRcdFx0dGhpcy5jdXN0b21EYXRhTWVzc2FnZSggZWxlbWVudCwgcnVsZS5tZXRob2QgKSxcblxuXHRcdFx0XHRcdC8vICd0aXRsZScgaXMgbmV2ZXIgdW5kZWZpbmVkLCBzbyBoYW5kbGUgZW1wdHkgc3RyaW5nIGFzIHVuZGVmaW5lZFxuXHRcdFx0XHRcdCF0aGlzLnNldHRpbmdzLmlnbm9yZVRpdGxlICYmIGVsZW1lbnQudGl0bGUgfHwgdW5kZWZpbmVkLFxuXHRcdFx0XHRcdCQudmFsaWRhdG9yLm1lc3NhZ2VzWyBydWxlLm1ldGhvZCBdLFxuXHRcdFx0XHRcdFwiPHN0cm9uZz5XYXJuaW5nOiBObyBtZXNzYWdlIGRlZmluZWQgZm9yIFwiICsgZWxlbWVudC5uYW1lICsgXCI8L3N0cm9uZz5cIlxuXHRcdFx0XHQpLFxuXHRcdFx0XHR0aGVyZWdleCA9IC9cXCQ/XFx7KFxcZCspXFx9L2c7XG5cdFx0XHRpZiAoIHR5cGVvZiBtZXNzYWdlID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdG1lc3NhZ2UgPSBtZXNzYWdlLmNhbGwoIHRoaXMsIHJ1bGUucGFyYW1ldGVycywgZWxlbWVudCApO1xuXHRcdFx0fSBlbHNlIGlmICggdGhlcmVnZXgudGVzdCggbWVzc2FnZSApICkge1xuXHRcdFx0XHRtZXNzYWdlID0gJC52YWxpZGF0b3IuZm9ybWF0KCBtZXNzYWdlLnJlcGxhY2UoIHRoZXJlZ2V4LCBcInskMX1cIiApLCBydWxlLnBhcmFtZXRlcnMgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdFx0fSxcblxuXHRcdGZvcm1hdEFuZEFkZDogZnVuY3Rpb24oIGVsZW1lbnQsIHJ1bGUgKSB7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IHRoaXMuZGVmYXVsdE1lc3NhZ2UoIGVsZW1lbnQsIHJ1bGUgKTtcblxuXHRcdFx0dGhpcy5lcnJvckxpc3QucHVzaCgge1xuXHRcdFx0XHRtZXNzYWdlOiBtZXNzYWdlLFxuXHRcdFx0XHRlbGVtZW50OiBlbGVtZW50LFxuXHRcdFx0XHRtZXRob2Q6IHJ1bGUubWV0aG9kXG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMuZXJyb3JNYXBbIGVsZW1lbnQubmFtZSBdID0gbWVzc2FnZTtcblx0XHRcdHRoaXMuc3VibWl0dGVkWyBlbGVtZW50Lm5hbWUgXSA9IG1lc3NhZ2U7XG5cdFx0fSxcblxuXHRcdGFkZFdyYXBwZXI6IGZ1bmN0aW9uKCB0b1RvZ2dsZSApIHtcblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy53cmFwcGVyICkge1xuXHRcdFx0XHR0b1RvZ2dsZSA9IHRvVG9nZ2xlLmFkZCggdG9Ub2dnbGUucGFyZW50KCB0aGlzLnNldHRpbmdzLndyYXBwZXIgKSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRvVG9nZ2xlO1xuXHRcdH0sXG5cblx0XHRkZWZhdWx0U2hvd0Vycm9yczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSwgZWxlbWVudHMsIGVycm9yO1xuXHRcdFx0Zm9yICggaSA9IDA7IHRoaXMuZXJyb3JMaXN0WyBpIF07IGkrKyApIHtcblx0XHRcdFx0ZXJyb3IgPSB0aGlzLmVycm9yTGlzdFsgaSBdO1xuXHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0LmNhbGwoIHRoaXMsIGVycm9yLmVsZW1lbnQsIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5zaG93TGFiZWwoIGVycm9yLmVsZW1lbnQsIGVycm9yLm1lc3NhZ2UgKTtcblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5lcnJvckxpc3QubGVuZ3RoICkge1xuXHRcdFx0XHR0aGlzLnRvU2hvdyA9IHRoaXMudG9TaG93LmFkZCggdGhpcy5jb250YWluZXJzICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IHRoaXMuc3VjY2Vzc0xpc3RbIGkgXTsgaSsrICkge1xuXHRcdFx0XHRcdHRoaXMuc2hvd0xhYmVsKCB0aGlzLnN1Y2Nlc3NMaXN0WyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgZWxlbWVudHMgPSB0aGlzLnZhbGlkRWxlbWVudHMoKTsgZWxlbWVudHNbIGkgXTsgaSsrICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQuY2FsbCggdGhpcywgZWxlbWVudHNbIGkgXSwgdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLCB0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLnRvSGlkZS5ub3QoIHRoaXMudG9TaG93ICk7XG5cdFx0XHR0aGlzLmhpZGVFcnJvcnMoKTtcblx0XHRcdHRoaXMuYWRkV3JhcHBlciggdGhpcy50b1Nob3cgKS5zaG93KCk7XG5cdFx0fSxcblxuXHRcdHZhbGlkRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY3VycmVudEVsZW1lbnRzLm5vdCggdGhpcy5pbnZhbGlkRWxlbWVudHMoKSApO1xuXHRcdH0sXG5cblx0XHRpbnZhbGlkRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuICQoIHRoaXMuZXJyb3JMaXN0ICkubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0c2hvd0xhYmVsOiBmdW5jdGlvbiggZWxlbWVudCwgbWVzc2FnZSApIHtcblx0XHRcdHZhciBwbGFjZSwgZ3JvdXAsIGVycm9ySUQsIHYsXG5cdFx0XHRcdGVycm9yID0gdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKSxcblx0XHRcdFx0ZWxlbWVudElEID0gdGhpcy5pZE9yTmFtZSggZWxlbWVudCApLFxuXHRcdFx0XHRkZXNjcmliZWRCeSA9ICQoIGVsZW1lbnQgKS5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiApO1xuXG5cdFx0XHRpZiAoIGVycm9yLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyBSZWZyZXNoIGVycm9yL3N1Y2Nlc3MgY2xhc3Ncblx0XHRcdFx0ZXJyb3IucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApLmFkZENsYXNzKCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MgKTtcblxuXHRcdFx0XHQvLyBSZXBsYWNlIG1lc3NhZ2Ugb24gZXhpc3RpbmcgbGFiZWxcblx0XHRcdFx0ZXJyb3IuaHRtbCggbWVzc2FnZSApO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBDcmVhdGUgZXJyb3IgZWxlbWVudFxuXHRcdFx0XHRlcnJvciA9ICQoIFwiPFwiICsgdGhpcy5zZXR0aW5ncy5lcnJvckVsZW1lbnQgKyBcIj5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIFwiaWRcIiwgZWxlbWVudElEICsgXCItZXJyb3JcIiApXG5cdFx0XHRcdFx0LmFkZENsYXNzKCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MgKVxuXHRcdFx0XHRcdC5odG1sKCBtZXNzYWdlIHx8IFwiXCIgKTtcblxuXHRcdFx0XHQvLyBNYWludGFpbiByZWZlcmVuY2UgdG8gdGhlIGVsZW1lbnQgdG8gYmUgcGxhY2VkIGludG8gdGhlIERPTVxuXHRcdFx0XHRwbGFjZSA9IGVycm9yO1xuXHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Mud3JhcHBlciApIHtcblxuXHRcdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlLCBldmVuIGluIElFXG5cdFx0XHRcdFx0Ly8gYWN0dWFsbHkgc2hvd2luZyB0aGUgd3JhcHBlZCBlbGVtZW50IGlzIGhhbmRsZWQgZWxzZXdoZXJlXG5cdFx0XHRcdFx0cGxhY2UgPSBlcnJvci5oaWRlKCkuc2hvdygpLndyYXAoIFwiPFwiICsgdGhpcy5zZXR0aW5ncy53cmFwcGVyICsgXCIvPlwiICkucGFyZW50KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCB0aGlzLmxhYmVsQ29udGFpbmVyLmxlbmd0aCApIHtcblx0XHRcdFx0XHR0aGlzLmxhYmVsQ29udGFpbmVyLmFwcGVuZCggcGxhY2UgKTtcblx0XHRcdFx0fSBlbHNlIGlmICggdGhpcy5zZXR0aW5ncy5lcnJvclBsYWNlbWVudCApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLmVycm9yUGxhY2VtZW50LmNhbGwoIHRoaXMsIHBsYWNlLCAkKCBlbGVtZW50ICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwbGFjZS5pbnNlcnRBZnRlciggZWxlbWVudCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTGluayBlcnJvciBiYWNrIHRvIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggZXJyb3IuaXMoIFwibGFiZWxcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIGVycm9yIGlzIGEgbGFiZWwsIHRoZW4gYXNzb2NpYXRlIHVzaW5nICdmb3InXG5cdFx0XHRcdFx0ZXJyb3IuYXR0ciggXCJmb3JcIiwgZWxlbWVudElEICk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBpcyBub3QgYSBjaGlsZCBvZiBhbiBhc3NvY2lhdGVkIGxhYmVsLCB0aGVuIGl0J3MgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0Ly8gdG8gZXhwbGljaXRseSBhcHBseSBhcmlhLWRlc2NyaWJlZGJ5XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGVycm9yLnBhcmVudHMoIFwibGFiZWxbZm9yPSdcIiArIHRoaXMuZXNjYXBlQ3NzTWV0YSggZWxlbWVudElEICkgKyBcIiddXCIgKS5sZW5ndGggPT09IDAgKSB7XG5cdFx0XHRcdFx0ZXJyb3JJRCA9IGVycm9yLmF0dHIoIFwiaWRcIiApO1xuXG5cdFx0XHRcdFx0Ly8gUmVzcGVjdCBleGlzdGluZyBub24tZXJyb3IgYXJpYS1kZXNjcmliZWRieVxuXHRcdFx0XHRcdGlmICggIWRlc2NyaWJlZEJ5ICkge1xuXHRcdFx0XHRcdFx0ZGVzY3JpYmVkQnkgPSBlcnJvcklEO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFkZXNjcmliZWRCeS5tYXRjaCggbmV3IFJlZ0V4cCggXCJcXFxcYlwiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBlcnJvcklEICkgKyBcIlxcXFxiXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBBZGQgdG8gZW5kIG9mIGxpc3QgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuXHRcdFx0XHRcdFx0ZGVzY3JpYmVkQnkgKz0gXCIgXCIgKyBlcnJvcklEO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIGRlc2NyaWJlZEJ5ICk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGlzIGVsZW1lbnQgaXMgZ3JvdXBlZCwgdGhlbiBhc3NpZ24gdG8gYWxsIGVsZW1lbnRzIGluIHRoZSBzYW1lIGdyb3VwXG5cdFx0XHRcdFx0Z3JvdXAgPSB0aGlzLmdyb3Vwc1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHRcdFx0aWYgKCBncm91cCApIHtcblx0XHRcdFx0XHRcdHYgPSB0aGlzO1xuXHRcdFx0XHRcdFx0JC5lYWNoKCB2Lmdyb3VwcywgZnVuY3Rpb24oIG5hbWUsIHRlc3Rncm91cCApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCB0ZXN0Z3JvdXAgPT09IGdyb3VwICkge1xuXHRcdFx0XHRcdFx0XHRcdCQoIFwiW25hbWU9J1wiICsgdi5lc2NhcGVDc3NNZXRhKCBuYW1lICkgKyBcIiddXCIsIHYuY3VycmVudEZvcm0gKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmF0dHIoIFwiYXJpYS1kZXNjcmliZWRieVwiLCBlcnJvci5hdHRyKCBcImlkXCIgKSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFtZXNzYWdlICYmIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApIHtcblx0XHRcdFx0ZXJyb3IudGV4dCggXCJcIiApO1xuXHRcdFx0XHRpZiAoIHR5cGVvZiB0aGlzLnNldHRpbmdzLnN1Y2Nlc3MgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0ZXJyb3IuYWRkQ2xhc3MoIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3Muc3VjY2VzcyggZXJyb3IsIGVsZW1lbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy50b1Nob3cgPSB0aGlzLnRvU2hvdy5hZGQoIGVycm9yICk7XG5cdFx0fSxcblxuXHRcdGVycm9yc0ZvcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR2YXIgbmFtZSA9IHRoaXMuZXNjYXBlQ3NzTWV0YSggdGhpcy5pZE9yTmFtZSggZWxlbWVudCApICksXG5cdFx0XHRcdGRlc2NyaWJlciA9ICQoIGVsZW1lbnQgKS5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiApLFxuXHRcdFx0XHRzZWxlY3RvciA9IFwibGFiZWxbZm9yPSdcIiArIG5hbWUgKyBcIiddLCBsYWJlbFtmb3I9J1wiICsgbmFtZSArIFwiJ10gKlwiO1xuXG5cdFx0XHQvLyAnYXJpYS1kZXNjcmliZWRieScgc2hvdWxkIGRpcmVjdGx5IHJlZmVyZW5jZSB0aGUgZXJyb3IgZWxlbWVudFxuXHRcdFx0aWYgKCBkZXNjcmliZXIgKSB7XG5cdFx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3IgKyBcIiwgI1wiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBkZXNjcmliZXIgKVxuXHRcdFx0XHRcdC5yZXBsYWNlKCAvXFxzKy9nLCBcIiwgI1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzXG5cdFx0XHRcdC5lcnJvcnMoKVxuXHRcdFx0XHQuZmlsdGVyKCBzZWxlY3RvciApO1xuXHRcdH0sXG5cblx0XHQvLyBTZWUgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9jYXRlZ29yeS9zZWxlY3RvcnMvLCBmb3IgQ1NTXG5cdFx0Ly8gbWV0YS1jaGFyYWN0ZXJzIHRoYXQgc2hvdWxkIGJlIGVzY2FwZWQgaW4gb3JkZXIgdG8gYmUgdXNlZCB3aXRoIEpRdWVyeVxuXHRcdC8vIGFzIGEgbGl0ZXJhbCBwYXJ0IG9mIGEgbmFtZS9pZCBvciBhbnkgc2VsZWN0b3IuXG5cdFx0ZXNjYXBlQ3NzTWV0YTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggLyhbXFxcXCFcIiMkJSYnKCkqKywuLzo7PD0+P0BcXFtcXF1eYHt8fX5dKS9nLCBcIlxcXFwkMVwiICk7XG5cdFx0fSxcblxuXHRcdGlkT3JOYW1lOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLmdyb3Vwc1sgZWxlbWVudC5uYW1lIF0gfHwgKCB0aGlzLmNoZWNrYWJsZSggZWxlbWVudCApID8gZWxlbWVudC5uYW1lIDogZWxlbWVudC5pZCB8fCBlbGVtZW50Lm5hbWUgKTtcblx0XHR9LFxuXG5cdFx0dmFsaWRhdGlvblRhcmdldEZvcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cblx0XHRcdC8vIElmIHJhZGlvL2NoZWNrYm94LCB2YWxpZGF0ZSBmaXJzdCBlbGVtZW50IGluIGdyb3VwIGluc3RlYWRcblx0XHRcdGlmICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0ZWxlbWVudCA9IHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFsd2F5cyBhcHBseSBpZ25vcmUgZmlsdGVyXG5cdFx0XHRyZXR1cm4gJCggZWxlbWVudCApLm5vdCggdGhpcy5zZXR0aW5ncy5pZ25vcmUgKVsgMCBdO1xuXHRcdH0sXG5cblx0XHRjaGVja2FibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuICggL3JhZGlvfGNoZWNrYm94L2kgKS50ZXN0KCBlbGVtZW50LnR5cGUgKTtcblx0XHR9LFxuXG5cdFx0ZmluZEJ5TmFtZTogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0XHRyZXR1cm4gJCggdGhpcy5jdXJyZW50Rm9ybSApLmZpbmQoIFwiW25hbWU9J1wiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBuYW1lICkgKyBcIiddXCIgKTtcblx0XHR9LFxuXG5cdFx0Z2V0TGVuZ3RoOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRzd2l0Y2ggKCBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRjYXNlIFwic2VsZWN0XCI6XG5cdFx0XHRcdHJldHVybiAkKCBcIm9wdGlvbjpzZWxlY3RlZFwiLCBlbGVtZW50ICkubGVuZ3RoO1xuXHRcdFx0Y2FzZSBcImlucHV0XCI6XG5cdFx0XHRcdGlmICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5maWx0ZXIoIFwiOmNoZWNrZWRcIiApLmxlbmd0aDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlLmxlbmd0aDtcblx0XHR9LFxuXG5cdFx0ZGVwZW5kOiBmdW5jdGlvbiggcGFyYW0sIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5kZXBlbmRUeXBlc1sgdHlwZW9mIHBhcmFtIF0gPyB0aGlzLmRlcGVuZFR5cGVzWyB0eXBlb2YgcGFyYW0gXSggcGFyYW0sIGVsZW1lbnQgKSA6IHRydWU7XG5cdFx0fSxcblxuXHRcdGRlcGVuZFR5cGVzOiB7XG5cdFx0XHRcImJvb2xlYW5cIjogZnVuY3Rpb24oIHBhcmFtICkge1xuXHRcdFx0XHRyZXR1cm4gcGFyYW07XG5cdFx0XHR9LFxuXHRcdFx0XCJzdHJpbmdcIjogZnVuY3Rpb24oIHBhcmFtLCBlbGVtZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gISEkKCBwYXJhbSwgZWxlbWVudC5mb3JtICkubGVuZ3RoO1xuXHRcdFx0fSxcblx0XHRcdFwiZnVuY3Rpb25cIjogZnVuY3Rpb24oIHBhcmFtLCBlbGVtZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gcGFyYW0oIGVsZW1lbnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0b3B0aW9uYWw6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0dmFyIHZhbCA9IHRoaXMuZWxlbWVudFZhbHVlKCBlbGVtZW50ICk7XG5cdFx0XHRyZXR1cm4gISQudmFsaWRhdG9yLm1ldGhvZHMucmVxdWlyZWQuY2FsbCggdGhpcywgdmFsLCBlbGVtZW50ICkgJiYgXCJkZXBlbmRlbmN5LW1pc21hdGNoXCI7XG5cdFx0fSxcblxuXHRcdHN0YXJ0UmVxdWVzdDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHRpZiAoICF0aGlzLnBlbmRpbmdbIGVsZW1lbnQubmFtZSBdICkge1xuXHRcdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0Kys7XG5cdFx0XHRcdCQoIGVsZW1lbnQgKS5hZGRDbGFzcyggdGhpcy5zZXR0aW5ncy5wZW5kaW5nQ2xhc3MgKTtcblx0XHRcdFx0dGhpcy5wZW5kaW5nWyBlbGVtZW50Lm5hbWUgXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHN0b3BSZXF1ZXN0OiBmdW5jdGlvbiggZWxlbWVudCwgdmFsaWQgKSB7XG5cdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0LS07XG5cblx0XHRcdC8vIFNvbWV0aW1lcyBzeW5jaHJvbml6YXRpb24gZmFpbHMsIG1ha2Ugc3VyZSBwZW5kaW5nUmVxdWVzdCBpcyBuZXZlciA8IDBcblx0XHRcdGlmICggdGhpcy5wZW5kaW5nUmVxdWVzdCA8IDAgKSB7XG5cdFx0XHRcdHRoaXMucGVuZGluZ1JlcXVlc3QgPSAwO1xuXHRcdFx0fVxuXHRcdFx0ZGVsZXRlIHRoaXMucGVuZGluZ1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHQkKCBlbGVtZW50ICkucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MucGVuZGluZ0NsYXNzICk7XG5cdFx0XHRpZiAoIHZhbGlkICYmIHRoaXMucGVuZGluZ1JlcXVlc3QgPT09IDAgJiYgdGhpcy5mb3JtU3VibWl0dGVkICYmIHRoaXMuZm9ybSgpICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkuc3VibWl0KCk7XG5cdFx0XHRcdHRoaXMuZm9ybVN1Ym1pdHRlZCA9IGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggIXZhbGlkICYmIHRoaXMucGVuZGluZ1JlcXVlc3QgPT09IDAgJiYgdGhpcy5mb3JtU3VibWl0dGVkICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkudHJpZ2dlckhhbmRsZXIoIFwiaW52YWxpZC1mb3JtXCIsIFsgdGhpcyBdICk7XG5cdFx0XHRcdHRoaXMuZm9ybVN1Ym1pdHRlZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRwcmV2aW91c1ZhbHVlOiBmdW5jdGlvbiggZWxlbWVudCwgbWV0aG9kICkge1xuXHRcdFx0bWV0aG9kID0gdHlwZW9mIG1ldGhvZCA9PT0gXCJzdHJpbmdcIiAmJiBtZXRob2QgfHwgXCJyZW1vdGVcIjtcblxuXHRcdFx0cmV0dXJuICQuZGF0YSggZWxlbWVudCwgXCJwcmV2aW91c1ZhbHVlXCIgKSB8fCAkLmRhdGEoIGVsZW1lbnQsIFwicHJldmlvdXNWYWx1ZVwiLCB7XG5cdFx0XHRcdG9sZDogbnVsbCxcblx0XHRcdFx0dmFsaWQ6IHRydWUsXG5cdFx0XHRcdG1lc3NhZ2U6IHRoaXMuZGVmYXVsdE1lc3NhZ2UoIGVsZW1lbnQsIHsgbWV0aG9kOiBtZXRob2QgfSApXG5cdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdC8vIENsZWFucyB1cCBhbGwgZm9ybXMgYW5kIGVsZW1lbnRzLCByZW1vdmVzIHZhbGlkYXRvci1zcGVjaWZpYyBldmVudHNcblx0XHRkZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucmVzZXRGb3JtKCk7XG5cblx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKVxuXHRcdFx0XHQub2ZmKCBcIi52YWxpZGF0ZVwiIClcblx0XHRcdFx0LnJlbW92ZURhdGEoIFwidmFsaWRhdG9yXCIgKVxuXHRcdFx0XHQuZmluZCggXCIudmFsaWRhdGUtZXF1YWxUby1ibHVyXCIgKVxuXHRcdFx0XHRcdC5vZmYoIFwiLnZhbGlkYXRlLWVxdWFsVG9cIiApXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCBcInZhbGlkYXRlLWVxdWFsVG8tYmx1clwiICk7XG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xhc3NSdWxlU2V0dGluZ3M6IHtcblx0XHRyZXF1aXJlZDogeyByZXF1aXJlZDogdHJ1ZSB9LFxuXHRcdGVtYWlsOiB7IGVtYWlsOiB0cnVlIH0sXG5cdFx0dXJsOiB7IHVybDogdHJ1ZSB9LFxuXHRcdGRhdGU6IHsgZGF0ZTogdHJ1ZSB9LFxuXHRcdGRhdGVJU086IHsgZGF0ZUlTTzogdHJ1ZSB9LFxuXHRcdG51bWJlcjogeyBudW1iZXI6IHRydWUgfSxcblx0XHRkaWdpdHM6IHsgZGlnaXRzOiB0cnVlIH0sXG5cdFx0Y3JlZGl0Y2FyZDogeyBjcmVkaXRjYXJkOiB0cnVlIH1cblx0fSxcblxuXHRhZGRDbGFzc1J1bGVzOiBmdW5jdGlvbiggY2xhc3NOYW1lLCBydWxlcyApIHtcblx0XHRpZiAoIGNsYXNzTmFtZS5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nICkge1xuXHRcdFx0dGhpcy5jbGFzc1J1bGVTZXR0aW5nc1sgY2xhc3NOYW1lIF0gPSBydWxlcztcblx0XHR9IGVsc2Uge1xuXHRcdFx0JC5leHRlbmQoIHRoaXMuY2xhc3NSdWxlU2V0dGluZ3MsIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fSxcblxuXHRjbGFzc1J1bGVzOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHR2YXIgcnVsZXMgPSB7fSxcblx0XHRcdGNsYXNzZXMgPSAkKCBlbGVtZW50ICkuYXR0ciggXCJjbGFzc1wiICk7XG5cblx0XHRpZiAoIGNsYXNzZXMgKSB7XG5cdFx0XHQkLmVhY2goIGNsYXNzZXMuc3BsaXQoIFwiIFwiICksIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgaW4gJC52YWxpZGF0b3IuY2xhc3NSdWxlU2V0dGluZ3MgKSB7XG5cdFx0XHRcdFx0JC5leHRlbmQoIHJ1bGVzLCAkLnZhbGlkYXRvci5jbGFzc1J1bGVTZXR0aW5nc1sgdGhpcyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJ1bGVzO1xuXHR9LFxuXG5cdG5vcm1hbGl6ZUF0dHJpYnV0ZVJ1bGU6IGZ1bmN0aW9uKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApIHtcblxuXHRcdC8vIENvbnZlcnQgdGhlIHZhbHVlIHRvIGEgbnVtYmVyIGZvciBudW1iZXIgaW5wdXRzLCBhbmQgZm9yIHRleHQgZm9yIGJhY2t3YXJkcyBjb21wYWJpbGl0eVxuXHRcdC8vIGFsbG93cyB0eXBlPVwiZGF0ZVwiIGFuZCBvdGhlcnMgdG8gYmUgY29tcGFyZWQgYXMgc3RyaW5nc1xuXHRcdGlmICggL21pbnxtYXh8c3RlcC8udGVzdCggbWV0aG9kICkgJiYgKCB0eXBlID09PSBudWxsIHx8IC9udW1iZXJ8cmFuZ2V8dGV4dC8udGVzdCggdHlwZSApICkgKSB7XG5cdFx0XHR2YWx1ZSA9IE51bWJlciggdmFsdWUgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydCBPcGVyYSBNaW5pLCB3aGljaCByZXR1cm5zIE5hTiBmb3IgdW5kZWZpbmVkIG1pbmxlbmd0aFxuXHRcdFx0aWYgKCBpc05hTiggdmFsdWUgKSApIHtcblx0XHRcdFx0dmFsdWUgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCApIHtcblx0XHRcdHJ1bGVzWyBtZXRob2QgXSA9IHZhbHVlO1xuXHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IG1ldGhvZCAmJiB0eXBlICE9PSBcInJhbmdlXCIgKSB7XG5cblx0XHRcdC8vIEV4Y2VwdGlvbjogdGhlIGpxdWVyeSB2YWxpZGF0ZSAncmFuZ2UnIG1ldGhvZFxuXHRcdFx0Ly8gZG9lcyBub3QgdGVzdCBmb3IgdGhlIGh0bWw1ICdyYW5nZScgdHlwZVxuXHRcdFx0cnVsZXNbIG1ldGhvZCBdID0gdHJ1ZTtcblx0XHR9XG5cdH0sXG5cblx0YXR0cmlidXRlUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0JGVsZW1lbnQgPSAkKCBlbGVtZW50ICksXG5cdFx0XHR0eXBlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICksXG5cdFx0XHRtZXRob2QsIHZhbHVlO1xuXG5cdFx0Zm9yICggbWV0aG9kIGluICQudmFsaWRhdG9yLm1ldGhvZHMgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgZm9yIDxpbnB1dCByZXF1aXJlZD4gaW4gYm90aCBodG1sNSBhbmQgb2xkZXIgYnJvd3NlcnNcblx0XHRcdGlmICggbWV0aG9kID09PSBcInJlcXVpcmVkXCIgKSB7XG5cdFx0XHRcdHZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIG1ldGhvZCApO1xuXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBmb3IgdGhlIHJlcXVpcmVkIGF0dHJpYnV0ZVxuXHRcdFx0XHQvLyBhbmQgbm9uLUhUTUw1IGJyb3dzZXJzIG1pZ2h0IGhhdmUgcmVxdWlyZWQ9XCJcIiBtYXJrdXBcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJcIiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBub24tSFRNTDUgYnJvd3NlcnMgdG8gcmV0dXJuIGJvb2xcblx0XHRcdFx0dmFsdWUgPSAhIXZhbHVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWUgPSAkZWxlbWVudC5hdHRyKCBtZXRob2QgKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVSdWxlKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vICdtYXhsZW5ndGgnIG1heSBiZSByZXR1cm5lZCBhcyAtMSwgMjE0NzQ4MzY0NyAoIElFICkgYW5kIDUyNDI4OCAoIHNhZmFyaSApIGZvciB0ZXh0IGlucHV0c1xuXHRcdGlmICggcnVsZXMubWF4bGVuZ3RoICYmIC8tMXwyMTQ3NDgzNjQ3fDUyNDI4OC8udGVzdCggcnVsZXMubWF4bGVuZ3RoICkgKSB7XG5cdFx0XHRkZWxldGUgcnVsZXMubWF4bGVuZ3RoO1xuXHRcdH1cblxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHRkYXRhUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0JGVsZW1lbnQgPSAkKCBlbGVtZW50ICksXG5cdFx0XHR0eXBlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICksXG5cdFx0XHRtZXRob2QsIHZhbHVlO1xuXG5cdFx0Zm9yICggbWV0aG9kIGluICQudmFsaWRhdG9yLm1ldGhvZHMgKSB7XG5cdFx0XHR2YWx1ZSA9ICRlbGVtZW50LmRhdGEoIFwicnVsZVwiICsgbWV0aG9kLmNoYXJBdCggMCApLnRvVXBwZXJDYXNlKCkgKyBtZXRob2Quc3Vic3RyaW5nKCAxICkudG9Mb3dlckNhc2UoKSApO1xuXHRcdFx0dGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVSdWxlKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcnVsZXM7XG5cdH0sXG5cblx0c3RhdGljUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0dmFsaWRhdG9yID0gJC5kYXRhKCBlbGVtZW50LmZvcm0sIFwidmFsaWRhdG9yXCIgKTtcblxuXHRcdGlmICggdmFsaWRhdG9yLnNldHRpbmdzLnJ1bGVzICkge1xuXHRcdFx0cnVsZXMgPSAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKCB2YWxpZGF0b3Iuc2V0dGluZ3MucnVsZXNbIGVsZW1lbnQubmFtZSBdICkgfHwge307XG5cdFx0fVxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHRub3JtYWxpemVSdWxlczogZnVuY3Rpb24oIHJ1bGVzLCBlbGVtZW50ICkge1xuXG5cdFx0Ly8gSGFuZGxlIGRlcGVuZGVuY3kgY2hlY2tcblx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbiggcHJvcCwgdmFsICkge1xuXG5cdFx0XHQvLyBJZ25vcmUgcnVsZSB3aGVuIHBhcmFtIGlzIGV4cGxpY2l0bHkgZmFsc2UsIGVnLiByZXF1aXJlZDpmYWxzZVxuXHRcdFx0aWYgKCB2YWwgPT09IGZhbHNlICkge1xuXHRcdFx0XHRkZWxldGUgcnVsZXNbIHByb3AgXTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB2YWwucGFyYW0gfHwgdmFsLmRlcGVuZHMgKSB7XG5cdFx0XHRcdHZhciBrZWVwUnVsZSA9IHRydWU7XG5cdFx0XHRcdHN3aXRjaCAoIHR5cGVvZiB2YWwuZGVwZW5kcyApIHtcblx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdGtlZXBSdWxlID0gISEkKCB2YWwuZGVwZW5kcywgZWxlbWVudC5mb3JtICkubGVuZ3RoO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHRrZWVwUnVsZSA9IHZhbC5kZXBlbmRzLmNhbGwoIGVsZW1lbnQsIGVsZW1lbnQgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGtlZXBSdWxlICkge1xuXHRcdFx0XHRcdHJ1bGVzWyBwcm9wIF0gPSB2YWwucGFyYW0gIT09IHVuZGVmaW5lZCA/IHZhbC5wYXJhbSA6IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JC5kYXRhKCBlbGVtZW50LmZvcm0sIFwidmFsaWRhdG9yXCIgKS5yZXNldEVsZW1lbnRzKCAkKCBlbGVtZW50ICkgKTtcblx0XHRcdFx0XHRkZWxldGUgcnVsZXNbIHByb3AgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdC8vIEV2YWx1YXRlIHBhcmFtZXRlcnNcblx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbiggcnVsZSwgcGFyYW1ldGVyICkge1xuXHRcdFx0cnVsZXNbIHJ1bGUgXSA9ICQuaXNGdW5jdGlvbiggcGFyYW1ldGVyICkgJiYgcnVsZSAhPT0gXCJub3JtYWxpemVyXCIgPyBwYXJhbWV0ZXIoIGVsZW1lbnQgKSA6IHBhcmFtZXRlcjtcblx0XHR9ICk7XG5cblx0XHQvLyBDbGVhbiBudW1iZXIgcGFyYW1ldGVyc1xuXHRcdCQuZWFjaCggWyBcIm1pbmxlbmd0aFwiLCBcIm1heGxlbmd0aFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBydWxlc1sgdGhpcyBdICkge1xuXHRcdFx0XHRydWxlc1sgdGhpcyBdID0gTnVtYmVyKCBydWxlc1sgdGhpcyBdICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdCQuZWFjaCggWyBcInJhbmdlbGVuZ3RoXCIsIFwicmFuZ2VcIiBdLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwYXJ0cztcblx0XHRcdGlmICggcnVsZXNbIHRoaXMgXSApIHtcblx0XHRcdFx0aWYgKCAkLmlzQXJyYXkoIHJ1bGVzWyB0aGlzIF0gKSApIHtcblx0XHRcdFx0XHRydWxlc1sgdGhpcyBdID0gWyBOdW1iZXIoIHJ1bGVzWyB0aGlzIF1bIDAgXSApLCBOdW1iZXIoIHJ1bGVzWyB0aGlzIF1bIDEgXSApIF07XG5cdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiBydWxlc1sgdGhpcyBdID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHBhcnRzID0gcnVsZXNbIHRoaXMgXS5yZXBsYWNlKCAvW1xcW1xcXV0vZywgXCJcIiApLnNwbGl0KCAvW1xccyxdKy8gKTtcblx0XHRcdFx0XHRydWxlc1sgdGhpcyBdID0gWyBOdW1iZXIoIHBhcnRzWyAwIF0gKSwgTnVtYmVyKCBwYXJ0c1sgMSBdICkgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdGlmICggJC52YWxpZGF0b3IuYXV0b0NyZWF0ZVJhbmdlcyApIHtcblxuXHRcdFx0Ly8gQXV0by1jcmVhdGUgcmFuZ2VzXG5cdFx0XHRpZiAoIHJ1bGVzLm1pbiAhPSBudWxsICYmIHJ1bGVzLm1heCAhPSBudWxsICkge1xuXHRcdFx0XHRydWxlcy5yYW5nZSA9IFsgcnVsZXMubWluLCBydWxlcy5tYXggXTtcblx0XHRcdFx0ZGVsZXRlIHJ1bGVzLm1pbjtcblx0XHRcdFx0ZGVsZXRlIHJ1bGVzLm1heDtcblx0XHRcdH1cblx0XHRcdGlmICggcnVsZXMubWlubGVuZ3RoICE9IG51bGwgJiYgcnVsZXMubWF4bGVuZ3RoICE9IG51bGwgKSB7XG5cdFx0XHRcdHJ1bGVzLnJhbmdlbGVuZ3RoID0gWyBydWxlcy5taW5sZW5ndGgsIHJ1bGVzLm1heGxlbmd0aCBdO1xuXHRcdFx0XHRkZWxldGUgcnVsZXMubWlubGVuZ3RoO1xuXHRcdFx0XHRkZWxldGUgcnVsZXMubWF4bGVuZ3RoO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHQvLyBDb252ZXJ0cyBhIHNpbXBsZSBzdHJpbmcgdG8gYSB7c3RyaW5nOiB0cnVlfSBydWxlLCBlLmcuLCBcInJlcXVpcmVkXCIgdG8ge3JlcXVpcmVkOnRydWV9XG5cdG5vcm1hbGl6ZVJ1bGU6IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR2YXIgdHJhbnNmb3JtZWQgPSB7fTtcblx0XHRcdCQuZWFjaCggZGF0YS5zcGxpdCggL1xccy8gKSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRyYW5zZm9ybWVkWyB0aGlzIF0gPSB0cnVlO1xuXHRcdFx0fSApO1xuXHRcdFx0ZGF0YSA9IHRyYW5zZm9ybWVkO1xuXHRcdH1cblx0XHRyZXR1cm4gZGF0YTtcblx0fSxcblxuXHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvalF1ZXJ5LnZhbGlkYXRvci5hZGRNZXRob2QvXG5cdGFkZE1ldGhvZDogZnVuY3Rpb24oIG5hbWUsIG1ldGhvZCwgbWVzc2FnZSApIHtcblx0XHQkLnZhbGlkYXRvci5tZXRob2RzWyBuYW1lIF0gPSBtZXRob2Q7XG5cdFx0JC52YWxpZGF0b3IubWVzc2FnZXNbIG5hbWUgXSA9IG1lc3NhZ2UgIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UgOiAkLnZhbGlkYXRvci5tZXNzYWdlc1sgbmFtZSBdO1xuXHRcdGlmICggbWV0aG9kLmxlbmd0aCA8IDMgKSB7XG5cdFx0XHQkLnZhbGlkYXRvci5hZGRDbGFzc1J1bGVzKCBuYW1lLCAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKCBuYW1lICkgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2pRdWVyeS52YWxpZGF0b3IubWV0aG9kcy9cblx0bWV0aG9kczoge1xuXG5cdFx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JlcXVpcmVkLW1ldGhvZC9cblx0XHRyZXF1aXJlZDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgZGVwZW5kZW5jeSBpcyBtZXRcblx0XHRcdGlmICggIXRoaXMuZGVwZW5kKCBwYXJhbSwgZWxlbWVudCApICkge1xuXHRcdFx0XHRyZXR1cm4gXCJkZXBlbmRlbmN5LW1pc21hdGNoXCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzZWxlY3RcIiApIHtcblxuXHRcdFx0XHQvLyBDb3VsZCBiZSBhbiBhcnJheSBmb3Igc2VsZWN0LW11bHRpcGxlIG9yIGEgc3RyaW5nLCBib3RoIGFyZSBmaW5lIHRoaXMgd2F5XG5cdFx0XHRcdHZhciB2YWwgPSAkKCBlbGVtZW50ICkudmFsKCk7XG5cdFx0XHRcdHJldHVybiB2YWwgJiYgdmFsLmxlbmd0aCA+IDA7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuY2hlY2thYmxlKCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKSA+IDA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsdWUubGVuZ3RoID4gMDtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2VtYWlsLW1ldGhvZC9cblx0XHRlbWFpbDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXG5cdFx0XHQvLyBGcm9tIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjdmFsaWQtZS1tYWlsLWFkZHJlc3Ncblx0XHRcdC8vIFJldHJpZXZlZCAyMDE0LTAxLTE0XG5cdFx0XHQvLyBJZiB5b3UgaGF2ZSBhIHByb2JsZW0gd2l0aCB0aGlzIGltcGxlbWVudGF0aW9uLCByZXBvcnQgYSBidWcgYWdhaW5zdCB0aGUgYWJvdmUgc3BlY1xuXHRcdFx0Ly8gT3IgdXNlIGN1c3RvbSBtZXRob2RzIHRvIGltcGxlbWVudCB5b3VyIG93biBlbWFpbCB2YWxpZGF0aW9uXG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eW2EtekEtWjAtOS4hIyQlJicqK1xcLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy91cmwtbWV0aG9kL1xuXHRcdHVybDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXG5cdFx0XHQvLyBDb3B5cmlnaHQgKGMpIDIwMTAtMjAxMyBEaWVnbyBQZXJpbmksIE1JVCBsaWNlbnNlZFxuXHRcdFx0Ly8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZHBlcmluaS83MjkyOTRcblx0XHRcdC8vIHNlZSBhbHNvIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9kZW1vL3VybC1yZWdleFxuXHRcdFx0Ly8gbW9kaWZpZWQgdG8gYWxsb3cgcHJvdG9jb2wtcmVsYXRpdmUgVVJMc1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXig/Oig/Oig/Omh0dHBzP3xmdHApOik/XFwvXFwvKSg/OlxcUysoPzo6XFxTKik/QCk/KD86KD8hKD86MTB8MTI3KSg/OlxcLlxcZHsxLDN9KXszfSkoPyEoPzoxNjlcXC4yNTR8MTkyXFwuMTY4KSg/OlxcLlxcZHsxLDN9KXsyfSkoPyExNzJcXC4oPzoxWzYtOV18MlxcZHwzWzAtMV0pKD86XFwuXFxkezEsM30pezJ9KSg/OlsxLTldXFxkP3wxXFxkXFxkfDJbMDFdXFxkfDIyWzAtM10pKD86XFwuKD86MT9cXGR7MSwyfXwyWzAtNF1cXGR8MjVbMC01XSkpezJ9KD86XFwuKD86WzEtOV1cXGQ/fDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNF0pKXwoPzooPzpbYS16XFx1MDBhMS1cXHVmZmZmMC05XS0qKSpbYS16XFx1MDBhMS1cXHVmZmZmMC05XSspKD86XFwuKD86W2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0tKikqW2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0rKSooPzpcXC4oPzpbYS16XFx1MDBhMS1cXHVmZmZmXXsyLH0pKS4/KSg/OjpcXGR7Miw1fSk/KD86Wy8/I11cXFMqKT8kL2kudGVzdCggdmFsdWUgKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2RhdGUtbWV0aG9kL1xuXHRcdGRhdGU6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgIS9JbnZhbGlkfE5hTi8udGVzdCggbmV3IERhdGUoIHZhbHVlICkudG9TdHJpbmcoKSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZGF0ZUlTTy1tZXRob2QvXG5cdFx0ZGF0ZUlTTzogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXlxcZHs0fVtcXC9cXC1dKDA/WzEtOV18MVswMTJdKVtcXC9cXC1dKDA/WzEtOV18WzEyXVswLTldfDNbMDFdKSQvLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9udW1iZXItbWV0aG9kL1xuXHRcdG51bWJlcjogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXig/Oi0/XFxkK3wtP1xcZHsxLDN9KD86LFxcZHszfSkrKT8oPzpcXC5cXGQrKT8kLy50ZXN0KCB2YWx1ZSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZGlnaXRzLW1ldGhvZC9cblx0XHRkaWdpdHM6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL15cXGQrJC8udGVzdCggdmFsdWUgKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cDovL2pxdWVyeXZhbGlkYXRpb24ub3JnL21pbmxlbmd0aC1tZXRob2QvXG5cdFx0bWlubGVuZ3RoOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0dmFyIGxlbmd0aCA9ICQuaXNBcnJheSggdmFsdWUgKSA/IHZhbHVlLmxlbmd0aCA6IHRoaXMuZ2V0TGVuZ3RoKCB2YWx1ZSwgZWxlbWVudCApO1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCBsZW5ndGggPj0gcGFyYW07XG5cdFx0fSxcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9tYXhsZW5ndGgtbWV0aG9kL1xuXHRcdG1heGxlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHZhciBsZW5ndGggPSAkLmlzQXJyYXkoIHZhbHVlICkgPyB2YWx1ZS5sZW5ndGggOiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKTtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgbGVuZ3RoIDw9IHBhcmFtO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcmFuZ2VsZW5ndGgtbWV0aG9kL1xuXHRcdHJhbmdlbGVuZ3RoOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0dmFyIGxlbmd0aCA9ICQuaXNBcnJheSggdmFsdWUgKSA/IHZhbHVlLmxlbmd0aCA6IHRoaXMuZ2V0TGVuZ3RoKCB2YWx1ZSwgZWxlbWVudCApO1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAoIGxlbmd0aCA+PSBwYXJhbVsgMCBdICYmIGxlbmd0aCA8PSBwYXJhbVsgMSBdICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9taW4tbWV0aG9kL1xuXHRcdG1pbjogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgdmFsdWUgPj0gcGFyYW07XG5cdFx0fSxcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9tYXgtbWV0aG9kL1xuXHRcdG1heDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgdmFsdWUgPD0gcGFyYW07XG5cdFx0fSxcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9yYW5nZS1tZXRob2QvXG5cdFx0cmFuZ2U6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8ICggdmFsdWUgPj0gcGFyYW1bIDAgXSAmJiB2YWx1ZSA8PSBwYXJhbVsgMSBdICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9zdGVwLW1ldGhvZC9cblx0XHRzdGVwOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0dmFyIHR5cGUgPSAkKCBlbGVtZW50ICkuYXR0ciggXCJ0eXBlXCIgKSxcblx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gXCJTdGVwIGF0dHJpYnV0ZSBvbiBpbnB1dCB0eXBlIFwiICsgdHlwZSArIFwiIGlzIG5vdCBzdXBwb3J0ZWQuXCIsXG5cdFx0XHRcdHN1cHBvcnRlZFR5cGVzID0gWyBcInRleHRcIiwgXCJudW1iZXJcIiwgXCJyYW5nZVwiIF0sXG5cdFx0XHRcdHJlID0gbmV3IFJlZ0V4cCggXCJcXFxcYlwiICsgdHlwZSArIFwiXFxcXGJcIiApLFxuXHRcdFx0XHRub3RTdXBwb3J0ZWQgPSB0eXBlICYmICFyZS50ZXN0KCBzdXBwb3J0ZWRUeXBlcy5qb2luKCkgKSxcblx0XHRcdFx0ZGVjaW1hbFBsYWNlcyA9IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoID0gKCBcIlwiICsgbnVtICkubWF0Y2goIC8oPzpcXC4oXFxkKykpPyQvICk7XG5cdFx0XHRcdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOdW1iZXIgb2YgZGlnaXRzIHJpZ2h0IG9mIGRlY2ltYWwgcG9pbnQuXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoWyAxIF0gPyBtYXRjaFsgMSBdLmxlbmd0aCA6IDA7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRvSW50ID0gZnVuY3Rpb24oIG51bSApIHtcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCggbnVtICogTWF0aC5wb3coIDEwLCBkZWNpbWFscyApICk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHZhbGlkID0gdHJ1ZSxcblx0XHRcdFx0ZGVjaW1hbHM7XG5cblx0XHRcdC8vIFdvcmtzIG9ubHkgZm9yIHRleHQsIG51bWJlciBhbmQgcmFuZ2UgaW5wdXQgdHlwZXNcblx0XHRcdC8vIFRPRE8gZmluZCBhIHdheSB0byBzdXBwb3J0IGlucHV0IHR5cGVzIGRhdGUsIGRhdGV0aW1lLCBkYXRldGltZS1sb2NhbCwgbW9udGgsIHRpbWUgYW5kIHdlZWtcblx0XHRcdGlmICggbm90U3VwcG9ydGVkICkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIGVycm9yTWVzc2FnZSApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWNpbWFscyA9IGRlY2ltYWxQbGFjZXMoIHBhcmFtICk7XG5cblx0XHRcdC8vIFZhbHVlIGNhbid0IGhhdmUgdG9vIG1hbnkgZGVjaW1hbHNcblx0XHRcdGlmICggZGVjaW1hbFBsYWNlcyggdmFsdWUgKSA+IGRlY2ltYWxzIHx8IHRvSW50KCB2YWx1ZSApICUgdG9JbnQoIHBhcmFtICkgIT09IDAgKSB7XG5cdFx0XHRcdHZhbGlkID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgdmFsaWQ7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9lcXVhbFRvLW1ldGhvZC9cblx0XHRlcXVhbFRvOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXG5cdFx0XHQvLyBCaW5kIHRvIHRoZSBibHVyIGV2ZW50IG9mIHRoZSB0YXJnZXQgaW4gb3JkZXIgdG8gcmV2YWxpZGF0ZSB3aGVuZXZlciB0aGUgdGFyZ2V0IGZpZWxkIGlzIHVwZGF0ZWRcblx0XHRcdHZhciB0YXJnZXQgPSAkKCBwYXJhbSApO1xuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLm9uZm9jdXNvdXQgJiYgdGFyZ2V0Lm5vdCggXCIudmFsaWRhdGUtZXF1YWxUby1ibHVyXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHRhcmdldC5hZGRDbGFzcyggXCJ2YWxpZGF0ZS1lcXVhbFRvLWJsdXJcIiApLm9uKCBcImJsdXIudmFsaWRhdGUtZXF1YWxUb1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQkKCBlbGVtZW50ICkudmFsaWQoKTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB0YXJnZXQudmFsKCk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHA6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9yZW1vdGUtbWV0aG9kL1xuXHRcdHJlbW90ZTogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSwgbWV0aG9kICkge1xuXHRcdFx0aWYgKCB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdHJldHVybiBcImRlcGVuZGVuY3ktbWlzbWF0Y2hcIjtcblx0XHRcdH1cblxuXHRcdFx0bWV0aG9kID0gdHlwZW9mIG1ldGhvZCA9PT0gXCJzdHJpbmdcIiAmJiBtZXRob2QgfHwgXCJyZW1vdGVcIjtcblxuXHRcdFx0dmFyIHByZXZpb3VzID0gdGhpcy5wcmV2aW91c1ZhbHVlKCBlbGVtZW50LCBtZXRob2QgKSxcblx0XHRcdFx0dmFsaWRhdG9yLCBkYXRhLCBvcHRpb25EYXRhU3RyaW5nO1xuXG5cdFx0XHRpZiAoICF0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXSApIHtcblx0XHRcdFx0dGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0gPSB7fTtcblx0XHRcdH1cblx0XHRcdHByZXZpb3VzLm9yaWdpbmFsTWVzc2FnZSA9IHByZXZpb3VzLm9yaWdpbmFsTWVzc2FnZSB8fCB0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXVsgbWV0aG9kIF07XG5cdFx0XHR0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXVsgbWV0aG9kIF0gPSBwcmV2aW91cy5tZXNzYWdlO1xuXG5cdFx0XHRwYXJhbSA9IHR5cGVvZiBwYXJhbSA9PT0gXCJzdHJpbmdcIiAmJiB7IHVybDogcGFyYW0gfSB8fCBwYXJhbTtcblx0XHRcdG9wdGlvbkRhdGFTdHJpbmcgPSAkLnBhcmFtKCAkLmV4dGVuZCggeyBkYXRhOiB2YWx1ZSB9LCBwYXJhbS5kYXRhICkgKTtcblx0XHRcdGlmICggcHJldmlvdXMub2xkID09PSBvcHRpb25EYXRhU3RyaW5nICkge1xuXHRcdFx0XHRyZXR1cm4gcHJldmlvdXMudmFsaWQ7XG5cdFx0XHR9XG5cblx0XHRcdHByZXZpb3VzLm9sZCA9IG9wdGlvbkRhdGFTdHJpbmc7XG5cdFx0XHR2YWxpZGF0b3IgPSB0aGlzO1xuXHRcdFx0dGhpcy5zdGFydFJlcXVlc3QoIGVsZW1lbnQgKTtcblx0XHRcdGRhdGEgPSB7fTtcblx0XHRcdGRhdGFbIGVsZW1lbnQubmFtZSBdID0gdmFsdWU7XG5cdFx0XHQkLmFqYXgoICQuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdG1vZGU6IFwiYWJvcnRcIixcblx0XHRcdFx0cG9ydDogXCJ2YWxpZGF0ZVwiICsgZWxlbWVudC5uYW1lLFxuXHRcdFx0XHRkYXRhVHlwZTogXCJqc29uXCIsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGNvbnRleHQ6IHZhbGlkYXRvci5jdXJyZW50Rm9ybSxcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0XHRcdHZhciB2YWxpZCA9IHJlc3BvbnNlID09PSB0cnVlIHx8IHJlc3BvbnNlID09PSBcInRydWVcIixcblx0XHRcdFx0XHRcdGVycm9ycywgbWVzc2FnZSwgc3VibWl0dGVkO1xuXG5cdFx0XHRcdFx0dmFsaWRhdG9yLnNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXVsgbWV0aG9kIF0gPSBwcmV2aW91cy5vcmlnaW5hbE1lc3NhZ2U7XG5cdFx0XHRcdFx0aWYgKCB2YWxpZCApIHtcblx0XHRcdFx0XHRcdHN1Ym1pdHRlZCA9IHZhbGlkYXRvci5mb3JtU3VibWl0dGVkO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnJlc2V0SW50ZXJuYWxzKCk7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3IudG9IaWRlID0gdmFsaWRhdG9yLmVycm9yc0ZvciggZWxlbWVudCApO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLmZvcm1TdWJtaXR0ZWQgPSBzdWJtaXR0ZWQ7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3Iuc3VjY2Vzc0xpc3QucHVzaCggZWxlbWVudCApO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLmludmFsaWRbIGVsZW1lbnQubmFtZSBdID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3Iuc2hvd0Vycm9ycygpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlcnJvcnMgPSB7fTtcblx0XHRcdFx0XHRcdG1lc3NhZ2UgPSByZXNwb25zZSB8fCB2YWxpZGF0b3IuZGVmYXVsdE1lc3NhZ2UoIGVsZW1lbnQsIHsgbWV0aG9kOiBtZXRob2QsIHBhcmFtZXRlcnM6IHZhbHVlIH0gKTtcblx0XHRcdFx0XHRcdGVycm9yc1sgZWxlbWVudC5uYW1lIF0gPSBwcmV2aW91cy5tZXNzYWdlID0gbWVzc2FnZTtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5pbnZhbGlkWyBlbGVtZW50Lm5hbWUgXSA9IHRydWU7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3Iuc2hvd0Vycm9ycyggZXJyb3JzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHByZXZpb3VzLnZhbGlkID0gdmFsaWQ7XG5cdFx0XHRcdFx0dmFsaWRhdG9yLnN0b3BSZXF1ZXN0KCBlbGVtZW50LCB2YWxpZCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBwYXJhbSApICk7XG5cdFx0XHRyZXR1cm4gXCJwZW5kaW5nXCI7XG5cdFx0fVxuXHR9XG5cbn0gKTtcblxyXG4vLyBBamF4IG1vZGU6IGFib3J0XG4vLyB1c2FnZTogJC5hamF4KHsgbW9kZTogXCJhYm9ydFwiWywgcG9ydDogXCJ1bmlxdWVwb3J0XCJdfSk7XG4vLyBpZiBtb2RlOlwiYWJvcnRcIiBpcyB1c2VkLCB0aGUgcHJldmlvdXMgcmVxdWVzdCBvbiB0aGF0IHBvcnQgKHBvcnQgY2FuIGJlIHVuZGVmaW5lZCkgaXMgYWJvcnRlZCB2aWEgWE1MSHR0cFJlcXVlc3QuYWJvcnQoKVxuXG52YXIgcGVuZGluZ1JlcXVlc3RzID0ge30sXG5cdGFqYXg7XG5cbi8vIFVzZSBhIHByZWZpbHRlciBpZiBhdmFpbGFibGUgKDEuNSspXG5pZiAoICQuYWpheFByZWZpbHRlciApIHtcblx0JC5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggc2V0dGluZ3MsIF8sIHhociApIHtcblx0XHR2YXIgcG9ydCA9IHNldHRpbmdzLnBvcnQ7XG5cdFx0aWYgKCBzZXR0aW5ncy5tb2RlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRpZiAoIHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdICkge1xuXHRcdFx0XHRwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXS5hYm9ydCgpO1xuXHRcdFx0fVxuXHRcdFx0cGVuZGluZ1JlcXVlc3RzWyBwb3J0IF0gPSB4aHI7XG5cdFx0fVxuXHR9ICk7XG59IGVsc2Uge1xuXG5cdC8vIFByb3h5IGFqYXhcblx0YWpheCA9ICQuYWpheDtcblx0JC5hamF4ID0gZnVuY3Rpb24oIHNldHRpbmdzICkge1xuXHRcdHZhciBtb2RlID0gKCBcIm1vZGVcIiBpbiBzZXR0aW5ncyA/IHNldHRpbmdzIDogJC5hamF4U2V0dGluZ3MgKS5tb2RlLFxuXHRcdFx0cG9ydCA9ICggXCJwb3J0XCIgaW4gc2V0dGluZ3MgPyBzZXR0aW5ncyA6ICQuYWpheFNldHRpbmdzICkucG9ydDtcblx0XHRpZiAoIG1vZGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdGlmICggcGVuZGluZ1JlcXVlc3RzWyBwb3J0IF0gKSB7XG5cdFx0XHRcdHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdLmFib3J0KCk7XG5cdFx0XHR9XG5cdFx0XHRwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXSA9IGFqYXguYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0cmV0dXJuIHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdO1xuXHRcdH1cblx0XHRyZXR1cm4gYWpheC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdH07XG59XG5yZXR1cm4gJDtcclxufSkpOyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENyb3BwaWVcclxuICogQ29weXJpZ2h0IDIwMTZcclxuICogRm9saW90ZWtcclxuICogVmVyc2lvbjogMi40LjFcclxuICoqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cclxuICAgICAgICBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGV4cG9ydHMubm9kZU5hbWUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgLy8gQ29tbW9uSlNcclxuICAgICAgICBmYWN0b3J5KGV4cG9ydHMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHNcclxuICAgICAgICBmYWN0b3J5KChyb290LmNvbW1vbkpzU3RyaWN0ID0ge30pKTtcclxuICAgIH1cclxufSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cykge1xyXG5cclxuICAgIC8qIFBvbHlmaWxscyAqL1xyXG4gICAgaWYgKHR5cGVvZiBQcm9taXNlICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgLyohIHByb21pc2UtcG9seWZpbGwgMy4xLjAgKi9cclxuICAgICAgICAhZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhLGIpe3JldHVybiBmdW5jdGlvbigpe2EuYXBwbHkoYixhcmd1bWVudHMpfX1mdW5jdGlvbiBjKGEpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiB0aGlzKXRocm93IG5ldyBUeXBlRXJyb3IoXCJQcm9taXNlcyBtdXN0IGJlIGNvbnN0cnVjdGVkIHZpYSBuZXdcIik7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgYSl0aHJvdyBuZXcgVHlwZUVycm9yKFwibm90IGEgZnVuY3Rpb25cIik7dGhpcy5fc3RhdGU9bnVsbCx0aGlzLl92YWx1ZT1udWxsLHRoaXMuX2RlZmVycmVkcz1bXSxpKGEsYihlLHRoaXMpLGIoZix0aGlzKSl9ZnVuY3Rpb24gZChhKXt2YXIgYj10aGlzO3JldHVybiBudWxsPT09dGhpcy5fc3RhdGU/dm9pZCB0aGlzLl9kZWZlcnJlZHMucHVzaChhKTp2b2lkIGsoZnVuY3Rpb24oKXt2YXIgYz1iLl9zdGF0ZT9hLm9uRnVsZmlsbGVkOmEub25SZWplY3RlZDtpZihudWxsPT09YylyZXR1cm4gdm9pZChiLl9zdGF0ZT9hLnJlc29sdmU6YS5yZWplY3QpKGIuX3ZhbHVlKTt2YXIgZDt0cnl7ZD1jKGIuX3ZhbHVlKX1jYXRjaChlKXtyZXR1cm4gdm9pZCBhLnJlamVjdChlKX1hLnJlc29sdmUoZCl9KX1mdW5jdGlvbiBlKGEpe3RyeXtpZihhPT09dGhpcyl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi5cIik7aWYoYSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBhKSl7dmFyIGM9YS50aGVuO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGMpcmV0dXJuIHZvaWQgaShiKGMsYSksYihlLHRoaXMpLGIoZix0aGlzKSl9dGhpcy5fc3RhdGU9ITAsdGhpcy5fdmFsdWU9YSxnLmNhbGwodGhpcyl9Y2F0Y2goZCl7Zi5jYWxsKHRoaXMsZCl9fWZ1bmN0aW9uIGYoYSl7dGhpcy5fc3RhdGU9ITEsdGhpcy5fdmFsdWU9YSxnLmNhbGwodGhpcyl9ZnVuY3Rpb24gZygpe2Zvcih2YXIgYT0wLGI9dGhpcy5fZGVmZXJyZWRzLmxlbmd0aDtiPmE7YSsrKWQuY2FsbCh0aGlzLHRoaXMuX2RlZmVycmVkc1thXSk7dGhpcy5fZGVmZXJyZWRzPW51bGx9ZnVuY3Rpb24gaChhLGIsYyxkKXt0aGlzLm9uRnVsZmlsbGVkPVwiZnVuY3Rpb25cIj09dHlwZW9mIGE/YTpudWxsLHRoaXMub25SZWplY3RlZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBiP2I6bnVsbCx0aGlzLnJlc29sdmU9Yyx0aGlzLnJlamVjdD1kfWZ1bmN0aW9uIGkoYSxiLGMpe3ZhciBkPSExO3RyeXthKGZ1bmN0aW9uKGEpe2R8fChkPSEwLGIoYSkpfSxmdW5jdGlvbihhKXtkfHwoZD0hMCxjKGEpKX0pfWNhdGNoKGUpe2lmKGQpcmV0dXJuO2Q9ITAsYyhlKX19dmFyIGo9c2V0VGltZW91dCxrPVwiZnVuY3Rpb25cIj09dHlwZW9mIHNldEltbWVkaWF0ZSYmc2V0SW1tZWRpYXRlfHxmdW5jdGlvbihhKXtqKGEsMSl9LGw9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oYSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpfTtjLnByb3RvdHlwZVtcImNhdGNoXCJdPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnRoZW4obnVsbCxhKX0sYy5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhLGIpe3ZhciBlPXRoaXM7cmV0dXJuIG5ldyBjKGZ1bmN0aW9uKGMsZil7ZC5jYWxsKGUsbmV3IGgoYSxiLGMsZikpfSl9LGMuYWxsPWZ1bmN0aW9uKCl7dmFyIGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoMT09PWFyZ3VtZW50cy5sZW5ndGgmJmwoYXJndW1lbnRzWzBdKT9hcmd1bWVudHNbMF06YXJndW1lbnRzKTtyZXR1cm4gbmV3IGMoZnVuY3Rpb24oYixjKXtmdW5jdGlvbiBkKGYsZyl7dHJ5e2lmKGcmJihcIm9iamVjdFwiPT10eXBlb2YgZ3x8XCJmdW5jdGlvblwiPT10eXBlb2YgZykpe3ZhciBoPWcudGhlbjtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBoKXJldHVybiB2b2lkIGguY2FsbChnLGZ1bmN0aW9uKGEpe2QoZixhKX0sYyl9YVtmXT1nLDA9PT0tLWUmJmIoYSl9Y2F0Y2goaSl7YyhpKX19aWYoMD09PWEubGVuZ3RoKXJldHVybiBiKFtdKTtmb3IodmFyIGU9YS5sZW5ndGgsZj0wO2Y8YS5sZW5ndGg7ZisrKWQoZixhW2ZdKX0pfSxjLnJlc29sdmU9ZnVuY3Rpb24oYSl7cmV0dXJuIGEmJlwib2JqZWN0XCI9PXR5cGVvZiBhJiZhLmNvbnN0cnVjdG9yPT09Yz9hOm5ldyBjKGZ1bmN0aW9uKGIpe2IoYSl9KX0sYy5yZWplY3Q9ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBjKGZ1bmN0aW9uKGIsYyl7YyhhKX0pfSxjLnJhY2U9ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBjKGZ1bmN0aW9uKGIsYyl7Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtlPmQ7ZCsrKWFbZF0udGhlbihiLGMpfSl9LGMuX3NldEltbWVkaWF0ZUZuPWZ1bmN0aW9uKGEpe2s9YX0sXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9YzphLlByb21pc2V8fChhLlByb21pc2U9Yyl9KHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggdHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCAhPT0gXCJmdW5jdGlvblwiICkge1xyXG4gICAgICAgIChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBDdXN0b21FdmVudCAoIGV2ZW50LCBwYXJhbXMgKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwgeyBidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogdW5kZWZpbmVkIH07XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoICdDdXN0b21FdmVudCcgKTtcclxuICAgICAgICAgICAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoIGV2ZW50LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwgKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBldnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQ3VzdG9tRXZlbnQucHJvdG90eXBlID0gd2luZG93LkV2ZW50LnByb3RvdHlwZTtcclxuICAgICAgICAgICAgd2luZG93LkN1c3RvbUV2ZW50ID0gQ3VzdG9tRXZlbnQ7XHJcbiAgICAgICAgfSgpKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIUhUTUxDYW52YXNFbGVtZW50LnByb3RvdHlwZS50b0Jsb2IpIHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSFRNTENhbnZhc0VsZW1lbnQucHJvdG90eXBlLCAndG9CbG9iJywge1xyXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKGNhbGxiYWNrLCB0eXBlLCBxdWFsaXR5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmluU3RyID0gYXRvYiggdGhpcy50b0RhdGFVUkwodHlwZSwgcXVhbGl0eSkuc3BsaXQoJywnKVsxXSApLFxyXG4gICAgICAgICAgICAgICAgbGVuID0gYmluU3RyLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIGFyciA9IG5ldyBVaW50OEFycmF5KGxlbik7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPGxlbjsgaSsrICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycltpXSA9IGJpblN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCBuZXcgQmxvYiggW2Fycl0sIHt0eXBlOiB0eXBlIHx8ICdpbWFnZS9wbmcnfSApICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qIEVuZCBQb2x5ZmlsbHMgKi9cclxuXHJcbiAgICB2YXIgY3NzUHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXSxcclxuICAgICAgICBlbXB0eVN0eWxlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlLFxyXG4gICAgICAgIENTU19UUkFOU19PUkcsXHJcbiAgICAgICAgQ1NTX1RSQU5TRk9STSxcclxuICAgICAgICBDU1NfVVNFUlNFTEVDVDtcclxuXHJcbiAgICBmdW5jdGlvbiB2ZW5kb3JQcmVmaXgocHJvcCkge1xyXG4gICAgICAgIGlmIChwcm9wIGluIGVtcHR5U3R5bGVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9wO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGNhcFByb3AgPSBwcm9wWzBdLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpLFxyXG4gICAgICAgICAgICBpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xyXG5cclxuICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgIHByb3AgPSBjc3NQcmVmaXhlc1tpXSArIGNhcFByb3A7XHJcbiAgICAgICAgICAgIGlmIChwcm9wIGluIGVtcHR5U3R5bGVzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBDU1NfVFJBTlNGT1JNID0gdmVuZG9yUHJlZml4KCd0cmFuc2Zvcm0nKTtcclxuICAgIENTU19UUkFOU19PUkcgPSB2ZW5kb3JQcmVmaXgoJ3RyYW5zZm9ybU9yaWdpbicpO1xyXG4gICAgQ1NTX1VTRVJTRUxFQ1QgPSB2ZW5kb3JQcmVmaXgoJ3VzZXJTZWxlY3QnKTtcclxuXHJcbiAgICAvLyBDcmVkaXRzIHRvIDogQW5kcmV3IER1cG9udCAtIGh0dHA6Ly9hbmRyZXdkdXBvbnQubmV0LzIwMDkvMDgvMjgvZGVlcC1leHRlbmRpbmctb2JqZWN0cy1pbi1qYXZhc2NyaXB0L1xyXG4gICAgZnVuY3Rpb24gZGVlcEV4dGVuZChkZXN0aW5hdGlvbiwgc291cmNlKSB7XHJcbiAgICAgICAgZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbiB8fCB7fTtcclxuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzb3VyY2UpIHtcclxuICAgICAgICAgICAgaWYgKHNvdXJjZVtwcm9wZXJ0eV0gJiYgc291cmNlW3Byb3BlcnR5XS5jb25zdHJ1Y3RvciAmJiBzb3VyY2VbcHJvcGVydHldLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IGRlc3RpbmF0aW9uW3Byb3BlcnR5XSB8fCB7fTtcclxuICAgICAgICAgICAgICAgIGRlZXBFeHRlbmQoZGVzdGluYXRpb25bcHJvcGVydHldLCBzb3VyY2VbcHJvcGVydHldKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IHNvdXJjZVtwcm9wZXJ0eV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xyXG4gICAgICAgIHZhciB0aW1lb3V0O1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgYXJncyA9IGFyZ3VtZW50cztcclxuICAgICAgICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWltbWVkaWF0ZSkgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xyXG4gICAgICAgICAgICBpZiAoY2FsbE5vdykgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRpc3BhdGNoQ2hhbmdlKGVsZW1lbnQpIHtcclxuICAgICAgICBpZiAoXCJjcmVhdGVFdmVudFwiIGluIGRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkhUTUxFdmVudHNcIik7XHJcbiAgICAgICAgICAgIGV2dC5pbml0RXZlbnQoXCJjaGFuZ2VcIiwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZ0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuZmlyZUV2ZW50KFwib25jaGFuZ2VcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vaHR0cDovL2pzcGVyZi5jb20vdmFuaWxsYS1jc3NcclxuICAgIGZ1bmN0aW9uIGNzcyhlbCwgc3R5bGVzLCB2YWwpIHtcclxuICAgICAgICBpZiAodHlwZW9mIChzdHlsZXMpID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB2YXIgdG1wID0gc3R5bGVzO1xyXG4gICAgICAgICAgICBzdHlsZXMgPSB7fTtcclxuICAgICAgICAgICAgc3R5bGVzW3RtcF0gPSB2YWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlcykge1xyXG4gICAgICAgICAgICBlbC5zdHlsZVtwcm9wXSA9IHN0eWxlc1twcm9wXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkQ2xhc3MoZWwsIGMpIHtcclxuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XHJcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbC5jbGFzc05hbWUgKz0gJyAnICsgYztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGMpIHtcclxuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XHJcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShjLCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG51bSh2KSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHYsIDEwKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBVdGlsaXRpZXMgKi9cclxuICAgIGZ1bmN0aW9uIGxvYWRJbWFnZShzcmMsIGltYWdlRWwpIHtcclxuICAgICAgICB2YXIgaW1nID0gaW1hZ2VFbCB8fCBuZXcgSW1hZ2UoKTtcclxuICAgICAgICBpbWcuc3R5bGUub3BhY2l0eSA9IDA7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICAgICBpZiAoaW1nLnNyYyA9PT0gc3JjKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiBpbWFnZSBzb3VyY2UgaGFzbid0IGNoYW5nZWQgcmVzb2x2ZSBpbW1lZGlhdGVseVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShpbWcpO1xyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGltZy5yZW1vdmVBdHRyaWJ1dGUoJ2Nyb3NzT3JpZ2luJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3JjLm1hdGNoKC9eaHR0cHM/OlxcL1xcL3xeXFwvXFwvLykpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKCdjcm9zc09yaWdpbicsICdhbm9ueW1vdXMnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaW1nKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGltZy5zcmMgPSBzcmM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyogQ1NTIFRyYW5zZm9ybSBQcm90b3R5cGUgKi9cclxuICAgIHZhciBUUkFOU0xBVEVfT1BUUyA9IHtcclxuICAgICAgICAndHJhbnNsYXRlM2QnOiB7XHJcbiAgICAgICAgICAgIHN1ZmZpeDogJywgMHB4J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ3RyYW5zbGF0ZSc6IHtcclxuICAgICAgICAgICAgc3VmZml4OiAnJ1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgVHJhbnNmb3JtID0gZnVuY3Rpb24gKHgsIHksIHNjYWxlKSB7XHJcbiAgICAgICAgdGhpcy54ID0gcGFyc2VGbG9hdCh4KTtcclxuICAgICAgICB0aGlzLnkgPSBwYXJzZUZsb2F0KHkpO1xyXG4gICAgICAgIHRoaXMuc2NhbGUgPSBwYXJzZUZsb2F0KHNjYWxlKTtcclxuICAgIH07XHJcblxyXG4gICAgVHJhbnNmb3JtLnBhcnNlID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICBpZiAodi5zdHlsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gVHJhbnNmb3JtLnBhcnNlKHYuc3R5bGVbQ1NTX1RSQU5TRk9STV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2LmluZGV4T2YoJ21hdHJpeCcpID4gLTEgfHwgdi5pbmRleE9mKCdub25lJykgPiAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gVHJhbnNmb3JtLmZyb21NYXRyaXgodik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gVHJhbnNmb3JtLmZyb21TdHJpbmcodik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBUcmFuc2Zvcm0uZnJvbU1hdHJpeCA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgdmFyIHZhbHMgPSB2LnN1YnN0cmluZyg3KS5zcGxpdCgnLCcpO1xyXG4gICAgICAgIGlmICghdmFscy5sZW5ndGggfHwgdiA9PT0gJ25vbmUnKSB7XHJcbiAgICAgICAgICAgIHZhbHMgPSBbMSwgMCwgMCwgMSwgMCwgMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFRyYW5zZm9ybShudW0odmFsc1s0XSksIG51bSh2YWxzWzVdKSwgcGFyc2VGbG9hdCh2YWxzWzBdKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIFRyYW5zZm9ybS5mcm9tU3RyaW5nID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICB2YXIgdmFsdWVzID0gdi5zcGxpdCgnKSAnKSxcclxuICAgICAgICAgICAgdHJhbnNsYXRlID0gdmFsdWVzWzBdLnN1YnN0cmluZyhDcm9wcGllLmdsb2JhbHMudHJhbnNsYXRlLmxlbmd0aCArIDEpLnNwbGl0KCcsJyksXHJcbiAgICAgICAgICAgIHNjYWxlID0gdmFsdWVzLmxlbmd0aCA+IDEgPyB2YWx1ZXNbMV0uc3Vic3RyaW5nKDYpIDogMSxcclxuICAgICAgICAgICAgeCA9IHRyYW5zbGF0ZS5sZW5ndGggPiAxID8gdHJhbnNsYXRlWzBdIDogMCxcclxuICAgICAgICAgICAgeSA9IHRyYW5zbGF0ZS5sZW5ndGggPiAxID8gdHJhbnNsYXRlWzFdIDogMDtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm0oeCwgeSwgc2NhbGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBUcmFuc2Zvcm0ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBzdWZmaXggPSBUUkFOU0xBVEVfT1BUU1tDcm9wcGllLmdsb2JhbHMudHJhbnNsYXRlXS5zdWZmaXggfHwgJyc7XHJcbiAgICAgICAgcmV0dXJuIENyb3BwaWUuZ2xvYmFscy50cmFuc2xhdGUgKyAnKCcgKyB0aGlzLnggKyAncHgsICcgKyB0aGlzLnkgKyAncHgnICsgc3VmZml4ICsgJykgc2NhbGUoJyArIHRoaXMuc2NhbGUgKyAnKSc7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBUcmFuc2Zvcm1PcmlnaW4gPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICBpZiAoIWVsIHx8ICFlbC5zdHlsZVtDU1NfVFJBTlNfT1JHXSkge1xyXG4gICAgICAgICAgICB0aGlzLnggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnkgPSAwO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjc3MgPSBlbC5zdHlsZVtDU1NfVFJBTlNfT1JHXS5zcGxpdCgnICcpO1xyXG4gICAgICAgIHRoaXMueCA9IHBhcnNlRmxvYXQoY3NzWzBdKTtcclxuICAgICAgICB0aGlzLnkgPSBwYXJzZUZsb2F0KGNzc1sxXSk7XHJcbiAgICB9O1xyXG5cclxuICAgIFRyYW5zZm9ybU9yaWdpbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMueCArICdweCAnICsgdGhpcy55ICsgJ3B4JztcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0RXhpZk9yaWVudGF0aW9uIChpbWcsIGNiKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuRVhJRikge1xyXG4gICAgICAgICAgICBjYigwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEVYSUYuZ2V0RGF0YShpbWcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG9yaWVudGF0aW9uID0gRVhJRi5nZXRUYWcodGhpcywgJ09yaWVudGF0aW9uJyk7XHJcbiAgICAgICAgICAgIGNiKG9yaWVudGF0aW9uKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkcmF3Q2FudmFzKGNhbnZhcywgaW1nLCBvcmllbnRhdGlvbikge1xyXG4gICAgICAgIHZhciB3aWR0aCA9IGltZy53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0ID0gaW1nLmhlaWdodCxcclxuICAgICAgICAgICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGltZy53aWR0aDtcclxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaW1nLmhlaWdodDtcclxuXHJcbiAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICBzd2l0Y2ggKG9yaWVudGF0aW9uKSB7XHJcbiAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKHdpZHRoLCAwKTtcclxuICAgICAgICAgICAgIGN0eC5zY2FsZSgtMSwgMSk7XHJcbiAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICBjdHgucm90YXRlKDE4MCpNYXRoLlBJLzE4MCk7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoMCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICBjdHguc2NhbGUoMSwgLTEpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSBoZWlnaHQ7XHJcbiAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IHdpZHRoO1xyXG4gICAgICAgICAgICAgIGN0eC5yb3RhdGUoOTAqTWF0aC5QSS8xODApO1xyXG4gICAgICAgICAgICAgIGN0eC5zY2FsZSgxLCAtMSk7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGhlaWdodDtcclxuICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gd2lkdGg7XHJcbiAgICAgICAgICAgICAgY3R4LnJvdGF0ZSg5MCpNYXRoLlBJLzE4MCk7XHJcbiAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgwLCAtaGVpZ2h0KTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gaGVpZ2h0O1xyXG4gICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSB3aWR0aDtcclxuICAgICAgICAgICAgICBjdHgucm90YXRlKC05MCpNYXRoLlBJLzE4MCk7XHJcbiAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgtd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgY3R4LnNjYWxlKDEsIC0xKTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gaGVpZ2h0O1xyXG4gICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSB3aWR0aDtcclxuICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKDAsIHdpZHRoKTtcclxuICAgICAgICAgICAgICBjdHgucm90YXRlKC05MCpNYXRoLlBJLzE4MCk7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogUHJpdmF0ZSBNZXRob2RzICovXHJcbiAgICBmdW5jdGlvbiBfY3JlYXRlKCkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgY29udENsYXNzID0gJ2Nyb3BwaWUtY29udGFpbmVyJyxcclxuICAgICAgICAgICAgY3VzdG9tVmlld3BvcnRDbGFzcyA9IHNlbGYub3B0aW9ucy52aWV3cG9ydC50eXBlID8gJ2NyLXZwLScgKyBzZWxmLm9wdGlvbnMudmlld3BvcnQudHlwZSA6IG51bGwsXHJcbiAgICAgICAgICAgIGJvdW5kYXJ5LCBpbWcsIHZpZXdwb3J0LCBvdmVybGF5LCBjYW52YXMsIGJ3LCBiaDtcclxuXHJcbiAgICAgICAgc2VsZi5vcHRpb25zLnVzZUNhbnZhcyA9IHNlbGYub3B0aW9ucy5lbmFibGVPcmllbnRhdGlvbiB8fCBfaGFzRXhpZi5jYWxsKHNlbGYpO1xyXG4gICAgICAgIC8vIFByb3BlcnRpZXMgb24gY2xhc3NcclxuICAgICAgICBzZWxmLmRhdGEgPSB7fTtcclxuICAgICAgICBzZWxmLmVsZW1lbnRzID0ge307XHJcblxyXG4gICAgICAgIC8vIEdlbmVyYXRpbmcgTWFya3VwXHJcbiAgICAgICAgYm91bmRhcnkgPSBzZWxmLmVsZW1lbnRzLmJvdW5kYXJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdmlld3BvcnQgPSBzZWxmLmVsZW1lbnRzLnZpZXdwb3J0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgaW1nID0gc2VsZi5lbGVtZW50cy5pbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgICAgICBvdmVybGF5ID0gc2VsZi5lbGVtZW50cy5vdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMudXNlQ2FudmFzKSB7XHJcbiAgICAgICAgICAgIHNlbGYuZWxlbWVudHMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgICAgIHNlbGYuZWxlbWVudHMucHJldmlldyA9IHNlbGYuZWxlbWVudHMuY2FudmFzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2VsZi5lbGVtZW50cy5wcmV2aWV3ID0gc2VsZi5lbGVtZW50cy5pbWc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGRDbGFzcyhib3VuZGFyeSwgJ2NyLWJvdW5kYXJ5Jyk7XHJcbiAgICAgICAgYncgPSBzZWxmLm9wdGlvbnMuYm91bmRhcnkud2lkdGg7XHJcbiAgICAgICAgYmggPSBzZWxmLm9wdGlvbnMuYm91bmRhcnkuaGVpZ2h0O1xyXG4gICAgICAgIGNzcyhib3VuZGFyeSwge1xyXG4gICAgICAgICAgICB3aWR0aDogKGJ3ICsgKGlzTmFOKGJ3KSA/ICcnIDogJ3B4JykpLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IChiaCArIChpc05hTihiaCkgPyAnJyA6ICdweCcpKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhZGRDbGFzcyh2aWV3cG9ydCwgJ2NyLXZpZXdwb3J0Jyk7XHJcbiAgICAgICAgaWYgKGN1c3RvbVZpZXdwb3J0Q2xhc3MpIHtcclxuICAgICAgICAgICAgYWRkQ2xhc3Modmlld3BvcnQsIGN1c3RvbVZpZXdwb3J0Q2xhc3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjc3Modmlld3BvcnQsIHtcclxuICAgICAgICAgICAgd2lkdGg6IHNlbGYub3B0aW9ucy52aWV3cG9ydC53aWR0aCArICdweCcsXHJcbiAgICAgICAgICAgIGhlaWdodDogc2VsZi5vcHRpb25zLnZpZXdwb3J0LmhlaWdodCArICdweCdcclxuICAgICAgICB9KTtcclxuICAgICAgICB2aWV3cG9ydC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgMCk7XHJcblxyXG4gICAgICAgIGFkZENsYXNzKHNlbGYuZWxlbWVudHMucHJldmlldywgJ2NyLWltYWdlJyk7XHJcbiAgICAgICAgYWRkQ2xhc3Mob3ZlcmxheSwgJ2NyLW92ZXJsYXknKTtcclxuXHJcbiAgICAgICAgc2VsZi5lbGVtZW50LmFwcGVuZENoaWxkKGJvdW5kYXJ5KTtcclxuICAgICAgICBib3VuZGFyeS5hcHBlbmRDaGlsZChzZWxmLmVsZW1lbnRzLnByZXZpZXcpO1xyXG4gICAgICAgIGJvdW5kYXJ5LmFwcGVuZENoaWxkKHZpZXdwb3J0KTtcclxuICAgICAgICBib3VuZGFyeS5hcHBlbmRDaGlsZChvdmVybGF5KTtcclxuXHJcbiAgICAgICAgYWRkQ2xhc3Moc2VsZi5lbGVtZW50LCBjb250Q2xhc3MpO1xyXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMuY3VzdG9tQ2xhc3MpIHtcclxuICAgICAgICAgICAgYWRkQ2xhc3Moc2VsZi5lbGVtZW50LCBzZWxmLm9wdGlvbnMuY3VzdG9tQ2xhc3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgX2luaXREcmFnZ2FibGUuY2FsbCh0aGlzKTtcclxuXHJcbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5lbmFibGVab29tKSB7XHJcbiAgICAgICAgICAgIF9pbml0aWFsaXplWm9vbS5jYWxsKHNlbGYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaWYgKHNlbGYub3B0aW9ucy5lbmFibGVPcmllbnRhdGlvbikge1xyXG4gICAgICAgIC8vICAgICBfaW5pdFJvdGF0aW9uQ29udHJvbHMuY2FsbChzZWxmKTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZnVuY3Rpb24gX2luaXRSb3RhdGlvbkNvbnRyb2xzICgpIHtcclxuICAgIC8vICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAvLyAgICAgICAgIHdyYXAsIGJ0bkxlZnQsIGJ0blJpZ2h0LCBpTGVmdCwgaVJpZ2h0O1xyXG5cclxuICAgIC8vICAgICB3cmFwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAvLyAgICAgc2VsZi5lbGVtZW50cy5vcmllbnRhdGlvbkJ0bkxlZnQgPSBidG5MZWZ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAvLyAgICAgc2VsZi5lbGVtZW50cy5vcmllbnRhdGlvbkJ0blJpZ2h0ID0gYnRuUmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuXHJcbiAgICAvLyAgICAgd3JhcC5hcHBlbmRDaGlsZChidG5MZWZ0KTtcclxuICAgIC8vICAgICB3cmFwLmFwcGVuZENoaWxkKGJ0blJpZ2h0KTtcclxuXHJcbiAgICAvLyAgICAgaUxlZnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XHJcbiAgICAvLyAgICAgaVJpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xyXG4gICAgLy8gICAgIGJ0bkxlZnQuYXBwZW5kQ2hpbGQoaUxlZnQpO1xyXG4gICAgLy8gICAgIGJ0blJpZ2h0LmFwcGVuZENoaWxkKGlSaWdodCk7XHJcblxyXG4gICAgLy8gICAgIGFkZENsYXNzKHdyYXAsICdjci1yb3RhdGUtY29udHJvbHMnKTtcclxuICAgIC8vICAgICBhZGRDbGFzcyhidG5MZWZ0LCAnY3Itcm90YXRlLWwnKTtcclxuICAgIC8vICAgICBhZGRDbGFzcyhidG5SaWdodCwgJ2NyLXJvdGF0ZS1yJyk7XHJcblxyXG4gICAgLy8gICAgIHNlbGYuZWxlbWVudHMuYm91bmRhcnkuYXBwZW5kQ2hpbGQod3JhcCk7XHJcblxyXG4gICAgLy8gICAgIGJ0bkxlZnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyAgICAgICAgIHNlbGYucm90YXRlKC05MCk7XHJcbiAgICAvLyAgICAgfSk7XHJcbiAgICAvLyAgICAgYnRuUmlnaHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyAgICAgICAgIHNlbGYucm90YXRlKDkwKTtcclxuICAgIC8vICAgICB9KTtcclxuICAgIC8vIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfaGFzRXhpZigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmVuYWJsZUV4aWYgJiYgd2luZG93LkVYSUY7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3NldFpvb21lclZhbCh2KSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5lbmFibGVab29tKSB7XHJcbiAgICAgICAgICAgIHZhciB6ID0gdGhpcy5lbGVtZW50cy56b29tZXIsXHJcbiAgICAgICAgICAgICAgICB2YWwgPSBmaXgodiwgNCk7XHJcblxyXG4gICAgICAgICAgICB6LnZhbHVlID0gTWF0aC5tYXgoei5taW4sIE1hdGgubWluKHoubWF4LCB2YWwpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2luaXRpYWxpemVab29tKCkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgd3JhcCA9IHNlbGYuZWxlbWVudHMuem9vbWVyV3JhcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxyXG4gICAgICAgICAgICB6b29tZXIgPSBzZWxmLmVsZW1lbnRzLnpvb21lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcblxyXG4gICAgICAgIGFkZENsYXNzKHdyYXAsICdjci1zbGlkZXItd3JhcCcpO1xyXG4gICAgICAgIGFkZENsYXNzKHpvb21lciwgJ2NyLXNsaWRlcicpO1xyXG4gICAgICAgIHpvb21lci50eXBlID0gJ3JhbmdlJztcclxuICAgICAgICB6b29tZXIuc3RlcCA9ICcwLjAwMDEnO1xyXG4gICAgICAgIHpvb21lci52YWx1ZSA9IDE7XHJcbiAgICAgICAgem9vbWVyLnN0eWxlLmRpc3BsYXkgPSBzZWxmLm9wdGlvbnMuc2hvd1pvb21lciA/ICcnIDogJ25vbmUnO1xyXG5cclxuICAgICAgICBzZWxmLmVsZW1lbnQuYXBwZW5kQ2hpbGQod3JhcCk7XHJcbiAgICAgICAgd3JhcC5hcHBlbmRDaGlsZCh6b29tZXIpO1xyXG5cclxuICAgICAgICBzZWxmLl9jdXJyZW50Wm9vbSA9IDE7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNoYW5nZSgpIHtcclxuICAgICAgICAgICAgX29uWm9vbS5jYWxsKHNlbGYsIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBwYXJzZUZsb2F0KHpvb21lci52YWx1ZSksXHJcbiAgICAgICAgICAgICAgICBvcmlnaW46IG5ldyBUcmFuc2Zvcm1PcmlnaW4oc2VsZi5lbGVtZW50cy5wcmV2aWV3KSxcclxuICAgICAgICAgICAgICAgIHZpZXdwb3J0UmVjdDogc2VsZi5lbGVtZW50cy52aWV3cG9ydC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtLnBhcnNlKHNlbGYuZWxlbWVudHMucHJldmlldylcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzY3JvbGwoZXYpIHtcclxuICAgICAgICAgICAgdmFyIGRlbHRhLCB0YXJnZXRab29tO1xyXG5cclxuICAgICAgICAgICAgaWYgKGV2LndoZWVsRGVsdGEpIHtcclxuICAgICAgICAgICAgICAgIGRlbHRhID0gZXYud2hlZWxEZWx0YSAvIDEyMDA7IC8vd2hlZWxEZWx0YSBtaW46IC0xMjAgbWF4OiAxMjAgLy8gbWF4IHggMTAgeCAyXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXYuZGVsdGFZKSB7XHJcbiAgICAgICAgICAgICAgICBkZWx0YSA9IGV2LmRlbHRhWSAvIDEwNjA7IC8vZGVsdGFZIG1pbjogLTUzIG1heDogNTMgLy8gbWF4IHggMTAgeCAyXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXYuZGV0YWlsKSB7XHJcbiAgICAgICAgICAgICAgICBkZWx0YSA9IGV2LmRldGFpbCAvIC02MDsgLy9kZWx0YSBtaW46IC0zIG1heDogMyAvLyBtYXggeCAxMCB4IDJcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRlbHRhID0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGFyZ2V0Wm9vbSA9IHNlbGYuX2N1cnJlbnRab29tICsgKGRlbHRhICogc2VsZi5fY3VycmVudFpvb20pO1xyXG5cclxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgX3NldFpvb21lclZhbC5jYWxsKHNlbGYsIHRhcmdldFpvb20pO1xyXG4gICAgICAgICAgICBjaGFuZ2UuY2FsbChzZWxmKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYuZWxlbWVudHMuem9vbWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgY2hhbmdlKTsvLyB0aGlzIGlzIGJlaW5nIGZpcmVkIHR3aWNlIG9uIGtleXByZXNzXHJcbiAgICAgICAgc2VsZi5lbGVtZW50cy56b29tZXIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgY2hhbmdlKTtcclxuXHJcbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5tb3VzZVdoZWVsWm9vbSkge1xyXG4gICAgICAgICAgICBzZWxmLmVsZW1lbnRzLmJvdW5kYXJ5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCBzY3JvbGwpO1xyXG4gICAgICAgICAgICBzZWxmLmVsZW1lbnRzLmJvdW5kYXJ5LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTU1vdXNlU2Nyb2xsJywgc2Nyb2xsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX29uWm9vbSh1aSkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgdHJhbnNmb3JtID0gdWkgPyB1aS50cmFuc2Zvcm0gOiBUcmFuc2Zvcm0ucGFyc2Uoc2VsZi5lbGVtZW50cy5wcmV2aWV3KSxcclxuICAgICAgICAgICAgdnBSZWN0ID0gdWkgPyB1aS52aWV3cG9ydFJlY3QgOiBzZWxmLmVsZW1lbnRzLnZpZXdwb3J0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxyXG4gICAgICAgICAgICBvcmlnaW4gPSB1aSA/IHVpLm9yaWdpbiA6IG5ldyBUcmFuc2Zvcm1PcmlnaW4oc2VsZi5lbGVtZW50cy5wcmV2aWV3KSxcclxuICAgICAgICAgICAgdHJhbnNDc3MgPSB7fTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYXBwbHlDc3MoKSB7XHJcbiAgICAgICAgICAgIHZhciB0cmFuc0NzcyA9IHt9O1xyXG4gICAgICAgICAgICB0cmFuc0Nzc1tDU1NfVFJBTlNGT1JNXSA9IHRyYW5zZm9ybS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB0cmFuc0Nzc1tDU1NfVFJBTlNfT1JHXSA9IG9yaWdpbi50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBjc3Moc2VsZi5lbGVtZW50cy5wcmV2aWV3LCB0cmFuc0Nzcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLl9jdXJyZW50Wm9vbSA9IHVpID8gdWkudmFsdWUgOiBzZWxmLl9jdXJyZW50Wm9vbTtcclxuICAgICAgICB0cmFuc2Zvcm0uc2NhbGUgPSBzZWxmLl9jdXJyZW50Wm9vbTtcclxuICAgICAgICBhcHBseUNzcygpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5lbmZvcmNlQm91bmRhcnkpIHtcclxuICAgICAgICAgICAgdmFyIGJvdW5kYXJpZXMgPSBfZ2V0VmlydHVhbEJvdW5kYXJpZXMuY2FsbChzZWxmLCB2cFJlY3QpLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNCb3VuZGFyaWVzID0gYm91bmRhcmllcy50cmFuc2xhdGUsXHJcbiAgICAgICAgICAgICAgICBvQm91bmRhcmllcyA9IGJvdW5kYXJpZXMub3JpZ2luO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybS54ID49IHRyYW5zQm91bmRhcmllcy5tYXhYKSB7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW4ueCA9IG9Cb3VuZGFyaWVzLm1pblg7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0ueCA9IHRyYW5zQm91bmRhcmllcy5tYXhYO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHJhbnNmb3JtLnggPD0gdHJhbnNCb3VuZGFyaWVzLm1pblgpIHtcclxuICAgICAgICAgICAgICAgIG9yaWdpbi54ID0gb0JvdW5kYXJpZXMubWF4WDtcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybS54ID0gdHJhbnNCb3VuZGFyaWVzLm1pblg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0cmFuc2Zvcm0ueSA+PSB0cmFuc0JvdW5kYXJpZXMubWF4WSkge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luLnkgPSBvQm91bmRhcmllcy5taW5ZO1xyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtLnkgPSB0cmFuc0JvdW5kYXJpZXMubWF4WTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybS55IDw9IHRyYW5zQm91bmRhcmllcy5taW5ZKSB7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW4ueSA9IG9Cb3VuZGFyaWVzLm1heFk7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0ueSA9IHRyYW5zQm91bmRhcmllcy5taW5ZO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFwcGx5Q3NzKCk7XHJcbiAgICAgICAgX2RlYm91bmNlZE92ZXJsYXkuY2FsbChzZWxmKTtcclxuICAgICAgICBfdHJpZ2dlclVwZGF0ZS5jYWxsKHNlbGYpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9nZXRWaXJ0dWFsQm91bmRhcmllcyh2aWV3cG9ydCkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgc2NhbGUgPSBzZWxmLl9jdXJyZW50Wm9vbSxcclxuICAgICAgICAgICAgdnBXaWR0aCA9IHZpZXdwb3J0LndpZHRoLFxyXG4gICAgICAgICAgICB2cEhlaWdodCA9IHZpZXdwb3J0LmhlaWdodCxcclxuICAgICAgICAgICAgY2VudGVyRnJvbUJvdW5kYXJ5WCA9IHNlbGYuZWxlbWVudHMuYm91bmRhcnkuY2xpZW50V2lkdGggLyAyLFxyXG4gICAgICAgICAgICBjZW50ZXJGcm9tQm91bmRhcnlZID0gc2VsZi5lbGVtZW50cy5ib3VuZGFyeS5jbGllbnRIZWlnaHQgLyAyLFxyXG4gICAgICAgICAgICBpbWdSZWN0ID0gc2VsZi5lbGVtZW50cy5wcmV2aWV3LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxyXG4gICAgICAgICAgICBjdXJJbWdXaWR0aCA9IGltZ1JlY3Qud2lkdGgsXHJcbiAgICAgICAgICAgIGN1ckltZ0hlaWdodCA9IGltZ1JlY3QuaGVpZ2h0LFxyXG4gICAgICAgICAgICBoYWxmV2lkdGggPSB2cFdpZHRoIC8gMixcclxuICAgICAgICAgICAgaGFsZkhlaWdodCA9IHZwSGVpZ2h0IC8gMjtcclxuXHJcbiAgICAgICAgdmFyIG1heFggPSAoKGhhbGZXaWR0aCAvIHNjYWxlKSAtIGNlbnRlckZyb21Cb3VuZGFyeVgpICogLTE7XHJcbiAgICAgICAgdmFyIG1pblggPSBtYXhYIC0gKChjdXJJbWdXaWR0aCAqICgxIC8gc2NhbGUpKSAtICh2cFdpZHRoICogKDEgLyBzY2FsZSkpKTtcclxuXHJcbiAgICAgICAgdmFyIG1heFkgPSAoKGhhbGZIZWlnaHQgLyBzY2FsZSkgLSBjZW50ZXJGcm9tQm91bmRhcnlZKSAqIC0xO1xyXG4gICAgICAgIHZhciBtaW5ZID0gbWF4WSAtICgoY3VySW1nSGVpZ2h0ICogKDEgLyBzY2FsZSkpIC0gKHZwSGVpZ2h0ICogKDEgLyBzY2FsZSkpKTtcclxuXHJcbiAgICAgICAgdmFyIG9yaWdpbk1pblggPSAoMSAvIHNjYWxlKSAqIGhhbGZXaWR0aDtcclxuICAgICAgICB2YXIgb3JpZ2luTWF4WCA9IChjdXJJbWdXaWR0aCAqICgxIC8gc2NhbGUpKSAtIG9yaWdpbk1pblg7XHJcblxyXG4gICAgICAgIHZhciBvcmlnaW5NaW5ZID0gKDEgLyBzY2FsZSkgKiBoYWxmSGVpZ2h0O1xyXG4gICAgICAgIHZhciBvcmlnaW5NYXhZID0gKGN1ckltZ0hlaWdodCAqICgxIC8gc2NhbGUpKSAtIG9yaWdpbk1pblk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZToge1xyXG4gICAgICAgICAgICAgICAgbWF4WDogbWF4WCxcclxuICAgICAgICAgICAgICAgIG1pblg6IG1pblgsXHJcbiAgICAgICAgICAgICAgICBtYXhZOiBtYXhZLFxyXG4gICAgICAgICAgICAgICAgbWluWTogbWluWVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvcmlnaW46IHtcclxuICAgICAgICAgICAgICAgIG1heFg6IG9yaWdpbk1heFgsXHJcbiAgICAgICAgICAgICAgICBtaW5YOiBvcmlnaW5NaW5YLFxyXG4gICAgICAgICAgICAgICAgbWF4WTogb3JpZ2luTWF4WSxcclxuICAgICAgICAgICAgICAgIG1pblk6IG9yaWdpbk1pbllcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3VwZGF0ZUNlbnRlclBvaW50KCkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgc2NhbGUgPSBzZWxmLl9jdXJyZW50Wm9vbSxcclxuICAgICAgICAgICAgZGF0YSA9IHNlbGYuZWxlbWVudHMucHJldmlldy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcclxuICAgICAgICAgICAgdnBEYXRhID0gc2VsZi5lbGVtZW50cy52aWV3cG9ydC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcclxuICAgICAgICAgICAgdHJhbnNmb3JtID0gVHJhbnNmb3JtLnBhcnNlKHNlbGYuZWxlbWVudHMucHJldmlldy5zdHlsZVtDU1NfVFJBTlNGT1JNXSksXHJcbiAgICAgICAgICAgIHBjID0gbmV3IFRyYW5zZm9ybU9yaWdpbihzZWxmLmVsZW1lbnRzLnByZXZpZXcpLFxyXG4gICAgICAgICAgICB0b3AgPSAodnBEYXRhLnRvcCAtIGRhdGEudG9wKSArICh2cERhdGEuaGVpZ2h0IC8gMiksXHJcbiAgICAgICAgICAgIGxlZnQgPSAodnBEYXRhLmxlZnQgLSBkYXRhLmxlZnQpICsgKHZwRGF0YS53aWR0aCAvIDIpLFxyXG4gICAgICAgICAgICBjZW50ZXIgPSB7fSxcclxuICAgICAgICAgICAgYWRqID0ge307XHJcblxyXG4gICAgICAgIGNlbnRlci55ID0gdG9wIC8gc2NhbGU7XHJcbiAgICAgICAgY2VudGVyLnggPSBsZWZ0IC8gc2NhbGU7XHJcblxyXG4gICAgICAgIGFkai55ID0gKGNlbnRlci55IC0gcGMueSkgKiAoMSAtIHNjYWxlKTtcclxuICAgICAgICBhZGoueCA9IChjZW50ZXIueCAtIHBjLngpICogKDEgLSBzY2FsZSk7XHJcblxyXG4gICAgICAgIHRyYW5zZm9ybS54IC09IGFkai54O1xyXG4gICAgICAgIHRyYW5zZm9ybS55IC09IGFkai55O1xyXG5cclxuICAgICAgICB2YXIgbmV3Q3NzID0ge307XHJcbiAgICAgICAgbmV3Q3NzW0NTU19UUkFOU19PUkddID0gY2VudGVyLnggKyAncHggJyArIGNlbnRlci55ICsgJ3B4JztcclxuICAgICAgICBuZXdDc3NbQ1NTX1RSQU5TRk9STV0gPSB0cmFuc2Zvcm0udG9TdHJpbmcoKTtcclxuICAgICAgICBjc3Moc2VsZi5lbGVtZW50cy5wcmV2aWV3LCBuZXdDc3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9pbml0RHJhZ2dhYmxlKCkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgaXNEcmFnZ2luZyA9IGZhbHNlLFxyXG4gICAgICAgICAgICBvcmlnaW5hbFgsXHJcbiAgICAgICAgICAgIG9yaWdpbmFsWSxcclxuICAgICAgICAgICAgb3JpZ2luYWxEaXN0YW5jZSxcclxuICAgICAgICAgICAgdnBSZWN0LFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFzc2lnblRyYW5zZm9ybUNvb3JkaW5hdGVzKGRlbHRhWCwgZGVsdGFZKSB7XHJcbiAgICAgICAgICAgIHZhciBpbWdSZWN0ID0gc2VsZi5lbGVtZW50cy5wcmV2aWV3LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxyXG4gICAgICAgICAgICAgICAgdG9wID0gdHJhbnNmb3JtLnkgKyBkZWx0YVksXHJcbiAgICAgICAgICAgICAgICBsZWZ0ID0gdHJhbnNmb3JtLnggKyBkZWx0YVg7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmVuZm9yY2VCb3VuZGFyeSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZwUmVjdC50b3AgPiBpbWdSZWN0LnRvcCArIGRlbHRhWSAmJiB2cFJlY3QuYm90dG9tIDwgaW1nUmVjdC5ib3R0b20gKyBkZWx0YVkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0ueSA9IHRvcDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodnBSZWN0LmxlZnQgPiBpbWdSZWN0LmxlZnQgKyBkZWx0YVggJiYgdnBSZWN0LnJpZ2h0IDwgaW1nUmVjdC5yaWdodCArIGRlbHRhWCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybS54ID0gbGVmdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybS55ID0gdG9wO1xyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtLnggPSBsZWZ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBrZXlEb3duKGV2KSB7XHJcbiAgICAgICAgICAgIHZhciBMRUZUX0FSUk9XICA9IDM3LFxyXG4gICAgICAgICAgICAgICAgVVBfQVJST1cgICAgPSAzOCxcclxuICAgICAgICAgICAgICAgIFJJR0hUX0FSUk9XID0gMzksXHJcbiAgICAgICAgICAgICAgICBET1dOX0FSUk9XICA9IDQwO1xyXG5cclxuICAgICAgICAgICAgaWYgKGV2LnNoaWZ0S2V5ICYmIChldi5rZXlDb2RlID09IFVQX0FSUk9XIHx8IGV2LmtleUNvZGUgPT0gRE9XTl9BUlJPVykpIHtcclxuICAgICAgICAgICAgICAgIHZhciB6b29tID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2LmtleUNvZGUgPT0gVVBfQVJST1cpIHtcclxuICAgICAgICAgICAgICAgICAgICB6b29tID0gcGFyc2VGbG9hdChzZWxmLmVsZW1lbnRzLnpvb21lci52YWx1ZSwgMTApICsgcGFyc2VGbG9hdChzZWxmLmVsZW1lbnRzLnpvb21lci5zdGVwLCAxMClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHpvb20gPSBwYXJzZUZsb2F0KHNlbGYuZWxlbWVudHMuem9vbWVyLnZhbHVlLCAxMCkgLSBwYXJzZUZsb2F0KHNlbGYuZWxlbWVudHMuem9vbWVyLnN0ZXAsIDEwKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VsZi5zZXRab29tKHpvb20pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGV2LmtleUNvZGUgPj0gMzcgJiYgZXYua2V5Q29kZSA8PSA0MCkge1xyXG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHZhciBtb3ZlbWVudCA9IHBhcnNlS2V5RG93bihldi5rZXlDb2RlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0gPSBUcmFuc2Zvcm0ucGFyc2Uoc2VsZi5lbGVtZW50cy5wcmV2aWV3KTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGVbQ1NTX1VTRVJTRUxFQ1RdID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgdnBSZWN0ID0gc2VsZi5lbGVtZW50cy52aWV3cG9ydC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgICAgIGtleU1vdmUobW92ZW1lbnQpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VLZXlEb3duKGtleSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIExFRlRfQVJST1c6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMSwgMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBVUF9BUlJPVzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFswLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFJJR0hUX0FSUk9XOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWy0xLCAwXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIERPV05fQVJST1c6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMCwgLTFdO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGtleU1vdmUobW92ZW1lbnQpIHtcclxuICAgICAgICAgICAgdmFyIGRlbHRhWCA9IG1vdmVtZW50WzBdLFxyXG4gICAgICAgICAgICAgICAgZGVsdGFZID0gbW92ZW1lbnRbMV0sXHJcbiAgICAgICAgICAgICAgICBuZXdDc3MgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIGFzc2lnblRyYW5zZm9ybUNvb3JkaW5hdGVzKGRlbHRhWCwgZGVsdGFZKTtcclxuXHJcbiAgICAgICAgICAgIG5ld0Nzc1tDU1NfVFJBTlNGT1JNXSA9IHRyYW5zZm9ybS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBjc3Moc2VsZi5lbGVtZW50cy5wcmV2aWV3LCBuZXdDc3MpO1xyXG4gICAgICAgICAgICBfdXBkYXRlT3ZlcmxheS5jYWxsKHNlbGYpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlW0NTU19VU0VSU0VMRUNUXSA9ICcnO1xyXG4gICAgICAgICAgICBfdXBkYXRlQ2VudGVyUG9pbnQuY2FsbChzZWxmKTtcclxuICAgICAgICAgICAgX3RyaWdnZXJVcGRhdGUuY2FsbChzZWxmKTtcclxuICAgICAgICAgICAgb3JpZ2luYWxEaXN0YW5jZSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBtb3VzZURvd24oZXYpIHtcclxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaWYgKGlzRHJhZ2dpbmcpIHJldHVybjtcclxuICAgICAgICAgICAgaXNEcmFnZ2luZyA9IHRydWU7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsWCA9IGV2LnBhZ2VYO1xyXG4gICAgICAgICAgICBvcmlnaW5hbFkgPSBldi5wYWdlWTtcclxuXHJcbiAgICAgICAgICAgIGlmIChldi50b3VjaGVzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG91Y2hlcyA9IGV2LnRvdWNoZXNbMF07XHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFggPSB0b3VjaGVzLnBhZ2VYO1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxZID0gdG91Y2hlcy5wYWdlWTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdHJhbnNmb3JtID0gVHJhbnNmb3JtLnBhcnNlKHNlbGYuZWxlbWVudHMucHJldmlldyk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3VzZU1vdmUpO1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgbW91c2VNb3ZlKTtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZVVwKTtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgbW91c2VVcCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGVbQ1NTX1VTRVJTRUxFQ1RdID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB2cFJlY3QgPSBzZWxmLmVsZW1lbnRzLnZpZXdwb3J0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbW91c2VNb3ZlKGV2KSB7XHJcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHZhciBwYWdlWCA9IGV2LnBhZ2VYLFxyXG4gICAgICAgICAgICAgICAgcGFnZVkgPSBldi5wYWdlWTtcclxuXHJcbiAgICAgICAgICAgIGlmIChldi50b3VjaGVzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG91Y2hlcyA9IGV2LnRvdWNoZXNbMF07XHJcbiAgICAgICAgICAgICAgICBwYWdlWCA9IHRvdWNoZXMucGFnZVg7XHJcbiAgICAgICAgICAgICAgICBwYWdlWSA9IHRvdWNoZXMucGFnZVk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBkZWx0YVggPSBwYWdlWCAtIG9yaWdpbmFsWCxcclxuICAgICAgICAgICAgICAgIGRlbHRhWSA9IHBhZ2VZIC0gb3JpZ2luYWxZLFxyXG4gICAgICAgICAgICAgICAgbmV3Q3NzID0ge307XHJcblxyXG4gICAgICAgICAgICBpZiAoZXYudHlwZSA9PSAndG91Y2htb3ZlJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2LnRvdWNoZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3VjaDEgPSBldi50b3VjaGVzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3VjaDIgPSBldi50b3VjaGVzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXN0ID0gTWF0aC5zcXJ0KCh0b3VjaDEucGFnZVggLSB0b3VjaDIucGFnZVgpICogKHRvdWNoMS5wYWdlWCAtIHRvdWNoMi5wYWdlWCkgKyAodG91Y2gxLnBhZ2VZIC0gdG91Y2gyLnBhZ2VZKSAqICh0b3VjaDEucGFnZVkgLSB0b3VjaDIucGFnZVkpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvcmlnaW5hbERpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRGlzdGFuY2UgPSBkaXN0IC8gc2VsZi5fY3VycmVudFpvb207XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSBkaXN0IC8gb3JpZ2luYWxEaXN0YW5jZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3NldFpvb21lclZhbC5jYWxsKHNlbGYsIHNjYWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaENoYW5nZShzZWxmLmVsZW1lbnRzLnpvb21lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhc3NpZ25UcmFuc2Zvcm1Db29yZGluYXRlcyhkZWx0YVgsIGRlbHRhWSk7XHJcblxyXG4gICAgICAgICAgICBuZXdDc3NbQ1NTX1RSQU5TRk9STV0gPSB0cmFuc2Zvcm0udG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgY3NzKHNlbGYuZWxlbWVudHMucHJldmlldywgbmV3Q3NzKTtcclxuICAgICAgICAgICAgX3VwZGF0ZU92ZXJsYXkuY2FsbChzZWxmKTtcclxuICAgICAgICAgICAgb3JpZ2luYWxZID0gcGFnZVk7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsWCA9IHBhZ2VYO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbW91c2VVcCgpIHtcclxuICAgICAgICAgICAgaXNEcmFnZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgbW91c2VNb3ZlKTtcclxuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG1vdXNlTW92ZSk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2VVcCk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG1vdXNlVXApO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlW0NTU19VU0VSU0VMRUNUXSA9ICcnO1xyXG4gICAgICAgICAgICBfdXBkYXRlQ2VudGVyUG9pbnQuY2FsbChzZWxmKTtcclxuICAgICAgICAgICAgX3RyaWdnZXJVcGRhdGUuY2FsbChzZWxmKTtcclxuICAgICAgICAgICAgb3JpZ2luYWxEaXN0YW5jZSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLmVsZW1lbnRzLm92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgbW91c2VEb3duKTtcclxuICAgICAgICBzZWxmLmVsZW1lbnRzLnZpZXdwb3J0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXlEb3duKTtcclxuICAgICAgICBzZWxmLmVsZW1lbnRzLm92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG1vdXNlRG93bik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3VwZGF0ZU92ZXJsYXkoKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBib3VuZFJlY3QgPSBzZWxmLmVsZW1lbnRzLmJvdW5kYXJ5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxyXG4gICAgICAgICAgICBpbWdEYXRhID0gc2VsZi5lbGVtZW50cy5wcmV2aWV3LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgICBjc3Moc2VsZi5lbGVtZW50cy5vdmVybGF5LCB7XHJcbiAgICAgICAgICAgIHdpZHRoOiBpbWdEYXRhLndpZHRoICsgJ3B4JyxcclxuICAgICAgICAgICAgaGVpZ2h0OiBpbWdEYXRhLmhlaWdodCArICdweCcsXHJcbiAgICAgICAgICAgIHRvcDogKGltZ0RhdGEudG9wIC0gYm91bmRSZWN0LnRvcCkgKyAncHgnLFxyXG4gICAgICAgICAgICBsZWZ0OiAoaW1nRGF0YS5sZWZ0IC0gYm91bmRSZWN0LmxlZnQpICsgJ3B4J1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdmFyIF9kZWJvdW5jZWRPdmVybGF5ID0gZGVib3VuY2UoX3VwZGF0ZU92ZXJsYXksIDUwMCk7XHJcblxyXG4gICAgZnVuY3Rpb24gX3RyaWdnZXJVcGRhdGUoKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBkYXRhID0gc2VsZi5nZXQoKSxcclxuICAgICAgICAgICAgZXY7XHJcblxyXG4gICAgICAgIGlmICghX2lzVmlzaWJsZS5jYWxsKHNlbGYpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYub3B0aW9ucy51cGRhdGUuY2FsbChzZWxmLCBkYXRhKTtcclxuICAgICAgICBpZiAoc2VsZi4kICYmIHR5cGVvZiBQcm90b3R5cGUgPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgc2VsZi4kKHNlbGYuZWxlbWVudCkudHJpZ2dlcigndXBkYXRlJywgZGF0YSk7IFxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGV2O1xyXG4gICAgICAgICAgICBpZiAod2luZG93LkN1c3RvbUV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBldiA9IG5ldyBDdXN0b21FdmVudCgndXBkYXRlJywgeyBkZXRhaWw6IGRhdGEgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBldiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xyXG4gICAgICAgICAgICAgICAgZXYuaW5pdEN1c3RvbUV2ZW50KCd1cGRhdGUnLCB0cnVlLCB0cnVlLCBkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi5lbGVtZW50LmRpc3BhdGNoRXZlbnQoZXYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfaXNWaXNpYmxlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzLnByZXZpZXcub2Zmc2V0SGVpZ2h0ID4gMCAmJiB0aGlzLmVsZW1lbnRzLnByZXZpZXcub2Zmc2V0V2lkdGggPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF91cGRhdGVQcm9wZXJ0aWVzRnJvbUltYWdlKCkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgbWluWm9vbSA9IDAsXHJcbiAgICAgICAgICAgIG1heFpvb20gPSAxLjUsXHJcbiAgICAgICAgICAgIGluaXRpYWxab29tID0gMSxcclxuICAgICAgICAgICAgY3NzUmVzZXQgPSB7fSxcclxuICAgICAgICAgICAgaW1nID0gc2VsZi5lbGVtZW50cy5wcmV2aWV3LFxyXG4gICAgICAgICAgICB6b29tZXIgPSBzZWxmLmVsZW1lbnRzLnpvb21lcixcclxuICAgICAgICAgICAgdHJhbnNmb3JtUmVzZXQgPSBuZXcgVHJhbnNmb3JtKDAsIDAsIGluaXRpYWxab29tKSxcclxuICAgICAgICAgICAgb3JpZ2luUmVzZXQgPSBuZXcgVHJhbnNmb3JtT3JpZ2luKCksXHJcbiAgICAgICAgICAgIGlzVmlzaWJsZSA9IF9pc1Zpc2libGUuY2FsbChzZWxmKSxcclxuICAgICAgICAgICAgaW1nRGF0YSxcclxuICAgICAgICAgICAgdnBEYXRhLFxyXG4gICAgICAgICAgICBib3VuZGFyeURhdGEsXHJcbiAgICAgICAgICAgIG1pblcsXHJcbiAgICAgICAgICAgIG1pbkg7XHJcblxyXG4gICAgICAgIGlmICghaXNWaXNpYmxlIHx8IHNlbGYuZGF0YS5ib3VuZCkge1xyXG4gICAgICAgICAgICAvLyBpZiB0aGUgY3JvcHBpZSBpc24ndCB2aXNpYmxlIG9yIGl0IGRvZXNuJ3QgbmVlZCBiaW5kaW5nXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYuZGF0YS5ib3VuZCA9IHRydWU7XHJcbiAgICAgICAgY3NzUmVzZXRbQ1NTX1RSQU5TRk9STV0gPSB0cmFuc2Zvcm1SZXNldC50b1N0cmluZygpO1xyXG4gICAgICAgIGNzc1Jlc2V0W0NTU19UUkFOU19PUkddID0gb3JpZ2luUmVzZXQudG9TdHJpbmcoKTtcclxuICAgICAgICBjc3NSZXNldFsnb3BhY2l0eSddID0gMTtcclxuICAgICAgICBjc3MoaW1nLCBjc3NSZXNldCk7XHJcblxyXG4gICAgICAgIGltZ0RhdGEgPSBpbWcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdnBEYXRhID0gc2VsZi5lbGVtZW50cy52aWV3cG9ydC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBib3VuZGFyeURhdGEgPSBzZWxmLmVsZW1lbnRzLmJvdW5kYXJ5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIHNlbGYuX29yaWdpbmFsSW1hZ2VXaWR0aCA9IGltZ0RhdGEud2lkdGg7XHJcbiAgICAgICAgc2VsZi5fb3JpZ2luYWxJbWFnZUhlaWdodCA9IGltZ0RhdGEuaGVpZ2h0O1xyXG5cclxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmVuYWJsZVpvb20pIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5lbmZvcmNlQm91bmRhcnkpIHtcclxuICAgICAgICAgICAgICAgIG1pblcgPSB2cERhdGEud2lkdGggLyBpbWdEYXRhLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgbWluSCA9IHZwRGF0YS5oZWlnaHQgLyBpbWdEYXRhLmhlaWdodDtcclxuICAgICAgICAgICAgICAgIG1pblpvb20gPSBNYXRoLm1heChtaW5XLCBtaW5IKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG1pblpvb20gPj0gbWF4Wm9vbSkge1xyXG4gICAgICAgICAgICAgICAgbWF4Wm9vbSA9IG1pblpvb20gKyAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB6b29tZXIubWluID0gZml4KG1pblpvb20sIDQpO1xyXG4gICAgICAgICAgICB6b29tZXIubWF4ID0gZml4KG1heFpvb20sIDQpO1xyXG4gICAgICAgICAgICB2YXIgZGVmYXVsdEluaXRpYWxab29tID0gTWF0aC5tYXgoKGJvdW5kYXJ5RGF0YS53aWR0aCAvIGltZ0RhdGEud2lkdGgpLCAoYm91bmRhcnlEYXRhLmhlaWdodCAvIGltZ0RhdGEuaGVpZ2h0KSk7XHJcbiAgICAgICAgICAgIGluaXRpYWxab29tID0gc2VsZi5kYXRhLmJvdW5kWm9vbSAhPT0gbnVsbCA/IHNlbGYuZGF0YS5ib3VuZFpvb20gOiBkZWZhdWx0SW5pdGlhbFpvb207XHJcbiAgICAgICAgICAgIF9zZXRab29tZXJWYWwuY2FsbChzZWxmLCBpbml0aWFsWm9vbSk7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoQ2hhbmdlKHpvb21lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZWxmLl9jdXJyZW50Wm9vbSA9IGluaXRpYWxab29tO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJhbnNmb3JtUmVzZXQuc2NhbGUgPSBzZWxmLl9jdXJyZW50Wm9vbTtcclxuICAgICAgICBjc3NSZXNldFtDU1NfVFJBTlNGT1JNXSA9IHRyYW5zZm9ybVJlc2V0LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgY3NzKGltZywgY3NzUmVzZXQpO1xyXG5cclxuICAgICAgICBpZiAoc2VsZi5kYXRhLnBvaW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgX2JpbmRQb2ludHMuY2FsbChzZWxmLCBzZWxmLmRhdGEucG9pbnRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9jZW50ZXJJbWFnZS5jYWxsKHNlbGYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgX3VwZGF0ZUNlbnRlclBvaW50LmNhbGwoc2VsZik7XHJcbiAgICAgICAgX3VwZGF0ZU92ZXJsYXkuY2FsbChzZWxmKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfYmluZFBvaW50cyhwb2ludHMpIHtcclxuICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCAhPSA0KSB7XHJcbiAgICAgICAgICAgIHRocm93IFwiQ3JvcHBpZSAtIEludmFsaWQgbnVtYmVyIG9mIHBvaW50cyBzdXBwbGllZDogXCIgKyBwb2ludHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgcG9pbnRzV2lkdGggPSBwb2ludHNbMl0gLSBwb2ludHNbMF0sXHJcbiAgICAgICAgICAgIC8vIHBvaW50c0hlaWdodCA9IHBvaW50c1szXSAtIHBvaW50c1sxXSxcclxuICAgICAgICAgICAgdnBEYXRhID0gc2VsZi5lbGVtZW50cy52aWV3cG9ydC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcclxuICAgICAgICAgICAgYm91bmRSZWN0ID0gc2VsZi5lbGVtZW50cy5ib3VuZGFyeS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcclxuICAgICAgICAgICAgdnBPZmZzZXQgPSB7XHJcbiAgICAgICAgICAgICAgICBsZWZ0OiB2cERhdGEubGVmdCAtIGJvdW5kUmVjdC5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgdG9wOiB2cERhdGEudG9wIC0gYm91bmRSZWN0LnRvcFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzY2FsZSA9IHZwRGF0YS53aWR0aCAvIHBvaW50c1dpZHRoLFxyXG4gICAgICAgICAgICBvcmlnaW5Ub3AgPSBwb2ludHNbMV0sXHJcbiAgICAgICAgICAgIG9yaWdpbkxlZnQgPSBwb2ludHNbMF0sXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybVRvcCA9ICgtMSAqIHBvaW50c1sxXSkgKyB2cE9mZnNldC50b3AsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybUxlZnQgPSAoLTEgKiBwb2ludHNbMF0pICsgdnBPZmZzZXQubGVmdCxcclxuICAgICAgICAgICAgbmV3Q3NzID0ge307XHJcblxyXG4gICAgICAgIG5ld0Nzc1tDU1NfVFJBTlNfT1JHXSA9IG9yaWdpbkxlZnQgKyAncHggJyArIG9yaWdpblRvcCArICdweCc7XHJcbiAgICAgICAgbmV3Q3NzW0NTU19UUkFOU0ZPUk1dID0gbmV3IFRyYW5zZm9ybSh0cmFuc2Zvcm1MZWZ0LCB0cmFuc2Zvcm1Ub3AsIHNjYWxlKS50b1N0cmluZygpO1xyXG4gICAgICAgIGNzcyhzZWxmLmVsZW1lbnRzLnByZXZpZXcsIG5ld0Nzcyk7XHJcblxyXG4gICAgICAgIF9zZXRab29tZXJWYWwuY2FsbChzZWxmLCBzY2FsZSk7XHJcbiAgICAgICAgc2VsZi5fY3VycmVudFpvb20gPSBzY2FsZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfY2VudGVySW1hZ2UoKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBpbWdEaW0gPSBzZWxmLmVsZW1lbnRzLnByZXZpZXcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXHJcbiAgICAgICAgICAgIHZwRGltID0gc2VsZi5lbGVtZW50cy52aWV3cG9ydC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcclxuICAgICAgICAgICAgYm91bmREaW0gPSBzZWxmLmVsZW1lbnRzLmJvdW5kYXJ5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxyXG4gICAgICAgICAgICB2cExlZnQgPSB2cERpbS5sZWZ0IC0gYm91bmREaW0ubGVmdCxcclxuICAgICAgICAgICAgdnBUb3AgPSB2cERpbS50b3AgLSBib3VuZERpbS50b3AsXHJcbiAgICAgICAgICAgIHcgPSB2cExlZnQgLSAoKGltZ0RpbS53aWR0aCAtIHZwRGltLndpZHRoKSAvIDIpLFxyXG4gICAgICAgICAgICBoID0gdnBUb3AgLSAoKGltZ0RpbS5oZWlnaHQgLSB2cERpbS5oZWlnaHQpIC8gMiksXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm0odywgaCwgc2VsZi5fY3VycmVudFpvb20pO1xyXG5cclxuICAgICAgICBjc3Moc2VsZi5lbGVtZW50cy5wcmV2aWV3LCBDU1NfVFJBTlNGT1JNLCB0cmFuc2Zvcm0udG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3RyYW5zZmVySW1hZ2VUb0NhbnZhcyhjdXN0b21PcmllbnRhdGlvbikge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgY2FudmFzID0gc2VsZi5lbGVtZW50cy5jYW52YXMsXHJcbiAgICAgICAgICAgIGltZyA9IHNlbGYuZWxlbWVudHMuaW1nLFxyXG4gICAgICAgICAgICBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSxcclxuICAgICAgICAgICAgZXhpZiA9IF9oYXNFeGlmLmNhbGwoc2VsZiksXHJcbiAgICAgICAgICAgIGN1c3RvbU9yaWVudGF0aW9uID0gc2VsZi5vcHRpb25zLmVuYWJsZU9yaWVudGF0aW9uICYmIGN1c3RvbU9yaWVudGF0aW9uO1xyXG5cclxuICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgY2FudmFzLndpZHRoID0gaW1nLndpZHRoO1xyXG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBpbWcuaGVpZ2h0O1xyXG5cclxuICAgICAgICBpZiAoZXhpZikge1xyXG4gICAgICAgICAgICBnZXRFeGlmT3JpZW50YXRpb24oaW1nLCBmdW5jdGlvbiAob3JpZW50YXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGRyYXdDYW52YXMoY2FudmFzLCBpbWcsIG51bShvcmllbnRhdGlvbiwgMTApKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXN0b21PcmllbnRhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYXdDYW52YXMoY2FudmFzLCBpbWcsIGN1c3RvbU9yaWVudGF0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjdXN0b21PcmllbnRhdGlvbikge1xyXG4gICAgICAgICAgICBkcmF3Q2FudmFzKGNhbnZhcywgaW1nLCBjdXN0b21PcmllbnRhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9nZXRDYW52YXMoZGF0YSkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgcG9pbnRzID0gZGF0YS5wb2ludHMsXHJcbiAgICAgICAgICAgIGxlZnQgPSBudW0ocG9pbnRzWzBdKSxcclxuICAgICAgICAgICAgdG9wID0gbnVtKHBvaW50c1sxXSksXHJcbiAgICAgICAgICAgIHJpZ2h0ID0gbnVtKHBvaW50c1syXSksXHJcbiAgICAgICAgICAgIGJvdHRvbSA9IG51bShwb2ludHNbM10pLFxyXG4gICAgICAgICAgICB3aWR0aCA9IHJpZ2h0LWxlZnQsXHJcbiAgICAgICAgICAgIGhlaWdodCA9IGJvdHRvbS10b3AsXHJcbiAgICAgICAgICAgIGNpcmNsZSA9IGRhdGEuY2lyY2xlLFxyXG4gICAgICAgICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSxcclxuICAgICAgICAgICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyksXHJcbiAgICAgICAgICAgIG91dFdpZHRoID0gd2lkdGgsXHJcbiAgICAgICAgICAgIG91dEhlaWdodCA9IGhlaWdodCxcclxuICAgICAgICAgICAgc3RhcnRYID0gMCxcclxuICAgICAgICAgICAgc3RhcnRZID0gMCxcclxuICAgICAgICAgICAgY2FudmFzV2lkdGggPSBvdXRXaWR0aCxcclxuICAgICAgICAgICAgY2FudmFzSGVpZ2h0ID0gb3V0SGVpZ2h0LFxyXG4gICAgICAgICAgICBjdXN0b21EaW1lbnNpb25zID0gKGRhdGEub3V0cHV0V2lkdGggJiYgZGF0YS5vdXRwdXRIZWlnaHQpLFxyXG4gICAgICAgICAgICBvdXRwdXRSYXRpbyA9IDE7XHJcblxyXG4gICAgICAgIGlmIChjdXN0b21EaW1lbnNpb25zKSB7XHJcbiAgICAgICAgICAgIGNhbnZhc1dpZHRoID0gZGF0YS5vdXRwdXRXaWR0aDtcclxuICAgICAgICAgICAgY2FudmFzSGVpZ2h0ID0gZGF0YS5vdXRwdXRIZWlnaHQ7XHJcbiAgICAgICAgICAgIG91dHB1dFJhdGlvID0gY2FudmFzV2lkdGggLyBvdXRXaWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhc1dpZHRoO1xyXG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXNIZWlnaHQ7XHJcblxyXG4gICAgICAgIGlmIChkYXRhLmJhY2tncm91bmRDb2xvcikge1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gZGF0YS5iYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBvdXRXaWR0aCwgb3V0SGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc3RhcnQgZml4aW5nIGRhdGEgdG8gc2VuZCB0byBkcmF3IGltYWdlIGZvciBlbmZvcmNlQm91bmRhcnk6IGZhbHNlXHJcbiAgICAgICAgaWYgKGxlZnQgPCAwKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0WCA9IE1hdGguYWJzKGxlZnQpO1xyXG4gICAgICAgICAgICBsZWZ0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRvcCA8IDApIHtcclxuICAgICAgICAgICAgc3RhcnRZID0gTWF0aC5hYnModG9wKTtcclxuICAgICAgICAgICAgdG9wID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJpZ2h0ID4gc2VsZi5fb3JpZ2luYWxJbWFnZVdpZHRoKSB7XHJcbiAgICAgICAgICAgIHdpZHRoID0gc2VsZi5fb3JpZ2luYWxJbWFnZVdpZHRoIC0gbGVmdDtcclxuICAgICAgICAgICAgb3V0V2lkdGggPSB3aWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJvdHRvbSA+IHNlbGYuX29yaWdpbmFsSW1hZ2VIZWlnaHQpIHtcclxuICAgICAgICAgICAgaGVpZ2h0ID0gc2VsZi5fb3JpZ2luYWxJbWFnZUhlaWdodCAtIHRvcDtcclxuICAgICAgICAgICAgb3V0SGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG91dHB1dFJhdGlvICE9PSAxKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0WCAqPSBvdXRwdXRSYXRpbztcclxuICAgICAgICAgICAgc3RhcnRZICo9IG91dHB1dFJhdGlvO1xyXG4gICAgICAgICAgICBvdXRXaWR0aCAqPSBvdXRwdXRSYXRpbztcclxuICAgICAgICAgICAgb3V0SGVpZ2h0ICo9IG91dHB1dFJhdGlvO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmVsZW1lbnRzLnByZXZpZXcsIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCwgc3RhcnRYLCBzdGFydFksIG91dFdpZHRoLCBvdXRIZWlnaHQpO1xyXG4gICAgICAgIGlmIChjaXJjbGUpIHtcclxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICcjZmZmJztcclxuICAgICAgICAgICAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdkZXN0aW5hdGlvbi1pbic7XHJcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgY3R4LmFyYyhvdXRXaWR0aCAvIDIsIG91dEhlaWdodCAvIDIsIG91dFdpZHRoIC8gMiwgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xyXG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjYW52YXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2dldEh0bWxSZXN1bHQoZGF0YSkge1xyXG4gICAgICAgIHZhciBwb2ludHMgPSBkYXRhLnBvaW50cyxcclxuICAgICAgICAgICAgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXHJcbiAgICAgICAgICAgIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpLFxyXG4gICAgICAgICAgICB3aWR0aCA9IHBvaW50c1syXSAtIHBvaW50c1swXSxcclxuICAgICAgICAgICAgaGVpZ2h0ID0gcG9pbnRzWzNdIC0gcG9pbnRzWzFdO1xyXG5cclxuICAgICAgICBhZGRDbGFzcyhkaXYsICdjcm9wcGllLXJlc3VsdCcpO1xyXG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChpbWcpO1xyXG4gICAgICAgIGNzcyhpbWcsIHtcclxuICAgICAgICAgICAgbGVmdDogKC0xICogcG9pbnRzWzBdKSArICdweCcsXHJcbiAgICAgICAgICAgIHRvcDogKC0xICogcG9pbnRzWzFdKSArICdweCdcclxuICAgICAgICB9KTtcclxuICAgICAgICBpbWcuc3JjID0gZGF0YS51cmw7XHJcbiAgICAgICAgY3NzKGRpdiwge1xyXG4gICAgICAgICAgICB3aWR0aDogd2lkdGggKyAncHgnLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArICdweCdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRpdjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfZ2V0QmFzZTY0UmVzdWx0KGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gX2dldENhbnZhcy5jYWxsKHRoaXMsIGRhdGEpLnRvRGF0YVVSTChkYXRhLmZvcm1hdCwgZGF0YS5xdWFsaXR5KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfZ2V0QmxvYlJlc3VsdChkYXRhKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF9nZXRDYW52YXMuY2FsbChzZWxmLCBkYXRhKS50b0Jsb2IoZnVuY3Rpb24gKGJsb2IpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYmxvYik7XHJcbiAgICAgICAgICAgIH0sIGRhdGEuZm9ybWF0LCBkYXRhLnF1YWxpdHkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9iaW5kKG9wdGlvbnMsIGNiKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICAgIHBvaW50cyA9IFtdLFxyXG4gICAgICAgICAgICB6b29tID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiAob3B0aW9ucykgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHVybCA9IG9wdGlvbnM7XHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xyXG4gICAgICAgICAgICBwb2ludHMgPSBvcHRpb25zLnNsaWNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiAob3B0aW9ucykgPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5kYXRhLnVybCkgeyAvL3JlZnJlc2hpbmdcclxuICAgICAgICAgICAgX3VwZGF0ZVByb3BlcnRpZXNGcm9tSW1hZ2UuY2FsbChzZWxmKTtcclxuICAgICAgICAgICAgX3RyaWdnZXJVcGRhdGUuY2FsbChzZWxmKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB1cmwgPSBvcHRpb25zLnVybDtcclxuICAgICAgICAgICAgcG9pbnRzID0gb3B0aW9ucy5wb2ludHMgfHwgW107XHJcbiAgICAgICAgICAgIHpvb20gPSB0eXBlb2Yob3B0aW9ucy56b29tKSA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogb3B0aW9ucy56b29tO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi5kYXRhLmJvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgc2VsZi5kYXRhLnVybCA9IHVybCB8fCBzZWxmLmRhdGEudXJsO1xyXG4gICAgICAgIHNlbGYuZGF0YS5ib3VuZFpvb20gPSB6b29tO1xyXG5cclxuICAgICAgICByZXR1cm4gbG9hZEltYWdlKHVybCwgc2VsZi5lbGVtZW50cy5pbWcpLnRoZW4oZnVuY3Rpb24gKGltZykge1xyXG4gICAgICAgICAgICBpZighcG9pbnRzLmxlbmd0aCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgaVdpZHRoID0gaW1nLm5hdHVyYWxXaWR0aDtcclxuICAgICAgICAgICAgICAgIHZhciBpSGVpZ2h0ID0gaW1nLm5hdHVyYWxIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJlY3QgPSBzZWxmLmVsZW1lbnRzLnZpZXdwb3J0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFzcGVjdFJhdGlvID0gcmVjdC53aWR0aCAvIHJlY3QuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoLCBoZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIGlXaWR0aCAvIGlIZWlnaHQgPiBhc3BlY3RSYXRpbyl7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaUhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGhlaWdodCAqIGFzcGVjdFJhdGlvO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBpV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gd2lkdGggLyBhc3BlY3RSYXRpbztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgeDAgPSAoaVdpZHRoIC0gd2lkdGgpIC8gMjtcclxuICAgICAgICAgICAgICAgIHZhciB5MCA9IChpSGVpZ2h0IC0gaGVpZ2h0KSAvIDI7XHJcbiAgICAgICAgICAgICAgICB2YXIgeDEgPSB4MCArIHdpZHRoO1xyXG4gICAgICAgICAgICAgICAgdmFyIHkxID0geTAgKyBoZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5kYXRhLnBvaW50cyA9IFt4MCwgeTAsIHgxLCB5MV07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZihzZWxmLm9wdGlvbnMucmVsYXRpdmUpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlLXJlbGF0aXZlIHBvaW50c1xyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzWzBdICogaW1nLm5hdHVyYWxXaWR0aCAvIDEwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzWzFdICogaW1nLm5hdHVyYWxIZWlnaHQgLyAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50c1syXSAqIGltZy5uYXR1cmFsV2lkdGggLyAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50c1szXSAqIGltZy5uYXR1cmFsSGVpZ2h0IC8gMTAwXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLmRhdGEucG9pbnRzID0gcG9pbnRzLm1hcChmdW5jdGlvbiAocCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMudXNlQ2FudmFzKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmVsZW1lbnRzLmltZy5leGlmZGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBfdHJhbnNmZXJJbWFnZVRvQ2FudmFzLmNhbGwoc2VsZiwgb3B0aW9ucy5vcmllbnRhdGlvbiB8fCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdXBkYXRlUHJvcGVydGllc0Zyb21JbWFnZS5jYWxsKHNlbGYpO1xyXG4gICAgICAgICAgICBfdHJpZ2dlclVwZGF0ZS5jYWxsKHNlbGYpO1xyXG4gICAgICAgICAgICBjYiAmJiBjYigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGZpeCh2LCBkZWNpbWFsUG9pbnRzKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodikudG9GaXhlZChkZWNpbWFsUG9pbnRzIHx8IDApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9nZXQoKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBpbWdEYXRhID0gc2VsZi5lbGVtZW50cy5wcmV2aWV3LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxyXG4gICAgICAgICAgICB2cERhdGEgPSBzZWxmLmVsZW1lbnRzLnZpZXdwb3J0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxyXG4gICAgICAgICAgICB4MSA9IHZwRGF0YS5sZWZ0IC0gaW1nRGF0YS5sZWZ0LFxyXG4gICAgICAgICAgICB5MSA9IHZwRGF0YS50b3AgLSBpbWdEYXRhLnRvcCxcclxuICAgICAgICAgICAgd2lkdGhEaWZmID0gKHZwRGF0YS53aWR0aCAtIHNlbGYuZWxlbWVudHMudmlld3BvcnQub2Zmc2V0V2lkdGgpIC8gMixcclxuICAgICAgICAgICAgaGVpZ2h0RGlmZiA9ICh2cERhdGEuaGVpZ2h0IC0gc2VsZi5lbGVtZW50cy52aWV3cG9ydC5vZmZzZXRIZWlnaHQpIC8gMixcclxuICAgICAgICAgICAgeDIgPSB4MSArIHNlbGYuZWxlbWVudHMudmlld3BvcnQub2Zmc2V0V2lkdGggKyB3aWR0aERpZmYsXHJcbiAgICAgICAgICAgIHkyID0geTEgKyBzZWxmLmVsZW1lbnRzLnZpZXdwb3J0Lm9mZnNldEhlaWdodCArIGhlaWdodERpZmYsXHJcbiAgICAgICAgICAgIHNjYWxlID0gc2VsZi5fY3VycmVudFpvb207XHJcblxyXG4gICAgICAgIGlmIChzY2FsZSA9PT0gSW5maW5pdHkgfHwgaXNOYU4oc2NhbGUpKSB7XHJcbiAgICAgICAgICAgIHNjYWxlID0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBtYXggPSBzZWxmLm9wdGlvbnMuZW5mb3JjZUJvdW5kYXJ5ID8gMCA6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcclxuICAgICAgICB4MSA9IE1hdGgubWF4KG1heCwgeDEgLyBzY2FsZSk7XHJcbiAgICAgICAgeTEgPSBNYXRoLm1heChtYXgsIHkxIC8gc2NhbGUpO1xyXG4gICAgICAgIHgyID0gTWF0aC5tYXgobWF4LCB4MiAvIHNjYWxlKTtcclxuICAgICAgICB5MiA9IE1hdGgubWF4KG1heCwgeTIgLyBzY2FsZSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHBvaW50czogW2ZpeCh4MSksIGZpeCh5MSksIGZpeCh4MiksIGZpeCh5MildLFxyXG4gICAgICAgICAgICB6b29tOiBzY2FsZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIFJFU1VMVF9ERUZBVUxUUyA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2NhbnZhcycsXHJcbiAgICAgICAgICAgIGZvcm1hdDogJ3BuZycsXHJcbiAgICAgICAgICAgIHF1YWxpdHk6IDFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFJFU1VMVF9GT1JNQVRTID0gWydqcGVnJywgJ3dlYnAnLCAncG5nJ107XHJcblxyXG4gICAgZnVuY3Rpb24gX3Jlc3VsdChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBkYXRhID0gX2dldC5jYWxsKHNlbGYpLFxyXG4gICAgICAgICAgICBvcHRzID0gZGVlcEV4dGVuZChSRVNVTFRfREVGQVVMVFMsIGRlZXBFeHRlbmQoe30sIG9wdGlvbnMpKSxcclxuICAgICAgICAgICAgcmVzdWx0VHlwZSA9ICh0eXBlb2YgKG9wdGlvbnMpID09PSAnc3RyaW5nJyA/IG9wdGlvbnMgOiAob3B0cy50eXBlIHx8ICdiYXNlNjQnKSksXHJcbiAgICAgICAgICAgIHNpemUgPSBvcHRzLnNpemUsXHJcbiAgICAgICAgICAgIGZvcm1hdCA9IG9wdHMuZm9ybWF0LFxyXG4gICAgICAgICAgICBxdWFsaXR5ID0gb3B0cy5xdWFsaXR5LFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgPSBvcHRzLmJhY2tncm91bmRDb2xvcixcclxuICAgICAgICAgICAgY2lyY2xlID0gdHlwZW9mIG9wdHMuY2lyY2xlID09PSAnYm9vbGVhbicgPyBvcHRzLmNpcmNsZSA6IChzZWxmLm9wdGlvbnMudmlld3BvcnQudHlwZSA9PT0gJ2NpcmNsZScpLFxyXG4gICAgICAgICAgICB2cFJlY3QgPSBzZWxmLmVsZW1lbnRzLnZpZXdwb3J0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxyXG4gICAgICAgICAgICByYXRpbyA9IHZwUmVjdC53aWR0aCAvIHZwUmVjdC5oZWlnaHQsXHJcbiAgICAgICAgICAgIHByb207XHJcblxyXG4gICAgICAgIGlmIChzaXplID09PSAndmlld3BvcnQnKSB7XHJcbiAgICAgICAgICAgIGRhdGEub3V0cHV0V2lkdGggPSB2cFJlY3Qud2lkdGg7XHJcbiAgICAgICAgICAgIGRhdGEub3V0cHV0SGVpZ2h0ID0gdnBSZWN0LmhlaWdodDtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzaXplID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBpZiAoc2l6ZS53aWR0aCAmJiBzaXplLmhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgZGF0YS5vdXRwdXRXaWR0aCA9IHNpemUud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBkYXRhLm91dHB1dEhlaWdodCA9IHNpemUuaGVpZ2h0O1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNpemUud2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEub3V0cHV0V2lkdGggPSBzaXplLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgZGF0YS5vdXRwdXRIZWlnaHQgPSBzaXplLndpZHRoIC8gcmF0aW87XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2l6ZS5oZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEub3V0cHV0V2lkdGggPSBzaXplLmhlaWdodCAqIHJhdGlvO1xyXG4gICAgICAgICAgICAgICAgZGF0YS5vdXRwdXRIZWlnaHQgPSBzaXplLmhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKFJFU1VMVF9GT1JNQVRTLmluZGV4T2YoZm9ybWF0KSA+IC0xKSB7XHJcbiAgICAgICAgICAgIGRhdGEuZm9ybWF0ID0gJ2ltYWdlLycgKyBmb3JtYXQ7XHJcbiAgICAgICAgICAgIGRhdGEucXVhbGl0eSA9IHF1YWxpdHk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkYXRhLmNpcmNsZSA9IGNpcmNsZTtcclxuICAgICAgICBkYXRhLnVybCA9IHNlbGYuZGF0YS51cmw7XHJcbiAgICAgICAgZGF0YS5iYWNrZ3JvdW5kQ29sb3IgPSBiYWNrZ3JvdW5kQ29sb3I7XHJcblxyXG4gICAgICAgIHByb20gPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIHN3aXRjaChyZXN1bHRUeXBlLnRvTG93ZXJDYXNlKCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3Jhd2NhbnZhcyc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShfZ2V0Q2FudmFzLmNhbGwoc2VsZiwgZGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY2FudmFzJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2Jhc2U2NCc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShfZ2V0QmFzZTY0UmVzdWx0LmNhbGwoc2VsZiwgZGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYmxvYic6XHJcbiAgICAgICAgICAgICAgICAgICAgX2dldEJsb2JSZXN1bHQuY2FsbChzZWxmLCBkYXRhKS50aGVuKHJlc29sdmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF9nZXRIdG1sUmVzdWx0LmNhbGwoc2VsZiwgZGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHByb207XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3JlZnJlc2goKSB7XHJcbiAgICAgICAgX3VwZGF0ZVByb3BlcnRpZXNGcm9tSW1hZ2UuY2FsbCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfcm90YXRlKGRlZykge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnVzZUNhbnZhcykge1xyXG4gICAgICAgICAgICB0aHJvdyAnQ3JvcHBpZTogQ2Fubm90IHJvdGF0ZSB3aXRob3V0IGVuYWJsZU9yaWVudGF0aW9uJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgY2FudmFzID0gc2VsZi5lbGVtZW50cy5jYW52YXMsXHJcbiAgICAgICAgICAgIGltZyA9IHNlbGYuZWxlbWVudHMuaW1nLFxyXG4gICAgICAgICAgICBjb3B5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyksXHJcbiAgICAgICAgICAgIG9ybnQgPSAxO1xyXG5cclxuICAgICAgICBjb3B5LndpZHRoID0gY2FudmFzLndpZHRoO1xyXG4gICAgICAgIGNvcHkuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcclxuICAgICAgICB2YXIgY3R4ID0gY29weS5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoY2FudmFzLCAwLCAwKTtcclxuXHJcbiAgICAgICAgaWYgKGRlZyA9PT0gOTAgfHwgZGVnID09PSAtMjcwKSBvcm50ID0gNjtcclxuICAgICAgICBpZiAoZGVnID09PSAtOTAgfHwgZGVnID09PSAyNzApIG9ybnQgPSA4O1xyXG4gICAgICAgIGlmIChkZWcgPT09IDE4MCB8fCBkZWcgPT09IC0xODApIG9ybnQgPSAzO1xyXG5cclxuICAgICAgICBkcmF3Q2FudmFzKGNhbnZhcywgY29weSwgb3JudCk7XHJcbiAgICAgICAgX29uWm9vbS5jYWxsKHNlbGYpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9kZXN0cm95KCkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmVsZW1lbnQucmVtb3ZlQ2hpbGQoc2VsZi5lbGVtZW50cy5ib3VuZGFyeSk7XHJcbiAgICAgICAgcmVtb3ZlQ2xhc3Moc2VsZi5lbGVtZW50LCAnY3JvcHBpZS1jb250YWluZXInKTtcclxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmVuYWJsZVpvb20pIHtcclxuICAgICAgICAgICAgc2VsZi5lbGVtZW50LnJlbW92ZUNoaWxkKHNlbGYuZWxlbWVudHMuem9vbWVyV3JhcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSBzZWxmLmVsZW1lbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh3aW5kb3cualF1ZXJ5KSB7XHJcbiAgICAgICAgdmFyICQgPSB3aW5kb3cualF1ZXJ5O1xyXG4gICAgICAgICQuZm4uY3JvcHBpZSA9IGZ1bmN0aW9uIChvcHRzKSB7XHJcbiAgICAgICAgICAgIHZhciBvdCA9IHR5cGVvZiBvcHRzO1xyXG5cclxuICAgICAgICAgICAgaWYgKG90ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNpbmdsZUluc3QgPSAkKHRoaXMpLmRhdGEoJ2Nyb3BwaWUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0cyA9PT0gJ2dldCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2luZ2xlSW5zdC5nZXQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9wdHMgPT09ICdyZXN1bHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNpbmdsZUluc3QucmVzdWx0LmFwcGx5KHNpbmdsZUluc3QsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob3B0cyA9PT0gJ2JpbmQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNpbmdsZUluc3QuYmluZC5hcHBseShzaW5nbGVJbnN0LCBhcmdzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9ICQodGhpcykuZGF0YSgnY3JvcHBpZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gaVtvcHRzXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG1ldGhvZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kLmFwcGx5KGksIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cyA9PT0gJ2Rlc3Ryb3knKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZURhdGEoJ2Nyb3BwaWUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ0Nyb3BwaWUgJyArIG9wdHMgKyAnIG1ldGhvZCBub3QgZm91bmQnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBuZXcgQ3JvcHBpZSh0aGlzLCBvcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICBpLiQgPSAkO1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuZGF0YSgnY3JvcHBpZScsIGkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIENyb3BwaWUoZWxlbWVudCwgb3B0cykge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZGVlcEV4dGVuZChkZWVwRXh0ZW5kKHt9LCBDcm9wcGllLmRlZmF1bHRzKSwgb3B0cyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW1nJykge1xyXG4gICAgICAgICAgICB2YXIgb3JpZ0ltYWdlID0gdGhpcy5lbGVtZW50O1xyXG4gICAgICAgICAgICBhZGRDbGFzcyhvcmlnSW1hZ2UsICdjci1vcmlnaW5hbC1pbWFnZScpO1xyXG4gICAgICAgICAgICB2YXIgcmVwbGFjZW1lbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQocmVwbGFjZW1lbnREaXYpO1xyXG4gICAgICAgICAgICByZXBsYWNlbWVudERpdi5hcHBlbmRDaGlsZChvcmlnSW1hZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSByZXBsYWNlbWVudERpdjtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnVybCA9IHRoaXMub3B0aW9ucy51cmwgfHwgb3JpZ0ltYWdlLnNyYztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF9jcmVhdGUuY2FsbCh0aGlzKTtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVybCkge1xyXG4gICAgICAgICAgICB2YXIgYmluZE9wdHMgPSB7XHJcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMub3B0aW9ucy51cmwsXHJcbiAgICAgICAgICAgICAgICBwb2ludHM6IHRoaXMub3B0aW9ucy5wb2ludHNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMub3B0aW9uc1sndXJsJ107XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm9wdGlvbnNbJ3BvaW50cyddO1xyXG4gICAgICAgICAgICBfYmluZC5jYWxsKHRoaXMsIGJpbmRPcHRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQ3JvcHBpZS5kZWZhdWx0cyA9IHtcclxuICAgICAgICB2aWV3cG9ydDoge1xyXG4gICAgICAgICAgICB3aWR0aDogMTAwLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCxcclxuICAgICAgICAgICAgdHlwZTogJ3NxdWFyZSdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvdW5kYXJ5OiB7IH0sXHJcbiAgICAgICAgb3JpZW50YXRpb25Db250cm9sczoge1xyXG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICBsZWZ0Q2xhc3M6ICcnLFxyXG4gICAgICAgICAgICByaWdodENsYXNzOiAnJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3VzdG9tQ2xhc3M6ICcnLFxyXG4gICAgICAgIHNob3dab29tZXI6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlWm9vbTogdHJ1ZSxcclxuICAgICAgICBtb3VzZVdoZWVsWm9vbTogdHJ1ZSxcclxuICAgICAgICBlbmFibGVFeGlmOiBmYWxzZSxcclxuICAgICAgICBlbmZvcmNlQm91bmRhcnk6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlT3JpZW50YXRpb246IGZhbHNlLFxyXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKCkgeyB9XHJcbiAgICB9O1xyXG5cclxuICAgIENyb3BwaWUuZ2xvYmFscyA9IHtcclxuICAgICAgICB0cmFuc2xhdGU6ICd0cmFuc2xhdGUzZCdcclxuICAgIH07XHJcblxyXG4gICAgZGVlcEV4dGVuZChDcm9wcGllLnByb3RvdHlwZSwge1xyXG4gICAgICAgIGJpbmQ6IGZ1bmN0aW9uIChvcHRpb25zLCBjYikge1xyXG4gICAgICAgICAgICByZXR1cm4gX2JpbmQuY2FsbCh0aGlzLCBvcHRpb25zLCBjYik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBfZ2V0LmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIHZhciBwb2ludHMgPSBkYXRhLnBvaW50cztcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vIFJlbGF0aXZpemUgcG9pbnRzXHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgcG9pbnRzWzBdIC89IHRoaXMuZWxlbWVudHMuaW1nLm5hdHVyYWxXaWR0aCAvIDEwMDtcclxuICAgICAgICAgICAgICAgIHBvaW50c1sxXSAvPSB0aGlzLmVsZW1lbnRzLmltZy5uYXR1cmFsSGVpZ2h0IC8gMTAwO1xyXG4gICAgICAgICAgICAgICAgcG9pbnRzWzJdIC89IHRoaXMuZWxlbWVudHMuaW1nLm5hdHVyYWxXaWR0aCAvIDEwMDtcclxuICAgICAgICAgICAgICAgIHBvaW50c1szXSAvPSB0aGlzLmVsZW1lbnRzLmltZy5uYXR1cmFsSGVpZ2h0IC8gMTAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVzdWx0OiBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3Jlc3VsdC5jYWxsKHRoaXMsIHR5cGUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVmcmVzaDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3JlZnJlc2guY2FsbCh0aGlzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldFpvb206IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgIF9zZXRab29tZXJWYWwuY2FsbCh0aGlzLCB2KTtcclxuICAgICAgICAgICAgZGlzcGF0Y2hDaGFuZ2UodGhpcy5lbGVtZW50cy56b29tZXIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcm90YXRlOiBmdW5jdGlvbiAoZGVnKSB7XHJcbiAgICAgICAgICAgIF9yb3RhdGUuY2FsbCh0aGlzLCBkZWcpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2Rlc3Ryb3kuY2FsbCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBvcnRzLkNyb3BwaWUgPSB3aW5kb3cuQ3JvcHBpZSA9IENyb3BwaWU7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmICEhbW9kdWxlLmV4cG9ydHMpIHtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IENyb3BwaWU7XHJcbiAgICB9XHJcbn0pKTtcclxuIiwiLy8hIG1vbWVudC5qc1xuLy8hIHZlcnNpb24gOiAyLjE4LjFcbi8vISBhdXRob3JzIDogVGltIFdvb2QsIElza3JlbiBDaGVybmV2LCBNb21lbnQuanMgY29udHJpYnV0b3JzXG4vLyEgbGljZW5zZSA6IE1JVFxuLy8hIG1vbWVudGpzLmNvbVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICBnbG9iYWwubW9tZW50ID0gZmFjdG9yeSgpXG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIGhvb2tDYWxsYmFjaztcblxuZnVuY3Rpb24gaG9va3MgKCkge1xuICAgIHJldHVybiBob29rQ2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxuLy8gVGhpcyBpcyBkb25lIHRvIHJlZ2lzdGVyIHRoZSBtZXRob2QgY2FsbGVkIHdpdGggbW9tZW50KClcbi8vIHdpdGhvdXQgY3JlYXRpbmcgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuZnVuY3Rpb24gc2V0SG9va0NhbGxiYWNrIChjYWxsYmFjaykge1xuICAgIGhvb2tDYWxsYmFjayA9IGNhbGxiYWNrO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5KGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgQXJyYXkgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoaW5wdXQpIHtcbiAgICAvLyBJRTggd2lsbCB0cmVhdCB1bmRlZmluZWQgYW5kIG51bGwgYXMgb2JqZWN0IGlmIGl0IHdhc24ndCBmb3JcbiAgICAvLyBpbnB1dCAhPSBudWxsXG4gICAgcmV0dXJuIGlucHV0ICE9IG51bGwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gICAgdmFyIGs7XG4gICAgZm9yIChrIGluIG9iaikge1xuICAgICAgICAvLyBldmVuIGlmIGl0cyBub3Qgb3duIHByb3BlcnR5IEknZCBzdGlsbCBjYWxsIGl0IG5vbi1lbXB0eVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCA9PT0gdm9pZCAwO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihpbnB1dCkge1xuICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE51bWJlcl0nO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBEYXRlIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuZnVuY3Rpb24gbWFwKGFyciwgZm4pIHtcbiAgICB2YXIgcmVzID0gW10sIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgICAgICByZXMucHVzaChmbihhcnJbaV0sIGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gaGFzT3duUHJvcChhLCBiKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBiKTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgaSkpIHtcbiAgICAgICAgICAgIGFbaV0gPSBiW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhc093blByb3AoYiwgJ3RvU3RyaW5nJykpIHtcbiAgICAgICAgYS50b1N0cmluZyA9IGIudG9TdHJpbmc7XG4gICAgfVxuXG4gICAgaWYgKGhhc093blByb3AoYiwgJ3ZhbHVlT2YnKSkge1xuICAgICAgICBhLnZhbHVlT2YgPSBiLnZhbHVlT2Y7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgdHJ1ZSkudXRjKCk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7XG4gICAgLy8gV2UgbmVlZCB0byBkZWVwIGNsb25lIHRoaXMgb2JqZWN0LlxuICAgIHJldHVybiB7XG4gICAgICAgIGVtcHR5ICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICB1bnVzZWRUb2tlbnMgICAgOiBbXSxcbiAgICAgICAgdW51c2VkSW5wdXQgICAgIDogW10sXG4gICAgICAgIG92ZXJmbG93ICAgICAgICA6IC0yLFxuICAgICAgICBjaGFyc0xlZnRPdmVyICAgOiAwLFxuICAgICAgICBudWxsSW5wdXQgICAgICAgOiBmYWxzZSxcbiAgICAgICAgaW52YWxpZE1vbnRoICAgIDogbnVsbCxcbiAgICAgICAgaW52YWxpZEZvcm1hdCAgIDogZmFsc2UsXG4gICAgICAgIHVzZXJJbnZhbGlkYXRlZCA6IGZhbHNlLFxuICAgICAgICBpc28gICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgcGFyc2VkRGF0ZVBhcnRzIDogW10sXG4gICAgICAgIG1lcmlkaWVtICAgICAgICA6IG51bGwsXG4gICAgICAgIHJmYzI4MjIgICAgICAgICA6IGZhbHNlLFxuICAgICAgICB3ZWVrZGF5TWlzbWF0Y2ggOiBmYWxzZVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldFBhcnNpbmdGbGFncyhtKSB7XG4gICAgaWYgKG0uX3BmID09IG51bGwpIHtcbiAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7XG4gICAgfVxuICAgIHJldHVybiBtLl9wZjtcbn1cblxudmFyIHNvbWU7XG5pZiAoQXJyYXkucHJvdG90eXBlLnNvbWUpIHtcbiAgICBzb21lID0gQXJyYXkucHJvdG90eXBlLnNvbWU7XG59IGVsc2Uge1xuICAgIHNvbWUgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpO1xuICAgICAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgaW4gdCAmJiBmdW4uY2FsbCh0aGlzLCB0W2ldLCBpLCB0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59XG5cbnZhciBzb21lJDEgPSBzb21lO1xuXG5mdW5jdGlvbiBpc1ZhbGlkKG0pIHtcbiAgICBpZiAobS5faXNWYWxpZCA9PSBudWxsKSB7XG4gICAgICAgIHZhciBmbGFncyA9IGdldFBhcnNpbmdGbGFncyhtKTtcbiAgICAgICAgdmFyIHBhcnNlZFBhcnRzID0gc29tZSQxLmNhbGwoZmxhZ3MucGFyc2VkRGF0ZVBhcnRzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgcmV0dXJuIGkgIT0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBpc05vd1ZhbGlkID0gIWlzTmFOKG0uX2QuZ2V0VGltZSgpKSAmJlxuICAgICAgICAgICAgZmxhZ3Mub3ZlcmZsb3cgPCAwICYmXG4gICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICFmbGFncy5pbnZhbGlkTW9udGggJiZcbiAgICAgICAgICAgICFmbGFncy5pbnZhbGlkV2Vla2RheSAmJlxuICAgICAgICAgICAgIWZsYWdzLm51bGxJbnB1dCAmJlxuICAgICAgICAgICAgIWZsYWdzLmludmFsaWRGb3JtYXQgJiZcbiAgICAgICAgICAgICFmbGFncy51c2VySW52YWxpZGF0ZWQgJiZcbiAgICAgICAgICAgICghZmxhZ3MubWVyaWRpZW0gfHwgKGZsYWdzLm1lcmlkaWVtICYmIHBhcnNlZFBhcnRzKSk7XG5cbiAgICAgICAgaWYgKG0uX3N0cmljdCkge1xuICAgICAgICAgICAgaXNOb3dWYWxpZCA9IGlzTm93VmFsaWQgJiZcbiAgICAgICAgICAgICAgICBmbGFncy5jaGFyc0xlZnRPdmVyID09PSAwICYmXG4gICAgICAgICAgICAgICAgZmxhZ3MudW51c2VkVG9rZW5zLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLmJpZ0hvdXIgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4gPT0gbnVsbCB8fCAhT2JqZWN0LmlzRnJvemVuKG0pKSB7XG4gICAgICAgICAgICBtLl9pc1ZhbGlkID0gaXNOb3dWYWxpZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc05vd1ZhbGlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtLl9pc1ZhbGlkO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnZhbGlkIChmbGFncykge1xuICAgIHZhciBtID0gY3JlYXRlVVRDKE5hTik7XG4gICAgaWYgKGZsYWdzICE9IG51bGwpIHtcbiAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLnVzZXJJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG07XG59XG5cbi8vIFBsdWdpbnMgdGhhdCBhZGQgcHJvcGVydGllcyBzaG91bGQgYWxzbyBhZGQgdGhlIGtleSBoZXJlIChudWxsIHZhbHVlKSxcbi8vIHNvIHdlIGNhbiBwcm9wZXJseSBjbG9uZSBvdXJzZWx2ZXMuXG52YXIgbW9tZW50UHJvcGVydGllcyA9IGhvb2tzLm1vbWVudFByb3BlcnRpZXMgPSBbXTtcblxuZnVuY3Rpb24gY29weUNvbmZpZyh0bywgZnJvbSkge1xuICAgIHZhciBpLCBwcm9wLCB2YWw7XG5cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzQU1vbWVudE9iamVjdCkpIHtcbiAgICAgICAgdG8uX2lzQU1vbWVudE9iamVjdCA9IGZyb20uX2lzQU1vbWVudE9iamVjdDtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pKSkge1xuICAgICAgICB0by5faSA9IGZyb20uX2k7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fZikpIHtcbiAgICAgICAgdG8uX2YgPSBmcm9tLl9mO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2wpKSB7XG4gICAgICAgIHRvLl9sID0gZnJvbS5fbDtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9zdHJpY3QpKSB7XG4gICAgICAgIHRvLl9zdHJpY3QgPSBmcm9tLl9zdHJpY3Q7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fdHptKSkge1xuICAgICAgICB0by5fdHptID0gZnJvbS5fdHptO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzVVRDKSkge1xuICAgICAgICB0by5faXNVVEMgPSBmcm9tLl9pc1VUQztcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9vZmZzZXQpKSB7XG4gICAgICAgIHRvLl9vZmZzZXQgPSBmcm9tLl9vZmZzZXQ7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fcGYpKSB7XG4gICAgICAgIHRvLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tKTtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sb2NhbGUpKSB7XG4gICAgICAgIHRvLl9sb2NhbGUgPSBmcm9tLl9sb2NhbGU7XG4gICAgfVxuXG4gICAgaWYgKG1vbWVudFByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9tZW50UHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcHJvcCA9IG1vbWVudFByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICB2YWwgPSBmcm9tW3Byb3BdO1xuICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgdG9bcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG87XG59XG5cbnZhciB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbi8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0XG5mdW5jdGlvbiBNb21lbnQoY29uZmlnKSB7XG4gICAgY29weUNvbmZpZyh0aGlzLCBjb25maWcpO1xuICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcCBpbiBjYXNlIHVwZGF0ZU9mZnNldCBjcmVhdGVzIG5ldyBtb21lbnRcbiAgICAvLyBvYmplY3RzLlxuICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc01vbWVudCAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fCAob2JqICE9IG51bGwgJiYgb2JqLl9pc0FNb21lbnRPYmplY3QgIT0gbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGFic0Zsb29yIChudW1iZXIpIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAvLyAtMCAtPiAwXG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKSB8fCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0b0ludChhcmd1bWVudEZvckNvZXJjaW9uKSB7XG4gICAgdmFyIGNvZXJjZWROdW1iZXIgPSArYXJndW1lbnRGb3JDb2VyY2lvbixcbiAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgaWYgKGNvZXJjZWROdW1iZXIgIT09IDAgJiYgaXNGaW5pdGUoY29lcmNlZE51bWJlcikpIHtcbiAgICAgICAgdmFsdWUgPSBhYnNGbG9vcihjb2VyY2VkTnVtYmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIGNvbXBhcmUgdHdvIGFycmF5cywgcmV0dXJuIHRoZSBudW1iZXIgb2YgZGlmZmVyZW5jZXNcbmZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKGFycmF5MS5sZW5ndGgsIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICBkaWZmcyA9IDAsXG4gICAgICAgIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmICgoZG9udENvbnZlcnQgJiYgYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHx8XG4gICAgICAgICAgICAoIWRvbnRDb252ZXJ0ICYmIHRvSW50KGFycmF5MVtpXSkgIT09IHRvSW50KGFycmF5MltpXSkpKSB7XG4gICAgICAgICAgICBkaWZmcysrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7XG59XG5cbmZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgaWYgKGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgICh0eXBlb2YgY29uc29sZSAhPT0gICd1bmRlZmluZWQnKSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZShtc2csIGZuKSB7XG4gICAgdmFyIGZpcnN0VGltZSA9IHRydWU7XG5cbiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobnVsbCwgbXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgdmFyIGFyZztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnID0gJyc7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyArPSAnXFxuWycgKyBpICsgJ10gJztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9IGtleSArICc6ICcgKyBhcmd1bWVudHNbMF1ba2V5XSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDAsIC0yKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbW1hIGFuZCBzcGFjZVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXJuKG1zZyArICdcXG5Bcmd1bWVudHM6ICcgKyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcnKSArICdcXG4nICsgKG5ldyBFcnJvcigpKS5zdGFjayk7XG4gICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9LCBmbik7XG59XG5cbnZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuZnVuY3Rpb24gZGVwcmVjYXRlU2ltcGxlKG5hbWUsIG1zZykge1xuICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobmFtZSwgbXNnKTtcbiAgICB9XG4gICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICBkZXByZWNhdGlvbnNbbmFtZV0gPSB0cnVlO1xuICAgIH1cbn1cblxuaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7XG5ob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgPSBudWxsO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24gfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuZnVuY3Rpb24gc2V0IChjb25maWcpIHtcbiAgICB2YXIgcHJvcCwgaTtcbiAgICBmb3IgKGkgaW4gY29uZmlnKSB7XG4gICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHByb3ApKSB7XG4gICAgICAgICAgICB0aGlzW2ldID0gcHJvcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXNbJ18nICsgaV0gPSBwcm9wO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICAvLyBMZW5pZW50IG9yZGluYWwgcGFyc2luZyBhY2NlcHRzIGp1c3QgYSBudW1iZXIgaW4gYWRkaXRpb24gdG9cbiAgICAvLyBudW1iZXIgKyAocG9zc2libHkpIHN0dWZmIGNvbWluZyBmcm9tIF9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLlxuICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICB0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICh0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLnNvdXJjZSB8fCB0aGlzLl9vcmRpbmFsUGFyc2Uuc291cmNlKSArXG4gICAgICAgICAgICAnfCcgKyAoL1xcZHsxLDJ9Lykuc291cmNlKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY2hpbGRDb25maWcpIHtcbiAgICB2YXIgcmVzID0gZXh0ZW5kKHt9LCBwYXJlbnRDb25maWcpLCBwcm9wO1xuICAgIGZvciAocHJvcCBpbiBjaGlsZENvbmZpZykge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkpIHtcbiAgICAgICAgICAgIGlmIChpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pICYmIGlzT2JqZWN0KGNoaWxkQ29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IHt9O1xuICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIHBhcmVudENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgY2hpbGRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZENvbmZpZ1twcm9wXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gY2hpbGRDb25maWdbcHJvcF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChwcm9wIGluIHBhcmVudENvbmZpZykge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChwYXJlbnRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgIWhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGNoYW5nZXMgdG8gcHJvcGVydGllcyBkb24ndCBtb2RpZnkgcGFyZW50IGNvbmZpZ1xuICAgICAgICAgICAgcmVzW3Byb3BdID0gZXh0ZW5kKHt9LCByZXNbcHJvcF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIExvY2FsZShjb25maWcpIHtcbiAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zZXQoY29uZmlnKTtcbiAgICB9XG59XG5cbnZhciBrZXlzO1xuXG5pZiAoT2JqZWN0LmtleXMpIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXM7XG59IGVsc2Uge1xuICAgIGtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHZhciBpLCByZXMgPSBbXTtcbiAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBpKSkge1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbn1cblxudmFyIGtleXMkMSA9IGtleXM7XG5cbnZhciBkZWZhdWx0Q2FsZW5kYXIgPSB7XG4gICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgc2FtZUVsc2UgOiAnTCdcbn07XG5cbmZ1bmN0aW9uIGNhbGVuZGFyIChrZXksIG1vbSwgbm93KSB7XG4gICAgdmFyIG91dHB1dCA9IHRoaXMuX2NhbGVuZGFyW2tleV0gfHwgdGhpcy5fY2FsZW5kYXJbJ3NhbWVFbHNlJ107XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KSA/IG91dHB1dC5jYWxsKG1vbSwgbm93KSA6IG91dHB1dDtcbn1cblxudmFyIGRlZmF1bHRMb25nRGF0ZUZvcm1hdCA9IHtcbiAgICBMVFMgIDogJ2g6bW06c3MgQScsXG4gICAgTFQgICA6ICdoOm1tIEEnLFxuICAgIEwgICAgOiAnTU0vREQvWVlZWScsXG4gICAgTEwgICA6ICdNTU1NIEQsIFlZWVknLFxuICAgIExMTCAgOiAnTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgTExMTCA6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJ1xufTtcblxuZnVuY3Rpb24gbG9uZ0RhdGVGb3JtYXQgKGtleSkge1xuICAgIHZhciBmb3JtYXQgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldLFxuICAgICAgICBmb3JtYXRVcHBlciA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleS50b1VwcGVyQ2FzZSgpXTtcblxuICAgIGlmIChmb3JtYXQgfHwgIWZvcm1hdFVwcGVyKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuXG4gICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IGZvcm1hdFVwcGVyLnJlcGxhY2UoL01NTU18TU18RER8ZGRkZC9nLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiB2YWwuc2xpY2UoMSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XTtcbn1cblxudmFyIGRlZmF1bHRJbnZhbGlkRGF0ZSA9ICdJbnZhbGlkIGRhdGUnO1xuXG5mdW5jdGlvbiBpbnZhbGlkRGF0ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludmFsaWREYXRlO1xufVxuXG52YXIgZGVmYXVsdE9yZGluYWwgPSAnJWQnO1xudmFyIGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlID0gL1xcZHsxLDJ9LztcblxuZnVuY3Rpb24gb3JkaW5hbCAobnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX29yZGluYWwucmVwbGFjZSgnJWQnLCBudW1iZXIpO1xufVxuXG52YXIgZGVmYXVsdFJlbGF0aXZlVGltZSA9IHtcbiAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgIHBhc3QgICA6ICclcyBhZ28nLFxuICAgIHMgIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgIHNzIDogJyVkIHNlY29uZHMnLFxuICAgIG0gIDogJ2EgbWludXRlJyxcbiAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICBoICA6ICdhbiBob3VyJyxcbiAgICBoaCA6ICclZCBob3VycycsXG4gICAgZCAgOiAnYSBkYXknLFxuICAgIGRkIDogJyVkIGRheXMnLFxuICAgIE0gIDogJ2EgbW9udGgnLFxuICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgeSAgOiAnYSB5ZWFyJyxcbiAgICB5eSA6ICclZCB5ZWFycydcbn07XG5cbmZ1bmN0aW9uIHJlbGF0aXZlVGltZSAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddO1xuICAgIHJldHVybiAoaXNGdW5jdGlvbihvdXRwdXQpKSA/XG4gICAgICAgIG91dHB1dChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIDpcbiAgICAgICAgb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG59XG5cbmZ1bmN0aW9uIHBhc3RGdXR1cmUgKGRpZmYsIG91dHB1dCkge1xuICAgIHZhciBmb3JtYXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbZGlmZiA+IDAgPyAnZnV0dXJlJyA6ICdwYXN0J107XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oZm9ybWF0KSA/IGZvcm1hdChvdXRwdXQpIDogZm9ybWF0LnJlcGxhY2UoLyVzL2ksIG91dHB1dCk7XG59XG5cbnZhciBhbGlhc2VzID0ge307XG5cbmZ1bmN0aW9uIGFkZFVuaXRBbGlhcyAodW5pdCwgc2hvcnRoYW5kKSB7XG4gICAgdmFyIGxvd2VyQ2FzZSA9IHVuaXQudG9Mb3dlckNhc2UoKTtcbiAgICBhbGlhc2VzW2xvd2VyQ2FzZV0gPSBhbGlhc2VzW2xvd2VyQ2FzZSArICdzJ10gPSBhbGlhc2VzW3Nob3J0aGFuZF0gPSB1bml0O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVVbml0cyh1bml0cykge1xuICAgIHJldHVybiB0eXBlb2YgdW5pdHMgPT09ICdzdHJpbmcnID8gYWxpYXNlc1t1bml0c10gfHwgYWxpYXNlc1t1bml0cy50b0xvd2VyQ2FzZSgpXSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0VW5pdHMoaW5wdXRPYmplY3QpIHtcbiAgICB2YXIgbm9ybWFsaXplZElucHV0ID0ge30sXG4gICAgICAgIG5vcm1hbGl6ZWRQcm9wLFxuICAgICAgICBwcm9wO1xuXG4gICAgZm9yIChwcm9wIGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGlucHV0T2JqZWN0LCBwcm9wKSkge1xuICAgICAgICAgICAgbm9ybWFsaXplZFByb3AgPSBub3JtYWxpemVVbml0cyhwcm9wKTtcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkUHJvcCkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRJbnB1dFtub3JtYWxpemVkUHJvcF0gPSBpbnB1dE9iamVjdFtwcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBub3JtYWxpemVkSW5wdXQ7XG59XG5cbnZhciBwcmlvcml0aWVzID0ge307XG5cbmZ1bmN0aW9uIGFkZFVuaXRQcmlvcml0eSh1bml0LCBwcmlvcml0eSkge1xuICAgIHByaW9yaXRpZXNbdW5pdF0gPSBwcmlvcml0eTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0c09iaikge1xuICAgIHZhciB1bml0cyA9IFtdO1xuICAgIGZvciAodmFyIHUgaW4gdW5pdHNPYmopIHtcbiAgICAgICAgdW5pdHMucHVzaCh7dW5pdDogdSwgcHJpb3JpdHk6IHByaW9yaXRpZXNbdV19KTtcbiAgICB9XG4gICAgdW5pdHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHVuaXRzO1xufVxuXG5mdW5jdGlvbiBtYWtlR2V0U2V0ICh1bml0LCBrZWVwVGltZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldCQxKHRoaXMsIHVuaXQsIHZhbHVlKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCBrZWVwVGltZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgdW5pdCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXQgKG1vbSwgdW5pdCkge1xuICAgIHJldHVybiBtb20uaXNWYWxpZCgpID9cbiAgICAgICAgbW9tLl9kWydnZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKCkgOiBOYU47XG59XG5cbmZ1bmN0aW9uIHNldCQxIChtb20sIHVuaXQsIHZhbHVlKSB7XG4gICAgaWYgKG1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlKTtcbiAgICB9XG59XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gc3RyaW5nR2V0ICh1bml0cykge1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICByZXR1cm4gdGhpc1t1bml0c10oKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cblxuZnVuY3Rpb24gc3RyaW5nU2V0ICh1bml0cywgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHVuaXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKHVuaXRzKTtcbiAgICAgICAgdmFyIHByaW9yaXRpemVkID0gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0cyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpb3JpdGl6ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXNbcHJpb3JpdGl6ZWRbaV0udW5pdF0odW5pdHNbcHJpb3JpdGl6ZWRbaV0udW5pdF0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gemVyb0ZpbGwobnVtYmVyLCB0YXJnZXRMZW5ndGgsIGZvcmNlU2lnbikge1xuICAgIHZhciBhYnNOdW1iZXIgPSAnJyArIE1hdGguYWJzKG51bWJlciksXG4gICAgICAgIHplcm9zVG9GaWxsID0gdGFyZ2V0TGVuZ3RoIC0gYWJzTnVtYmVyLmxlbmd0aCxcbiAgICAgICAgc2lnbiA9IG51bWJlciA+PSAwO1xuICAgIHJldHVybiAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKycgOiAnJykgOiAnLScpICtcbiAgICAgICAgTWF0aC5wb3coMTAsIE1hdGgubWF4KDAsIHplcm9zVG9GaWxsKSkudG9TdHJpbmcoKS5zdWJzdHIoMSkgKyBhYnNOdW1iZXI7XG59XG5cbnZhciBmb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KFtIaF1tbShzcyk/fE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFFvP3xZWVlZWVl8WVlZWVl8WVlZWXxZWXxnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xraz98bW0/fHNzP3xTezEsOX18eHxYfHp6P3xaWj98LikvZztcblxudmFyIGxvY2FsRm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2c7XG5cbnZhciBmb3JtYXRGdW5jdGlvbnMgPSB7fTtcblxudmFyIGZvcm1hdFRva2VuRnVuY3Rpb25zID0ge307XG5cbi8vIHRva2VuOiAgICAnTSdcbi8vIHBhZGRlZDogICBbJ01NJywgMl1cbi8vIG9yZGluYWw6ICAnTW8nXG4vLyBjYWxsYmFjazogZnVuY3Rpb24gKCkgeyB0aGlzLm1vbnRoKCkgKyAxIH1cbmZ1bmN0aW9uIGFkZEZvcm1hdFRva2VuICh0b2tlbiwgcGFkZGVkLCBvcmRpbmFsLCBjYWxsYmFjaykge1xuICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dID0gZnVuYztcbiAgICB9XG4gICAgaWYgKHBhZGRlZCkge1xuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1twYWRkZWRbMF1dID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHplcm9GaWxsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgcGFkZGVkWzFdLCBwYWRkZWRbMl0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAob3JkaW5hbCkge1xuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5vcmRpbmFsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdG9rZW4pO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkge1xuICAgIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXlxcW3xcXF0kL2csICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpO1xufVxuXG5mdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgdmFyIGFycmF5ID0gZm9ybWF0Lm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpLCBpLCBsZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dKSB7XG4gICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5W2ldID0gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhhcnJheVtpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKG1vbSkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gJycsIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGlzRnVuY3Rpb24oYXJyYXlbaV0pID8gYXJyYXlbaV0uY2FsbChtb20sIGZvcm1hdCkgOiBhcnJheVtpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG59XG5cbi8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdFxuZnVuY3Rpb24gZm9ybWF0TW9tZW50KG0sIGZvcm1hdCkge1xuICAgIGlmICghbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIG0ubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxuXG4gICAgZm9ybWF0ID0gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbS5sb2NhbGVEYXRhKCkpO1xuICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID0gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gfHwgbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCk7XG5cbiAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0obSk7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZEZvcm1hdChmb3JtYXQsIGxvY2FsZSkge1xuICAgIHZhciBpID0gNTtcblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dDtcbiAgICB9XG5cbiAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UobG9jYWxGb3JtYXR0aW5nVG9rZW5zLCByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMpO1xuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgaSAtPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXQ7XG59XG5cbnZhciBtYXRjaDEgICAgICAgICA9IC9cXGQvOyAgICAgICAgICAgIC8vICAgICAgIDAgLSA5XG52YXIgbWF0Y2gyICAgICAgICAgPSAvXFxkXFxkLzsgICAgICAgICAgLy8gICAgICAwMCAtIDk5XG52YXIgbWF0Y2gzICAgICAgICAgPSAvXFxkezN9LzsgICAgICAgICAvLyAgICAgMDAwIC0gOTk5XG52YXIgbWF0Y2g0ICAgICAgICAgPSAvXFxkezR9LzsgICAgICAgICAvLyAgICAwMDAwIC0gOTk5OVxudmFyIG1hdGNoNiAgICAgICAgID0gL1srLV0/XFxkezZ9LzsgICAgLy8gLTk5OTk5OSAtIDk5OTk5OVxudmFyIG1hdGNoMXRvMiAgICAgID0gL1xcZFxcZD8vOyAgICAgICAgIC8vICAgICAgIDAgLSA5OVxudmFyIG1hdGNoM3RvNCAgICAgID0gL1xcZFxcZFxcZFxcZD8vOyAgICAgLy8gICAgIDk5OSAtIDk5OTlcbnZhciBtYXRjaDV0bzYgICAgICA9IC9cXGRcXGRcXGRcXGRcXGRcXGQ/LzsgLy8gICA5OTk5OSAtIDk5OTk5OVxudmFyIG1hdGNoMXRvMyAgICAgID0gL1xcZHsxLDN9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OVxudmFyIG1hdGNoMXRvNCAgICAgID0gL1xcZHsxLDR9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OTlcbnZhciBtYXRjaDF0bzYgICAgICA9IC9bKy1dP1xcZHsxLDZ9LzsgIC8vIC05OTk5OTkgLSA5OTk5OTlcblxudmFyIG1hdGNoVW5zaWduZWQgID0gL1xcZCsvOyAgICAgICAgICAgLy8gICAgICAgMCAtIGluZlxudmFyIG1hdGNoU2lnbmVkICAgID0gL1srLV0/XFxkKy87ICAgICAgLy8gICAgLWluZiAtIGluZlxuXG52YXIgbWF0Y2hPZmZzZXQgICAgPSAvWnxbKy1dXFxkXFxkOj9cXGRcXGQvZ2k7IC8vICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxudmFyIG1hdGNoU2hvcnRPZmZzZXQgPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9naTsgLy8gKzAwIC0wMCArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcblxudmFyIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LzsgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjNcblxuLy8gYW55IHdvcmQgKG9yIHR3bykgY2hhcmFjdGVycyBvciBudW1iZXJzIGluY2x1ZGluZyB0d28vdGhyZWUgd29yZCBtb250aCBpbiBhcmFiaWMuXG4vLyBpbmNsdWRlcyBzY290dGlzaCBnYWVsaWMgdHdvIHdvcmQgYW5kIGh5cGhlbmF0ZWQgbW9udGhzXG52YXIgbWF0Y2hXb3JkID0gL1swLTldKlsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSt8W1xcdTA2MDAtXFx1MDZGRlxcL10rKFxccyo/W1xcdTA2MDAtXFx1MDZGRl0rKXsxLDJ9L2k7XG5cblxudmFyIHJlZ2V4ZXMgPSB7fTtcblxuZnVuY3Rpb24gYWRkUmVnZXhUb2tlbiAodG9rZW4sIHJlZ2V4LCBzdHJpY3RSZWdleCkge1xuICAgIHJlZ2V4ZXNbdG9rZW5dID0gaXNGdW5jdGlvbihyZWdleCkgPyByZWdleCA6IGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlRGF0YSkge1xuICAgICAgICByZXR1cm4gKGlzU3RyaWN0ICYmIHN0cmljdFJlZ2V4KSA/IHN0cmljdFJlZ2V4IDogcmVnZXg7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyc2VSZWdleEZvclRva2VuICh0b2tlbiwgY29uZmlnKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuKSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh1bmVzY2FwZUZvcm1hdCh0b2tlbikpO1xuICAgIH1cblxuICAgIHJldHVybiByZWdleGVzW3Rva2VuXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpO1xufVxuXG4vLyBDb2RlIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNTYxNDkzL2lzLXRoZXJlLWEtcmVnZXhwLWVzY2FwZS1mdW5jdGlvbi1pbi1qYXZhc2NyaXB0XG5mdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgcmV0dXJuIHJlZ2V4RXNjYXBlKHMucmVwbGFjZSgnXFxcXCcsICcnKS5yZXBsYWNlKC9cXFxcKFxcWyl8XFxcXChcXF0pfFxcWyhbXlxcXVxcW10qKVxcXXxcXFxcKC4pL2csIGZ1bmN0aW9uIChtYXRjaGVkLCBwMSwgcDIsIHAzLCBwNCkge1xuICAgICAgICByZXR1cm4gcDEgfHwgcDIgfHwgcDMgfHwgcDQ7XG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiByZWdleEVzY2FwZShzKSB7XG4gICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG59XG5cbnZhciB0b2tlbnMgPSB7fTtcblxuZnVuY3Rpb24gYWRkUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIGksIGZ1bmMgPSBjYWxsYmFjaztcbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgfVxuICAgIGlmIChpc051bWJlcihjYWxsYmFjaykpIHtcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgIGFycmF5W2NhbGxiYWNrXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IHRva2VuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRva2Vuc1t0b2tlbltpXV0gPSBmdW5jO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkV2Vla1BhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9O1xuICAgICAgICBjYWxsYmFjayhpbnB1dCwgY29uZmlnLl93LCBjb25maWcsIHRva2VuKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIGlucHV0LCBjb25maWcpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4pKSB7XG4gICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgfVxufVxuXG52YXIgWUVBUiA9IDA7XG52YXIgTU9OVEggPSAxO1xudmFyIERBVEUgPSAyO1xudmFyIEhPVVIgPSAzO1xudmFyIE1JTlVURSA9IDQ7XG52YXIgU0VDT05EID0gNTtcbnZhciBNSUxMSVNFQ09ORCA9IDY7XG52YXIgV0VFSyA9IDc7XG52YXIgV0VFS0RBWSA9IDg7XG5cbnZhciBpbmRleE9mO1xuXG5pZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2Y7XG59IGVsc2Uge1xuICAgIGluZGV4T2YgPSBmdW5jdGlvbiAobykge1xuICAgICAgICAvLyBJIGtub3dcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gbykge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xufVxuXG52YXIgaW5kZXhPZiQxID0gaW5kZXhPZjtcblxuZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGggKyAxLCAwKSkuZ2V0VVRDRGF0ZSgpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9udGgoKSArIDE7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQodGhpcywgZm9ybWF0KTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzKHRoaXMsIGZvcm1hdCk7XG59KTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ21vbnRoJywgJ00nKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCdtb250aCcsIDgpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ00nLCAgICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignTU0nLCAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ01NTScsICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUubW9udGhzU2hvcnRSZWdleChpc1N0cmljdCk7XG59KTtcbmFkZFJlZ2V4VG9rZW4oJ01NTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUubW9udGhzUmVnZXgoaXNTdHJpY3QpO1xufSk7XG5cbmFkZFBhcnNlVG9rZW4oWydNJywgJ01NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtNT05USF0gPSB0b0ludChpbnB1dCkgLSAxO1xufSk7XG5cbmFkZFBhcnNlVG9rZW4oWydNTU0nLCAnTU1NTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgdmFyIG1vbnRoID0gY29uZmlnLl9sb2NhbGUubW9udGhzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgaWYgKG1vbnRoICE9IG51bGwpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gbW9udGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZE1vbnRoID0gaW5wdXQ7XG4gICAgfVxufSk7XG5cbi8vIExPQ0FMRVNcblxudmFyIE1PTlRIU19JTl9GT1JNQVQgPSAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NPy87XG52YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gbG9jYWxlTW9udGhzIChtLCBmb3JtYXQpIHtcbiAgICBpZiAoIW0pIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRocyA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNbJ3N0YW5kYWxvbmUnXTtcbiAgICB9XG4gICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRoc1ttLm1vbnRoKCldIDpcbiAgICAgICAgdGhpcy5fbW9udGhzWyh0aGlzLl9tb250aHMuaXNGb3JtYXQgfHwgTU9OVEhTX0lOX0ZPUk1BVCkudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20ubW9udGgoKV07XG59XG5cbnZhciBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQgPSAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBsb2NhbGVNb250aHNTaG9ydCAobSwgZm9ybWF0KSB7XG4gICAgaWYgKCFtKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0IDpcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0WydzdGFuZGFsb25lJ107XG4gICAgfVxuICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0W20ubW9udGgoKV0gOlxuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFtNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIGlpLCBtb20sIGxsYyA9IG1vbnRoTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgLy8gdGhpcyBpcyBub3QgdXNlZFxuICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7ICsraSkge1xuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlIChtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UuY2FsbCh0aGlzLCBtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgfVxuXG4gICAgLy8gVE9ETzogYWRkIHNvcnRpbmdcbiAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyXG4gICAgLy8gc2VlIHNvcnRpbmcgaW4gY29tcHV0ZU1vbnRoc1BhcnNlXG4gICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykgKyAnfF4nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NTScgJiYgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTScgJiYgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBzZXRNb250aCAobW9tLCB2YWx1ZSkge1xuICAgIHZhciBkYXlPZk1vbnRoO1xuXG4gICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgIC8vIE5vIG9wXG4gICAgICAgIHJldHVybiBtb207XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gbW9tLmxvY2FsZURhdGEoKS5tb250aHNQYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAvLyBUT0RPOiBBbm90aGVyIHNpbGVudCBmYWlsdXJlP1xuICAgICAgICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGF5T2ZNb250aCA9IE1hdGgubWluKG1vbS5kYXRlKCksIGRheXNJbk1vbnRoKG1vbS55ZWFyKCksIHZhbHVlKSk7XG4gICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArICdNb250aCddKHZhbHVlLCBkYXlPZk1vbnRoKTtcbiAgICByZXR1cm4gbW9tO1xufVxuXG5mdW5jdGlvbiBnZXRTZXRNb250aCAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBzZXRNb250aCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGdldCh0aGlzLCAnTW9udGgnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldERheXNJbk1vbnRoICgpIHtcbiAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSk7XG59XG5cbnZhciBkZWZhdWx0TW9udGhzU2hvcnRSZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIG1vbnRoc1Nob3J0UmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgfVxufVxuXG52YXIgZGVmYXVsdE1vbnRoc1JlZ2V4ID0gbWF0Y2hXb3JkO1xuZnVuY3Rpb24gbW9udGhzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IGRlZmF1bHRNb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNSZWdleDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSAoKSB7XG4gICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgaSwgbW9tO1xuICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgc2hvcnRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgfVxuICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKTtcbiAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICB9XG5cbiAgICB0aGlzLl9tb250aHNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdZJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB5ID0gdGhpcy55ZWFyKCk7XG4gICAgcmV0dXJuIHkgPD0gOTk5OSA/ICcnICsgeSA6ICcrJyArIHk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydZWScsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWScsICAgNF0sICAgICAgIDAsICd5ZWFyJyk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZJywgIDVdLCAgICAgICAwLCAneWVhcicpO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWVknLCA2LCB0cnVlXSwgMCwgJ3llYXInKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ3llYXInLCAneScpO1xuXG4vLyBQUklPUklUSUVTXG5cbmFkZFVuaXRQcmlvcml0eSgneWVhcicsIDEpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ1knLCAgICAgIG1hdGNoU2lnbmVkKTtcbmFkZFJlZ2V4VG9rZW4oJ1lZJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ1lZWVknLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbmFkZFJlZ2V4VG9rZW4oJ1lZWVlZJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbmFkZFJlZ2V4VG9rZW4oJ1lZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuYWRkUGFyc2VUb2tlbihbJ1lZWVlZJywgJ1lZWVlZWSddLCBZRUFSKTtcbmFkZFBhcnNlVG9rZW4oJ1lZWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbWUVBUl0gPSBpbnB1dC5sZW5ndGggPT09IDIgPyBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCkgOiB0b0ludChpbnB1dCk7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ1lZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W1lFQVJdID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xufSk7XG5hZGRQYXJzZVRva2VuKCdZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W1lFQVJdID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbmZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICAgIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xufVxuXG5mdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICByZXR1cm4gKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApIHx8IHllYXIgJSA0MDAgPT09IDA7XG59XG5cbi8vIEhPT0tTXG5cbmhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgcmV0dXJuIHRvSW50KGlucHV0KSArICh0b0ludChpbnB1dCkgPiA2OCA/IDE5MDAgOiAyMDAwKTtcbn07XG5cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldFllYXIgPSBtYWtlR2V0U2V0KCdGdWxsWWVhcicsIHRydWUpO1xuXG5mdW5jdGlvbiBnZXRJc0xlYXBZZWFyICgpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIoKSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGUgKHksIG0sIGQsIGgsIE0sIHMsIG1zKSB7XG4gICAgLy8gY2FuJ3QganVzdCBhcHBseSgpIHRvIGNyZWF0ZSBhIGRhdGU6XG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzE4MTM0OFxuICAgIHZhciBkYXRlID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpO1xuXG4gICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwICYmIGlzRmluaXRlKGRhdGUuZ2V0RnVsbFllYXIoKSkpIHtcbiAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5KTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUgKHkpIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuXG4gICAgLy8gdGhlIERhdGUuVVRDIGZ1bmN0aW9uIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCAmJiBpc0Zpbml0ZShkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpKSB7XG4gICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xufVxuXG4vLyBzdGFydC1vZi1maXJzdC13ZWVrIC0gc3RhcnQtb2YteWVhclxuZnVuY3Rpb24gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSB7XG4gICAgdmFyIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgICAgICBmd2QgPSA3ICsgZG93IC0gZG95LFxuICAgICAgICAvLyBmaXJzdC13ZWVrIGRheSBsb2NhbCB3ZWVrZGF5IC0tIHdoaWNoIGxvY2FsIHdlZWtkYXkgaXMgZndkXG4gICAgICAgIGZ3ZGx3ID0gKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgNztcblxuICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xufVxuXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlI0NhbGN1bGF0aW5nX2FfZGF0ZV9naXZlbl90aGVfeWVhci4yQ193ZWVrX251bWJlcl9hbmRfd2Vla2RheVxuZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtzKHllYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgdmFyIGxvY2FsV2Vla2RheSA9ICg3ICsgd2Vla2RheSAtIGRvdykgJSA3LFxuICAgICAgICB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgZGF5T2ZZZWFyID0gMSArIDcgKiAod2VlayAtIDEpICsgbG9jYWxXZWVrZGF5ICsgd2Vla09mZnNldCxcbiAgICAgICAgcmVzWWVhciwgcmVzRGF5T2ZZZWFyO1xuXG4gICAgaWYgKGRheU9mWWVhciA8PSAwKSB7XG4gICAgICAgIHJlc1llYXIgPSB5ZWFyIC0gMTtcbiAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5c0luWWVhcihyZXNZZWFyKSArIGRheU9mWWVhcjtcbiAgICB9IGVsc2UgaWYgKGRheU9mWWVhciA+IGRheXNJblllYXIoeWVhcikpIHtcbiAgICAgICAgcmVzWWVhciA9IHllYXIgKyAxO1xuICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXIgLSBkYXlzSW5ZZWFyKHllYXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc1llYXIgPSB5ZWFyO1xuICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgZGF5T2ZZZWFyOiByZXNEYXlPZlllYXJcbiAgICB9O1xufVxuXG5mdW5jdGlvbiB3ZWVrT2ZZZWFyKG1vbSwgZG93LCBkb3kpIHtcbiAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgIHdlZWsgPSBNYXRoLmZsb29yKChtb20uZGF5T2ZZZWFyKCkgLSB3ZWVrT2Zmc2V0IC0gMSkgLyA3KSArIDEsXG4gICAgICAgIHJlc1dlZWssIHJlc1llYXI7XG5cbiAgICBpZiAod2VlayA8IDEpIHtcbiAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgLSAxO1xuICAgICAgICByZXNXZWVrID0gd2VlayArIHdlZWtzSW5ZZWFyKHJlc1llYXIsIGRvdywgZG95KTtcbiAgICB9IGVsc2UgaWYgKHdlZWsgPiB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSkpIHtcbiAgICAgICAgcmVzV2VlayA9IHdlZWsgLSB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSk7XG4gICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKTtcbiAgICAgICAgcmVzV2VlayA9IHdlZWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2VlazogcmVzV2VlayxcbiAgICAgICAgeWVhcjogcmVzWWVhclxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHdlZWtzSW5ZZWFyKHllYXIsIGRvdywgZG95KSB7XG4gICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICB3ZWVrT2Zmc2V0TmV4dCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyICsgMSwgZG93LCBkb3kpO1xuICAgIHJldHVybiAoZGF5c0luWWVhcih5ZWFyKSAtIHdlZWtPZmZzZXQgKyB3ZWVrT2Zmc2V0TmV4dCkgLyA3O1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCd3JywgWyd3dycsIDJdLCAnd28nLCAnd2VlaycpO1xuYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCd3ZWVrJywgJ3cnKTtcbmFkZFVuaXRBbGlhcygnaXNvV2VlaycsICdXJyk7XG5cbi8vIFBSSU9SSVRJRVNcblxuYWRkVW5pdFByaW9yaXR5KCd3ZWVrJywgNSk7XG5hZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWsnLCA1KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCd3JywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCd3dycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ1cnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ1dXJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ3cnLCAnd3cnLCAnVycsICdXVyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAxKV0gPSB0b0ludChpbnB1dCk7XG59KTtcblxuLy8gSEVMUEVSU1xuXG4vLyBMT0NBTEVTXG5cbmZ1bmN0aW9uIGxvY2FsZVdlZWsgKG1vbSkge1xuICAgIHJldHVybiB3ZWVrT2ZZZWFyKG1vbSwgdGhpcy5fd2Vlay5kb3csIHRoaXMuX3dlZWsuZG95KS53ZWVrO1xufVxuXG52YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxufTtcblxuZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZldlZWsgKCkge1xuICAgIHJldHVybiB0aGlzLl93ZWVrLmRvdztcbn1cblxuZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZlllYXIgKCkge1xuICAgIHJldHVybiB0aGlzLl93ZWVrLmRveTtcbn1cblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRTZXRXZWVrIChpbnB1dCkge1xuICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKTtcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG59XG5cbmZ1bmN0aW9uIGdldFNldElTT1dlZWsgKGlucHV0KSB7XG4gICAgdmFyIHdlZWsgPSB3ZWVrT2ZZZWFyKHRoaXMsIDEsIDQpLndlZWs7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdkJywgMCwgJ2RvJywgJ2RheScpO1xuXG5hZGRGb3JtYXRUb2tlbignZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ2RkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdkZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdlJywgMCwgMCwgJ3dlZWtkYXknKTtcbmFkZEZvcm1hdFRva2VuKCdFJywgMCwgMCwgJ2lzb1dlZWtkYXknKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2RheScsICdkJyk7XG5hZGRVbml0QWxpYXMoJ3dlZWtkYXknLCAnZScpO1xuYWRkVW5pdEFsaWFzKCdpc29XZWVrZGF5JywgJ0UnKTtcblxuLy8gUFJJT1JJVFlcbmFkZFVuaXRQcmlvcml0eSgnZGF5JywgMTEpO1xuYWRkVW5pdFByaW9yaXR5KCd3ZWVrZGF5JywgMTEpO1xuYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrZGF5JywgMTEpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ2QnLCAgICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignZScsICAgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdFJywgICAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ2RkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNNaW5SZWdleChpc1N0cmljdCk7XG59KTtcbmFkZFJlZ2V4VG9rZW4oJ2RkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzU2hvcnRSZWdleChpc1N0cmljdCk7XG59KTtcbmFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KTtcbn0pO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ2RkJywgJ2RkZCcsICdkZGRkJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHZhciB3ZWVrZGF5ID0gY29uZmlnLl9sb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IGEgd2Vla2RheSBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWRcbiAgICBpZiAod2Vla2RheSAhPSBudWxsKSB7XG4gICAgICAgIHdlZWsuZCA9IHdlZWtkYXk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZFdlZWtkYXkgPSBpbnB1dDtcbiAgICB9XG59KTtcblxuYWRkV2Vla1BhcnNlVG9rZW4oWydkJywgJ2UnLCAnRSddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB3ZWVrW3Rva2VuXSA9IHRvSW50KGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIGlmICghaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChpbnB1dCwgMTApO1xuICAgIH1cblxuICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gcGFyc2VJc29XZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpICUgNyB8fCA3O1xuICAgIH1cbiAgICByZXR1cm4gaXNOYU4oaW5wdXQpID8gbnVsbCA6IGlucHV0O1xufVxuXG4vLyBMT0NBTEVTXG5cbnZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXMgPSAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBsb2NhbGVXZWVrZGF5cyAobSwgZm9ybWF0KSB7XG4gICAgaWYgKCFtKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKSA/IHRoaXMuX3dlZWtkYXlzIDpcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzWydzdGFuZGFsb25lJ107XG4gICAgfVxuICAgIHJldHVybiBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKSA/IHRoaXMuX3dlZWtkYXlzW20uZGF5KCldIDpcbiAgICAgICAgdGhpcy5fd2Vla2RheXNbdGhpcy5fd2Vla2RheXMuaXNGb3JtYXQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20uZGF5KCldO1xufVxuXG52YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQgPSAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNTaG9ydCAobSkge1xuICAgIHJldHVybiAobSkgPyB0aGlzLl93ZWVrZGF5c1Nob3J0W20uZGF5KCldIDogdGhpcy5fd2Vla2RheXNTaG9ydDtcbn1cblxudmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiA9ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKTtcbmZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzTWluIChtKSB7XG4gICAgcmV0dXJuIChtKSA/IHRoaXMuX3dlZWtkYXlzTWluW20uZGF5KCldIDogdGhpcy5fd2Vla2RheXNNaW47XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlJDEod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIGlpLCBtb20sIGxsYyA9IHdlZWtkYXlOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgKytpKSB7XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0cmljdCkge1xuICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNQYXJzZSAod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZSQxLmNhbGwodGhpcywgd2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG5cbiAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykucmVwbGFjZSgnLicsICdcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykucmVwbGFjZSgnLicsICdcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGRkZCcgJiYgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZGQnICYmIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkJyAmJiB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIGdldFNldERheU9mV2VlayAoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICB9XG4gICAgdmFyIGRheSA9IHRoaXMuX2lzVVRDID8gdGhpcy5fZC5nZXRVVENEYXkoKSA6IHRoaXMuX2QuZ2V0RGF5KCk7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGlucHV0IC0gZGF5LCAnZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkYXk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRTZXRMb2NhbGVEYXlPZldlZWsgKGlucHV0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDc7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrZGF5IDogdGhpcy5hZGQoaW5wdXQgLSB3ZWVrZGF5LCAnZCcpO1xufVxuXG5mdW5jdGlvbiBnZXRTZXRJU09EYXlPZldlZWsgKGlucHV0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuXG4gICAgLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdFxuICAgIC8vIGFzIGEgZ2V0dGVyLCByZXR1cm5zIDcgaW5zdGVhZCBvZiAwICgxLTcgcmFuZ2UgaW5zdGVhZCBvZiAwLTYpXG4gICAgLy8gYXMgYSBzZXR0ZXIsIHN1bmRheSBzaG91bGQgYmVsb25nIHRvIHRoZSBwcmV2aW91cyB3ZWVrLlxuXG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gd2Vla2RheSA6IHdlZWtkYXkgLSA3KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSB8fCA3O1xuICAgIH1cbn1cblxudmFyIGRlZmF1bHRXZWVrZGF5c1JlZ2V4ID0gbWF0Y2hXb3JkO1xuZnVuY3Rpb24gd2Vla2RheXNSZWdleCAoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBkZWZhdWx0V2Vla2RheXNSZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICB9XG59XG5cbnZhciBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkO1xuZnVuY3Rpb24gd2Vla2RheXNTaG9ydFJlZ2V4IChpc1N0cmljdCkge1xuICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICB9XG59XG5cbnZhciBkZWZhdWx0V2Vla2RheXNNaW5SZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIHdlZWtkYXlzTWluUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNNaW5SZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIGNvbXB1dGVXZWVrZGF5c1BhcnNlICgpIHtcbiAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICB2YXIgbWluUGllY2VzID0gW10sIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgaSwgbW9tLCBtaW5wLCBzaG9ydHAsIGxvbmdwO1xuICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgbWlucCA9IHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgIHNob3J0cCA9IHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKTtcbiAgICAgICAgbG9uZ3AgPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpO1xuICAgICAgICBtaW5QaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgc2hvcnRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICBsb25nUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgIH1cbiAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIHdlZWtkYXkgKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgbWluUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSk7XG4gICAgICAgIGxvbmdQaWVjZXNbaV0gPSByZWdleEVzY2FwZShsb25nUGllY2VzW2ldKTtcbiAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgfVxuXG4gICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuXG4gICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWluUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5mdW5jdGlvbiBoRm9ybWF0KCkge1xuICAgIHJldHVybiB0aGlzLmhvdXJzKCkgJSAxMiB8fCAxMjtcbn1cblxuZnVuY3Rpb24ga0Zvcm1hdCgpIHtcbiAgICByZXR1cm4gdGhpcy5ob3VycygpIHx8IDI0O1xufVxuXG5hZGRGb3JtYXRUb2tlbignSCcsIFsnSEgnLCAyXSwgMCwgJ2hvdXInKTtcbmFkZEZvcm1hdFRva2VuKCdoJywgWydoaCcsIDJdLCAwLCBoRm9ybWF0KTtcbmFkZEZvcm1hdFRva2VuKCdrJywgWydraycsIDJdLCAwLCBrRm9ybWF0KTtcblxuYWRkRm9ybWF0VG9rZW4oJ2htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdobW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdIbW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdIbW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG59KTtcblxuZnVuY3Rpb24gbWVyaWRpZW0gKHRva2VuLCBsb3dlcmNhc2UpIHtcbiAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubWVyaWRpZW0odGhpcy5ob3VycygpLCB0aGlzLm1pbnV0ZXMoKSwgbG93ZXJjYXNlKTtcbiAgICB9KTtcbn1cblxubWVyaWRpZW0oJ2EnLCB0cnVlKTtcbm1lcmlkaWVtKCdBJywgZmFsc2UpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnaG91cicsICdoJyk7XG5cbi8vIFBSSU9SSVRZXG5hZGRVbml0UHJpb3JpdHkoJ2hvdXInLCAxMyk7XG5cbi8vIFBBUlNJTkdcblxuZnVuY3Rpb24gbWF0Y2hNZXJpZGllbSAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUuX21lcmlkaWVtUGFyc2U7XG59XG5cbmFkZFJlZ2V4VG9rZW4oJ2EnLCAgbWF0Y2hNZXJpZGllbSk7XG5hZGRSZWdleFRva2VuKCdBJywgIG1hdGNoTWVyaWRpZW0pO1xuYWRkUmVnZXhUb2tlbignSCcsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignaCcsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignaycsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignSEgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdoaCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ2trJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG5hZGRSZWdleFRva2VuKCdobW0nLCBtYXRjaDN0bzQpO1xuYWRkUmVnZXhUb2tlbignaG1tc3MnLCBtYXRjaDV0bzYpO1xuYWRkUmVnZXhUb2tlbignSG1tJywgbWF0Y2gzdG80KTtcbmFkZFJlZ2V4VG9rZW4oJ0htbXNzJywgbWF0Y2g1dG82KTtcblxuYWRkUGFyc2VUb2tlbihbJ0gnLCAnSEgnXSwgSE9VUik7XG5hZGRQYXJzZVRva2VuKFsnaycsICdrayddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIga0lucHV0ID0gdG9JbnQoaW5wdXQpO1xuICAgIGFycmF5W0hPVVJdID0ga0lucHV0ID09PSAyNCA/IDAgOiBrSW5wdXQ7XG59KTtcbmFkZFBhcnNlVG9rZW4oWydhJywgJ0EnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgY29uZmlnLl9pc1BtID0gY29uZmlnLl9sb2NhbGUuaXNQTShpbnB1dCk7XG4gICAgY29uZmlnLl9tZXJpZGllbSA9IGlucHV0O1xufSk7XG5hZGRQYXJzZVRva2VuKFsnaCcsICdoaCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbn0pO1xuYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbn0pO1xuYWRkUGFyc2VUb2tlbignaG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQ7XG4gICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbn0pO1xuYWRkUGFyc2VUb2tlbignSG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbn0pO1xuYWRkUGFyc2VUb2tlbignSG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQ7XG4gICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbn0pO1xuXG4vLyBMT0NBTEVTXG5cbmZ1bmN0aW9uIGxvY2FsZUlzUE0gKGlucHV0KSB7XG4gICAgLy8gSUU4IFF1aXJrcyBNb2RlICYgSUU3IFN0YW5kYXJkcyBNb2RlIGRvIG5vdCBhbGxvdyBhY2Nlc3Npbmcgc3RyaW5ncyBsaWtlIGFycmF5c1xuICAgIC8vIFVzaW5nIGNoYXJBdCBzaG91bGQgYmUgbW9yZSBjb21wYXRpYmxlLlxuICAgIHJldHVybiAoKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKCkuY2hhckF0KDApID09PSAncCcpO1xufVxuXG52YXIgZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UgPSAvW2FwXVxcLj9tP1xcLj8vaTtcbmZ1bmN0aW9uIGxvY2FsZU1lcmlkaWVtIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BtJyA6ICdQTSc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYW0nIDogJ0FNJztcbiAgICB9XG59XG5cblxuLy8gTU9NRU5UU1xuXG4vLyBTZXR0aW5nIHRoZSBob3VyIHNob3VsZCBrZWVwIHRoZSB0aW1lLCBiZWNhdXNlIHRoZSB1c2VyIGV4cGxpY2l0bHlcbi8vIHNwZWNpZmllZCB3aGljaCBob3VyIGhlIHdhbnRzLiBTbyB0cnlpbmcgdG8gbWFpbnRhaW4gdGhlIHNhbWUgaG91ciAoaW5cbi8vIGEgbmV3IHRpbWV6b25lKSBtYWtlcyBzZW5zZS4gQWRkaW5nL3N1YnRyYWN0aW5nIGhvdXJzIGRvZXMgbm90IGZvbGxvd1xuLy8gdGhpcyBydWxlLlxudmFyIGdldFNldEhvdXIgPSBtYWtlR2V0U2V0KCdIb3VycycsIHRydWUpO1xuXG4vLyBtb250aHNcbi8vIHdlZWtcbi8vIHdlZWtkYXlzXG4vLyBtZXJpZGllbVxudmFyIGJhc2VDb25maWcgPSB7XG4gICAgY2FsZW5kYXI6IGRlZmF1bHRDYWxlbmRhcixcbiAgICBsb25nRGF0ZUZvcm1hdDogZGVmYXVsdExvbmdEYXRlRm9ybWF0LFxuICAgIGludmFsaWREYXRlOiBkZWZhdWx0SW52YWxpZERhdGUsXG4gICAgb3JkaW5hbDogZGVmYXVsdE9yZGluYWwsXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UsXG4gICAgcmVsYXRpdmVUaW1lOiBkZWZhdWx0UmVsYXRpdmVUaW1lLFxuXG4gICAgbW9udGhzOiBkZWZhdWx0TG9jYWxlTW9udGhzLFxuICAgIG1vbnRoc1Nob3J0OiBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQsXG5cbiAgICB3ZWVrOiBkZWZhdWx0TG9jYWxlV2VlayxcblxuICAgIHdlZWtkYXlzOiBkZWZhdWx0TG9jYWxlV2Vla2RheXMsXG4gICAgd2Vla2RheXNNaW46IGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbixcbiAgICB3ZWVrZGF5c1Nob3J0OiBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCxcblxuICAgIG1lcmlkaWVtUGFyc2U6IGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlXG59O1xuXG4vLyBpbnRlcm5hbCBzdG9yYWdlIGZvciBsb2NhbGUgY29uZmlnIGZpbGVzXG52YXIgbG9jYWxlcyA9IHt9O1xudmFyIGxvY2FsZUZhbWlsaWVzID0ge307XG52YXIgZ2xvYmFsTG9jYWxlO1xuXG5mdW5jdGlvbiBub3JtYWxpemVMb2NhbGUoa2V5KSB7XG4gICAgcmV0dXJuIGtleSA/IGtleS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ18nLCAnLScpIDoga2V5O1xufVxuXG4vLyBwaWNrIHRoZSBsb2NhbGUgZnJvbSB0aGUgYXJyYXlcbi8vIHRyeSBbJ2VuLWF1JywgJ2VuLWdiJ10gYXMgJ2VuLWF1JywgJ2VuLWdiJywgJ2VuJywgYXMgaW4gbW92ZSB0aHJvdWdoIHRoZSBsaXN0IHRyeWluZyBlYWNoXG4vLyBzdWJzdHJpbmcgZnJvbSBtb3N0IHNwZWNpZmljIHRvIGxlYXN0LCBidXQgbW92ZSB0byB0aGUgbmV4dCBhcnJheSBpdGVtIGlmIGl0J3MgYSBtb3JlIHNwZWNpZmljIHZhcmlhbnQgdGhhbiB0aGUgY3VycmVudCByb290XG5mdW5jdGlvbiBjaG9vc2VMb2NhbGUobmFtZXMpIHtcbiAgICB2YXIgaSA9IDAsIGosIG5leHQsIGxvY2FsZSwgc3BsaXQ7XG5cbiAgICB3aGlsZSAoaSA8IG5hbWVzLmxlbmd0aCkge1xuICAgICAgICBzcGxpdCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpXSkuc3BsaXQoJy0nKTtcbiAgICAgICAgaiA9IHNwbGl0Lmxlbmd0aDtcbiAgICAgICAgbmV4dCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpICsgMV0pO1xuICAgICAgICBuZXh0ID0gbmV4dCA/IG5leHQuc3BsaXQoJy0nKSA6IG51bGw7XG4gICAgICAgIHdoaWxlIChqID4gMCkge1xuICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShzcGxpdC5zbGljZSgwLCBqKS5qb2luKCctJykpO1xuICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV4dCAmJiBuZXh0Lmxlbmd0aCA+PSBqICYmIGNvbXBhcmVBcnJheXMoc3BsaXQsIG5leHQsIHRydWUpID49IGogLSAxKSB7XG4gICAgICAgICAgICAgICAgLy90aGUgbmV4dCBhcnJheSBpdGVtIGlzIGJldHRlciB0aGFuIGEgc2hhbGxvd2VyIHN1YnN0cmluZyBvZiB0aGlzIG9uZVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgai0tO1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGxvYWRMb2NhbGUobmFtZSkge1xuICAgIHZhciBvbGRMb2NhbGUgPSBudWxsO1xuICAgIC8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIHJlZ2lzdGVyIGFuZCBsb2FkIGFsbCB0aGUgbG9jYWxlcyBpbiBOb2RlXG4gICAgaWYgKCFsb2NhbGVzW25hbWVdICYmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgb2xkTG9jYWxlID0gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgICAgICAgICAgcmVxdWlyZSgnLi9sb2NhbGUvJyArIG5hbWUpO1xuICAgICAgICAgICAgLy8gYmVjYXVzZSBkZWZpbmVMb2NhbGUgY3VycmVudGx5IGFsc28gc2V0cyB0aGUgZ2xvYmFsIGxvY2FsZSwgd2VcbiAgICAgICAgICAgIC8vIHdhbnQgdG8gdW5kbyB0aGF0IGZvciBsYXp5IGxvYWRlZCBsb2NhbGVzXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUob2xkTG9jYWxlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyB9XG4gICAgfVxuICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9hZCBsb2NhbGUgYW5kIHRoZW4gc2V0IHRoZSBnbG9iYWwgbG9jYWxlLiAgSWZcbi8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4vLyBsb2NhbGUga2V5LlxuZnVuY3Rpb24gZ2V0U2V0R2xvYmFsTG9jYWxlIChrZXksIHZhbHVlcykge1xuICAgIHZhciBkYXRhO1xuICAgIGlmIChrZXkpIHtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgIGRhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIC8vIG1vbWVudC5kdXJhdGlvbi5fbG9jYWxlID0gbW9tZW50Ll9sb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgZ2xvYmFsTG9jYWxlID0gZGF0YTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG59XG5cbmZ1bmN0aW9uIGRlZmluZUxvY2FsZSAobmFtZSwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lO1xuICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoJ2RlZmluZUxvY2FsZU92ZXJyaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3VzZSBtb21lbnQudXBkYXRlTG9jYWxlKGxvY2FsZU5hbWUsIGNvbmZpZykgdG8gY2hhbmdlICcgK1xuICAgICAgICAgICAgICAgICAgICAnYW4gZXhpc3RpbmcgbG9jYWxlLiBtb21lbnQuZGVmaW5lTG9jYWxlKGxvY2FsZU5hbWUsICcgK1xuICAgICAgICAgICAgICAgICAgICAnY29uZmlnKSBzaG91bGQgb25seSBiZSB1c2VkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGUgJyArXG4gICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kZWZpbmUtbG9jYWxlLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBjb25maWdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsb2NhbGVzW25hbWVdID0gbmV3IExvY2FsZShtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpKTtcblxuICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVMb2NhbGUoeC5uYW1lLCB4LmNvbmZpZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAvLyBtYWtlIHN1cmUgd2Ugc2V0IHRoZSBsb2NhbGUgQUZURVIgYWxsIGNoaWxkIGxvY2FsZXMgaGF2ZSBiZWVuXG4gICAgICAgIC8vIGNyZWF0ZWQsIHNvIHdlIHdvbid0IGVuZCB1cCB3aXRoIHRoZSBjaGlsZCBsb2NhbGUgc2V0LlxuICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG5cblxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1c2VmdWwgZm9yIHRlc3RpbmdcbiAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICB2YXIgbG9jYWxlLCBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICAvLyBNRVJHRVxuICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW25hbWVdLl9jb25maWc7XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnID0gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKTtcbiAgICAgICAgbG9jYWxlID0gbmV3IExvY2FsZShjb25maWcpO1xuICAgICAgICBsb2NhbGUucGFyZW50TG9jYWxlID0gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZTtcblxuICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHBhc3MgbnVsbCBmb3IgY29uZmlnIHRvIHVudXBkYXRlLCB1c2VmdWwgZm9yIHRlc3RzXG4gICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbn1cblxuLy8gcmV0dXJucyBsb2NhbGUgZGF0YVxuZnVuY3Rpb24gZ2V0TG9jYWxlIChrZXkpIHtcbiAgICB2YXIgbG9jYWxlO1xuXG4gICAgaWYgKGtleSAmJiBrZXkuX2xvY2FsZSAmJiBrZXkuX2xvY2FsZS5fYWJicikge1xuICAgICAgICBrZXkgPSBrZXkuX2xvY2FsZS5fYWJicjtcbiAgICB9XG5cbiAgICBpZiAoIWtleSkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgIH1cblxuICAgIGlmICghaXNBcnJheShrZXkpKSB7XG4gICAgICAgIC8vc2hvcnQtY2lyY3VpdCBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShrZXkpO1xuICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICB9XG4gICAgICAgIGtleSA9IFtrZXldO1xuICAgIH1cblxuICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTtcbn1cblxuZnVuY3Rpb24gbGlzdExvY2FsZXMoKSB7XG4gICAgcmV0dXJuIGtleXMkMShsb2NhbGVzKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyAobSkge1xuICAgIHZhciBvdmVyZmxvdztcbiAgICB2YXIgYSA9IG0uX2E7XG5cbiAgICBpZiAoYSAmJiBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPT09IC0yKSB7XG4gICAgICAgIG92ZXJmbG93ID1cbiAgICAgICAgICAgIGFbTU9OVEhdICAgICAgIDwgMCB8fCBhW01PTlRIXSAgICAgICA+IDExICA/IE1PTlRIIDpcbiAgICAgICAgICAgIGFbREFURV0gICAgICAgIDwgMSB8fCBhW0RBVEVdICAgICAgICA+IGRheXNJbk1vbnRoKGFbWUVBUl0sIGFbTU9OVEhdKSA/IERBVEUgOlxuICAgICAgICAgICAgYVtIT1VSXSAgICAgICAgPCAwIHx8IGFbSE9VUl0gICAgICAgID4gMjQgfHwgKGFbSE9VUl0gPT09IDI0ICYmIChhW01JTlVURV0gIT09IDAgfHwgYVtTRUNPTkRdICE9PSAwIHx8IGFbTUlMTElTRUNPTkRdICE9PSAwKSkgPyBIT1VSIDpcbiAgICAgICAgICAgIGFbTUlOVVRFXSAgICAgIDwgMCB8fCBhW01JTlVURV0gICAgICA+IDU5ICA/IE1JTlVURSA6XG4gICAgICAgICAgICBhW1NFQ09ORF0gICAgICA8IDAgfHwgYVtTRUNPTkRdICAgICAgPiA1OSAgPyBTRUNPTkQgOlxuICAgICAgICAgICAgYVtNSUxMSVNFQ09ORF0gPCAwIHx8IGFbTUlMTElTRUNPTkRdID4gOTk5ID8gTUlMTElTRUNPTkQgOlxuICAgICAgICAgICAgLTE7XG5cbiAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dEYXlPZlllYXIgJiYgKG92ZXJmbG93IDwgWUVBUiB8fCBvdmVyZmxvdyA+IERBVEUpKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9IERBVEU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrcyAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFSztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtkYXkgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUtEQVk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPSBvdmVyZmxvdztcbiAgICB9XG5cbiAgICByZXR1cm4gbTtcbn1cblxuLy8gaXNvIDg2MDEgcmVnZXhcbi8vIDAwMDAtMDAtMDAgMDAwMC1XMDAgb3IgMDAwMC1XMDAtMCArIFQgKyAwMCBvciAwMDowMCBvciAwMDowMDowMCBvciAwMDowMDowMC4wMDAgKyArMDA6MDAgb3IgKzAwMDAgb3IgKzAwKVxudmFyIGV4dGVuZGVkSXNvUmVnZXggPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pLSg/OlxcZFxcZC1cXGRcXGR8V1xcZFxcZC1cXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzo6XFxkXFxkKD86OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbXFwrXFwtXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC87XG52YXIgYmFzaWNJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSkoPzpcXGRcXGRcXGRcXGR8V1xcZFxcZFxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OlxcZFxcZCg/OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbXFwrXFwtXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC87XG5cbnZhciB0elJlZ2V4ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vO1xuXG52YXIgaXNvRGF0ZXMgPSBbXG4gICAgWydZWVlZWVktTU0tREQnLCAvWystXVxcZHs2fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgWydZWVlZLU1NLUREJywgL1xcZHs0fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgWydHR0dHLVtXXVdXLUUnLCAvXFxkezR9LVdcXGRcXGQtXFxkL10sXG4gICAgWydHR0dHLVtXXVdXJywgL1xcZHs0fS1XXFxkXFxkLywgZmFsc2VdLFxuICAgIFsnWVlZWS1EREQnLCAvXFxkezR9LVxcZHszfS9dLFxuICAgIFsnWVlZWS1NTScsIC9cXGR7NH0tXFxkXFxkLywgZmFsc2VdLFxuICAgIFsnWVlZWVlZTU1ERCcsIC9bKy1dXFxkezEwfS9dLFxuICAgIFsnWVlZWU1NREQnLCAvXFxkezh9L10sXG4gICAgLy8gWVlZWU1NIGlzIE5PVCBhbGxvd2VkIGJ5IHRoZSBzdGFuZGFyZFxuICAgIFsnR0dHR1tXXVdXRScsIC9cXGR7NH1XXFxkezN9L10sXG4gICAgWydHR0dHW1ddV1cnLCAvXFxkezR9V1xcZHsyfS8sIGZhbHNlXSxcbiAgICBbJ1lZWVlEREQnLCAvXFxkezd9L11cbl07XG5cbi8vIGlzbyB0aW1lIGZvcm1hdHMgYW5kIHJlZ2V4ZXNcbnZhciBpc29UaW1lcyA9IFtcbiAgICBbJ0hIOm1tOnNzLlNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGRcXC5cXGQrL10sXG4gICAgWydISDptbTpzcyxTU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkLFxcZCsvXSxcbiAgICBbJ0hIOm1tOnNzJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkL10sXG4gICAgWydISDptbScsIC9cXGRcXGQ6XFxkXFxkL10sXG4gICAgWydISG1tc3MuU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGRcXC5cXGQrL10sXG4gICAgWydISG1tc3MsU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGQsXFxkKy9dLFxuICAgIFsnSEhtbXNzJywgL1xcZFxcZFxcZFxcZFxcZFxcZC9dLFxuICAgIFsnSEhtbScsIC9cXGRcXGRcXGRcXGQvXSxcbiAgICBbJ0hIJywgL1xcZFxcZC9dXG5dO1xuXG52YXIgYXNwTmV0SnNvblJlZ2V4ID0gL15cXC8/RGF0ZVxcKChcXC0/XFxkKykvaTtcblxuLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXRcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgdmFyIGksIGwsXG4gICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgbWF0Y2ggPSBleHRlbmRlZElzb1JlZ2V4LmV4ZWMoc3RyaW5nKSB8fCBiYXNpY0lzb1JlZ2V4LmV4ZWMoc3RyaW5nKSxcbiAgICAgICAgYWxsb3dUaW1lLCBkYXRlRm9ybWF0LCB0aW1lRm9ybWF0LCB0ekZvcm1hdDtcblxuICAgIGlmIChtYXRjaCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pc28gPSB0cnVlO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29EYXRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpc29EYXRlc1tpXVsxXS5leGVjKG1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQgPSBpc29EYXRlc1tpXVswXTtcbiAgICAgICAgICAgICAgICBhbGxvd1RpbWUgPSBpc29EYXRlc1tpXVsyXSAhPT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoWzNdKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvVGltZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb1RpbWVzW2ldWzFdLmV4ZWMobWF0Y2hbM10pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoWzJdIHNob3VsZCBiZSAnVCcgb3Igc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgdGltZUZvcm1hdCA9IChtYXRjaFsyXSB8fCAnICcpICsgaXNvVGltZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aW1lRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhbGxvd1RpbWUgJiYgdGltZUZvcm1hdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgICAgIGlmICh0elJlZ2V4LmV4ZWMobWF0Y2hbNF0pKSB7XG4gICAgICAgICAgICAgICAgdHpGb3JtYXQgPSAnWic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25maWcuX2YgPSBkYXRlRm9ybWF0ICsgKHRpbWVGb3JtYXQgfHwgJycpICsgKHR6Rm9ybWF0IHx8ICcnKTtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgIH1cbn1cblxuLy8gUkZDIDI4MjIgcmVnZXg6IEZvciBkZXRhaWxzIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjgyMiNzZWN0aW9uLTMuM1xudmFyIGJhc2ljUmZjUmVnZXggPSAvXigoPzpNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLD9cXHMpPyhcXGQ/XFxkXFxzKD86SmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpXFxzKD86XFxkXFxkKT9cXGRcXGRcXHMpKFxcZFxcZDpcXGRcXGQpKFxcOlxcZFxcZCk/KFxccyg/OlVUfEdNVHxbRUNNUF1bU0RdVHxbQS1JSy1aYS1pay16XXxbKy1dXFxkezR9KSkkLztcblxuLy8gZGF0ZSBhbmQgdGltZSBmcm9tIHJlZiAyODIyIGZvcm1hdFxuZnVuY3Rpb24gY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKSB7XG4gICAgdmFyIHN0cmluZywgbWF0Y2gsIGRheUZvcm1hdCxcbiAgICAgICAgZGF0ZUZvcm1hdCwgdGltZUZvcm1hdCwgdHpGb3JtYXQ7XG4gICAgdmFyIHRpbWV6b25lcyA9IHtcbiAgICAgICAgJyBHTVQnOiAnICswMDAwJyxcbiAgICAgICAgJyBFRFQnOiAnIC0wNDAwJyxcbiAgICAgICAgJyBFU1QnOiAnIC0wNTAwJyxcbiAgICAgICAgJyBDRFQnOiAnIC0wNTAwJyxcbiAgICAgICAgJyBDU1QnOiAnIC0wNjAwJyxcbiAgICAgICAgJyBNRFQnOiAnIC0wNjAwJyxcbiAgICAgICAgJyBNU1QnOiAnIC0wNzAwJyxcbiAgICAgICAgJyBQRFQnOiAnIC0wNzAwJyxcbiAgICAgICAgJyBQU1QnOiAnIC0wODAwJ1xuICAgIH07XG4gICAgdmFyIG1pbGl0YXJ5ID0gJ1lYV1ZVVFNSUVBPTlpBQkNERUZHSElLTE0nO1xuICAgIHZhciB0aW1lem9uZSwgdGltZXpvbmVJbmRleDtcblxuICAgIHN0cmluZyA9IGNvbmZpZy5faVxuICAgICAgICAucmVwbGFjZSgvXFwoW15cXCldKlxcKXxbXFxuXFx0XS9nLCAnICcpIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlXG4gICAgICAgIC5yZXBsYWNlKC8oXFxzXFxzKykvZywgJyAnKSAvLyBSZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgIC5yZXBsYWNlKC9eXFxzfFxccyQvZywgJycpOyAvLyBSZW1vdmUgbGVhZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzXG4gICAgbWF0Y2ggPSBiYXNpY1JmY1JlZ2V4LmV4ZWMoc3RyaW5nKTtcblxuICAgIGlmIChtYXRjaCkge1xuICAgICAgICBkYXlGb3JtYXQgPSBtYXRjaFsxXSA/ICdkZGQnICsgKChtYXRjaFsxXS5sZW5ndGggPT09IDUpID8gJywgJyA6ICcgJykgOiAnJztcbiAgICAgICAgZGF0ZUZvcm1hdCA9ICdEIE1NTSAnICsgKChtYXRjaFsyXS5sZW5ndGggPiAxMCkgPyAnWVlZWSAnIDogJ1lZICcpO1xuICAgICAgICB0aW1lRm9ybWF0ID0gJ0hIOm1tJyArIChtYXRjaFs0XSA/ICc6c3MnIDogJycpO1xuXG4gICAgICAgIC8vIFRPRE86IFJlcGxhY2UgdGhlIHZhbmlsbGEgSlMgRGF0ZSBvYmplY3Qgd2l0aCBhbiBpbmRlcGVudGVudCBkYXktb2Ytd2VlayBjaGVjay5cbiAgICAgICAgaWYgKG1hdGNoWzFdKSB7IC8vIGRheSBvZiB3ZWVrIGdpdmVuXG4gICAgICAgICAgICB2YXIgbW9tZW50RGF0ZSA9IG5ldyBEYXRlKG1hdGNoWzJdKTtcbiAgICAgICAgICAgIHZhciBtb21lbnREYXkgPSBbJ1N1bicsJ01vbicsJ1R1ZScsJ1dlZCcsJ1RodScsJ0ZyaScsJ1NhdCddW21vbWVudERhdGUuZ2V0RGF5KCldO1xuXG4gICAgICAgICAgICBpZiAobWF0Y2hbMV0uc3Vic3RyKDAsMykgIT09IG1vbWVudERheSkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChtYXRjaFs1XS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMjogLy8gbWlsaXRhcnlcbiAgICAgICAgICAgICAgICBpZiAodGltZXpvbmVJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aW1lem9uZSA9ICcgKzAwMDAnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWV6b25lSW5kZXggPSBtaWxpdGFyeS5pbmRleE9mKG1hdGNoWzVdWzFdLnRvVXBwZXJDYXNlKCkpIC0gMTI7XG4gICAgICAgICAgICAgICAgICAgIHRpbWV6b25lID0gKCh0aW1lem9uZUluZGV4IDwgMCkgPyAnIC0nIDogJyArJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKCgnJyArIHRpbWV6b25lSW5kZXgpLnJlcGxhY2UoL14tPy8sICcwJykpLm1hdGNoKC8uLiQvKVswXSArICcwMCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA0OiAvLyBab25lXG4gICAgICAgICAgICAgICAgdGltZXpvbmUgPSB0aW1lem9uZXNbbWF0Y2hbNV1dO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDogLy8gVVQgb3IgKy8tOTk5OVxuICAgICAgICAgICAgICAgIHRpbWV6b25lID0gdGltZXpvbmVzWycgR01UJ107XG4gICAgICAgIH1cbiAgICAgICAgbWF0Y2hbNV0gPSB0aW1lem9uZTtcbiAgICAgICAgY29uZmlnLl9pID0gbWF0Y2guc3BsaWNlKDEpLmpvaW4oJycpO1xuICAgICAgICB0ekZvcm1hdCA9ICcgWlonO1xuICAgICAgICBjb25maWcuX2YgPSBkYXlGb3JtYXQgKyBkYXRlRm9ybWF0ICsgdGltZUZvcm1hdCArIHR6Rm9ybWF0O1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnJmYzI4MjIgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgIH1cbn1cblxuLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXQgb3IgZmFsbGJhY2tcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKSB7XG4gICAgdmFyIG1hdGNoZWQgPSBhc3BOZXRKc29uUmVnZXguZXhlYyhjb25maWcuX2kpO1xuXG4gICAgaWYgKG1hdGNoZWQgIT09IG51bGwpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK21hdGNoZWRbMV0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRmluYWwgYXR0ZW1wdCwgdXNlIElucHV0IEZhbGxiYWNrXG4gICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbn1cblxuaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2sgPSBkZXByZWNhdGUoXG4gICAgJ3ZhbHVlIHByb3ZpZGVkIGlzIG5vdCBpbiBhIHJlY29nbml6ZWQgUkZDMjgyMiBvciBJU08gZm9ybWF0LiBtb21lbnQgY29uc3RydWN0aW9uIGZhbGxzIGJhY2sgdG8ganMgRGF0ZSgpLCAnICtcbiAgICAnd2hpY2ggaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBhbGwgYnJvd3NlcnMgYW5kIHZlcnNpb25zLiBOb24gUkZDMjgyMi9JU08gZGF0ZSBmb3JtYXRzIGFyZSAnICtcbiAgICAnZGlzY291cmFnZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhbiB1cGNvbWluZyBtYWpvciByZWxlYXNlLiBQbGVhc2UgcmVmZXIgdG8gJyArXG4gICAgJ2h0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvanMtZGF0ZS8gZm9yIG1vcmUgaW5mby4nLFxuICAgIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoY29uZmlnLl9pICsgKGNvbmZpZy5fdXNlVVRDID8gJyBVVEMnIDogJycpKTtcbiAgICB9XG4pO1xuXG4vLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXG5mdW5jdGlvbiBkZWZhdWx0cyhhLCBiLCBjKSB7XG4gICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgaWYgKGIgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYjtcbiAgICB9XG4gICAgcmV0dXJuIGM7XG59XG5cbmZ1bmN0aW9uIGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKSB7XG4gICAgLy8gaG9va3MgaXMgYWN0dWFsbHkgdGhlIGV4cG9ydGVkIG1vbWVudCBvYmplY3RcbiAgICB2YXIgbm93VmFsdWUgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgaWYgKGNvbmZpZy5fdXNlVVRDKSB7XG4gICAgICAgIHJldHVybiBbbm93VmFsdWUuZ2V0VVRDRnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0VVRDTW9udGgoKSwgbm93VmFsdWUuZ2V0VVRDRGF0ZSgpXTtcbiAgICB9XG4gICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRNb250aCgpLCBub3dWYWx1ZS5nZXREYXRlKCldO1xufVxuXG4vLyBjb252ZXJ0IGFuIGFycmF5IHRvIGEgZGF0ZS5cbi8vIHRoZSBhcnJheSBzaG91bGQgbWlycm9yIHRoZSBwYXJhbWV0ZXJzIGJlbG93XG4vLyBub3RlOiBhbGwgdmFsdWVzIHBhc3QgdGhlIHllYXIgYXJlIG9wdGlvbmFsIGFuZCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxvd2VzdCBwb3NzaWJsZSB2YWx1ZS5cbi8vIFt5ZWFyLCBtb250aCwgZGF5ICwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXVxuZnVuY3Rpb24gY29uZmlnRnJvbUFycmF5IChjb25maWcpIHtcbiAgICB2YXIgaSwgZGF0ZSwgaW5wdXQgPSBbXSwgY3VycmVudERhdGUsIHllYXJUb1VzZTtcblxuICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGN1cnJlbnREYXRlID0gY3VycmVudERhdGVBcnJheShjb25maWcpO1xuXG4gICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpO1xuICAgIH1cblxuICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgIGlmIChjb25maWcuX2RheU9mWWVhciAhPSBudWxsKSB7XG4gICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciA+IGRheXNJblllYXIoeWVhclRvVXNlKSB8fCBjb25maWcuX2RheU9mWWVhciA9PT0gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93RGF5T2ZZZWFyID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKHllYXJUb1VzZSwgMCwgY29uZmlnLl9kYXlPZlllYXIpO1xuICAgICAgICBjb25maWcuX2FbTU9OVEhdID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS5cbiAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5XG4gICAgLy8gKiBpZiBkYXkgb2YgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgbW9udGggYW5kIHllYXJcbiAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhclxuICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZ1xuICAgIGZvciAoaSA9IDA7IGkgPCAzICYmIGNvbmZpZy5fYVtpXSA9PSBudWxsOyArK2kpIHtcbiAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTtcbiAgICB9XG5cbiAgICAvLyBaZXJvIG91dCB3aGF0ZXZlciB3YXMgbm90IGRlZmF1bHRlZCwgaW5jbHVkaW5nIHRpbWVcbiAgICBmb3IgKDsgaSA8IDc7IGkrKykge1xuICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IChjb25maWcuX2FbaV0gPT0gbnVsbCkgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXG4gICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNSU5VVEVdID09PSAwICYmXG4gICAgICAgICAgICBjb25maWcuX2FbU0VDT05EXSA9PT0gMCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMCkge1xuICAgICAgICBjb25maWcuX25leHREYXkgPSB0cnVlO1xuICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAwO1xuICAgIH1cblxuICAgIGNvbmZpZy5fZCA9IChjb25maWcuX3VzZVVUQyA/IGNyZWF0ZVVUQ0RhdGUgOiBjcmVhdGVEYXRlKS5hcHBseShudWxsLCBpbnB1dCk7XG4gICAgLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXG4gICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgaWYgKGNvbmZpZy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLl9uZXh0RGF5KSB7XG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZykge1xuICAgIHZhciB3LCB3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3ksIHRlbXAsIHdlZWtkYXlPdmVyZmxvdztcblxuICAgIHcgPSBjb25maWcuX3c7XG4gICAgaWYgKHcuR0cgIT0gbnVsbCB8fCB3LlcgIT0gbnVsbCB8fCB3LkUgIT0gbnVsbCkge1xuICAgICAgICBkb3cgPSAxO1xuICAgICAgICBkb3kgPSA0O1xuXG4gICAgICAgIC8vIFRPRE86IFdlIG5lZWQgdG8gdGFrZSB0aGUgY3VycmVudCBpc29XZWVrWWVhciwgYnV0IHRoYXQgZGVwZW5kcyBvblxuICAgICAgICAvLyBob3cgd2UgaW50ZXJwcmV0IG5vdyAobG9jYWwsIHV0YywgZml4ZWQgb2Zmc2V0KS4gU28gY3JlYXRlXG4gICAgICAgIC8vIGEgbm93IHZlcnNpb24gb2YgY3VycmVudCBjb25maWcgKHRha2UgbG9jYWwvdXRjL29mZnNldCBmbGFncywgYW5kXG4gICAgICAgIC8vIGNyZWF0ZSBub3cpLlxuICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuR0csIGNvbmZpZy5fYVtZRUFSXSwgd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCAxLCA0KS55ZWFyKTtcbiAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcuVywgMSk7XG4gICAgICAgIHdlZWtkYXkgPSBkZWZhdWx0cyh3LkUsIDEpO1xuICAgICAgICBpZiAod2Vla2RheSA8IDEgfHwgd2Vla2RheSA+IDcpIHtcbiAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBkb3cgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3c7XG4gICAgICAgIGRveSA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRveTtcblxuICAgICAgICB2YXIgY3VyV2VlayA9IHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgZG93LCBkb3kpO1xuXG4gICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5nZywgY29uZmlnLl9hW1lFQVJdLCBjdXJXZWVrLnllYXIpO1xuXG4gICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCB3ZWVrLlxuICAgICAgICB3ZWVrID0gZGVmYXVsdHMody53LCBjdXJXZWVrLndlZWspO1xuXG4gICAgICAgIGlmICh3LmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gd2Vla2RheSAtLSBsb3cgZGF5IG51bWJlcnMgYXJlIGNvbnNpZGVyZWQgbmV4dCB3ZWVrXG4gICAgICAgICAgICB3ZWVrZGF5ID0gdy5kO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAwIHx8IHdlZWtkYXkgPiA2KSB7XG4gICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh3LmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbG9jYWwgd2Vla2RheSAtLSBjb3VudGluZyBzdGFydHMgZnJvbSBiZWdpbmluZyBvZiB3ZWVrXG4gICAgICAgICAgICB3ZWVrZGF5ID0gdy5lICsgZG93O1xuICAgICAgICAgICAgaWYgKHcuZSA8IDAgfHwgdy5lID4gNikge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBkZWZhdWx0IHRvIGJlZ2luaW5nIG9mIHdlZWtcbiAgICAgICAgICAgIHdlZWtkYXkgPSBkb3c7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHdlZWsgPCAxIHx8IHdlZWsgPiB3ZWVrc0luWWVhcih3ZWVrWWVhciwgZG93LCBkb3kpKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtzID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHdlZWtkYXlPdmVyZmxvdyAhPSBudWxsKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtkYXkgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRlbXAgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gdGVtcC55ZWFyO1xuICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRlbXAuZGF5T2ZZZWFyO1xuICAgIH1cbn1cblxuLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIElTTyBzdGFuZGFyZFxuaG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTtcblxuLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIFJGQyAyODIyIGZvcm1cbmhvb2tzLlJGQ18yODIyID0gZnVuY3Rpb24gKCkge307XG5cbi8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmdcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgLy8gVE9ETzogTW92ZSB0aGlzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgY3JlYXRpb24gZmxvdyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcHNcbiAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5JU09fODYwMSkge1xuICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuUkZDXzI4MjIpIHtcbiAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25maWcuX2EgPSBbXTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IHRydWU7XG5cbiAgICAvLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxuICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgaSwgcGFyc2VkSW5wdXQsIHRva2VucywgdG9rZW4sIHNraXBwZWQsXG4gICAgICAgIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwO1xuXG4gICAgdG9rZW5zID0gZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpIHx8IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHwgW10pWzBdO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygndG9rZW4nLCB0b2tlbiwgJ3BhcnNlZElucHV0JywgcGFyc2VkSW5wdXQsXG4gICAgICAgIC8vICAgICAgICAgJ3JlZ2V4JywgZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKTtcbiAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICBza2lwcGVkID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkpO1xuICAgICAgICAgICAgaWYgKHNraXBwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc2tpcHBlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2Uoc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoKTtcbiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggKz0gcGFyc2VkSW5wdXQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRvbid0IHBhcnNlIGlmIGl0J3Mgbm90IGEga25vd24gdG9rZW5cbiAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSkge1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID0gc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aDtcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgIH1cblxuICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA8PSAxMiAmJlxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA+IDApIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5wYXJzZWREYXRlUGFydHMgPSBjb25maWcuX2Euc2xpY2UoMCk7XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykubWVyaWRpZW0gPSBjb25maWcuX21lcmlkaWVtO1xuICAgIC8vIGhhbmRsZSBtZXJpZGllbVxuICAgIGNvbmZpZy5fYVtIT1VSXSA9IG1lcmlkaWVtRml4V3JhcChjb25maWcuX2xvY2FsZSwgY29uZmlnLl9hW0hPVVJdLCBjb25maWcuX21lcmlkaWVtKTtcblxuICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTtcbn1cblxuXG5mdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAgKGxvY2FsZSwgaG91ciwgbWVyaWRpZW0pIHtcbiAgICB2YXIgaXNQbTtcblxuICAgIGlmIChtZXJpZGllbSA9PSBudWxsKSB7XG4gICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgfVxuICAgIGlmIChsb2NhbGUubWVyaWRpZW1Ib3VyICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0pO1xuICAgIH0gZWxzZSBpZiAobG9jYWxlLmlzUE0gIT0gbnVsbCkge1xuICAgICAgICAvLyBGYWxsYmFja1xuICAgICAgICBpc1BtID0gbG9jYWxlLmlzUE0obWVyaWRpZW0pO1xuICAgICAgICBpZiAoaXNQbSAmJiBob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIGhvdXIgKz0gMTI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1BtICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaG91cjtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0aGlzIGlzIG5vdCBzdXBwb3NlZCB0byBoYXBwZW5cbiAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgfVxufVxuXG4vLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xuZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICBiZXN0TW9tZW50LFxuXG4gICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICBpLFxuICAgICAgICBjdXJyZW50U2NvcmU7XG5cbiAgICBpZiAoY29uZmlnLl9mLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWcuX2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgdGVtcENvbmZpZyA9IGNvcHlDb25maWcoe30sIGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQztcbiAgICAgICAgfVxuICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldO1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpO1xuXG4gICAgICAgIGlmICghaXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdFxuICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXI7XG5cbiAgICAgICAgLy9vciB0b2tlbnNcbiAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlO1xuXG4gICAgICAgIGlmIChzY29yZVRvQmVhdCA9PSBudWxsIHx8IGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7XG4gICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbn1cblxuZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSk7XG4gICAgY29uZmlnLl9hID0gbWFwKFtpLnllYXIsIGkubW9udGgsIGkuZGF5IHx8IGkuZGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgfSk7XG5cbiAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRnJvbUNvbmZpZyAoY29uZmlnKSB7XG4gICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKTtcbiAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgIC8vIEFkZGluZyBpcyBzbWFydCBlbm91Z2ggYXJvdW5kIERTVFxuICAgICAgICByZXMuYWRkKDEsICdkJyk7XG4gICAgICAgIHJlcy5fbmV4dERheSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBwcmVwYXJlQ29uZmlnIChjb25maWcpIHtcbiAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgIGNvbmZpZy5fbG9jYWxlID0gY29uZmlnLl9sb2NhbGUgfHwgZ2V0TG9jYWxlKGNvbmZpZy5fbCk7XG5cbiAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoe251bGxJbnB1dDogdHJ1ZX0pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpO1xuICAgIH1cblxuICAgIGlmIChpc01vbWVudChpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpO1xuICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICBjb25maWcuX2QgPSBpbnB1dDtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm9ybWF0KSkge1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdCkge1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgfSAgZWxzZSB7XG4gICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgIH1cblxuICAgIGlmICghaXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbn1cblxuZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQudmFsdWVPZigpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xuICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhbE9yVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgaXNVVEMpIHtcbiAgICB2YXIgYyA9IHt9O1xuXG4gICAgaWYgKGxvY2FsZSA9PT0gdHJ1ZSB8fCBsb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHN0cmljdCA9IGxvY2FsZTtcbiAgICAgICAgbG9jYWxlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICgoaXNPYmplY3QoaW5wdXQpICYmIGlzT2JqZWN0RW1wdHkoaW5wdXQpKSB8fFxuICAgICAgICAgICAgKGlzQXJyYXkoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgaW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNDIzXG4gICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTtcbiAgICBjLl91c2VVVEMgPSBjLl9pc1VUQyA9IGlzVVRDO1xuICAgIGMuX2wgPSBsb2NhbGU7XG4gICAgYy5faSA9IGlucHV0O1xuICAgIGMuX2YgPSBmb3JtYXQ7XG4gICAgYy5fc3RyaWN0ID0gc3RyaWN0O1xuXG4gICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2FsIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBmYWxzZSk7XG59XG5cbnZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgJ21vbWVudCgpLm1pbiBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1heCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlciA8IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxudmFyIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG4vLyBQaWNrIGEgbW9tZW50IG0gZnJvbSBtb21lbnRzIHNvIHRoYXQgbVtmbl0ob3RoZXIpIGlzIHRydWUgZm9yIGFsbFxuLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuLy9cbi8vIG1vbWVudHMgc2hvdWxkIGVpdGhlciBiZSBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cyBvciBhbiBhcnJheSwgd2hvc2Vcbi8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG5mdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICB2YXIgcmVzLCBpO1xuICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgIH1cbiAgICBpZiAoIW1vbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbCgpO1xuICAgIH1cbiAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICghbW9tZW50c1tpXS5pc1ZhbGlkKCkgfHwgbW9tZW50c1tpXVtmbl0ocmVzKSkge1xuICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBUT0RPOiBVc2UgW10uc29ydCBpbnN0ZWFkP1xuZnVuY3Rpb24gbWluICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHJldHVybiBwaWNrQnkoJ2lzQmVmb3JlJywgYXJncyk7XG59XG5cbmZ1bmN0aW9uIG1heCAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG59XG5cbnZhciBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICsobmV3IERhdGUoKSk7XG59O1xuXG52YXIgb3JkZXJpbmcgPSBbJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCAnbWlsbGlzZWNvbmQnXTtcblxuZnVuY3Rpb24gaXNEdXJhdGlvblZhbGlkKG0pIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gbSkge1xuICAgICAgICBpZiAoIShvcmRlcmluZy5pbmRleE9mKGtleSkgIT09IC0xICYmIChtW2tleV0gPT0gbnVsbCB8fCAhaXNOYU4obVtrZXldKSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdW5pdEhhc0RlY2ltYWwgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yZGVyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChtW29yZGVyaW5nW2ldXSkge1xuICAgICAgICAgICAgaWYgKHVuaXRIYXNEZWNpbWFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBvbmx5IGFsbG93IG5vbi1pbnRlZ2VycyBmb3Igc21hbGxlc3QgdW5pdFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobVtvcmRlcmluZ1tpXV0pICE9PSB0b0ludChtW29yZGVyaW5nW2ldXSkpIHtcbiAgICAgICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZCQxKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnZhbGlkJDEoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKE5hTik7XG59XG5cbmZ1bmN0aW9uIER1cmF0aW9uIChkdXJhdGlvbikge1xuICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCxcbiAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLFxuICAgICAgICBtb250aHMgPSBub3JtYWxpemVkSW5wdXQubW9udGggfHwgMCxcbiAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCAwLFxuICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLFxuICAgICAgICBob3VycyA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsXG4gICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsXG4gICAgICAgIG1pbGxpc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwO1xuXG4gICAgdGhpcy5faXNWYWxpZCA9IGlzRHVyYXRpb25WYWxpZChub3JtYWxpemVkSW5wdXQpO1xuXG4gICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICB0aGlzLl9taWxsaXNlY29uZHMgPSArbWlsbGlzZWNvbmRzICtcbiAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICBob3VycyAqIDEwMDAgKiA2MCAqIDYwOyAvL3VzaW5nIDEwMDAgKiA2MCAqIDYwIGluc3RlYWQgb2YgMzZlNSB0byBhdm9pZCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzI5NzhcbiAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5XG4gICAgdGhpcy5fZGF5cyA9ICtkYXlzICtcbiAgICAgICAgd2Vla3MgKiA3O1xuICAgIC8vIEl0IGlzIGltcG9zc2libGUgdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nXG4gICAgLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmVcbiAgICAvLyBpdCBzZXBhcmF0ZWx5LlxuICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgK1xuICAgICAgICBxdWFydGVycyAqIDMgK1xuICAgICAgICB5ZWFycyAqIDEyO1xuXG4gICAgdGhpcy5fZGF0YSA9IHt9O1xuXG4gICAgdGhpcy5fbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG5cbiAgICB0aGlzLl9idWJibGUoKTtcbn1cblxuZnVuY3Rpb24gaXNEdXJhdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIER1cmF0aW9uO1xufVxuXG5mdW5jdGlvbiBhYnNSb3VuZCAobnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoLTEgKiBudW1iZXIpICogLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKTtcbiAgICB9XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuZnVuY3Rpb24gb2Zmc2V0ICh0b2tlbiwgc2VwYXJhdG9yKSB7XG4gICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgIHZhciBzaWduID0gJysnO1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpZ24gKyB6ZXJvRmlsbCh+fihvZmZzZXQgLyA2MCksIDIpICsgc2VwYXJhdG9yICsgemVyb0ZpbGwofn4ob2Zmc2V0KSAlIDYwLCAyKTtcbiAgICB9KTtcbn1cblxub2Zmc2V0KCdaJywgJzonKTtcbm9mZnNldCgnWlonLCAnJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignWicsICBtYXRjaFNob3J0T2Zmc2V0KTtcbmFkZFJlZ2V4VG9rZW4oJ1paJywgbWF0Y2hTaG9ydE9mZnNldCk7XG5hZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX3VzZVVUQyA9IHRydWU7XG4gICAgY29uZmlnLl90em0gPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbi8vIHRpbWV6b25lIGNodW5rZXJcbi8vICcrMTA6MDAnID4gWycxMCcsICAnMDAnXVxuLy8gJy0xNTMwJyAgPiBbJy0xNScsICczMCddXG52YXIgY2h1bmtPZmZzZXQgPSAvKFtcXCtcXC1dfFxcZFxcZCkvZ2k7XG5cbmZ1bmN0aW9uIG9mZnNldEZyb21TdHJpbmcobWF0Y2hlciwgc3RyaW5nKSB7XG4gICAgdmFyIG1hdGNoZXMgPSAoc3RyaW5nIHx8ICcnKS5tYXRjaChtYXRjaGVyKTtcblxuICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjaHVuayAgID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdIHx8IFtdO1xuICAgIHZhciBwYXJ0cyAgID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXTtcbiAgICB2YXIgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICByZXR1cm4gbWludXRlcyA9PT0gMCA/XG4gICAgICAwIDpcbiAgICAgIHBhcnRzWzBdID09PSAnKycgPyBtaW51dGVzIDogLW1pbnV0ZXM7XG59XG5cbi8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXG5mdW5jdGlvbiBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIG1vZGVsKSB7XG4gICAgdmFyIHJlcywgZGlmZjtcbiAgICBpZiAobW9kZWwuX2lzVVRDKSB7XG4gICAgICAgIHJlcyA9IG1vZGVsLmNsb25lKCk7XG4gICAgICAgIGRpZmYgPSAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dCkgPyBpbnB1dC52YWx1ZU9mKCkgOiBjcmVhdGVMb2NhbChpbnB1dCkudmFsdWVPZigpKSAtIHJlcy52YWx1ZU9mKCk7XG4gICAgICAgIC8vIFVzZSBsb3ctbGV2ZWwgYXBpLCBiZWNhdXNlIHRoaXMgZm4gaXMgbG93LWxldmVsIGFwaS5cbiAgICAgICAgcmVzLl9kLnNldFRpbWUocmVzLl9kLnZhbHVlT2YoKSArIGRpZmYpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQocmVzLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0KS5sb2NhbCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGF0ZU9mZnNldCAobSkge1xuICAgIC8vIE9uIEZpcmVmb3guMjQgRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIGEgZmxvYXRpbmcgcG9pbnQuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDE1KSAqIDE1O1xufVxuXG4vLyBIT09LU1xuXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXG4vLyBJdCBpcyBpbnRlbmRlZCB0byBrZWVwIHRoZSBvZmZzZXQgaW4gc3luYyB3aXRoIHRoZSB0aW1lem9uZS5cbmhvb2tzLnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyBNT01FTlRTXG5cbi8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxuLy8gYWZmZWN0aW5nIHRoZSBsb2NhbCBob3VyLiBTbyA1OjMxOjI2ICswMzAwIC0tW3V0Y09mZnNldCgyLCB0cnVlKV0tLT5cbi8vIDU6MzE6MjYgKzAyMDAgSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3Qgd2l0aCBvZmZzZXRcbi8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cbi8vXG4vLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cilcbi8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxuLy8gYSBzZWNvbmQgdGltZS4gSW4gY2FzZSBpdCB3YW50cyB1cyB0byBjaGFuZ2UgdGhlIG9mZnNldCBhZ2FpblxuLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlXG4vLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxuZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0IChpbnB1dCwga2VlcExvY2FsVGltZSwga2VlcE1pbnV0ZXMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDAsXG4gICAgICAgIGxvY2FsQWRqdXN0O1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaW5wdXQgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2ICYmICFrZWVwTWludXRlcykge1xuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgbG9jYWxBZGp1c3QgPSBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0O1xuICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWU7XG4gICAgICAgIGlmIChsb2NhbEFkanVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFkZChsb2NhbEFkanVzdCwgJ20nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0ICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBjcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldCwgJ20nKSwgMSwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2V0Wm9uZSAoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG59XG5cbmZ1bmN0aW9uIHNldE9mZnNldFRvTG9jYWwgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICBpZiAodGhpcy5faXNVVEMpIHtcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQgKCkge1xuICAgIGlmICh0aGlzLl90em0gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0sIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdFpvbmUgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoT2Zmc2V0LCB0aGlzLl9pKTtcbiAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBoYXNBbGlnbmVkSG91ck9mZnNldCAoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaW5wdXQgPSBpbnB1dCA/IGNyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICByZXR1cm4gKHRoaXMudXRjT2Zmc2V0KCkgLSBpbnB1dCkgJSA2MCA9PT0gMDtcbn1cblxuZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWUgKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCAoKSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9pc0RTVFNoaWZ0ZWQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB7fTtcblxuICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgYyA9IHByZXBhcmVDb25maWcoYyk7XG5cbiAgICBpZiAoYy5fYSkge1xuICAgICAgICB2YXIgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZVVUQyhjLl9hKSA6IGNyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xufVxuXG5mdW5jdGlvbiBpc0xvY2FsICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNVdGNPZmZzZXQgKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVXRjICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbn1cblxuLy8gQVNQLk5FVCBqc29uIGRhdGUgZm9ybWF0IHJlZ2V4XG52YXIgYXNwTmV0UmVnZXggPSAvXihcXC0pPyg/OihcXGQqKVsuIF0pPyhcXGQrKVxcOihcXGQrKSg/OlxcOihcXGQrKShcXC5cXGQqKT8pPyQvO1xuXG4vLyBmcm9tIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX2RhdGVfZGF0ZS5qcy5zb3VyY2UuaHRtbFxuLy8gc29tZXdoYXQgbW9yZSBpbiBsaW5lIHdpdGggNC40LjMuMiAyMDA0IHNwZWMsIGJ1dCBhbGxvd3MgZGVjaW1hbCBhbnl3aGVyZVxuLy8gYW5kIGZ1cnRoZXIgbW9kaWZpZWQgdG8gYWxsb3cgZm9yIHN0cmluZ3MgY29udGFpbmluZyBib3RoIHdlZWsgYW5kIGRheVxudmFyIGlzb1JlZ2V4ID0gL14oLSk/UCg/OigtP1swLTksLl0qKVkpPyg/OigtP1swLTksLl0qKU0pPyg/OigtP1swLTksLl0qKVcpPyg/OigtP1swLTksLl0qKUQpPyg/OlQoPzooLT9bMC05LC5dKilIKT8oPzooLT9bMC05LC5dKilNKT8oPzooLT9bMC05LC5dKilTKT8pPyQvO1xuXG5mdW5jdGlvbiBjcmVhdGVEdXJhdGlvbiAoaW5wdXQsIGtleSkge1xuICAgIHZhciBkdXJhdGlvbiA9IGlucHV0LFxuICAgICAgICAvLyBtYXRjaGluZyBhZ2FpbnN0IHJlZ2V4cCBpcyBleHBlbnNpdmUsIGRvIGl0IG9uIGRlbWFuZFxuICAgICAgICBtYXRjaCA9IG51bGwsXG4gICAgICAgIHNpZ24sXG4gICAgICAgIHJldCxcbiAgICAgICAgZGlmZlJlcztcblxuICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSkge1xuICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIG1zIDogaW5wdXQuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgIGQgIDogaW5wdXQuX2RheXMsXG4gICAgICAgICAgICBNICA6IGlucHV0Ll9tb250aHNcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBkdXJhdGlvbltrZXldID0gaW5wdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkdXJhdGlvbi5taWxsaXNlY29uZHMgPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBhc3BOZXRSZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gJy0nKSA/IC0xIDogMTtcbiAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICB5ICA6IDAsXG4gICAgICAgICAgICBkICA6IHRvSW50KG1hdGNoW0RBVEVdKSAgICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICBoICA6IHRvSW50KG1hdGNoW0hPVVJdKSAgICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICBtICA6IHRvSW50KG1hdGNoW01JTlVURV0pICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICBzICA6IHRvSW50KG1hdGNoW1NFQ09ORF0pICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICBtcyA6IHRvSW50KGFic1JvdW5kKG1hdGNoW01JTExJU0VDT05EXSAqIDEwMDApKSAqIHNpZ24gLy8gdGhlIG1pbGxpc2Vjb25kIGRlY2ltYWwgcG9pbnQgaXMgaW5jbHVkZWQgaW4gdGhlIG1hdGNoXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGlzb1JlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIHkgOiBwYXJzZUlzbyhtYXRjaFsyXSwgc2lnbiksXG4gICAgICAgICAgICBNIDogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgdyA6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduKSxcbiAgICAgICAgICAgIGQgOiBwYXJzZUlzbyhtYXRjaFs1XSwgc2lnbiksXG4gICAgICAgICAgICBoIDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgbSA6IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduKSxcbiAgICAgICAgICAgIHMgOiBwYXJzZUlzbyhtYXRjaFs4XSwgc2lnbilcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHsvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbikpIHtcbiAgICAgICAgZGlmZlJlcyA9IG1vbWVudHNEaWZmZXJlbmNlKGNyZWF0ZUxvY2FsKGR1cmF0aW9uLmZyb20pLCBjcmVhdGVMb2NhbChkdXJhdGlvbi50bykpO1xuXG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIGR1cmF0aW9uLm1zID0gZGlmZlJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICB9XG5cbiAgICByZXQgPSBuZXcgRHVyYXRpb24oZHVyYXRpb24pO1xuXG4gICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG59XG5cbmNyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuY3JlYXRlRHVyYXRpb24uaW52YWxpZCA9IGNyZWF0ZUludmFsaWQkMTtcblxuZnVuY3Rpb24gcGFyc2VJc28gKGlucCwgc2lnbikge1xuICAgIC8vIFdlJ2Qgbm9ybWFsbHkgdXNlIH5+aW5wIGZvciB0aGlzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBhbHNvXG4gICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgIHZhciByZXMgPSBpbnAgJiYgcGFyc2VGbG9hdChpbnAucmVwbGFjZSgnLCcsICcuJykpO1xuICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG59XG5cbmZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICB2YXIgcmVzID0ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcblxuICAgIHJlcy5tb250aHMgPSBvdGhlci5tb250aCgpIC0gYmFzZS5tb250aCgpICtcbiAgICAgICAgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHtcbiAgICAgICAgLS1yZXMubW9udGhzO1xuICAgIH1cblxuICAgIHJlcy5taWxsaXNlY29uZHMgPSArb3RoZXIgLSArKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKSk7XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgIHZhciByZXM7XG4gICAgaWYgKCEoYmFzZS5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcbiAgICB9XG5cbiAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgaWYgKGJhc2UuaXNCZWZvcmUob3RoZXIpKSB7XG4gICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2Uob3RoZXIsIGJhc2UpO1xuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBUT0RPOiByZW1vdmUgJ25hbWUnIGFyZyBhZnRlciBkZXByZWNhdGlvbiBpcyByZW1vdmVkXG5mdW5jdGlvbiBjcmVhdGVBZGRlcihkaXJlY3Rpb24sIG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgIHZhciBkdXIsIHRtcDtcbiAgICAgICAgLy9pbnZlcnQgdGhlIGFyZ3VtZW50cywgYnV0IGNvbXBsYWluIGFib3V0IGl0XG4gICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUobmFtZSwgJ21vbWVudCgpLicgKyBuYW1lICArICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArIG5hbWUgKyAnKG51bWJlciwgcGVyaW9kKS4gJyArXG4gICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgdG1wID0gdmFsOyB2YWwgPSBwZXJpb2Q7IHBlcmlvZCA9IHRtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbCA9IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gK3ZhbCA6IHZhbDtcbiAgICAgICAgZHVyID0gY3JlYXRlRHVyYXRpb24odmFsLCBwZXJpb2QpO1xuICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBkdXIsIGRpcmVjdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGFkZFN1YnRyYWN0IChtb20sIGR1cmF0aW9uLCBpc0FkZGluZywgdXBkYXRlT2Zmc2V0KSB7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgIGRheXMgPSBhYnNSb3VuZChkdXJhdGlvbi5fZGF5cyksXG4gICAgICAgIG1vbnRocyA9IGFic1JvdW5kKGR1cmF0aW9uLl9tb250aHMpO1xuXG4gICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgIC8vIE5vIG9wXG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cGRhdGVPZmZzZXQgPSB1cGRhdGVPZmZzZXQgPT0gbnVsbCA/IHRydWUgOiB1cGRhdGVPZmZzZXQ7XG5cbiAgICBpZiAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgIG1vbS5fZC5zZXRUaW1lKG1vbS5fZC52YWx1ZU9mKCkgKyBtaWxsaXNlY29uZHMgKiBpc0FkZGluZyk7XG4gICAgfVxuICAgIGlmIChkYXlzKSB7XG4gICAgICAgIHNldCQxKG1vbSwgJ0RhdGUnLCBnZXQobW9tLCAnRGF0ZScpICsgZGF5cyAqIGlzQWRkaW5nKTtcbiAgICB9XG4gICAgaWYgKG1vbnRocykge1xuICAgICAgICBzZXRNb250aChtb20sIGdldChtb20sICdNb250aCcpICsgbW9udGhzICogaXNBZGRpbmcpO1xuICAgIH1cbiAgICBpZiAodXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICB9XG59XG5cbnZhciBhZGQgICAgICA9IGNyZWF0ZUFkZGVyKDEsICdhZGQnKTtcbnZhciBzdWJ0cmFjdCA9IGNyZWF0ZUFkZGVyKC0xLCAnc3VidHJhY3QnKTtcblxuZnVuY3Rpb24gZ2V0Q2FsZW5kYXJGb3JtYXQobXlNb21lbnQsIG5vdykge1xuICAgIHZhciBkaWZmID0gbXlNb21lbnQuZGlmZihub3csICdkYXlzJywgdHJ1ZSk7XG4gICAgcmV0dXJuIGRpZmYgPCAtNiA/ICdzYW1lRWxzZScgOlxuICAgICAgICAgICAgZGlmZiA8IC0xID8gJ2xhc3RXZWVrJyA6XG4gICAgICAgICAgICBkaWZmIDwgMCA/ICdsYXN0RGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgMSA/ICdzYW1lRGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgMiA/ICduZXh0RGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgNyA/ICduZXh0V2VlaycgOiAnc2FtZUVsc2UnO1xufVxuXG5mdW5jdGlvbiBjYWxlbmRhciQxICh0aW1lLCBmb3JtYXRzKSB7XG4gICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICB2YXIgbm93ID0gdGltZSB8fCBjcmVhdGVMb2NhbCgpLFxuICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgZm9ybWF0ID0gaG9va3MuY2FsZW5kYXJGb3JtYXQodGhpcywgc29kKSB8fCAnc2FtZUVsc2UnO1xuXG4gICAgdmFyIG91dHB1dCA9IGZvcm1hdHMgJiYgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXRdKSA/IGZvcm1hdHNbZm9ybWF0XS5jYWxsKHRoaXMsIG5vdykgOiBmb3JtYXRzW2Zvcm1hdF0pO1xuXG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KG91dHB1dCB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGNyZWF0ZUxvY2FsKG5vdykpKTtcbn1cblxuZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgIHJldHVybiBuZXcgTW9tZW50KHRoaXMpO1xufVxuXG5mdW5jdGlvbiBpc0FmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHMoIWlzVW5kZWZpbmVkKHVuaXRzKSA/IHVuaXRzIDogJ21pbGxpc2Vjb25kJyk7XG4gICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsb2NhbElucHV0LnZhbHVlT2YoKSA8IHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0JlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKCFpc1VuZGVmaW5lZCh1bml0cykgPyB1bml0cyA6ICdtaWxsaXNlY29uZCcpO1xuICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzQmV0d2VlbiAoZnJvbSwgdG8sIHVuaXRzLCBpbmNsdXNpdml0eSkge1xuICAgIGluY2x1c2l2aXR5ID0gaW5jbHVzaXZpdHkgfHwgJygpJztcbiAgICByZXR1cm4gKGluY2x1c2l2aXR5WzBdID09PSAnKCcgPyB0aGlzLmlzQWZ0ZXIoZnJvbSwgdW5pdHMpIDogIXRoaXMuaXNCZWZvcmUoZnJvbSwgdW5pdHMpKSAmJlxuICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJyA/IHRoaXMuaXNCZWZvcmUodG8sIHVuaXRzKSA6ICF0aGlzLmlzQWZ0ZXIodG8sIHVuaXRzKSk7XG59XG5cbmZ1bmN0aW9uIGlzU2FtZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgaW5wdXRNcztcbiAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzIHx8ICdtaWxsaXNlY29uZCcpO1xuICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlucHV0TXMgPSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCkgPD0gaW5wdXRNcyAmJiBpbnB1dE1zIDw9IHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lT3JBZnRlciAoaW5wdXQsIHVuaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LHVuaXRzKTtcbn1cblxuZnVuY3Rpb24gaXNTYW1lT3JCZWZvcmUgKGlucHV0LCB1bml0cykge1xuICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsdW5pdHMpO1xufVxuXG5mdW5jdGlvbiBkaWZmIChpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgem9uZURlbHRhLFxuICAgICAgICBkZWx0YSwgb3V0cHV0O1xuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIHRoYXQgPSBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIHRoaXMpO1xuXG4gICAgaWYgKCF0aGF0LmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIHpvbmVEZWx0YSA9ICh0aGF0LnV0Y09mZnNldCgpIC0gdGhpcy51dGNPZmZzZXQoKSkgKiA2ZTQ7XG5cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgIGlmICh1bml0cyA9PT0gJ3llYXInIHx8IHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAncXVhcnRlcicpIHtcbiAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdxdWFydGVyJykge1xuICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0IC8gMztcbiAgICAgICAgfSBlbHNlIGlmICh1bml0cyA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgLyAxMjtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbHRhID0gdGhpcyAtIHRoYXQ7XG4gICAgICAgIG91dHB1dCA9IHVuaXRzID09PSAnc2Vjb25kJyA/IGRlbHRhIC8gMWUzIDogLy8gMTAwMFxuICAgICAgICAgICAgdW5pdHMgPT09ICdtaW51dGUnID8gZGVsdGEgLyA2ZTQgOiAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIHVuaXRzID09PSAnaG91cicgPyBkZWx0YSAvIDM2ZTUgOiAvLyAxMDAwICogNjAgKiA2MFxuICAgICAgICAgICAgdW5pdHMgPT09ICdkYXknID8gKGRlbHRhIC0gem9uZURlbHRhKSAvIDg2NGU1IDogLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICAgICAgdW5pdHMgPT09ICd3ZWVrJyA/IChkZWx0YSAtIHpvbmVEZWx0YSkgLyA2MDQ4ZTUgOiAvLyAxMDAwICogNjAgKiA2MCAqIDI0ICogNywgbmVnYXRlIGRzdFxuICAgICAgICAgICAgZGVsdGE7XG4gICAgfVxuICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbn1cblxuZnVuY3Rpb24gbW9udGhEaWZmIChhLCBiKSB7XG4gICAgLy8gZGlmZmVyZW5jZSBpbiBtb250aHNcbiAgICB2YXIgd2hvbGVNb250aERpZmYgPSAoKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIpICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgIC8vIGIgaXMgaW4gKGFuY2hvciAtIDEgbW9udGgsIGFuY2hvciArIDEgbW9udGgpXG4gICAgICAgIGFuY2hvciA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYsICdtb250aHMnKSxcbiAgICAgICAgYW5jaG9yMiwgYWRqdXN0O1xuXG4gICAgaWYgKGIgLSBhbmNob3IgPCAwKSB7XG4gICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpO1xuICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yIC0gYW5jaG9yMik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJyk7XG4gICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKTtcbiAgICB9XG5cbiAgICAvL2NoZWNrIGZvciBuZWdhdGl2ZSB6ZXJvLCByZXR1cm4gemVybyBpZiBuZWdhdGl2ZSB6ZXJvXG4gICAgcmV0dXJuIC0od2hvbGVNb250aERpZmYgKyBhZGp1c3QpIHx8IDA7XG59XG5cbmhvb2tzLmRlZmF1bHRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA9ICdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJztcblxuZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTtcbn1cblxuZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIG0gPSB0aGlzLmNsb25lKCkudXRjKCk7XG4gICAgaWYgKG0ueWVhcigpIDwgMCB8fCBtLnllYXIoKSA+IDk5OTkpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyk7XG4gICAgfVxuICAgIGlmIChpc0Z1bmN0aW9uKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSkge1xuICAgICAgICAvLyBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXMgfjUweCBmYXN0ZXIsIHVzZSBpdCB3aGVuIHdlIGNhblxuICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyk7XG59XG5cbi8qKlxuICogUmV0dXJuIGEgaHVtYW4gcmVhZGFibGUgcmVwcmVzZW50YXRpb24gb2YgYSBtb21lbnQgdGhhdCBjYW5cbiAqIGFsc28gYmUgZXZhbHVhdGVkIHRvIGdldCBhIG5ldyBtb21lbnQgd2hpY2ggaXMgdGhlIHNhbWVcbiAqXG4gKiBAbGluayBodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QvZG9jcy9hcGkvdXRpbC5odG1sI3V0aWxfY3VzdG9tX2luc3BlY3RfZnVuY3Rpb25fb25fb2JqZWN0c1xuICovXG5mdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiAnbW9tZW50LmludmFsaWQoLyogJyArIHRoaXMuX2kgKyAnICovKSc7XG4gICAgfVxuICAgIHZhciBmdW5jID0gJ21vbWVudCc7XG4gICAgdmFyIHpvbmUgPSAnJztcbiAgICBpZiAoIXRoaXMuaXNMb2NhbCgpKSB7XG4gICAgICAgIGZ1bmMgPSB0aGlzLnV0Y09mZnNldCgpID09PSAwID8gJ21vbWVudC51dGMnIDogJ21vbWVudC5wYXJzZVpvbmUnO1xuICAgICAgICB6b25lID0gJ1onO1xuICAgIH1cbiAgICB2YXIgcHJlZml4ID0gJ1snICsgZnVuYyArICcoXCJdJztcbiAgICB2YXIgeWVhciA9ICgwIDw9IHRoaXMueWVhcigpICYmIHRoaXMueWVhcigpIDw9IDk5OTkpID8gJ1lZWVknIDogJ1lZWVlZWSc7XG4gICAgdmFyIGRhdGV0aW1lID0gJy1NTS1ERFtUXUhIOm1tOnNzLlNTUyc7XG4gICAgdmFyIHN1ZmZpeCA9IHpvbmUgKyAnW1wiKV0nO1xuXG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KHByZWZpeCArIHllYXIgKyBkYXRldGltZSArIHN1ZmZpeCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdCAoaW5wdXRTdHJpbmcpIHtcbiAgICBpZiAoIWlucHV0U3RyaW5nKSB7XG4gICAgICAgIGlucHV0U3RyaW5nID0gdGhpcy5pc1V0YygpID8gaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA6IGhvb2tzLmRlZmF1bHRGb3JtYXQ7XG4gICAgfVxuICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcpO1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5wb3N0Zm9ybWF0KG91dHB1dCk7XG59XG5cbmZ1bmN0aW9uIGZyb20gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe3RvOiB0aGlzLCBmcm9tOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZyb21Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICByZXR1cm4gdGhpcy5mcm9tKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xufVxuXG5mdW5jdGlvbiB0byAodGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7ZnJvbTogdGhpcywgdG86IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdG9Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbn1cblxuLy8gSWYgcGFzc2VkIGEgbG9jYWxlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxvY2FsZSBmb3IgdGhpc1xuLy8gaW5zdGFuY2UuICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8gdmFyaWFibGVzIGZvciB0aGlzIGluc3RhbmNlLlxuZnVuY3Rpb24gbG9jYWxlIChrZXkpIHtcbiAgICB2YXIgbmV3TG9jYWxlRGF0YTtcblxuICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlLl9hYmJyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0xvY2FsZURhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbnZhciBsYW5nID0gZGVwcmVjYXRlKFxuICAgICdtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgdXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSB0byBnZXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24uIFVzZSBtb21lbnQoKS5sb2NhbGUoKSB0byBjaGFuZ2UgbGFuZ3VhZ2VzLicsXG4gICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZShrZXkpO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxuZnVuY3Rpb24gbG9jYWxlRGF0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbn1cblxuZnVuY3Rpb24gc3RhcnRPZiAodW5pdHMpIHtcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAvLyB0aGUgZm9sbG93aW5nIHN3aXRjaCBpbnRlbnRpb25hbGx5IG9taXRzIGJyZWFrIGtleXdvcmRzXG4gICAgLy8gdG8gdXRpbGl6ZSBmYWxsaW5nIHRocm91Z2ggdGhlIGNhc2VzLlxuICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICB0aGlzLm1vbnRoKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgdGhpcy5kYXRlKDEpO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgdGhpcy5ob3VycygwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICB0aGlzLm1pbnV0ZXMoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICB0aGlzLnNlY29uZHMoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICB0aGlzLm1pbGxpc2Vjb25kcygwKTtcbiAgICB9XG5cbiAgICAvLyB3ZWVrcyBhcmUgYSBzcGVjaWFsIGNhc2VcbiAgICBpZiAodW5pdHMgPT09ICd3ZWVrJykge1xuICAgICAgICB0aGlzLndlZWtkYXkoMCk7XG4gICAgfVxuICAgIGlmICh1bml0cyA9PT0gJ2lzb1dlZWsnKSB7XG4gICAgICAgIHRoaXMuaXNvV2Vla2RheSgxKTtcbiAgICB9XG5cbiAgICAvLyBxdWFydGVycyBhcmUgYWxzbyBzcGVjaWFsXG4gICAgaWYgKHVuaXRzID09PSAncXVhcnRlcicpIHtcbiAgICAgICAgdGhpcy5tb250aChNYXRoLmZsb29yKHRoaXMubW9udGgoKSAvIDMpICogMyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGVuZE9mICh1bml0cykge1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vICdkYXRlJyBpcyBhbiBhbGlhcyBmb3IgJ2RheScsIHNvIGl0IHNob3VsZCBiZSBjb25zaWRlcmVkIGFzIHN1Y2guXG4gICAgaWYgKHVuaXRzID09PSAnZGF0ZScpIHtcbiAgICAgICAgdW5pdHMgPSAnZGF5JztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdGFydE9mKHVuaXRzKS5hZGQoMSwgKHVuaXRzID09PSAnaXNvV2VlaycgPyAnd2VlaycgOiB1bml0cykpLnN1YnRyYWN0KDEsICdtcycpO1xufVxuXG5mdW5jdGlvbiB2YWx1ZU9mICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZC52YWx1ZU9mKCkgLSAoKHRoaXMuX29mZnNldCB8fCAwKSAqIDYwMDAwKTtcbn1cblxuZnVuY3Rpb24gdW5peCAoKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkgLyAxMDAwKTtcbn1cblxuZnVuY3Rpb24gdG9EYXRlICgpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpO1xufVxuXG5mdW5jdGlvbiB0b0FycmF5ICgpIHtcbiAgICB2YXIgbSA9IHRoaXM7XG4gICAgcmV0dXJuIFttLnllYXIoKSwgbS5tb250aCgpLCBtLmRhdGUoKSwgbS5ob3VyKCksIG0ubWludXRlKCksIG0uc2Vjb25kKCksIG0ubWlsbGlzZWNvbmQoKV07XG59XG5cbmZ1bmN0aW9uIHRvT2JqZWN0ICgpIHtcbiAgICB2YXIgbSA9IHRoaXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeWVhcnM6IG0ueWVhcigpLFxuICAgICAgICBtb250aHM6IG0ubW9udGgoKSxcbiAgICAgICAgZGF0ZTogbS5kYXRlKCksXG4gICAgICAgIGhvdXJzOiBtLmhvdXJzKCksXG4gICAgICAgIG1pbnV0ZXM6IG0ubWludXRlcygpLFxuICAgICAgICBzZWNvbmRzOiBtLnNlY29uZHMoKSxcbiAgICAgICAgbWlsbGlzZWNvbmRzOiBtLm1pbGxpc2Vjb25kcygpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICAvLyBuZXcgRGF0ZShOYU4pLnRvSlNPTigpID09PSBudWxsXG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy50b0lTT1N0cmluZygpIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZCQyICgpIHtcbiAgICByZXR1cm4gaXNWYWxpZCh0aGlzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2luZ0ZsYWdzICgpIHtcbiAgICByZXR1cm4gZXh0ZW5kKHt9LCBnZXRQYXJzaW5nRmxhZ3ModGhpcykpO1xufVxuXG5mdW5jdGlvbiBpbnZhbGlkQXQgKCkge1xuICAgIHJldHVybiBnZXRQYXJzaW5nRmxhZ3ModGhpcykub3ZlcmZsb3c7XG59XG5cbmZ1bmN0aW9uIGNyZWF0aW9uRGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpbnB1dDogdGhpcy5faSxcbiAgICAgICAgZm9ybWF0OiB0aGlzLl9mLFxuICAgICAgICBsb2NhbGU6IHRoaXMuX2xvY2FsZSxcbiAgICAgICAgaXNVVEM6IHRoaXMuX2lzVVRDLFxuICAgICAgICBzdHJpY3Q6IHRoaXMuX3N0cmljdFxuICAgIH07XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMud2Vla1llYXIoKSAlIDEwMDtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ0dHJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc29XZWVrWWVhcigpICUgMTAwO1xufSk7XG5cbmZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4gKHRva2VuLCBnZXR0ZXIpIHtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbdG9rZW4sIHRva2VuLmxlbmd0aF0sIDAsIGdldHRlcik7XG59XG5cbmFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2cnLCAgICAgJ3dlZWtZZWFyJyk7XG5hZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnZycsICAgICd3ZWVrWWVhcicpO1xuYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHRycsICAnaXNvV2Vla1llYXInKTtcbmFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCd3ZWVrWWVhcicsICdnZycpO1xuYWRkVW5pdEFsaWFzKCdpc29XZWVrWWVhcicsICdHRycpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ3dlZWtZZWFyJywgMSk7XG5hZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtZZWFyJywgMSk7XG5cblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdHJywgICAgICBtYXRjaFNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCdnJywgICAgICBtYXRjaFNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCdHRycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdnZycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdHR0dHJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG5hZGRSZWdleFRva2VuKCdnZ2dnJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG5hZGRSZWdleFRva2VuKCdHR0dHRycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5hZGRSZWdleFRva2VuKCdnZ2dnZycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDIpXSA9IHRvSW50KGlucHV0KTtcbn0pO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ2dnJywgJ0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHdlZWtbdG9rZW5dID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xufSk7XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXIgKGlucHV0KSB7XG4gICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgdGhpcy53ZWVrKCksXG4gICAgICAgICAgICB0aGlzLndlZWtkYXkoKSxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveSk7XG59XG5cbmZ1bmN0aW9uIGdldFNldElTT1dlZWtZZWFyIChpbnB1dCkge1xuICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICBpbnB1dCwgdGhpcy5pc29XZWVrKCksIHRoaXMuaXNvV2Vla2RheSgpLCAxLCA0KTtcbn1cblxuZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIgKCkge1xuICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7XG59XG5cbmZ1bmN0aW9uIGdldFdlZWtzSW5ZZWFyICgpIHtcbiAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbn1cblxuZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXJIZWxwZXIoaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgdmFyIHdlZWtzVGFyZ2V0O1xuICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdlZWtzVGFyZ2V0ID0gd2Vla3NJblllYXIoaW5wdXQsIGRvdywgZG95KTtcbiAgICAgICAgaWYgKHdlZWsgPiB3ZWVrc1RhcmdldCkge1xuICAgICAgICAgICAgd2VlayA9IHdlZWtzVGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgdmFyIGRheU9mWWVhckRhdGEgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSxcbiAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoZGF5T2ZZZWFyRGF0YS55ZWFyLCAwLCBkYXlPZlllYXJEYXRhLmRheU9mWWVhcik7XG5cbiAgICB0aGlzLnllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICB0aGlzLm1vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSk7XG4gICAgdGhpcy5kYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICByZXR1cm4gdGhpcztcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignUScsIDAsICdRbycsICdxdWFydGVyJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdxdWFydGVyJywgJ1EnKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCdxdWFydGVyJywgNyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignUScsIG1hdGNoMSk7XG5hZGRQYXJzZVRva2VuKCdRJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG59KTtcblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRTZXRRdWFydGVyIChpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gTWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkgKyAxKSAvIDMpIDogdGhpcy5tb250aCgoaW5wdXQgLSAxKSAqIDMgKyB0aGlzLm1vbnRoKCkgJSAzKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignRCcsIFsnREQnLCAyXSwgJ0RvJywgJ2RhdGUnKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2RhdGUnLCAnRCcpO1xuXG4vLyBQUklPUk9JVFlcbmFkZFVuaXRQcmlvcml0eSgnZGF0ZScsIDkpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ0QnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ0REJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignRG8nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICByZXR1cm4gaXNTdHJpY3QgP1xuICAgICAgKGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZSB8fCBsb2NhbGUuX29yZGluYWxQYXJzZSkgOlxuICAgICAgbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudDtcbn0pO1xuXG5hZGRQYXJzZVRva2VuKFsnRCcsICdERCddLCBEQVRFKTtcbmFkZFBhcnNlVG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W0RBVEVdID0gdG9JbnQoaW5wdXQubWF0Y2gobWF0Y2gxdG8yKVswXSwgMTApO1xufSk7XG5cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ0RERCcsIFsnRERERCcsIDNdLCAnREREbycsICdkYXlPZlllYXInKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2RheU9mWWVhcicsICdEREQnKTtcblxuLy8gUFJJT1JJVFlcbmFkZFVuaXRQcmlvcml0eSgnZGF5T2ZZZWFyJywgNCk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignREREJywgIG1hdGNoMXRvMyk7XG5hZGRSZWdleFRva2VuKCdEREREJywgbWF0Y2gzKTtcbmFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX2RheU9mWWVhciA9IHRvSW50KGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyIChpbnB1dCkge1xuICAgIHZhciBkYXlPZlllYXIgPSBNYXRoLnJvdW5kKCh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1KSArIDE7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZCgoaW5wdXQgLSBkYXlPZlllYXIpLCAnZCcpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdtJywgWydtbScsIDJdLCAwLCAnbWludXRlJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdtaW51dGUnLCAnbScpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ21pbnV0ZScsIDE0KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdtJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdtbScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldE1pbnV0ZSA9IG1ha2VHZXRTZXQoJ01pbnV0ZXMnLCBmYWxzZSk7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ3MnLCBbJ3NzJywgMl0sIDAsICdzZWNvbmQnKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ3NlY29uZCcsICdzJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgnc2Vjb25kJywgMTUpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ3MnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUGFyc2VUb2tlbihbJ3MnLCAnc3MnXSwgU0VDT05EKTtcblxuLy8gTU9NRU5UU1xuXG52YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignUycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTJywgM10sIDAsICdtaWxsaXNlY29uZCcpO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwMDtcbn0pO1xuXG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdtaWxsaXNlY29uZCcsICdtcycpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ21pbGxpc2Vjb25kJywgMTYpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ1MnLCAgICBtYXRjaDF0bzMsIG1hdGNoMSk7XG5hZGRSZWdleFRva2VuKCdTUycsICAgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignU1NTJywgIG1hdGNoMXRvMywgbWF0Y2gzKTtcblxudmFyIHRva2VuO1xuZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG59XG5cbmZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbn1cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldE1pbGxpc2Vjb25kID0gbWFrZUdldFNldCgnTWlsbGlzZWNvbmRzJywgZmFsc2UpO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCd6JywgIDAsIDAsICd6b25lQWJicicpO1xuYWRkRm9ybWF0VG9rZW4oJ3p6JywgMCwgMCwgJ3pvbmVOYW1lJyk7XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0Wm9uZUFiYnIgKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdVVEMnIDogJyc7XG59XG5cbmZ1bmN0aW9uIGdldFpvbmVOYW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJyc7XG59XG5cbnZhciBwcm90byA9IE1vbWVudC5wcm90b3R5cGU7XG5cbnByb3RvLmFkZCAgICAgICAgICAgICAgID0gYWRkO1xucHJvdG8uY2FsZW5kYXIgICAgICAgICAgPSBjYWxlbmRhciQxO1xucHJvdG8uY2xvbmUgICAgICAgICAgICAgPSBjbG9uZTtcbnByb3RvLmRpZmYgICAgICAgICAgICAgID0gZGlmZjtcbnByb3RvLmVuZE9mICAgICAgICAgICAgID0gZW5kT2Y7XG5wcm90by5mb3JtYXQgICAgICAgICAgICA9IGZvcm1hdDtcbnByb3RvLmZyb20gICAgICAgICAgICAgID0gZnJvbTtcbnByb3RvLmZyb21Ob3cgICAgICAgICAgID0gZnJvbU5vdztcbnByb3RvLnRvICAgICAgICAgICAgICAgID0gdG87XG5wcm90by50b05vdyAgICAgICAgICAgICA9IHRvTm93O1xucHJvdG8uZ2V0ICAgICAgICAgICAgICAgPSBzdHJpbmdHZXQ7XG5wcm90by5pbnZhbGlkQXQgICAgICAgICA9IGludmFsaWRBdDtcbnByb3RvLmlzQWZ0ZXIgICAgICAgICAgID0gaXNBZnRlcjtcbnByb3RvLmlzQmVmb3JlICAgICAgICAgID0gaXNCZWZvcmU7XG5wcm90by5pc0JldHdlZW4gICAgICAgICA9IGlzQmV0d2VlbjtcbnByb3RvLmlzU2FtZSAgICAgICAgICAgID0gaXNTYW1lO1xucHJvdG8uaXNTYW1lT3JBZnRlciAgICAgPSBpc1NhbWVPckFmdGVyO1xucHJvdG8uaXNTYW1lT3JCZWZvcmUgICAgPSBpc1NhbWVPckJlZm9yZTtcbnByb3RvLmlzVmFsaWQgICAgICAgICAgID0gaXNWYWxpZCQyO1xucHJvdG8ubGFuZyAgICAgICAgICAgICAgPSBsYW5nO1xucHJvdG8ubG9jYWxlICAgICAgICAgICAgPSBsb2NhbGU7XG5wcm90by5sb2NhbGVEYXRhICAgICAgICA9IGxvY2FsZURhdGE7XG5wcm90by5tYXggICAgICAgICAgICAgICA9IHByb3RvdHlwZU1heDtcbnByb3RvLm1pbiAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWluO1xucHJvdG8ucGFyc2luZ0ZsYWdzICAgICAgPSBwYXJzaW5nRmxhZ3M7XG5wcm90by5zZXQgICAgICAgICAgICAgICA9IHN0cmluZ1NldDtcbnByb3RvLnN0YXJ0T2YgICAgICAgICAgID0gc3RhcnRPZjtcbnByb3RvLnN1YnRyYWN0ICAgICAgICAgID0gc3VidHJhY3Q7XG5wcm90by50b0FycmF5ICAgICAgICAgICA9IHRvQXJyYXk7XG5wcm90by50b09iamVjdCAgICAgICAgICA9IHRvT2JqZWN0O1xucHJvdG8udG9EYXRlICAgICAgICAgICAgPSB0b0RhdGU7XG5wcm90by50b0lTT1N0cmluZyAgICAgICA9IHRvSVNPU3RyaW5nO1xucHJvdG8uaW5zcGVjdCAgICAgICAgICAgPSBpbnNwZWN0O1xucHJvdG8udG9KU09OICAgICAgICAgICAgPSB0b0pTT047XG5wcm90by50b1N0cmluZyAgICAgICAgICA9IHRvU3RyaW5nO1xucHJvdG8udW5peCAgICAgICAgICAgICAgPSB1bml4O1xucHJvdG8udmFsdWVPZiAgICAgICAgICAgPSB2YWx1ZU9mO1xucHJvdG8uY3JlYXRpb25EYXRhICAgICAgPSBjcmVhdGlvbkRhdGE7XG5cbi8vIFllYXJcbnByb3RvLnllYXIgICAgICAgPSBnZXRTZXRZZWFyO1xucHJvdG8uaXNMZWFwWWVhciA9IGdldElzTGVhcFllYXI7XG5cbi8vIFdlZWsgWWVhclxucHJvdG8ud2Vla1llYXIgICAgPSBnZXRTZXRXZWVrWWVhcjtcbnByb3RvLmlzb1dlZWtZZWFyID0gZ2V0U2V0SVNPV2Vla1llYXI7XG5cbi8vIFF1YXJ0ZXJcbnByb3RvLnF1YXJ0ZXIgPSBwcm90by5xdWFydGVycyA9IGdldFNldFF1YXJ0ZXI7XG5cbi8vIE1vbnRoXG5wcm90by5tb250aCAgICAgICA9IGdldFNldE1vbnRoO1xucHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcblxuLy8gV2Vla1xucHJvdG8ud2VlayAgICAgICAgICAgPSBwcm90by53ZWVrcyAgICAgICAgPSBnZXRTZXRXZWVrO1xucHJvdG8uaXNvV2VlayAgICAgICAgPSBwcm90by5pc29XZWVrcyAgICAgPSBnZXRTZXRJU09XZWVrO1xucHJvdG8ud2Vla3NJblllYXIgICAgPSBnZXRXZWVrc0luWWVhcjtcbnByb3RvLmlzb1dlZWtzSW5ZZWFyID0gZ2V0SVNPV2Vla3NJblllYXI7XG5cbi8vIERheVxucHJvdG8uZGF0ZSAgICAgICA9IGdldFNldERheU9mTW9udGg7XG5wcm90by5kYXkgICAgICAgID0gcHJvdG8uZGF5cyAgICAgICAgICAgICA9IGdldFNldERheU9mV2VlaztcbnByb3RvLndlZWtkYXkgICAgPSBnZXRTZXRMb2NhbGVEYXlPZldlZWs7XG5wcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrO1xucHJvdG8uZGF5T2ZZZWFyICA9IGdldFNldERheU9mWWVhcjtcblxuLy8gSG91clxucHJvdG8uaG91ciA9IHByb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcblxuLy8gTWludXRlXG5wcm90by5taW51dGUgPSBwcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xuXG4vLyBTZWNvbmRcbnByb3RvLnNlY29uZCA9IHByb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmQ7XG5cbi8vIE1pbGxpc2Vjb25kXG5wcm90by5taWxsaXNlY29uZCA9IHByb3RvLm1pbGxpc2Vjb25kcyA9IGdldFNldE1pbGxpc2Vjb25kO1xuXG4vLyBPZmZzZXRcbnByb3RvLnV0Y09mZnNldCAgICAgICAgICAgID0gZ2V0U2V0T2Zmc2V0O1xucHJvdG8udXRjICAgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1VUQztcbnByb3RvLmxvY2FsICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbnByb3RvLnBhcnNlWm9uZSAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQ7XG5wcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0O1xucHJvdG8uaXNEU1QgICAgICAgICAgICAgICAgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbnByb3RvLmlzTG9jYWwgICAgICAgICAgICAgID0gaXNMb2NhbDtcbnByb3RvLmlzVXRjT2Zmc2V0ICAgICAgICAgID0gaXNVdGNPZmZzZXQ7XG5wcm90by5pc1V0YyAgICAgICAgICAgICAgICA9IGlzVXRjO1xucHJvdG8uaXNVVEMgICAgICAgICAgICAgICAgPSBpc1V0YztcblxuLy8gVGltZXpvbmVcbnByb3RvLnpvbmVBYmJyID0gZ2V0Wm9uZUFiYnI7XG5wcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuXG4vLyBEZXByZWNhdGlvbnNcbnByb3RvLmRhdGVzICA9IGRlcHJlY2F0ZSgnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLCBnZXRTZXREYXlPZk1vbnRoKTtcbnByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZSgnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJywgZ2V0U2V0TW9udGgpO1xucHJvdG8ueWVhcnMgID0gZGVwcmVjYXRlKCd5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkJywgZ2V0U2V0WWVhcik7XG5wcm90by56b25lICAgPSBkZXByZWNhdGUoJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJywgZ2V0U2V0Wm9uZSk7XG5wcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLCBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQpO1xuXG5mdW5jdGlvbiBjcmVhdGVVbml4IChpbnB1dCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJblpvbmUgKCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpO1xufVxuXG5mdW5jdGlvbiBwcmVQYXJzZVBvc3RGb3JtYXQgKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBwcm90byQxID0gTG9jYWxlLnByb3RvdHlwZTtcblxucHJvdG8kMS5jYWxlbmRhciAgICAgICAgPSBjYWxlbmRhcjtcbnByb3RvJDEubG9uZ0RhdGVGb3JtYXQgID0gbG9uZ0RhdGVGb3JtYXQ7XG5wcm90byQxLmludmFsaWREYXRlICAgICA9IGludmFsaWREYXRlO1xucHJvdG8kMS5vcmRpbmFsICAgICAgICAgPSBvcmRpbmFsO1xucHJvdG8kMS5wcmVwYXJzZSAgICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG5wcm90byQxLnBvc3Rmb3JtYXQgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbnByb3RvJDEucmVsYXRpdmVUaW1lICAgID0gcmVsYXRpdmVUaW1lO1xucHJvdG8kMS5wYXN0RnV0dXJlICAgICAgPSBwYXN0RnV0dXJlO1xucHJvdG8kMS5zZXQgICAgICAgICAgICAgPSBzZXQ7XG5cbi8vIE1vbnRoXG5wcm90byQxLm1vbnRocyAgICAgICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRocztcbnByb3RvJDEubW9udGhzU2hvcnQgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzU2hvcnQ7XG5wcm90byQxLm1vbnRoc1BhcnNlICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRoc1BhcnNlO1xucHJvdG8kMS5tb250aHNSZWdleCAgICAgICA9IG1vbnRoc1JlZ2V4O1xucHJvdG8kMS5tb250aHNTaG9ydFJlZ2V4ICA9IG1vbnRoc1Nob3J0UmVnZXg7XG5cbi8vIFdlZWtcbnByb3RvJDEud2VlayA9IGxvY2FsZVdlZWs7XG5wcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG5wcm90byQxLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbi8vIERheSBvZiBXZWVrXG5wcm90byQxLndlZWtkYXlzICAgICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzO1xucHJvdG8kMS53ZWVrZGF5c01pbiAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c01pbjtcbnByb3RvJDEud2Vla2RheXNTaG9ydCAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNTaG9ydDtcbnByb3RvJDEud2Vla2RheXNQYXJzZSAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNQYXJzZTtcblxucHJvdG8kMS53ZWVrZGF5c1JlZ2V4ICAgICAgID0gICAgICAgIHdlZWtkYXlzUmVnZXg7XG5wcm90byQxLndlZWtkYXlzU2hvcnRSZWdleCAgPSAgICAgICAgd2Vla2RheXNTaG9ydFJlZ2V4O1xucHJvdG8kMS53ZWVrZGF5c01pblJlZ2V4ICAgID0gICAgICAgIHdlZWtkYXlzTWluUmVnZXg7XG5cbi8vIEhvdXJzXG5wcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNO1xucHJvdG8kMS5tZXJpZGllbSA9IGxvY2FsZU1lcmlkaWVtO1xuXG5mdW5jdGlvbiBnZXQkMSAoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKTtcbiAgICB2YXIgdXRjID0gY3JlYXRlVVRDKCkuc2V0KHNldHRlciwgaW5kZXgpO1xuICAgIHJldHVybiBsb2NhbGVbZmllbGRdKHV0YywgZm9ybWF0KTtcbn1cblxuZnVuY3Rpb24gbGlzdE1vbnRoc0ltcGwgKGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsICdtb250aCcpO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBvdXQgPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIGksIGZpZWxkLCAnbW9udGgnKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLy8gKClcbi8vICg1KVxuLy8gKGZtdCwgNSlcbi8vIChmbXQpXG4vLyAodHJ1ZSlcbi8vICh0cnVlLCA1KVxuLy8gKHRydWUsIGZtdCwgNSlcbi8vICh0cnVlLCBmbXQpXG5mdW5jdGlvbiBsaXN0V2Vla2RheXNJbXBsIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgaWYgKHR5cGVvZiBsb2NhbGVTb3J0ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9ybWF0ID0gbG9jYWxlU29ydGVkO1xuICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgbG9jYWxlU29ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgIH1cblxuICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgc2hpZnQgPSBsb2NhbGVTb3J0ZWQgPyBsb2NhbGUuX3dlZWsuZG93IDogMDtcblxuICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIG91dCA9IFtdO1xuICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCAoaSArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIGxpc3RNb250aHMgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRocycpO1xufVxuXG5mdW5jdGlvbiBsaXN0TW9udGhzU2hvcnQgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRoc1Nob3J0Jyk7XG59XG5cbmZ1bmN0aW9uIGxpc3RXZWVrZGF5cyAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnKTtcbn1cblxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzU2hvcnQgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnKTtcbn1cblxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzTWluIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c01pbicpO1xufVxuXG5nZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICBvdXRwdXQgPSAodG9JbnQobnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgIH1cbn0pO1xuXG4vLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5ob29rcy5sYW5nID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsIGdldFNldEdsb2JhbExvY2FsZSk7XG5ob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsIGdldExvY2FsZSk7XG5cbnZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbmZ1bmN0aW9uIGFicyAoKSB7XG4gICAgdmFyIGRhdGEgICAgICAgICAgID0gdGhpcy5fZGF0YTtcblxuICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKTtcbiAgICB0aGlzLl9kYXlzICAgICAgICAgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgIHRoaXMuX21vbnRocyAgICAgICA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgIGRhdGEubWlsbGlzZWNvbmRzICA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpO1xuICAgIGRhdGEuc2Vjb25kcyAgICAgICA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICBkYXRhLm1pbnV0ZXMgICAgICAgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgZGF0YS5ob3VycyAgICAgICAgID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICBkYXRhLm1vbnRocyAgICAgICAgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICBkYXRhLnllYXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEgKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgIHZhciBvdGhlciA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgZHVyYXRpb24uX2RheXMgICAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICBkdXJhdGlvbi5fbW9udGhzICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xufVxuXG4vLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG5mdW5jdGlvbiBhZGQkMSAoaW5wdXQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAxKTtcbn1cblxuLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbmZ1bmN0aW9uIHN1YnRyYWN0JDEgKGlucHV0LCB2YWx1ZSkge1xuICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpO1xufVxuXG5mdW5jdGlvbiBhYnNDZWlsIChudW1iZXIpIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJ1YmJsZSAoKSB7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcbiAgICB2YXIgZGF5cyAgICAgICAgID0gdGhpcy5fZGF5cztcbiAgICB2YXIgbW9udGhzICAgICAgID0gdGhpcy5fbW9udGhzO1xuICAgIHZhciBkYXRhICAgICAgICAgPSB0aGlzLl9kYXRhO1xuICAgIHZhciBzZWNvbmRzLCBtaW51dGVzLCBob3VycywgeWVhcnMsIG1vbnRoc0Zyb21EYXlzO1xuXG4gICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgIGlmICghKChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAobWlsbGlzZWNvbmRzIDw9IDAgJiYgZGF5cyA8PSAwICYmIG1vbnRocyA8PSAwKSkpIHtcbiAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgbW9udGhzID0gMDtcbiAgICB9XG5cbiAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgIHNlY29uZHMgICAgICAgICAgID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgZGF0YS5zZWNvbmRzICAgICAgPSBzZWNvbmRzICUgNjA7XG5cbiAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgZGF0YS5taW51dGVzICAgICAgPSBtaW51dGVzICUgNjA7XG5cbiAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgZGF0YS5ob3VycyAgICAgICAgPSBob3VycyAlIDI0O1xuXG4gICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICBtb250aHNGcm9tRGF5cyA9IGFic0Zsb29yKGRheXNUb01vbnRocyhkYXlzKSk7XG4gICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICBtb250aHMgJT0gMTI7XG5cbiAgICBkYXRhLmRheXMgICA9IGRheXM7XG4gICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgZGF0YS55ZWFycyAgPSB5ZWFycztcblxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkYXlzVG9Nb250aHMgKGRheXMpIHtcbiAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgLy8gNDAwIHllYXJzIGhhdmUgMTIgbW9udGhzID09PSA0ODAwXG4gICAgcmV0dXJuIGRheXMgKiA0ODAwIC8gMTQ2MDk3O1xufVxuXG5mdW5jdGlvbiBtb250aHNUb0RheXMgKG1vbnRocykge1xuICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgIHJldHVybiBtb250aHMgKiAxNDYwOTcgLyA0ODAwO1xufVxuXG5mdW5jdGlvbiBhcyAodW5pdHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHZhciBkYXlzO1xuICAgIHZhciBtb250aHM7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcblxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgZGF5cyAgID0gdGhpcy5fZGF5cyAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgcmV0dXJuIHVuaXRzID09PSAnbW9udGgnID8gbW9udGhzIDogbW9udGhzIC8gMTI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJyAgIDogcmV0dXJuIGRheXMgLyA3ICAgICArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgIGNhc2UgJ2RheScgICAgOiByZXR1cm4gZGF5cyAgICAgICAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICBjYXNlICdob3VyJyAgIDogcmV0dXJuIGRheXMgKiAyNCAgICArIG1pbGxpc2Vjb25kcyAvIDM2ZTU7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnIDogcmV0dXJuIGRheXMgKiAxNDQwICArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCcgOiByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZVxuICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOiByZXR1cm4gTWF0aC5mbG9vcihkYXlzICogODY0ZTUpICsgbWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gVE9ETzogVXNlIHRoaXMuYXMoJ21zJyk/XG5mdW5jdGlvbiB2YWx1ZU9mJDEgKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzICtcbiAgICAgICAgdGhpcy5fZGF5cyAqIDg2NGU1ICtcbiAgICAgICAgKHRoaXMuX21vbnRocyAlIDEyKSAqIDI1OTJlNiArXG4gICAgICAgIHRvSW50KHRoaXMuX21vbnRocyAvIDEyKSAqIDMxNTM2ZTZcbiAgICApO1xufVxuXG5mdW5jdGlvbiBtYWtlQXMgKGFsaWFzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgIH07XG59XG5cbnZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKTtcbnZhciBhc1NlY29uZHMgICAgICA9IG1ha2VBcygncycpO1xudmFyIGFzTWludXRlcyAgICAgID0gbWFrZUFzKCdtJyk7XG52YXIgYXNIb3VycyAgICAgICAgPSBtYWtlQXMoJ2gnKTtcbnZhciBhc0RheXMgICAgICAgICA9IG1ha2VBcygnZCcpO1xudmFyIGFzV2Vla3MgICAgICAgID0gbWFrZUFzKCd3Jyk7XG52YXIgYXNNb250aHMgICAgICAgPSBtYWtlQXMoJ00nKTtcbnZhciBhc1llYXJzICAgICAgICA9IG1ha2VBcygneScpO1xuXG5mdW5jdGlvbiBnZXQkMiAodW5pdHMpIHtcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzW3VuaXRzICsgJ3MnXSgpIDogTmFOO1xufVxuXG5mdW5jdGlvbiBtYWtlR2V0dGVyKG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9kYXRhW25hbWVdIDogTmFOO1xuICAgIH07XG59XG5cbnZhciBtaWxsaXNlY29uZHMgPSBtYWtlR2V0dGVyKCdtaWxsaXNlY29uZHMnKTtcbnZhciBzZWNvbmRzICAgICAgPSBtYWtlR2V0dGVyKCdzZWNvbmRzJyk7XG52YXIgbWludXRlcyAgICAgID0gbWFrZUdldHRlcignbWludXRlcycpO1xudmFyIGhvdXJzICAgICAgICA9IG1ha2VHZXR0ZXIoJ2hvdXJzJyk7XG52YXIgZGF5cyAgICAgICAgID0gbWFrZUdldHRlcignZGF5cycpO1xudmFyIG1vbnRocyAgICAgICA9IG1ha2VHZXR0ZXIoJ21vbnRocycpO1xudmFyIHllYXJzICAgICAgICA9IG1ha2VHZXR0ZXIoJ3llYXJzJyk7XG5cbmZ1bmN0aW9uIHdlZWtzICgpIHtcbiAgICByZXR1cm4gYWJzRmxvb3IodGhpcy5kYXlzKCkgLyA3KTtcbn1cblxudmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbnZhciB0aHJlc2hvbGRzID0ge1xuICAgIHNzOiA0NCwgICAgICAgICAvLyBhIGZldyBzZWNvbmRzIHRvIHNlY29uZHNcbiAgICBzIDogNDUsICAgICAgICAgLy8gc2Vjb25kcyB0byBtaW51dGVcbiAgICBtIDogNDUsICAgICAgICAgLy8gbWludXRlcyB0byBob3VyXG4gICAgaCA6IDIyLCAgICAgICAgIC8vIGhvdXJzIHRvIGRheVxuICAgIGQgOiAyNiwgICAgICAgICAvLyBkYXlzIHRvIG1vbnRoXG4gICAgTSA6IDExICAgICAgICAgIC8vIG1vbnRocyB0byB5ZWFyXG59O1xuXG4vLyBoZWxwZXIgZnVuY3Rpb24gZm9yIG1vbWVudC5mbi5mcm9tLCBtb21lbnQuZm4uZnJvbU5vdywgYW5kIG1vbWVudC5kdXJhdGlvbi5mbi5odW1hbml6ZVxuZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oc3RyaW5nLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGlzRnV0dXJlLCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLnJlbGF0aXZlVGltZShudW1iZXIgfHwgMSwgISF3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKTtcbn1cblxuZnVuY3Rpb24gcmVsYXRpdmVUaW1lJDEgKHBvc05lZ0R1cmF0aW9uLCB3aXRob3V0U3VmZml4LCBsb2NhbGUpIHtcbiAgICB2YXIgZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbihwb3NOZWdEdXJhdGlvbikuYWJzKCk7XG4gICAgdmFyIHNlY29uZHMgID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSk7XG4gICAgdmFyIG1pbnV0ZXMgID0gcm91bmQoZHVyYXRpb24uYXMoJ20nKSk7XG4gICAgdmFyIGhvdXJzICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ2gnKSk7XG4gICAgdmFyIGRheXMgICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ2QnKSk7XG4gICAgdmFyIG1vbnRocyAgID0gcm91bmQoZHVyYXRpb24uYXMoJ00nKSk7XG4gICAgdmFyIHllYXJzICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ3knKSk7XG5cbiAgICB2YXIgYSA9IHNlY29uZHMgPD0gdGhyZXNob2xkcy5zcyAmJiBbJ3MnLCBzZWNvbmRzXSAgfHxcbiAgICAgICAgICAgIHNlY29uZHMgPCB0aHJlc2hvbGRzLnMgICAmJiBbJ3NzJywgc2Vjb25kc10gfHxcbiAgICAgICAgICAgIG1pbnV0ZXMgPD0gMSAgICAgICAgICAgICAmJiBbJ20nXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgIG1pbnV0ZXMgPCB0aHJlc2hvbGRzLm0gICAmJiBbJ21tJywgbWludXRlc10gfHxcbiAgICAgICAgICAgIGhvdXJzICAgPD0gMSAgICAgICAgICAgICAmJiBbJ2gnXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgIGhvdXJzICAgPCB0aHJlc2hvbGRzLmggICAmJiBbJ2hoJywgaG91cnNdICAgfHxcbiAgICAgICAgICAgIGRheXMgICAgPD0gMSAgICAgICAgICAgICAmJiBbJ2QnXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgIGRheXMgICAgPCB0aHJlc2hvbGRzLmQgICAmJiBbJ2RkJywgZGF5c10gICAgfHxcbiAgICAgICAgICAgIG1vbnRocyAgPD0gMSAgICAgICAgICAgICAmJiBbJ00nXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgIG1vbnRocyAgPCB0aHJlc2hvbGRzLk0gICAmJiBbJ01NJywgbW9udGhzXSAgfHxcbiAgICAgICAgICAgIHllYXJzICAgPD0gMSAgICAgICAgICAgICAmJiBbJ3knXSAgICAgICAgICAgfHwgWyd5eScsIHllYXJzXTtcblxuICAgIGFbMl0gPSB3aXRob3V0U3VmZml4O1xuICAgIGFbM10gPSArcG9zTmVnRHVyYXRpb24gPiAwO1xuICAgIGFbNF0gPSBsb2NhbGU7XG4gICAgcmV0dXJuIHN1YnN0aXR1dGVUaW1lQWdvLmFwcGx5KG51bGwsIGEpO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IHRoZSByb3VuZGluZyBmdW5jdGlvbiBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG5mdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZyAocm91bmRpbmdGdW5jdGlvbikge1xuICAgIGlmIChyb3VuZGluZ0Z1bmN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJvdW5kO1xuICAgIH1cbiAgICBpZiAodHlwZW9mKHJvdW5kaW5nRnVuY3Rpb24pID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJvdW5kID0gcm91bmRpbmdGdW5jdGlvbjtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCBhIHRocmVzaG9sZCBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG5mdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQgKHRocmVzaG9sZCwgbGltaXQpIHtcbiAgICBpZiAodGhyZXNob2xkc1t0aHJlc2hvbGRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAobGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhyZXNob2xkc1t0aHJlc2hvbGRdO1xuICAgIH1cbiAgICB0aHJlc2hvbGRzW3RocmVzaG9sZF0gPSBsaW1pdDtcbiAgICBpZiAodGhyZXNob2xkID09PSAncycpIHtcbiAgICAgICAgdGhyZXNob2xkcy5zcyA9IGxpbWl0IC0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGh1bWFuaXplICh3aXRoU3VmZml4KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICB9XG5cbiAgICB2YXIgbG9jYWxlID0gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgdmFyIG91dHB1dCA9IHJlbGF0aXZlVGltZSQxKHRoaXMsICF3aXRoU3VmZml4LCBsb2NhbGUpO1xuXG4gICAgaWYgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgb3V0cHV0ID0gbG9jYWxlLnBhc3RGdXR1cmUoK3RoaXMsIG91dHB1dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvY2FsZS5wb3N0Zm9ybWF0KG91dHB1dCk7XG59XG5cbnZhciBhYnMkMSA9IE1hdGguYWJzO1xuXG5mdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIHNlY29uZHMgPSBhYnMkMSh0aGlzLl9taWxsaXNlY29uZHMpIC8gMTAwMDtcbiAgICB2YXIgZGF5cyAgICAgICAgID0gYWJzJDEodGhpcy5fZGF5cyk7XG4gICAgdmFyIG1vbnRocyAgICAgICA9IGFicyQxKHRoaXMuX21vbnRocyk7XG4gICAgdmFyIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycztcblxuICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgc2Vjb25kcyAlPSA2MDtcbiAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgIHllYXJzICA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICBtb250aHMgJT0gMTI7XG5cblxuICAgIC8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9kb3JkaWxsZS9tb21lbnQtaXNvZHVyYXRpb24vYmxvYi9tYXN0ZXIvbW9tZW50Lmlzb2R1cmF0aW9uLmpzXG4gICAgdmFyIFkgPSB5ZWFycztcbiAgICB2YXIgTSA9IG1vbnRocztcbiAgICB2YXIgRCA9IGRheXM7XG4gICAgdmFyIGggPSBob3VycztcbiAgICB2YXIgbSA9IG1pbnV0ZXM7XG4gICAgdmFyIHMgPSBzZWNvbmRzO1xuICAgIHZhciB0b3RhbCA9IHRoaXMuYXNTZWNvbmRzKCk7XG5cbiAgICBpZiAoIXRvdGFsKSB7XG4gICAgICAgIC8vIHRoaXMgaXMgdGhlIHNhbWUgYXMgQyMncyAoTm9kYSkgYW5kIHB5dGhvbiAoaXNvZGF0ZSkuLi5cbiAgICAgICAgLy8gYnV0IG5vdCBvdGhlciBKUyAoZ29vZy5kYXRlKVxuICAgICAgICByZXR1cm4gJ1AwRCc7XG4gICAgfVxuXG4gICAgcmV0dXJuICh0b3RhbCA8IDAgPyAnLScgOiAnJykgK1xuICAgICAgICAnUCcgK1xuICAgICAgICAoWSA/IFkgKyAnWScgOiAnJykgK1xuICAgICAgICAoTSA/IE0gKyAnTScgOiAnJykgK1xuICAgICAgICAoRCA/IEQgKyAnRCcgOiAnJykgK1xuICAgICAgICAoKGggfHwgbSB8fCBzKSA/ICdUJyA6ICcnKSArXG4gICAgICAgIChoID8gaCArICdIJyA6ICcnKSArXG4gICAgICAgIChtID8gbSArICdNJyA6ICcnKSArXG4gICAgICAgIChzID8gcyArICdTJyA6ICcnKTtcbn1cblxudmFyIHByb3RvJDIgPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbnByb3RvJDIuaXNWYWxpZCAgICAgICAgPSBpc1ZhbGlkJDE7XG5wcm90byQyLmFicyAgICAgICAgICAgID0gYWJzO1xucHJvdG8kMi5hZGQgICAgICAgICAgICA9IGFkZCQxO1xucHJvdG8kMi5zdWJ0cmFjdCAgICAgICA9IHN1YnRyYWN0JDE7XG5wcm90byQyLmFzICAgICAgICAgICAgID0gYXM7XG5wcm90byQyLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG5wcm90byQyLmFzU2Vjb25kcyAgICAgID0gYXNTZWNvbmRzO1xucHJvdG8kMi5hc01pbnV0ZXMgICAgICA9IGFzTWludXRlcztcbnByb3RvJDIuYXNIb3VycyAgICAgICAgPSBhc0hvdXJzO1xucHJvdG8kMi5hc0RheXMgICAgICAgICA9IGFzRGF5cztcbnByb3RvJDIuYXNXZWVrcyAgICAgICAgPSBhc1dlZWtzO1xucHJvdG8kMi5hc01vbnRocyAgICAgICA9IGFzTW9udGhzO1xucHJvdG8kMi5hc1llYXJzICAgICAgICA9IGFzWWVhcnM7XG5wcm90byQyLnZhbHVlT2YgICAgICAgID0gdmFsdWVPZiQxO1xucHJvdG8kMi5fYnViYmxlICAgICAgICA9IGJ1YmJsZTtcbnByb3RvJDIuZ2V0ICAgICAgICAgICAgPSBnZXQkMjtcbnByb3RvJDIubWlsbGlzZWNvbmRzICAgPSBtaWxsaXNlY29uZHM7XG5wcm90byQyLnNlY29uZHMgICAgICAgID0gc2Vjb25kcztcbnByb3RvJDIubWludXRlcyAgICAgICAgPSBtaW51dGVzO1xucHJvdG8kMi5ob3VycyAgICAgICAgICA9IGhvdXJzO1xucHJvdG8kMi5kYXlzICAgICAgICAgICA9IGRheXM7XG5wcm90byQyLndlZWtzICAgICAgICAgID0gd2Vla3M7XG5wcm90byQyLm1vbnRocyAgICAgICAgID0gbW9udGhzO1xucHJvdG8kMi55ZWFycyAgICAgICAgICA9IHllYXJzO1xucHJvdG8kMi5odW1hbml6ZSAgICAgICA9IGh1bWFuaXplO1xucHJvdG8kMi50b0lTT1N0cmluZyAgICA9IHRvSVNPU3RyaW5nJDE7XG5wcm90byQyLnRvU3RyaW5nICAgICAgID0gdG9JU09TdHJpbmckMTtcbnByb3RvJDIudG9KU09OICAgICAgICAgPSB0b0lTT1N0cmluZyQxO1xucHJvdG8kMi5sb2NhbGUgICAgICAgICA9IGxvY2FsZTtcbnByb3RvJDIubG9jYWxlRGF0YSAgICAgPSBsb2NhbGVEYXRhO1xuXG4vLyBEZXByZWNhdGlvbnNcbnByb3RvJDIudG9Jc29TdHJpbmcgPSBkZXByZWNhdGUoJ3RvSXNvU3RyaW5nKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0b0lTT1N0cmluZygpIGluc3RlYWQgKG5vdGljZSB0aGUgY2FwaXRhbHMpJywgdG9JU09TdHJpbmckMSk7XG5wcm90byQyLmxhbmcgPSBsYW5nO1xuXG4vLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpO1xuYWRkRm9ybWF0VG9rZW4oJ3gnLCAwLCAwLCAndmFsdWVPZicpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCdYJywgbWF0Y2hUaW1lc3RhbXApO1xuYWRkUGFyc2VUb2tlbignWCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHBhcnNlRmxvYXQoaW5wdXQsIDEwKSAqIDEwMDApO1xufSk7XG5hZGRQYXJzZVRva2VuKCd4JywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKTtcbn0pO1xuXG4vLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cblxuaG9va3MudmVyc2lvbiA9ICcyLjE4LjEnO1xuXG5zZXRIb29rQ2FsbGJhY2soY3JlYXRlTG9jYWwpO1xuXG5ob29rcy5mbiAgICAgICAgICAgICAgICAgICAgPSBwcm90bztcbmhvb2tzLm1pbiAgICAgICAgICAgICAgICAgICA9IG1pbjtcbmhvb2tzLm1heCAgICAgICAgICAgICAgICAgICA9IG1heDtcbmhvb2tzLm5vdyAgICAgICAgICAgICAgICAgICA9IG5vdztcbmhvb2tzLnV0YyAgICAgICAgICAgICAgICAgICA9IGNyZWF0ZVVUQztcbmhvb2tzLnVuaXggICAgICAgICAgICAgICAgICA9IGNyZWF0ZVVuaXg7XG5ob29rcy5tb250aHMgICAgICAgICAgICAgICAgPSBsaXN0TW9udGhzO1xuaG9va3MuaXNEYXRlICAgICAgICAgICAgICAgID0gaXNEYXRlO1xuaG9va3MubG9jYWxlICAgICAgICAgICAgICAgID0gZ2V0U2V0R2xvYmFsTG9jYWxlO1xuaG9va3MuaW52YWxpZCAgICAgICAgICAgICAgID0gY3JlYXRlSW52YWxpZDtcbmhvb2tzLmR1cmF0aW9uICAgICAgICAgICAgICA9IGNyZWF0ZUR1cmF0aW9uO1xuaG9va3MuaXNNb21lbnQgICAgICAgICAgICAgID0gaXNNb21lbnQ7XG5ob29rcy53ZWVrZGF5cyAgICAgICAgICAgICAgPSBsaXN0V2Vla2RheXM7XG5ob29rcy5wYXJzZVpvbmUgICAgICAgICAgICAgPSBjcmVhdGVJblpvbmU7XG5ob29rcy5sb2NhbGVEYXRhICAgICAgICAgICAgPSBnZXRMb2NhbGU7XG5ob29rcy5pc0R1cmF0aW9uICAgICAgICAgICAgPSBpc0R1cmF0aW9uO1xuaG9va3MubW9udGhzU2hvcnQgICAgICAgICAgID0gbGlzdE1vbnRoc1Nob3J0O1xuaG9va3Mud2Vla2RheXNNaW4gICAgICAgICAgID0gbGlzdFdlZWtkYXlzTWluO1xuaG9va3MuZGVmaW5lTG9jYWxlICAgICAgICAgID0gZGVmaW5lTG9jYWxlO1xuaG9va3MudXBkYXRlTG9jYWxlICAgICAgICAgID0gdXBkYXRlTG9jYWxlO1xuaG9va3MubG9jYWxlcyAgICAgICAgICAgICAgID0gbGlzdExvY2FsZXM7XG5ob29rcy53ZWVrZGF5c1Nob3J0ICAgICAgICAgPSBsaXN0V2Vla2RheXNTaG9ydDtcbmhvb2tzLm5vcm1hbGl6ZVVuaXRzICAgICAgICA9IG5vcm1hbGl6ZVVuaXRzO1xuaG9va3MucmVsYXRpdmVUaW1lUm91bmRpbmcgPSBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZztcbmhvb2tzLnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZDtcbmhvb2tzLmNhbGVuZGFyRm9ybWF0ICAgICAgICA9IGdldENhbGVuZGFyRm9ybWF0O1xuaG9va3MucHJvdG90eXBlICAgICAgICAgICAgID0gcHJvdG87XG5cbnJldHVybiBob29rcztcblxufSkpKTtcbiIsIi8qIVxuICogUGlrYWRheVxuICpcbiAqIENvcHlyaWdodCDCqSAyMDE0IERhdmlkIEJ1c2hlbGwgfCBCU0QgJiBNSVQgbGljZW5zZSB8IGh0dHBzOi8vZ2l0aHViLmNvbS9kYnVzaGVsbC9QaWthZGF5XG4gKi9cblxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KVxue1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBtb21lbnQ7XG4gICAgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBDb21tb25KUyBtb2R1bGVcbiAgICAgICAgLy8gTG9hZCBtb21lbnQuanMgYXMgYW4gb3B0aW9uYWwgZGVwZW5kZW5jeVxuICAgICAgICB0cnkgeyBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTsgfSBjYXRjaCAoZSkge31cbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KG1vbWVudCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoZnVuY3Rpb24gKHJlcSlcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gTG9hZCBtb21lbnQuanMgYXMgYW4gb3B0aW9uYWwgZGVwZW5kZW5jeVxuICAgICAgICAgICAgdmFyIGlkID0gJ21vbWVudCc7XG4gICAgICAgICAgICB0cnkgeyBtb21lbnQgPSByZXEoaWQpOyB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgcmV0dXJuIGZhY3RvcnkobW9tZW50KTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5QaWthZGF5ID0gZmFjdG9yeShyb290Lm1vbWVudCk7XG4gICAgfVxufSh0aGlzLCBmdW5jdGlvbiAobW9tZW50KVxue1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qKlxuICAgICAqIGZlYXR1cmUgZGV0ZWN0aW9uIGFuZCBoZWxwZXIgZnVuY3Rpb25zXG4gICAgICovXG4gICAgdmFyIGhhc01vbWVudCA9IHR5cGVvZiBtb21lbnQgPT09ICdmdW5jdGlvbicsXG5cbiAgICBoYXNFdmVudExpc3RlbmVycyA9ICEhd2luZG93LmFkZEV2ZW50TGlzdGVuZXIsXG5cbiAgICBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCxcblxuICAgIHN0byA9IHdpbmRvdy5zZXRUaW1lb3V0LFxuXG4gICAgYWRkRXZlbnQgPSBmdW5jdGlvbihlbCwgZSwgY2FsbGJhY2ssIGNhcHR1cmUpXG4gICAge1xuICAgICAgICBpZiAoaGFzRXZlbnRMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZSwgY2FsbGJhY2ssICEhY2FwdHVyZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbC5hdHRhY2hFdmVudCgnb24nICsgZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oZWwsIGUsIGNhbGxiYWNrLCBjYXB0dXJlKVxuICAgIHtcbiAgICAgICAgaWYgKGhhc0V2ZW50TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGUsIGNhbGxiYWNrLCAhIWNhcHR1cmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuZGV0YWNoRXZlbnQoJ29uJyArIGUsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB0cmltID0gZnVuY3Rpb24oc3RyKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHN0ci50cmltID8gc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCcnKTtcbiAgICB9LFxuXG4gICAgaGFzQ2xhc3MgPSBmdW5jdGlvbihlbCwgY24pXG4gICAge1xuICAgICAgICByZXR1cm4gKCcgJyArIGVsLmNsYXNzTmFtZSArICcgJykuaW5kZXhPZignICcgKyBjbiArICcgJykgIT09IC0xO1xuICAgIH0sXG5cbiAgICBhZGRDbGFzcyA9IGZ1bmN0aW9uKGVsLCBjbilcbiAgICB7XG4gICAgICAgIGlmICghaGFzQ2xhc3MoZWwsIGNuKSkge1xuICAgICAgICAgICAgZWwuY2xhc3NOYW1lID0gKGVsLmNsYXNzTmFtZSA9PT0gJycpID8gY24gOiBlbC5jbGFzc05hbWUgKyAnICcgKyBjbjtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uKGVsLCBjbilcbiAgICB7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IHRyaW0oKCcgJyArIGVsLmNsYXNzTmFtZSArICcgJykucmVwbGFjZSgnICcgKyBjbiArICcgJywgJyAnKSk7XG4gICAgfSxcblxuICAgIGlzQXJyYXkgPSBmdW5jdGlvbihvYmopXG4gICAge1xuICAgICAgICByZXR1cm4gKC9BcnJheS8pLnRlc3QoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikpO1xuICAgIH0sXG5cbiAgICBpc0RhdGUgPSBmdW5jdGlvbihvYmopXG4gICAge1xuICAgICAgICByZXR1cm4gKC9EYXRlLykudGVzdChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgJiYgIWlzTmFOKG9iai5nZXRUaW1lKCkpO1xuICAgIH0sXG5cbiAgICBpc1dlZWtlbmQgPSBmdW5jdGlvbihkYXRlKVxuICAgIHtcbiAgICAgICAgdmFyIGRheSA9IGRhdGUuZ2V0RGF5KCk7XG4gICAgICAgIHJldHVybiBkYXkgPT09IDAgfHwgZGF5ID09PSA2O1xuICAgIH0sXG5cbiAgICBpc0xlYXBZZWFyID0gZnVuY3Rpb24oeWVhcilcbiAgICB7XG4gICAgICAgIC8vIHNvbHV0aW9uIGJ5IE1hdHRpIFZpcmtrdW5lbjogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDg4MTk1MVxuICAgICAgICByZXR1cm4geWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCB8fCB5ZWFyICUgNDAwID09PSAwO1xuICAgIH0sXG5cbiAgICBnZXREYXlzSW5Nb250aCA9IGZ1bmN0aW9uKHllYXIsIG1vbnRoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIFszMSwgaXNMZWFwWWVhcih5ZWFyKSA/IDI5IDogMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXVttb250aF07XG4gICAgfSxcblxuICAgIHNldFRvU3RhcnRPZkRheSA9IGZ1bmN0aW9uKGRhdGUpXG4gICAge1xuICAgICAgICBpZiAoaXNEYXRlKGRhdGUpKSBkYXRlLnNldEhvdXJzKDAsMCwwLDApO1xuICAgIH0sXG5cbiAgICBjb21wYXJlRGF0ZXMgPSBmdW5jdGlvbihhLGIpXG4gICAge1xuICAgICAgICAvLyB3ZWFrIGRhdGUgY29tcGFyaXNvbiAodXNlIHNldFRvU3RhcnRPZkRheShkYXRlKSB0byBlbnN1cmUgY29ycmVjdCByZXN1bHQpXG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKCk7XG4gICAgfSxcblxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKHRvLCBmcm9tLCBvdmVyd3JpdGUpXG4gICAge1xuICAgICAgICB2YXIgcHJvcCwgaGFzUHJvcDtcbiAgICAgICAgZm9yIChwcm9wIGluIGZyb20pIHtcbiAgICAgICAgICAgIGhhc1Byb3AgPSB0b1twcm9wXSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKGhhc1Byb3AgJiYgdHlwZW9mIGZyb21bcHJvcF0gPT09ICdvYmplY3QnICYmIGZyb21bcHJvcF0gIT09IG51bGwgJiYgZnJvbVtwcm9wXS5ub2RlTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzRGF0ZShmcm9tW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3ZlcndyaXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b1twcm9wXSA9IG5ldyBEYXRlKGZyb21bcHJvcF0uZ2V0VGltZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0FycmF5KGZyb21bcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvdmVyd3JpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvW3Byb3BdID0gZnJvbVtwcm9wXS5zbGljZSgwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvW3Byb3BdID0gZXh0ZW5kKHt9LCBmcm9tW3Byb3BdLCBvdmVyd3JpdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3ZlcndyaXRlIHx8ICFoYXNQcm9wKSB7XG4gICAgICAgICAgICAgICAgdG9bcHJvcF0gPSBmcm9tW3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9LFxuXG4gICAgZmlyZUV2ZW50ID0gZnVuY3Rpb24oZWwsIGV2ZW50TmFtZSwgZGF0YSlcbiAgICB7XG4gICAgICAgIHZhciBldjtcblxuICAgICAgICBpZiAoZG9jdW1lbnQuY3JlYXRlRXZlbnQpIHtcbiAgICAgICAgICAgIGV2ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgICAgICAgICAgIGV2LmluaXRFdmVudChldmVudE5hbWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgIGV2ID0gZXh0ZW5kKGV2LCBkYXRhKTtcbiAgICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQoZXYpO1xuICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KSB7XG4gICAgICAgICAgICBldiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KCk7XG4gICAgICAgICAgICBldiA9IGV4dGVuZChldiwgZGF0YSk7XG4gICAgICAgICAgICBlbC5maXJlRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgZXYpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGFkanVzdENhbGVuZGFyID0gZnVuY3Rpb24oY2FsZW5kYXIpIHtcbiAgICAgICAgaWYgKGNhbGVuZGFyLm1vbnRoIDwgMCkge1xuICAgICAgICAgICAgY2FsZW5kYXIueWVhciAtPSBNYXRoLmNlaWwoTWF0aC5hYnMoY2FsZW5kYXIubW9udGgpLzEyKTtcbiAgICAgICAgICAgIGNhbGVuZGFyLm1vbnRoICs9IDEyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxlbmRhci5tb250aCA+IDExKSB7XG4gICAgICAgICAgICBjYWxlbmRhci55ZWFyICs9IE1hdGguZmxvb3IoTWF0aC5hYnMoY2FsZW5kYXIubW9udGgpLzEyKTtcbiAgICAgICAgICAgIGNhbGVuZGFyLm1vbnRoIC09IDEyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWxlbmRhcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZGVmYXVsdHMgYW5kIGxvY2FsaXNhdGlvblxuICAgICAqL1xuICAgIGRlZmF1bHRzID0ge1xuXG4gICAgICAgIC8vIGJpbmQgdGhlIHBpY2tlciB0byBhIGZvcm0gZmllbGRcbiAgICAgICAgZmllbGQ6IG51bGwsXG5cbiAgICAgICAgLy8gYXV0b21hdGljYWxseSBzaG93L2hpZGUgdGhlIHBpY2tlciBvbiBgZmllbGRgIGZvY3VzIChkZWZhdWx0IGB0cnVlYCBpZiBgZmllbGRgIGlzIHNldClcbiAgICAgICAgYm91bmQ6IHVuZGVmaW5lZCxcblxuICAgICAgICAvLyBwb3NpdGlvbiBvZiB0aGUgZGF0ZXBpY2tlciwgcmVsYXRpdmUgdG8gdGhlIGZpZWxkIChkZWZhdWx0IHRvIGJvdHRvbSAmIGxlZnQpXG4gICAgICAgIC8vICgnYm90dG9tJyAmICdsZWZ0JyBrZXl3b3JkcyBhcmUgbm90IHVzZWQsICd0b3AnICYgJ3JpZ2h0JyBhcmUgbW9kaWZpZXIgb24gdGhlIGJvdHRvbS9sZWZ0IHBvc2l0aW9uKVxuICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbSBsZWZ0JyxcblxuICAgICAgICAvLyBhdXRvbWF0aWNhbGx5IGZpdCBpbiB0aGUgdmlld3BvcnQgZXZlbiBpZiBpdCBtZWFucyByZXBvc2l0aW9uaW5nIGZyb20gdGhlIHBvc2l0aW9uIG9wdGlvblxuICAgICAgICByZXBvc2l0aW9uOiB0cnVlLFxuXG4gICAgICAgIC8vIHRoZSBkZWZhdWx0IG91dHB1dCBmb3JtYXQgZm9yIGAudG9TdHJpbmcoKWAgYW5kIGBmaWVsZGAgdmFsdWVcbiAgICAgICAgZm9ybWF0OiAnWVlZWS1NTS1ERCcsXG5cbiAgICAgICAgLy8gdGhlIHRvU3RyaW5nIGZ1bmN0aW9uIHdoaWNoIGdldHMgcGFzc2VkIGEgY3VycmVudCBkYXRlIG9iamVjdCBhbmQgZm9ybWF0XG4gICAgICAgIC8vIGFuZCByZXR1cm5zIGEgc3RyaW5nXG4gICAgICAgIHRvU3RyaW5nOiBudWxsLFxuXG4gICAgICAgIC8vIHVzZWQgdG8gY3JlYXRlIGRhdGUgb2JqZWN0IGZyb20gY3VycmVudCBpbnB1dCBzdHJpbmdcbiAgICAgICAgcGFyc2U6IG51bGwsXG5cbiAgICAgICAgLy8gdGhlIGluaXRpYWwgZGF0ZSB0byB2aWV3IHdoZW4gZmlyc3Qgb3BlbmVkXG4gICAgICAgIGRlZmF1bHREYXRlOiBudWxsLFxuXG4gICAgICAgIC8vIG1ha2UgdGhlIGBkZWZhdWx0RGF0ZWAgdGhlIGluaXRpYWwgc2VsZWN0ZWQgdmFsdWVcbiAgICAgICAgc2V0RGVmYXVsdERhdGU6IGZhbHNlLFxuXG4gICAgICAgIC8vIGZpcnN0IGRheSBvZiB3ZWVrICgwOiBTdW5kYXksIDE6IE1vbmRheSBldGMpXG4gICAgICAgIGZpcnN0RGF5OiAwLFxuXG4gICAgICAgIC8vIHRoZSBkZWZhdWx0IGZsYWcgZm9yIG1vbWVudCdzIHN0cmljdCBkYXRlIHBhcnNpbmdcbiAgICAgICAgZm9ybWF0U3RyaWN0OiBmYWxzZSxcblxuICAgICAgICAvLyB0aGUgbWluaW11bS9lYXJsaWVzdCBkYXRlIHRoYXQgY2FuIGJlIHNlbGVjdGVkXG4gICAgICAgIG1pbkRhdGU6IG51bGwsXG4gICAgICAgIC8vIHRoZSBtYXhpbXVtL2xhdGVzdCBkYXRlIHRoYXQgY2FuIGJlIHNlbGVjdGVkXG4gICAgICAgIG1heERhdGU6IG51bGwsXG5cbiAgICAgICAgLy8gbnVtYmVyIG9mIHllYXJzIGVpdGhlciBzaWRlLCBvciBhcnJheSBvZiB1cHBlci9sb3dlciByYW5nZVxuICAgICAgICB5ZWFyUmFuZ2U6IDEwLFxuXG4gICAgICAgIC8vIHNob3cgd2VlayBudW1iZXJzIGF0IGhlYWQgb2Ygcm93XG4gICAgICAgIHNob3dXZWVrTnVtYmVyOiBmYWxzZSxcblxuICAgICAgICAvLyBXZWVrIHBpY2tlciBtb2RlXG4gICAgICAgIHBpY2tXaG9sZVdlZWs6IGZhbHNlLFxuXG4gICAgICAgIC8vIHVzZWQgaW50ZXJuYWxseSAoZG9uJ3QgY29uZmlnIG91dHNpZGUpXG4gICAgICAgIG1pblllYXI6IDAsXG4gICAgICAgIG1heFllYXI6IDk5OTksXG4gICAgICAgIG1pbk1vbnRoOiB1bmRlZmluZWQsXG4gICAgICAgIG1heE1vbnRoOiB1bmRlZmluZWQsXG5cbiAgICAgICAgc3RhcnRSYW5nZTogbnVsbCxcbiAgICAgICAgZW5kUmFuZ2U6IG51bGwsXG5cbiAgICAgICAgaXNSVEw6IGZhbHNlLFxuXG4gICAgICAgIC8vIEFkZGl0aW9uYWwgdGV4dCB0byBhcHBlbmQgdG8gdGhlIHllYXIgaW4gdGhlIGNhbGVuZGFyIHRpdGxlXG4gICAgICAgIHllYXJTdWZmaXg6ICcnLFxuXG4gICAgICAgIC8vIFJlbmRlciB0aGUgbW9udGggYWZ0ZXIgeWVhciBpbiB0aGUgY2FsZW5kYXIgdGl0bGVcbiAgICAgICAgc2hvd01vbnRoQWZ0ZXJZZWFyOiBmYWxzZSxcblxuICAgICAgICAvLyBSZW5kZXIgZGF5cyBvZiB0aGUgY2FsZW5kYXIgZ3JpZCB0aGF0IGZhbGwgaW4gdGhlIG5leHQgb3IgcHJldmlvdXMgbW9udGhcbiAgICAgICAgc2hvd0RheXNJbk5leHRBbmRQcmV2aW91c01vbnRoczogZmFsc2UsXG5cbiAgICAgICAgLy8gQWxsb3dzIHVzZXIgdG8gc2VsZWN0IGRheXMgdGhhdCBmYWxsIGluIHRoZSBuZXh0IG9yIHByZXZpb3VzIG1vbnRoXG4gICAgICAgIGVuYWJsZVNlbGVjdGlvbkRheXNJbk5leHRBbmRQcmV2aW91c01vbnRoczogZmFsc2UsXG5cbiAgICAgICAgLy8gaG93IG1hbnkgbW9udGhzIGFyZSB2aXNpYmxlXG4gICAgICAgIG51bWJlck9mTW9udGhzOiAxLFxuXG4gICAgICAgIC8vIHdoZW4gbnVtYmVyT2ZNb250aHMgaXMgdXNlZCwgdGhpcyB3aWxsIGhlbHAgeW91IHRvIGNob29zZSB3aGVyZSB0aGUgbWFpbiBjYWxlbmRhciB3aWxsIGJlIChkZWZhdWx0IGBsZWZ0YCwgY2FuIGJlIHNldCB0byBgcmlnaHRgKVxuICAgICAgICAvLyBvbmx5IHVzZWQgZm9yIHRoZSBmaXJzdCBkaXNwbGF5IG9yIHdoZW4gYSBzZWxlY3RlZCBkYXRlIGlzIG5vdCB2aXNpYmxlXG4gICAgICAgIG1haW5DYWxlbmRhcjogJ2xlZnQnLFxuXG4gICAgICAgIC8vIFNwZWNpZnkgYSBET00gZWxlbWVudCB0byByZW5kZXIgdGhlIGNhbGVuZGFyIGluXG4gICAgICAgIGNvbnRhaW5lcjogdW5kZWZpbmVkLFxuXG4gICAgICAgIC8vIEJsdXIgZmllbGQgd2hlbiBkYXRlIGlzIHNlbGVjdGVkXG4gICAgICAgIGJsdXJGaWVsZE9uU2VsZWN0IDogdHJ1ZSxcblxuICAgICAgICAvLyBpbnRlcm5hdGlvbmFsaXphdGlvblxuICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICBwcmV2aW91c01vbnRoIDogJ1ByZXZpb3VzIE1vbnRoJyxcbiAgICAgICAgICAgIG5leHRNb250aCAgICAgOiAnTmV4dCBNb250aCcsXG4gICAgICAgICAgICBtb250aHMgICAgICAgIDogWydKYW51YXJ5JywnRmVicnVhcnknLCdNYXJjaCcsJ0FwcmlsJywnTWF5JywnSnVuZScsJ0p1bHknLCdBdWd1c3QnLCdTZXB0ZW1iZXInLCdPY3RvYmVyJywnTm92ZW1iZXInLCdEZWNlbWJlciddLFxuICAgICAgICAgICAgd2Vla2RheXMgICAgICA6IFsnU3VuZGF5JywnTW9uZGF5JywnVHVlc2RheScsJ1dlZG5lc2RheScsJ1RodXJzZGF5JywnRnJpZGF5JywnU2F0dXJkYXknXSxcbiAgICAgICAgICAgIHdlZWtkYXlzU2hvcnQgOiBbJ1N1bicsJ01vbicsJ1R1ZScsJ1dlZCcsJ1RodScsJ0ZyaScsJ1NhdCddXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gVGhlbWUgQ2xhc3NuYW1lXG4gICAgICAgIHRoZW1lOiBudWxsLFxuXG4gICAgICAgIC8vIGV2ZW50cyBhcnJheVxuICAgICAgICBldmVudHM6IFtdLFxuXG4gICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgIG9uU2VsZWN0OiBudWxsLFxuICAgICAgICBvbk9wZW46IG51bGwsXG4gICAgICAgIG9uQ2xvc2U6IG51bGwsXG4gICAgICAgIG9uRHJhdzogbnVsbFxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIHRlbXBsYXRpbmcgZnVuY3Rpb25zIHRvIGFic3RyYWN0IEhUTUwgcmVuZGVyaW5nXG4gICAgICovXG4gICAgcmVuZGVyRGF5TmFtZSA9IGZ1bmN0aW9uKG9wdHMsIGRheSwgYWJicilcbiAgICB7XG4gICAgICAgIGRheSArPSBvcHRzLmZpcnN0RGF5O1xuICAgICAgICB3aGlsZSAoZGF5ID49IDcpIHtcbiAgICAgICAgICAgIGRheSAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhYmJyID8gb3B0cy5pMThuLndlZWtkYXlzU2hvcnRbZGF5XSA6IG9wdHMuaTE4bi53ZWVrZGF5c1tkYXldO1xuICAgIH0sXG5cbiAgICByZW5kZXJEYXkgPSBmdW5jdGlvbihvcHRzKVxuICAgIHtcbiAgICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgICB2YXIgYXJpYVNlbGVjdGVkID0gJ2ZhbHNlJztcbiAgICAgICAgaWYgKG9wdHMuaXNFbXB0eSkge1xuICAgICAgICAgICAgaWYgKG9wdHMuc2hvd0RheXNJbk5leHRBbmRQcmV2aW91c01vbnRocykge1xuICAgICAgICAgICAgICAgIGFyci5wdXNoKCdpcy1vdXRzaWRlLWN1cnJlbnQtbW9udGgnKTtcblxuICAgICAgICAgICAgICAgIGlmKCFvcHRzLmVuYWJsZVNlbGVjdGlvbkRheXNJbk5leHRBbmRQcmV2aW91c01vbnRocykge1xuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaCgnaXMtc2VsZWN0aW9uLWRpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnPHRkIGNsYXNzPVwiaXMtZW1wdHlcIj48L3RkPic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMuaXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgYXJyLnB1c2goJ2lzLWRpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMuaXNUb2RheSkge1xuICAgICAgICAgICAgYXJyLnB1c2goJ2lzLXRvZGF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMuaXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgYXJyLnB1c2goJ2lzLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICBhcmlhU2VsZWN0ZWQgPSAndHJ1ZSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMuaGFzRXZlbnQpIHtcbiAgICAgICAgICAgIGFyci5wdXNoKCdoYXMtZXZlbnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0cy5pc0luUmFuZ2UpIHtcbiAgICAgICAgICAgIGFyci5wdXNoKCdpcy1pbnJhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMuaXNTdGFydFJhbmdlKSB7XG4gICAgICAgICAgICBhcnIucHVzaCgnaXMtc3RhcnRyYW5nZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLmlzRW5kUmFuZ2UpIHtcbiAgICAgICAgICAgIGFyci5wdXNoKCdpcy1lbmRyYW5nZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnPHRkIGRhdGEtZGF5PVwiJyArIG9wdHMuZGF5ICsgJ1wiIGNsYXNzPVwiJyArIGFyci5qb2luKCcgJykgKyAnXCIgYXJpYS1zZWxlY3RlZD1cIicgKyBhcmlhU2VsZWN0ZWQgKyAnXCI+JyArXG4gICAgICAgICAgICAgICAgICc8YnV0dG9uIGNsYXNzPVwicGlrYS1idXR0b24gcGlrYS1kYXlcIiB0eXBlPVwiYnV0dG9uXCIgJyArXG4gICAgICAgICAgICAgICAgICAgICdkYXRhLXBpa2EteWVhcj1cIicgKyBvcHRzLnllYXIgKyAnXCIgZGF0YS1waWthLW1vbnRoPVwiJyArIG9wdHMubW9udGggKyAnXCIgZGF0YS1waWthLWRheT1cIicgKyBvcHRzLmRheSArICdcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuZGF5ICtcbiAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPicgK1xuICAgICAgICAgICAgICAgJzwvdGQ+JztcbiAgICB9LFxuXG4gICAgcmVuZGVyV2VlayA9IGZ1bmN0aW9uIChkLCBtLCB5KSB7XG4gICAgICAgIC8vIExpZnRlZCBmcm9tIGh0dHA6Ly9qYXZhc2NyaXB0LmFib3V0LmNvbS9saWJyYXJ5L2Jsd2Vla3llYXIuaHRtLCBsaWdodGx5IG1vZGlmaWVkLlxuICAgICAgICB2YXIgb25lamFuID0gbmV3IERhdGUoeSwgMCwgMSksXG4gICAgICAgICAgICB3ZWVrTnVtID0gTWF0aC5jZWlsKCgoKG5ldyBEYXRlKHksIG0sIGQpIC0gb25lamFuKSAvIDg2NDAwMDAwKSArIG9uZWphbi5nZXREYXkoKSsxKS83KTtcbiAgICAgICAgcmV0dXJuICc8dGQgY2xhc3M9XCJwaWthLXdlZWtcIj4nICsgd2Vla051bSArICc8L3RkPic7XG4gICAgfSxcblxuICAgIHJlbmRlclJvdyA9IGZ1bmN0aW9uKGRheXMsIGlzUlRMLCBwaWNrV2hvbGVXZWVrLCBpc1Jvd1NlbGVjdGVkKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICc8dHIgY2xhc3M9XCJwaWthLXJvdycgKyAocGlja1dob2xlV2VlayA/ICcgcGljay13aG9sZS13ZWVrJyA6ICcnKSArIChpc1Jvd1NlbGVjdGVkID8gJyBpcy1zZWxlY3RlZCcgOiAnJykgKyAnXCI+JyArIChpc1JUTCA/IGRheXMucmV2ZXJzZSgpIDogZGF5cykuam9pbignJykgKyAnPC90cj4nO1xuICAgIH0sXG5cbiAgICByZW5kZXJCb2R5ID0gZnVuY3Rpb24ocm93cylcbiAgICB7XG4gICAgICAgIHJldHVybiAnPHRib2R5PicgKyByb3dzLmpvaW4oJycpICsgJzwvdGJvZHk+JztcbiAgICB9LFxuXG4gICAgcmVuZGVySGVhZCA9IGZ1bmN0aW9uKG9wdHMpXG4gICAge1xuICAgICAgICB2YXIgaSwgYXJyID0gW107XG4gICAgICAgIGlmIChvcHRzLnNob3dXZWVrTnVtYmVyKSB7XG4gICAgICAgICAgICBhcnIucHVzaCgnPHRoPjwvdGg+Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgYXJyLnB1c2goJzx0aCBzY29wZT1cImNvbFwiPjxhYmJyIHRpdGxlPVwiJyArIHJlbmRlckRheU5hbWUob3B0cywgaSkgKyAnXCI+JyArIHJlbmRlckRheU5hbWUob3B0cywgaSwgdHJ1ZSkgKyAnPC9hYmJyPjwvdGg+Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICc8dGhlYWQ+PHRyPicgKyAob3B0cy5pc1JUTCA/IGFyci5yZXZlcnNlKCkgOiBhcnIpLmpvaW4oJycpICsgJzwvdHI+PC90aGVhZD4nO1xuICAgIH0sXG5cbiAgICByZW5kZXJUaXRsZSA9IGZ1bmN0aW9uKGluc3RhbmNlLCBjLCB5ZWFyLCBtb250aCwgcmVmWWVhciwgcmFuZElkKVxuICAgIHtcbiAgICAgICAgdmFyIGksIGosIGFycixcbiAgICAgICAgICAgIG9wdHMgPSBpbnN0YW5jZS5fbyxcbiAgICAgICAgICAgIGlzTWluWWVhciA9IHllYXIgPT09IG9wdHMubWluWWVhcixcbiAgICAgICAgICAgIGlzTWF4WWVhciA9IHllYXIgPT09IG9wdHMubWF4WWVhcixcbiAgICAgICAgICAgIGh0bWwgPSAnPGRpdiBpZD1cIicgKyByYW5kSWQgKyAnXCIgY2xhc3M9XCJwaWthLXRpdGxlXCIgcm9sZT1cImhlYWRpbmdcIiBhcmlhLWxpdmU9XCJhc3NlcnRpdmVcIj4nLFxuICAgICAgICAgICAgbW9udGhIdG1sLFxuICAgICAgICAgICAgeWVhckh0bWwsXG4gICAgICAgICAgICBwcmV2ID0gdHJ1ZSxcbiAgICAgICAgICAgIG5leHQgPSB0cnVlO1xuXG4gICAgICAgIGZvciAoYXJyID0gW10sIGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgYXJyLnB1c2goJzxvcHRpb24gdmFsdWU9XCInICsgKHllYXIgPT09IHJlZlllYXIgPyBpIC0gYyA6IDEyICsgaSAtIGMpICsgJ1wiJyArXG4gICAgICAgICAgICAgICAgKGkgPT09IG1vbnRoID8gJyBzZWxlY3RlZD1cInNlbGVjdGVkXCInOiAnJykgK1xuICAgICAgICAgICAgICAgICgoaXNNaW5ZZWFyICYmIGkgPCBvcHRzLm1pbk1vbnRoKSB8fCAoaXNNYXhZZWFyICYmIGkgPiBvcHRzLm1heE1vbnRoKSA/ICdkaXNhYmxlZD1cImRpc2FibGVkXCInIDogJycpICsgJz4nICtcbiAgICAgICAgICAgICAgICBvcHRzLmkxOG4ubW9udGhzW2ldICsgJzwvb3B0aW9uPicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbW9udGhIdG1sID0gJzxkaXYgY2xhc3M9XCJwaWthLWxhYmVsXCI+JyArIG9wdHMuaTE4bi5tb250aHNbbW9udGhdICsgJzxzZWxlY3QgY2xhc3M9XCJwaWthLXNlbGVjdCBwaWthLXNlbGVjdC1tb250aFwiIHRhYmluZGV4PVwiLTFcIj4nICsgYXJyLmpvaW4oJycpICsgJzwvc2VsZWN0PjwvZGl2Pic7XG5cbiAgICAgICAgaWYgKGlzQXJyYXkob3B0cy55ZWFyUmFuZ2UpKSB7XG4gICAgICAgICAgICBpID0gb3B0cy55ZWFyUmFuZ2VbMF07XG4gICAgICAgICAgICBqID0gb3B0cy55ZWFyUmFuZ2VbMV0gKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaSA9IHllYXIgLSBvcHRzLnllYXJSYW5nZTtcbiAgICAgICAgICAgIGogPSAxICsgeWVhciArIG9wdHMueWVhclJhbmdlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChhcnIgPSBbXTsgaSA8IGogJiYgaSA8PSBvcHRzLm1heFllYXI7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPj0gb3B0cy5taW5ZZWFyKSB7XG4gICAgICAgICAgICAgICAgYXJyLnB1c2goJzxvcHRpb24gdmFsdWU9XCInICsgaSArICdcIicgKyAoaSA9PT0geWVhciA/ICcgc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiJzogJycpICsgJz4nICsgKGkpICsgJzwvb3B0aW9uPicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHllYXJIdG1sID0gJzxkaXYgY2xhc3M9XCJwaWthLWxhYmVsXCI+JyArIHllYXIgKyBvcHRzLnllYXJTdWZmaXggKyAnPHNlbGVjdCBjbGFzcz1cInBpa2Etc2VsZWN0IHBpa2Etc2VsZWN0LXllYXJcIiB0YWJpbmRleD1cIi0xXCI+JyArIGFyci5qb2luKCcnKSArICc8L3NlbGVjdD48L2Rpdj4nO1xuXG4gICAgICAgIGlmIChvcHRzLnNob3dNb250aEFmdGVyWWVhcikge1xuICAgICAgICAgICAgaHRtbCArPSB5ZWFySHRtbCArIG1vbnRoSHRtbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGh0bWwgKz0gbW9udGhIdG1sICsgeWVhckh0bWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNNaW5ZZWFyICYmIChtb250aCA9PT0gMCB8fCBvcHRzLm1pbk1vbnRoID49IG1vbnRoKSkge1xuICAgICAgICAgICAgcHJldiA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTWF4WWVhciAmJiAobW9udGggPT09IDExIHx8IG9wdHMubWF4TW9udGggPD0gbW9udGgpKSB7XG4gICAgICAgICAgICBuZXh0ID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYyA9PT0gMCkge1xuICAgICAgICAgICAgaHRtbCArPSAnPGJ1dHRvbiBjbGFzcz1cInBpa2EtcHJldicgKyAocHJldiA/ICcnIDogJyBpcy1kaXNhYmxlZCcpICsgJ1wiIHR5cGU9XCJidXR0b25cIj4nICsgb3B0cy5pMThuLnByZXZpb3VzTW9udGggKyAnPC9idXR0b24+JztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYyA9PT0gKGluc3RhbmNlLl9vLm51bWJlck9mTW9udGhzIC0gMSkgKSB7XG4gICAgICAgICAgICBodG1sICs9ICc8YnV0dG9uIGNsYXNzPVwicGlrYS1uZXh0JyArIChuZXh0ID8gJycgOiAnIGlzLWRpc2FibGVkJykgKyAnXCIgdHlwZT1cImJ1dHRvblwiPicgKyBvcHRzLmkxOG4ubmV4dE1vbnRoICsgJzwvYnV0dG9uPic7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaHRtbCArPSAnPC9kaXY+JztcbiAgICB9LFxuXG4gICAgcmVuZGVyVGFibGUgPSBmdW5jdGlvbihvcHRzLCBkYXRhLCByYW5kSWQpXG4gICAge1xuICAgICAgICByZXR1cm4gJzx0YWJsZSBjZWxscGFkZGluZz1cIjBcIiBjZWxsc3BhY2luZz1cIjBcIiBjbGFzcz1cInBpa2EtdGFibGVcIiByb2xlPVwiZ3JpZFwiIGFyaWEtbGFiZWxsZWRieT1cIicgKyByYW5kSWQgKyAnXCI+JyArIHJlbmRlckhlYWQob3B0cykgKyByZW5kZXJCb2R5KGRhdGEpICsgJzwvdGFibGU+JztcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBQaWthZGF5IGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgUGlrYWRheSA9IGZ1bmN0aW9uKG9wdGlvbnMpXG4gICAge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBvcHRzID0gc2VsZi5jb25maWcob3B0aW9ucyk7XG5cbiAgICAgICAgc2VsZi5fb25Nb3VzZURvd24gPSBmdW5jdGlvbihlKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoIXNlbGYuX3YpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50O1xuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaGFzQ2xhc3ModGFyZ2V0LCAnaXMtZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgIGlmIChoYXNDbGFzcyh0YXJnZXQsICdwaWthLWJ1dHRvbicpICYmICFoYXNDbGFzcyh0YXJnZXQsICdpcy1lbXB0eScpICYmICFoYXNDbGFzcyh0YXJnZXQucGFyZW50Tm9kZSwgJ2lzLWRpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXREYXRlKG5ldyBEYXRlKHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGlrYS15ZWFyJyksIHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGlrYS1tb250aCcpLCB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXBpa2EtZGF5JykpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuYm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0byhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5ibHVyRmllbGRPblNlbGVjdCAmJiBvcHRzLmZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuZmllbGQuYmx1cigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaGFzQ2xhc3ModGFyZ2V0LCAncGlrYS1wcmV2JykpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wcmV2TW9udGgoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaGFzQ2xhc3ModGFyZ2V0LCAncGlrYS1uZXh0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5uZXh0TW9udGgoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWhhc0NsYXNzKHRhcmdldCwgJ3Bpa2Etc2VsZWN0JykpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIGlzIHRvdWNoIGV2ZW50IHByZXZlbnQgbW91c2UgZXZlbnRzIGVtdWxhdGlvblxuICAgICAgICAgICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuX2MgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuX29uQ2hhbmdlID0gZnVuY3Rpb24oZSlcbiAgICAgICAge1xuICAgICAgICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcbiAgICAgICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc0NsYXNzKHRhcmdldCwgJ3Bpa2Etc2VsZWN0LW1vbnRoJykpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmdvdG9Nb250aCh0YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaGFzQ2xhc3ModGFyZ2V0LCAncGlrYS1zZWxlY3QteWVhcicpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5nb3RvWWVhcih0YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuX29uS2V5Q2hhbmdlID0gZnVuY3Rpb24oZSlcbiAgICAgICAge1xuICAgICAgICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuXG4gICAgICAgICAgICBpZiAoc2VsZi5pc1Zpc2libGUoKSkge1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoKGUua2V5Q29kZSl7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5maWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuZmllbGQuYmx1cigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFkanVzdERhdGUoJ3N1YnRyYWN0JywgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWRqdXN0RGF0ZSgnc3VidHJhY3QnLCA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGp1c3REYXRlKCdhZGQnLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGp1c3REYXRlKCdhZGQnLCA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLl9vbklucHV0Q2hhbmdlID0gZnVuY3Rpb24oZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGRhdGU7XG5cbiAgICAgICAgICAgIGlmIChlLmZpcmVkQnkgPT09IHNlbGYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0cy5wYXJzZSkge1xuICAgICAgICAgICAgICAgIGRhdGUgPSBvcHRzLnBhcnNlKG9wdHMuZmllbGQudmFsdWUsIG9wdHMuZm9ybWF0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzTW9tZW50KSB7XG4gICAgICAgICAgICAgICAgZGF0ZSA9IG1vbWVudChvcHRzLmZpZWxkLnZhbHVlLCBvcHRzLmZvcm1hdCwgb3B0cy5mb3JtYXRTdHJpY3QpO1xuICAgICAgICAgICAgICAgIGRhdGUgPSAoZGF0ZSAmJiBkYXRlLmlzVmFsaWQoKSkgPyBkYXRlLnRvRGF0ZSgpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLnBhcnNlKG9wdHMuZmllbGQudmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0RhdGUoZGF0ZSkpIHtcbiAgICAgICAgICAgICAgc2VsZi5zZXREYXRlKGRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzZWxmLl92KSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5fb25JbnB1dEZvY3VzID0gZnVuY3Rpb24oKVxuICAgICAgICB7XG4gICAgICAgICAgICBzZWxmLnNob3coKTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLl9vbklucHV0Q2xpY2sgPSBmdW5jdGlvbigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNlbGYuc2hvdygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuX29uSW5wdXRCbHVyID0gZnVuY3Rpb24oKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBJRSBhbGxvd3MgcGlrYSBkaXYgdG8gZ2FpbiBmb2N1czsgY2F0Y2ggYmx1ciB0aGUgaW5wdXQgZmllbGRcbiAgICAgICAgICAgIHZhciBwRWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGlmIChoYXNDbGFzcyhwRWwsICdwaWthLXNpbmdsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoKHBFbCA9IHBFbC5wYXJlbnROb2RlKSk7XG5cbiAgICAgICAgICAgIGlmICghc2VsZi5fYykge1xuICAgICAgICAgICAgICAgIHNlbGYuX2IgPSBzdG8oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuX2MgPSBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLl9vbkNsaWNrID0gZnVuY3Rpb24oZSlcbiAgICAgICAge1xuICAgICAgICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudCxcbiAgICAgICAgICAgICAgICBwRWwgPSB0YXJnZXQ7XG4gICAgICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaGFzRXZlbnRMaXN0ZW5lcnMgJiYgaGFzQ2xhc3ModGFyZ2V0LCAncGlrYS1zZWxlY3QnKSkge1xuICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0Lm9uY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ29uY2hhbmdlJywgJ3JldHVybjsnKTtcbiAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnQodGFyZ2V0LCAnY2hhbmdlJywgc2VsZi5fb25DaGFuZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzQ2xhc3MocEVsLCAncGlrYS1zaW5nbGUnKSB8fCBwRWwgPT09IG9wdHMudHJpZ2dlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKChwRWwgPSBwRWwucGFyZW50Tm9kZSkpO1xuICAgICAgICAgICAgaWYgKHNlbGYuX3YgJiYgdGFyZ2V0ICE9PSBvcHRzLnRyaWdnZXIgJiYgcEVsICE9PSBvcHRzLnRyaWdnZXIpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHNlbGYuZWwuY2xhc3NOYW1lID0gJ3Bpa2Etc2luZ2xlJyArIChvcHRzLmlzUlRMID8gJyBpcy1ydGwnIDogJycpICsgKG9wdHMudGhlbWUgPyAnICcgKyBvcHRzLnRoZW1lIDogJycpO1xuXG4gICAgICAgIGFkZEV2ZW50KHNlbGYuZWwsICdtb3VzZWRvd24nLCBzZWxmLl9vbk1vdXNlRG93biwgdHJ1ZSk7XG4gICAgICAgIGFkZEV2ZW50KHNlbGYuZWwsICd0b3VjaGVuZCcsIHNlbGYuX29uTW91c2VEb3duLCB0cnVlKTtcbiAgICAgICAgYWRkRXZlbnQoc2VsZi5lbCwgJ2NoYW5nZScsIHNlbGYuX29uQ2hhbmdlKTtcbiAgICAgICAgYWRkRXZlbnQoZG9jdW1lbnQsICdrZXlkb3duJywgc2VsZi5fb25LZXlDaGFuZ2UpO1xuXG4gICAgICAgIGlmIChvcHRzLmZpZWxkKSB7XG4gICAgICAgICAgICBpZiAob3B0cy5jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICBvcHRzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxmLmVsKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5ib3VuZCkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2VsZi5lbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdHMuZmllbGQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2VsZi5lbCwgb3B0cy5maWVsZC5uZXh0U2libGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRFdmVudChvcHRzLmZpZWxkLCAnY2hhbmdlJywgc2VsZi5fb25JbnB1dENoYW5nZSk7XG5cbiAgICAgICAgICAgIGlmICghb3B0cy5kZWZhdWx0RGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChoYXNNb21lbnQgJiYgb3B0cy5maWVsZC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmRlZmF1bHREYXRlID0gbW9tZW50KG9wdHMuZmllbGQudmFsdWUsIG9wdHMuZm9ybWF0KS50b0RhdGUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmRlZmF1bHREYXRlID0gbmV3IERhdGUoRGF0ZS5wYXJzZShvcHRzLmZpZWxkLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdHMuc2V0RGVmYXVsdERhdGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRlZkRhdGUgPSBvcHRzLmRlZmF1bHREYXRlO1xuXG4gICAgICAgIGlmIChpc0RhdGUoZGVmRGF0ZSkpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLnNldERlZmF1bHREYXRlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zZXREYXRlKGRlZkRhdGUsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLmdvdG9EYXRlKGRlZkRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5nb3RvRGF0ZShuZXcgRGF0ZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRzLmJvdW5kKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIHNlbGYuZWwuY2xhc3NOYW1lICs9ICcgaXMtYm91bmQnO1xuICAgICAgICAgICAgYWRkRXZlbnQob3B0cy50cmlnZ2VyLCAnY2xpY2snLCBzZWxmLl9vbklucHV0Q2xpY2spO1xuICAgICAgICAgICAgYWRkRXZlbnQob3B0cy50cmlnZ2VyLCAnZm9jdXMnLCBzZWxmLl9vbklucHV0Rm9jdXMpO1xuICAgICAgICAgICAgYWRkRXZlbnQob3B0cy50cmlnZ2VyLCAnYmx1cicsIHNlbGYuX29uSW5wdXRCbHVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICB9XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogcHVibGljIFBpa2FkYXkgQVBJXG4gICAgICovXG4gICAgUGlrYWRheS5wcm90b3R5cGUgPSB7XG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogY29uZmlndXJlIGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgICovXG4gICAgICAgIGNvbmZpZzogZnVuY3Rpb24ob3B0aW9ucylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9vKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbyA9IGV4dGVuZCh7fSwgZGVmYXVsdHMsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgb3B0cyA9IGV4dGVuZCh0aGlzLl9vLCBvcHRpb25zLCB0cnVlKTtcblxuICAgICAgICAgICAgb3B0cy5pc1JUTCA9ICEhb3B0cy5pc1JUTDtcblxuICAgICAgICAgICAgb3B0cy5maWVsZCA9IChvcHRzLmZpZWxkICYmIG9wdHMuZmllbGQubm9kZU5hbWUpID8gb3B0cy5maWVsZCA6IG51bGw7XG5cbiAgICAgICAgICAgIG9wdHMudGhlbWUgPSAodHlwZW9mIG9wdHMudGhlbWUpID09PSAnc3RyaW5nJyAmJiBvcHRzLnRoZW1lID8gb3B0cy50aGVtZSA6IG51bGw7XG5cbiAgICAgICAgICAgIG9wdHMuYm91bmQgPSAhIShvcHRzLmJvdW5kICE9PSB1bmRlZmluZWQgPyBvcHRzLmZpZWxkICYmIG9wdHMuYm91bmQgOiBvcHRzLmZpZWxkKTtcblxuICAgICAgICAgICAgb3B0cy50cmlnZ2VyID0gKG9wdHMudHJpZ2dlciAmJiBvcHRzLnRyaWdnZXIubm9kZU5hbWUpID8gb3B0cy50cmlnZ2VyIDogb3B0cy5maWVsZDtcblxuICAgICAgICAgICAgb3B0cy5kaXNhYmxlV2Vla2VuZHMgPSAhIW9wdHMuZGlzYWJsZVdlZWtlbmRzO1xuXG4gICAgICAgICAgICBvcHRzLmRpc2FibGVEYXlGbiA9ICh0eXBlb2Ygb3B0cy5kaXNhYmxlRGF5Rm4pID09PSAnZnVuY3Rpb24nID8gb3B0cy5kaXNhYmxlRGF5Rm4gOiBudWxsO1xuXG4gICAgICAgICAgICB2YXIgbm9tID0gcGFyc2VJbnQob3B0cy5udW1iZXJPZk1vbnRocywgMTApIHx8IDE7XG4gICAgICAgICAgICBvcHRzLm51bWJlck9mTW9udGhzID0gbm9tID4gNCA/IDQgOiBub207XG5cbiAgICAgICAgICAgIGlmICghaXNEYXRlKG9wdHMubWluRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICBvcHRzLm1pbkRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNEYXRlKG9wdHMubWF4RGF0ZSkpIHtcbiAgICAgICAgICAgICAgICBvcHRzLm1heERhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgob3B0cy5taW5EYXRlICYmIG9wdHMubWF4RGF0ZSkgJiYgb3B0cy5tYXhEYXRlIDwgb3B0cy5taW5EYXRlKSB7XG4gICAgICAgICAgICAgICAgb3B0cy5tYXhEYXRlID0gb3B0cy5taW5EYXRlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0cy5taW5EYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRNaW5EYXRlKG9wdHMubWluRGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0cy5tYXhEYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRNYXhEYXRlKG9wdHMubWF4RGF0ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc0FycmF5KG9wdHMueWVhclJhbmdlKSkge1xuICAgICAgICAgICAgICAgIHZhciBmYWxsYmFjayA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSAtIDEwO1xuICAgICAgICAgICAgICAgIG9wdHMueWVhclJhbmdlWzBdID0gcGFyc2VJbnQob3B0cy55ZWFyUmFuZ2VbMF0sIDEwKSB8fCBmYWxsYmFjaztcbiAgICAgICAgICAgICAgICBvcHRzLnllYXJSYW5nZVsxXSA9IHBhcnNlSW50KG9wdHMueWVhclJhbmdlWzFdLCAxMCkgfHwgZmFsbGJhY2s7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdHMueWVhclJhbmdlID0gTWF0aC5hYnMocGFyc2VJbnQob3B0cy55ZWFyUmFuZ2UsIDEwKSkgfHwgZGVmYXVsdHMueWVhclJhbmdlO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLnllYXJSYW5nZSA+IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLnllYXJSYW5nZSA9IDEwMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvcHRzO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZXR1cm4gYSBmb3JtYXR0ZWQgc3RyaW5nIG9mIHRoZSBjdXJyZW50IHNlbGVjdGlvbiAodXNpbmcgTW9tZW50LmpzIGlmIGF2YWlsYWJsZSlcbiAgICAgICAgICovXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbihmb3JtYXQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCB0aGlzLl9vLmZvcm1hdDtcbiAgICAgICAgICAgIGlmICghaXNEYXRlKHRoaXMuX2QpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX28udG9TdHJpbmcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX28udG9TdHJpbmcodGhpcy5fZCwgZm9ybWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNNb21lbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG1vbWVudCh0aGlzLl9kKS5mb3JtYXQoZm9ybWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kLnRvRGF0ZVN0cmluZygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZXR1cm4gYSBNb21lbnQuanMgb2JqZWN0IG9mIHRoZSBjdXJyZW50IHNlbGVjdGlvbiAoaWYgYXZhaWxhYmxlKVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TW9tZW50OiBmdW5jdGlvbigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiBoYXNNb21lbnQgPyBtb21lbnQodGhpcy5fZCkgOiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXQgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIGZyb20gYSBNb21lbnQuanMgb2JqZWN0IChpZiBhdmFpbGFibGUpXG4gICAgICAgICAqL1xuICAgICAgICBzZXRNb21lbnQ6IGZ1bmN0aW9uKGRhdGUsIHByZXZlbnRPblNlbGVjdClcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKGhhc01vbWVudCAmJiBtb21lbnQuaXNNb21lbnQoZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldERhdGUoZGF0ZS50b0RhdGUoKSwgcHJldmVudE9uU2VsZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcmV0dXJuIGEgRGF0ZSBvYmplY3Qgb2YgdGhlIGN1cnJlbnQgc2VsZWN0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBnZXREYXRlOiBmdW5jdGlvbigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiBpc0RhdGUodGhpcy5fZCkgPyBuZXcgRGF0ZSh0aGlzLl9kLmdldFRpbWUoKSkgOiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXQgdGhlIGN1cnJlbnQgc2VsZWN0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBzZXREYXRlOiBmdW5jdGlvbihkYXRlLCBwcmV2ZW50T25TZWxlY3QpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2QgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX28uZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fby5maWVsZC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQodGhpcy5fby5maWVsZCwgJ2NoYW5nZScsIHsgZmlyZWRCeTogdGhpcyB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUucGFyc2UoZGF0ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0RhdGUoZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBtaW4gPSB0aGlzLl9vLm1pbkRhdGUsXG4gICAgICAgICAgICAgICAgbWF4ID0gdGhpcy5fby5tYXhEYXRlO1xuXG4gICAgICAgICAgICBpZiAoaXNEYXRlKG1pbikgJiYgZGF0ZSA8IG1pbikge1xuICAgICAgICAgICAgICAgIGRhdGUgPSBtaW47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShtYXgpICYmIGRhdGUgPiBtYXgpIHtcbiAgICAgICAgICAgICAgICBkYXRlID0gbWF4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgc2V0VG9TdGFydE9mRGF5KHRoaXMuX2QpO1xuICAgICAgICAgICAgdGhpcy5nb3RvRGF0ZSh0aGlzLl9kKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX28uZmllbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vLmZpZWxkLnZhbHVlID0gdGhpcy50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudCh0aGlzLl9vLmZpZWxkLCAnY2hhbmdlJywgeyBmaXJlZEJ5OiB0aGlzIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFwcmV2ZW50T25TZWxlY3QgJiYgdHlwZW9mIHRoaXMuX28ub25TZWxlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vLm9uU2VsZWN0LmNhbGwodGhpcywgdGhpcy5nZXREYXRlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjaGFuZ2UgdmlldyB0byBhIHNwZWNpZmljIGRhdGVcbiAgICAgICAgICovXG4gICAgICAgIGdvdG9EYXRlOiBmdW5jdGlvbihkYXRlKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgbmV3Q2FsZW5kYXIgPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiAoIWlzRGF0ZShkYXRlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuY2FsZW5kYXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0VmlzaWJsZURhdGUgPSBuZXcgRGF0ZSh0aGlzLmNhbGVuZGFyc1swXS55ZWFyLCB0aGlzLmNhbGVuZGFyc1swXS5tb250aCwgMSksXG4gICAgICAgICAgICAgICAgICAgIGxhc3RWaXNpYmxlRGF0ZSA9IG5ldyBEYXRlKHRoaXMuY2FsZW5kYXJzW3RoaXMuY2FsZW5kYXJzLmxlbmd0aC0xXS55ZWFyLCB0aGlzLmNhbGVuZGFyc1t0aGlzLmNhbGVuZGFycy5sZW5ndGgtMV0ubW9udGgsIDEpLFxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlRGF0ZSA9IGRhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgZW5kIG9mIHRoZSBtb250aFxuICAgICAgICAgICAgICAgIGxhc3RWaXNpYmxlRGF0ZS5zZXRNb250aChsYXN0VmlzaWJsZURhdGUuZ2V0TW9udGgoKSsxKTtcbiAgICAgICAgICAgICAgICBsYXN0VmlzaWJsZURhdGUuc2V0RGF0ZShsYXN0VmlzaWJsZURhdGUuZ2V0RGF0ZSgpLTEpO1xuICAgICAgICAgICAgICAgIG5ld0NhbGVuZGFyID0gKHZpc2libGVEYXRlIDwgZmlyc3RWaXNpYmxlRGF0ZS5nZXRUaW1lKCkgfHwgbGFzdFZpc2libGVEYXRlLmdldFRpbWUoKSA8IHZpc2libGVEYXRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5ld0NhbGVuZGFyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhcnMgPSBbe1xuICAgICAgICAgICAgICAgICAgICBtb250aDogZGF0ZS5nZXRNb250aCgpLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiBkYXRlLmdldEZ1bGxZZWFyKClcbiAgICAgICAgICAgICAgICB9XTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fby5tYWluQ2FsZW5kYXIgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhcnNbMF0ubW9udGggKz0gMSAtIHRoaXMuX28ubnVtYmVyT2ZNb250aHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmFkanVzdENhbGVuZGFycygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFkanVzdERhdGU6IGZ1bmN0aW9uKHNpZ24sIGRheXMpIHtcblxuICAgICAgICAgICAgdmFyIGRheSA9IHRoaXMuZ2V0RGF0ZSgpIHx8IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB2YXIgZGlmZmVyZW5jZSA9IHBhcnNlSW50KGRheXMpKjI0KjYwKjYwKjEwMDA7XG5cbiAgICAgICAgICAgIHZhciBuZXdEYXk7XG5cbiAgICAgICAgICAgIGlmIChzaWduID09PSAnYWRkJykge1xuICAgICAgICAgICAgICAgIG5ld0RheSA9IG5ldyBEYXRlKGRheS52YWx1ZU9mKCkgKyBkaWZmZXJlbmNlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2lnbiA9PT0gJ3N1YnRyYWN0Jykge1xuICAgICAgICAgICAgICAgIG5ld0RheSA9IG5ldyBEYXRlKGRheS52YWx1ZU9mKCkgLSBkaWZmZXJlbmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zZXREYXRlKG5ld0RheSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRqdXN0Q2FsZW5kYXJzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXJzWzBdID0gYWRqdXN0Q2FsZW5kYXIodGhpcy5jYWxlbmRhcnNbMF0pO1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDE7IGMgPCB0aGlzLl9vLm51bWJlck9mTW9udGhzOyBjKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyc1tjXSA9IGFkanVzdENhbGVuZGFyKHtcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6IHRoaXMuY2FsZW5kYXJzWzBdLm1vbnRoICsgYyxcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogdGhpcy5jYWxlbmRhcnNbMF0ueWVhclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ290b1RvZGF5OiBmdW5jdGlvbigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZ290b0RhdGUobmV3IERhdGUoKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNoYW5nZSB2aWV3IHRvIGEgc3BlY2lmaWMgbW9udGggKHplcm8taW5kZXgsIGUuZy4gMDogSmFudWFyeSlcbiAgICAgICAgICovXG4gICAgICAgIGdvdG9Nb250aDogZnVuY3Rpb24obW9udGgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghaXNOYU4obW9udGgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhcnNbMF0ubW9udGggPSBwYXJzZUludChtb250aCwgMTApO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRqdXN0Q2FsZW5kYXJzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbmV4dE1vbnRoOiBmdW5jdGlvbigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXJzWzBdLm1vbnRoKys7XG4gICAgICAgICAgICB0aGlzLmFkanVzdENhbGVuZGFycygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHByZXZNb250aDogZnVuY3Rpb24oKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyc1swXS5tb250aC0tO1xuICAgICAgICAgICAgdGhpcy5hZGp1c3RDYWxlbmRhcnMoKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2hhbmdlIHZpZXcgdG8gYSBzcGVjaWZpYyBmdWxsIHllYXIgKGUuZy4gXCIyMDEyXCIpXG4gICAgICAgICAqL1xuICAgICAgICBnb3RvWWVhcjogZnVuY3Rpb24oeWVhcilcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCFpc05hTih5ZWFyKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXJzWzBdLnllYXIgPSBwYXJzZUludCh5ZWFyLCAxMCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGp1c3RDYWxlbmRhcnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2hhbmdlIHRoZSBtaW5EYXRlXG4gICAgICAgICAqL1xuICAgICAgICBzZXRNaW5EYXRlOiBmdW5jdGlvbih2YWx1ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgaWYodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgc2V0VG9TdGFydE9mRGF5KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vLm1pbkRhdGUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vLm1pblllYXIgID0gdmFsdWUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vLm1pbk1vbnRoID0gdmFsdWUuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fby5taW5EYXRlID0gZGVmYXVsdHMubWluRGF0ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vLm1pblllYXIgID0gZGVmYXVsdHMubWluWWVhcjtcbiAgICAgICAgICAgICAgICB0aGlzLl9vLm1pbk1vbnRoID0gZGVmYXVsdHMubWluTW9udGg7XG4gICAgICAgICAgICAgICAgdGhpcy5fby5zdGFydFJhbmdlID0gZGVmYXVsdHMuc3RhcnRSYW5nZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNoYW5nZSB0aGUgbWF4RGF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgc2V0TWF4RGF0ZTogZnVuY3Rpb24odmFsdWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIHNldFRvU3RhcnRPZkRheSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fby5tYXhEYXRlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5fby5tYXhZZWFyID0gdmFsdWUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vLm1heE1vbnRoID0gdmFsdWUuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fby5tYXhEYXRlID0gZGVmYXVsdHMubWF4RGF0ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vLm1heFllYXIgPSBkZWZhdWx0cy5tYXhZZWFyO1xuICAgICAgICAgICAgICAgIHRoaXMuX28ubWF4TW9udGggPSBkZWZhdWx0cy5tYXhNb250aDtcbiAgICAgICAgICAgICAgICB0aGlzLl9vLmVuZFJhbmdlID0gZGVmYXVsdHMuZW5kUmFuZ2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldFN0YXJ0UmFuZ2U6IGZ1bmN0aW9uKHZhbHVlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9vLnN0YXJ0UmFuZ2UgPSB2YWx1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRFbmRSYW5nZTogZnVuY3Rpb24odmFsdWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX28uZW5kUmFuZ2UgPSB2YWx1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcmVmcmVzaCB0aGUgSFRNTFxuICAgICAgICAgKi9cbiAgICAgICAgZHJhdzogZnVuY3Rpb24oZm9yY2UpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fdiAmJiAhZm9yY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgb3B0cyA9IHRoaXMuX28sXG4gICAgICAgICAgICAgICAgbWluWWVhciA9IG9wdHMubWluWWVhcixcbiAgICAgICAgICAgICAgICBtYXhZZWFyID0gb3B0cy5tYXhZZWFyLFxuICAgICAgICAgICAgICAgIG1pbk1vbnRoID0gb3B0cy5taW5Nb250aCxcbiAgICAgICAgICAgICAgICBtYXhNb250aCA9IG9wdHMubWF4TW9udGgsXG4gICAgICAgICAgICAgICAgaHRtbCA9ICcnLFxuICAgICAgICAgICAgICAgIHJhbmRJZDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX3kgPD0gbWluWWVhcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3kgPSBtaW5ZZWFyO1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4obWluTW9udGgpICYmIHRoaXMuX20gPCBtaW5Nb250aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tID0gbWluTW9udGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX3kgPj0gbWF4WWVhcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3kgPSBtYXhZZWFyO1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4obWF4TW9udGgpICYmIHRoaXMuX20gPiBtYXhNb250aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tID0gbWF4TW9udGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByYW5kSWQgPSAncGlrYS10aXRsZS0nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikucmVwbGFjZSgvW15hLXpdKy9nLCAnJykuc3Vic3RyKDAsIDIpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IG9wdHMubnVtYmVyT2ZNb250aHM7IGMrKykge1xuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJwaWthLWxlbmRhclwiPicgKyByZW5kZXJUaXRsZSh0aGlzLCBjLCB0aGlzLmNhbGVuZGFyc1tjXS55ZWFyLCB0aGlzLmNhbGVuZGFyc1tjXS5tb250aCwgdGhpcy5jYWxlbmRhcnNbMF0ueWVhciwgcmFuZElkKSArIHRoaXMucmVuZGVyKHRoaXMuY2FsZW5kYXJzW2NdLnllYXIsIHRoaXMuY2FsZW5kYXJzW2NdLm1vbnRoLCByYW5kSWQpICsgJzwvZGl2Pic7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gaHRtbDtcblxuICAgICAgICAgICAgaWYgKG9wdHMuYm91bmQpIHtcbiAgICAgICAgICAgICAgICBpZihvcHRzLmZpZWxkLnR5cGUgIT09ICdoaWRkZW4nKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0byhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMudHJpZ2dlci5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fby5vbkRyYXcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vLm9uRHJhdyh0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9wdHMuYm91bmQpIHtcbiAgICAgICAgICAgICAgICAvLyBsZXQgdGhlIHNjcmVlbiByZWFkZXIgdXNlciBrbm93IHRvIHVzZSBhcnJvdyBrZXlzXG4gICAgICAgICAgICAgICAgb3B0cy5maWVsZC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnVXNlIHRoZSBhcnJvdyBrZXlzIHRvIHBpY2sgYSBkYXRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRqdXN0UG9zaXRpb246IGZ1bmN0aW9uKClcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGZpZWxkLCBwRWwsIHdpZHRoLCBoZWlnaHQsIHZpZXdwb3J0V2lkdGgsIHZpZXdwb3J0SGVpZ2h0LCBzY3JvbGxUb3AsIGxlZnQsIHRvcCwgY2xpZW50UmVjdDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX28uY29udGFpbmVyKSByZXR1cm47XG5cbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXG4gICAgICAgICAgICBmaWVsZCA9IHRoaXMuX28udHJpZ2dlcjtcbiAgICAgICAgICAgIHBFbCA9IGZpZWxkO1xuICAgICAgICAgICAgd2lkdGggPSB0aGlzLmVsLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5lbC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICB2aWV3cG9ydFdpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgdmlld3BvcnRIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIHNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZpZWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNsaWVudFJlY3QgPSBmaWVsZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBsZWZ0ID0gY2xpZW50UmVjdC5sZWZ0ICsgd2luZG93LnBhZ2VYT2Zmc2V0O1xuICAgICAgICAgICAgICAgIHRvcCA9IGNsaWVudFJlY3QuYm90dG9tICsgd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZWZ0ID0gcEVsLm9mZnNldExlZnQ7XG4gICAgICAgICAgICAgICAgdG9wICA9IHBFbC5vZmZzZXRUb3AgKyBwRWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgIHdoaWxlKChwRWwgPSBwRWwub2Zmc2V0UGFyZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0ICs9IHBFbC5vZmZzZXRMZWZ0O1xuICAgICAgICAgICAgICAgICAgICB0b3AgICs9IHBFbC5vZmZzZXRUb3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkZWZhdWx0IHBvc2l0aW9uIGlzIGJvdHRvbSAmIGxlZnRcbiAgICAgICAgICAgIGlmICgodGhpcy5fby5yZXBvc2l0aW9uICYmIGxlZnQgKyB3aWR0aCA+IHZpZXdwb3J0V2lkdGgpIHx8XG4gICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vLnBvc2l0aW9uLmluZGV4T2YoJ3JpZ2h0JykgPiAtMSAmJlxuICAgICAgICAgICAgICAgICAgICBsZWZ0IC0gd2lkdGggKyBmaWVsZC5vZmZzZXRXaWR0aCA+IDBcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBsZWZ0ID0gbGVmdCAtIHdpZHRoICsgZmllbGQub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRoaXMuX28ucmVwb3NpdGlvbiAmJiB0b3AgKyBoZWlnaHQgPiB2aWV3cG9ydEhlaWdodCArIHNjcm9sbFRvcCkgfHxcbiAgICAgICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX28ucG9zaXRpb24uaW5kZXhPZigndG9wJykgPiAtMSAmJlxuICAgICAgICAgICAgICAgICAgICB0b3AgLSBoZWlnaHQgLSBmaWVsZC5vZmZzZXRIZWlnaHQgPiAwXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdG9wID0gdG9wIC0gaGVpZ2h0IC0gZmllbGQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmxlZnQgPSBsZWZ0ICsgJ3B4JztcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUudG9wID0gdG9wICsgJ3B4JztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcmVuZGVyIEhUTUwgZm9yIGEgcGFydGljdWxhciBtb250aFxuICAgICAgICAgKi9cbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih5ZWFyLCBtb250aCwgcmFuZElkKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgb3B0cyAgID0gdGhpcy5fbyxcbiAgICAgICAgICAgICAgICBub3cgICAgPSBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgIGRheXMgICA9IGdldERheXNJbk1vbnRoKHllYXIsIG1vbnRoKSxcbiAgICAgICAgICAgICAgICBiZWZvcmUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSkuZ2V0RGF5KCksXG4gICAgICAgICAgICAgICAgZGF0YSAgID0gW10sXG4gICAgICAgICAgICAgICAgcm93ICAgID0gW107XG4gICAgICAgICAgICBzZXRUb1N0YXJ0T2ZEYXkobm93KTtcbiAgICAgICAgICAgIGlmIChvcHRzLmZpcnN0RGF5ID4gMCkge1xuICAgICAgICAgICAgICAgIGJlZm9yZSAtPSBvcHRzLmZpcnN0RGF5O1xuICAgICAgICAgICAgICAgIGlmIChiZWZvcmUgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJlZm9yZSArPSA3O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcmV2aW91c01vbnRoID0gbW9udGggPT09IDAgPyAxMSA6IG1vbnRoIC0gMSxcbiAgICAgICAgICAgICAgICBuZXh0TW9udGggPSBtb250aCA9PT0gMTEgPyAwIDogbW9udGggKyAxLFxuICAgICAgICAgICAgICAgIHllYXJPZlByZXZpb3VzTW9udGggPSBtb250aCA9PT0gMCA/IHllYXIgLSAxIDogeWVhcixcbiAgICAgICAgICAgICAgICB5ZWFyT2ZOZXh0TW9udGggPSBtb250aCA9PT0gMTEgPyB5ZWFyICsgMSA6IHllYXIsXG4gICAgICAgICAgICAgICAgZGF5c0luUHJldmlvdXNNb250aCA9IGdldERheXNJbk1vbnRoKHllYXJPZlByZXZpb3VzTW9udGgsIHByZXZpb3VzTW9udGgpO1xuICAgICAgICAgICAgdmFyIGNlbGxzID0gZGF5cyArIGJlZm9yZSxcbiAgICAgICAgICAgICAgICBhZnRlciA9IGNlbGxzO1xuICAgICAgICAgICAgd2hpbGUoYWZ0ZXIgPiA3KSB7XG4gICAgICAgICAgICAgICAgYWZ0ZXIgLT0gNztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNlbGxzICs9IDcgLSBhZnRlcjtcbiAgICAgICAgICAgIHZhciBpc1dlZWtTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHIgPSAwOyBpIDwgY2VsbHM7IGkrKylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF5ID0gbmV3IERhdGUoeWVhciwgbW9udGgsIDEgKyAoaSAtIGJlZm9yZSkpLFxuICAgICAgICAgICAgICAgICAgICBpc1NlbGVjdGVkID0gaXNEYXRlKHRoaXMuX2QpID8gY29tcGFyZURhdGVzKGRheSwgdGhpcy5fZCkgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaXNUb2RheSA9IGNvbXBhcmVEYXRlcyhkYXksIG5vdyksXG4gICAgICAgICAgICAgICAgICAgIGhhc0V2ZW50ID0gb3B0cy5ldmVudHMuaW5kZXhPZihkYXkudG9EYXRlU3RyaW5nKCkpICE9PSAtMSA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaXNFbXB0eSA9IGkgPCBiZWZvcmUgfHwgaSA+PSAoZGF5cyArIGJlZm9yZSksXG4gICAgICAgICAgICAgICAgICAgIGRheU51bWJlciA9IDEgKyAoaSAtIGJlZm9yZSksXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoTnVtYmVyID0gbW9udGgsXG4gICAgICAgICAgICAgICAgICAgIHllYXJOdW1iZXIgPSB5ZWFyLFxuICAgICAgICAgICAgICAgICAgICBpc1N0YXJ0UmFuZ2UgPSBvcHRzLnN0YXJ0UmFuZ2UgJiYgY29tcGFyZURhdGVzKG9wdHMuc3RhcnRSYW5nZSwgZGF5KSxcbiAgICAgICAgICAgICAgICAgICAgaXNFbmRSYW5nZSA9IG9wdHMuZW5kUmFuZ2UgJiYgY29tcGFyZURhdGVzKG9wdHMuZW5kUmFuZ2UsIGRheSksXG4gICAgICAgICAgICAgICAgICAgIGlzSW5SYW5nZSA9IG9wdHMuc3RhcnRSYW5nZSAmJiBvcHRzLmVuZFJhbmdlICYmIG9wdHMuc3RhcnRSYW5nZSA8IGRheSAmJiBkYXkgPCBvcHRzLmVuZFJhbmdlLFxuICAgICAgICAgICAgICAgICAgICBpc0Rpc2FibGVkID0gKG9wdHMubWluRGF0ZSAmJiBkYXkgPCBvcHRzLm1pbkRhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAob3B0cy5tYXhEYXRlICYmIGRheSA+IG9wdHMubWF4RGF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvcHRzLmRpc2FibGVXZWVrZW5kcyAmJiBpc1dlZWtlbmQoZGF5KSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvcHRzLmRpc2FibGVEYXlGbiAmJiBvcHRzLmRpc2FibGVEYXlGbihkYXkpKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpIDwgYmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXlOdW1iZXIgPSBkYXlzSW5QcmV2aW91c01vbnRoICsgZGF5TnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGhOdW1iZXIgPSBwcmV2aW91c01vbnRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgeWVhck51bWJlciA9IHllYXJPZlByZXZpb3VzTW9udGg7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXlOdW1iZXIgPSBkYXlOdW1iZXIgLSBkYXlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGhOdW1iZXIgPSBuZXh0TW9udGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyTnVtYmVyID0geWVhck9mTmV4dE1vbnRoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGRheUNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheTogZGF5TnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGg6IG1vbnRoTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgeWVhcjogeWVhck51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0V2ZW50OiBoYXNFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IGlzU2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1RvZGF5OiBpc1RvZGF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRW1wdHk6IGlzRW1wdHksXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1N0YXJ0UmFuZ2U6IGlzU3RhcnRSYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRW5kUmFuZ2U6IGlzRW5kUmFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0luUmFuZ2U6IGlzSW5SYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dEYXlzSW5OZXh0QW5kUHJldmlvdXNNb250aHM6IG9wdHMuc2hvd0RheXNJbk5leHRBbmRQcmV2aW91c01vbnRocyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZVNlbGVjdGlvbkRheXNJbk5leHRBbmRQcmV2aW91c01vbnRoczogb3B0cy5lbmFibGVTZWxlY3Rpb25EYXlzSW5OZXh0QW5kUHJldmlvdXNNb250aHNcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRzLnBpY2tXaG9sZVdlZWsgJiYgaXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBpc1dlZWtTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcm93LnB1c2gocmVuZGVyRGF5KGRheUNvbmZpZykpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCsrciA9PT0gNykge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5zaG93V2Vla051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93LnVuc2hpZnQocmVuZGVyV2VlayhpIC0gYmVmb3JlLCBtb250aCwgeWVhcikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHVzaChyZW5kZXJSb3cocm93LCBvcHRzLmlzUlRMLCBvcHRzLnBpY2tXaG9sZVdlZWssIGlzV2Vla1NlbGVjdGVkKSk7XG4gICAgICAgICAgICAgICAgICAgIHJvdyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICByID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaXNXZWVrU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyVGFibGUob3B0cywgZGF0YSwgcmFuZElkKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpc1Zpc2libGU6IGZ1bmN0aW9uKClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Y7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvdzogZnVuY3Rpb24oKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl92ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXcoKTtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLmVsLCAnaXMtaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX28uYm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnQoZG9jdW1lbnQsICdjbGljaycsIHRoaXMuX29uQ2xpY2spO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkanVzdFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fby5vbk9wZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fby5vbk9wZW4uY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGlkZTogZnVuY3Rpb24oKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgdiA9IHRoaXMuX3Y7XG4gICAgICAgICAgICBpZiAodiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fby5ib3VuZCkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVFdmVudChkb2N1bWVudCwgJ2NsaWNrJywgdGhpcy5fb25DbGljayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUucG9zaXRpb24gPSAnc3RhdGljJzsgLy8gcmVzZXRcbiAgICAgICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmxlZnQgPSAnYXV0byc7XG4gICAgICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS50b3AgPSAnYXV0byc7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy5lbCwgJ2lzLWhpZGRlbicpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3YgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB0aGlzLl9vLm9uQ2xvc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fby5vbkNsb3NlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHQU1FIE9WRVJcbiAgICAgICAgICovXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICByZW1vdmVFdmVudCh0aGlzLmVsLCAnbW91c2Vkb3duJywgdGhpcy5fb25Nb3VzZURvd24sIHRydWUpO1xuICAgICAgICAgICAgcmVtb3ZlRXZlbnQodGhpcy5lbCwgJ3RvdWNoZW5kJywgdGhpcy5fb25Nb3VzZURvd24sIHRydWUpO1xuICAgICAgICAgICAgcmVtb3ZlRXZlbnQodGhpcy5lbCwgJ2NoYW5nZScsIHRoaXMuX29uQ2hhbmdlKTtcbiAgICAgICAgICAgIHJlbW92ZUV2ZW50KGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuX29uS2V5Q2hhbmdlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9vLmZpZWxkKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnQodGhpcy5fby5maWVsZCwgJ2NoYW5nZScsIHRoaXMuX29uSW5wdXRDaGFuZ2UpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vLmJvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUV2ZW50KHRoaXMuX28udHJpZ2dlciwgJ2NsaWNrJywgdGhpcy5fb25JbnB1dENsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnQodGhpcy5fby50cmlnZ2VyLCAnZm9jdXMnLCB0aGlzLl9vbklucHV0Rm9jdXMpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVFdmVudCh0aGlzLl9vLnRyaWdnZXIsICdibHVyJywgdGhpcy5fb25JbnB1dEJsdXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICByZXR1cm4gUGlrYWRheTtcblxufSkpO1xuIiwiLyohXG4gKiBQaWthZGF5IGpRdWVyeSBwbHVnaW4uXG4gKlxuICogQ29weXJpZ2h0IMKpIDIwMTMgRGF2aWQgQnVzaGVsbCB8IEJTRCAmIE1JVCBsaWNlbnNlIHwgaHR0cHM6Ly9naXRodWIuY29tL2RidXNoZWxsL1Bpa2FkYXlcbiAqL1xuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpXG57XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBDb21tb25KUyBtb2R1bGVcbiAgICAgICAgZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSwgcmVxdWlyZSgncGlrYWRheScpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbJ2pxdWVyeScsICdwaWthZGF5J10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgICAgICBmYWN0b3J5KHJvb3QualF1ZXJ5LCByb290LlBpa2FkYXkpO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gKCQsIFBpa2FkYXkpXG57XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgJC5mbi5waWthZGF5ID0gZnVuY3Rpb24oKVxuICAgIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICAgICAgaWYgKCFhcmdzIHx8ICFhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgYXJncyA9IFt7IH1dO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBzZWxmICAgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgIHBsdWdpbiA9IHNlbGYuZGF0YSgncGlrYWRheScpO1xuXG4gICAgICAgICAgICBpZiAoIShwbHVnaW4gaW5zdGFuY2VvZiBQaWthZGF5KSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmllbGQgPSBzZWxmWzBdO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmRhdGEoJ3Bpa2FkYXknLCBuZXcgUGlrYWRheShvcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmIHR5cGVvZiBwbHVnaW5bYXJnc1swXV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luW2FyZ3NbMF1dLmFwcGx5KHBsdWdpbiwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywxKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3NbMF0gPT09ICdkZXN0cm95Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZW1vdmVEYXRhKCdwaWthZGF5Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbn0pKTtcbiIsIi8qKlxuKiAgQWpheCBBdXRvY29tcGxldGUgZm9yIGpRdWVyeSwgdmVyc2lvbiAxLjQuMVxuKiAgKGMpIDIwMTcgVG9tYXMgS2lyZGFcbipcbiogIEFqYXggQXV0b2NvbXBsZXRlIGZvciBqUXVlcnkgaXMgZnJlZWx5IGRpc3RyaWJ1dGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIGFuIE1JVC1zdHlsZSBsaWNlbnNlLlxuKiAgRm9yIGRldGFpbHMsIHNlZSB0aGUgd2ViIHNpdGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kZXZicmlkZ2UvalF1ZXJ5LUF1dG9jb21wbGV0ZVxuKi9cblxuLypqc2xpbnQgIGJyb3dzZXI6IHRydWUsIHdoaXRlOiB0cnVlLCBzaW5nbGU6IHRydWUsIHRoaXM6IHRydWUsIG11bHRpdmFyOiB0cnVlICovXG4vKmdsb2JhbCBkZWZpbmUsIHdpbmRvdywgZG9jdW1lbnQsIGpRdWVyeSwgZXhwb3J0cywgcmVxdWlyZSAqL1xuXG4vLyBFeHBvc2UgcGx1Z2luIGFzIGFuIEFNRCBtb2R1bGUgaWYgQU1EIGxvYWRlciBpcyBwcmVzZW50OlxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBCcm93c2VyaWZ5XG4gICAgICAgIGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgICAgICBmYWN0b3J5KGpRdWVyeSk7XG4gICAgfVxufShmdW5jdGlvbiAoJCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhclxuICAgICAgICB1dGlscyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVzY2FwZVJlZ0V4Q2hhcnM6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvW3xcXFxce30oKVtcXF1eJCsqPy5dL2csIFwiXFxcXCQmXCIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3JlYXRlTm9kZTogZnVuY3Rpb24gKGNvbnRhaW5lckNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgZGl2LmNsYXNzTmFtZSA9IGNvbnRhaW5lckNsYXNzO1xuICAgICAgICAgICAgICAgICAgICBkaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICAgICAgICAgICAgICBkaXYuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpdjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KCkpLFxuXG4gICAgICAgIGtleXMgPSB7XG4gICAgICAgICAgICBFU0M6IDI3LFxuICAgICAgICAgICAgVEFCOiA5LFxuICAgICAgICAgICAgUkVUVVJOOiAxMyxcbiAgICAgICAgICAgIExFRlQ6IDM3LFxuICAgICAgICAgICAgVVA6IDM4LFxuICAgICAgICAgICAgUklHSFQ6IDM5LFxuICAgICAgICAgICAgRE9XTjogNDBcbiAgICAgICAgfSxcblxuICAgICAgICBub29wID0gJC5ub29wO1xuXG4gICAgZnVuY3Rpb24gQXV0b2NvbXBsZXRlKGVsLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAvLyBTaGFyZWQgdmFyaWFibGVzOlxuICAgICAgICB0aGF0LmVsZW1lbnQgPSBlbDtcbiAgICAgICAgdGhhdC5lbCA9ICQoZWwpO1xuICAgICAgICB0aGF0LnN1Z2dlc3Rpb25zID0gW107XG4gICAgICAgIHRoYXQuYmFkUXVlcmllcyA9IFtdO1xuICAgICAgICB0aGF0LnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgdGhhdC5jdXJyZW50VmFsdWUgPSB0aGF0LmVsZW1lbnQudmFsdWU7XG4gICAgICAgIHRoYXQudGltZW91dElkID0gbnVsbDtcbiAgICAgICAgdGhhdC5jYWNoZWRSZXNwb25zZSA9IHt9O1xuICAgICAgICB0aGF0Lm9uQ2hhbmdlVGltZW91dCA9IG51bGw7XG4gICAgICAgIHRoYXQub25DaGFuZ2UgPSBudWxsO1xuICAgICAgICB0aGF0LmlzTG9jYWwgPSBmYWxzZTtcbiAgICAgICAgdGhhdC5zdWdnZXN0aW9uc0NvbnRhaW5lciA9IG51bGw7XG4gICAgICAgIHRoYXQubm9TdWdnZXN0aW9uc0NvbnRhaW5lciA9IG51bGw7XG4gICAgICAgIHRoYXQub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBdXRvY29tcGxldGUuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgICB0aGF0LmNsYXNzZXMgPSB7XG4gICAgICAgICAgICBzZWxlY3RlZDogJ2F1dG9jb21wbGV0ZS1zZWxlY3RlZCcsXG4gICAgICAgICAgICBzdWdnZXN0aW9uOiAnYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb24nXG4gICAgICAgIH07XG4gICAgICAgIHRoYXQuaGludCA9IG51bGw7XG4gICAgICAgIHRoYXQuaGludFZhbHVlID0gJyc7XG4gICAgICAgIHRoYXQuc2VsZWN0aW9uID0gbnVsbDtcblxuICAgICAgICAvLyBJbml0aWFsaXplIGFuZCBzZXQgb3B0aW9uczpcbiAgICAgICAgdGhhdC5pbml0aWFsaXplKCk7XG4gICAgICAgIHRoYXQuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICB9XG5cbiAgICBBdXRvY29tcGxldGUudXRpbHMgPSB1dGlscztcblxuICAgICQuQXV0b2NvbXBsZXRlID0gQXV0b2NvbXBsZXRlO1xuXG4gICAgQXV0b2NvbXBsZXRlLmRlZmF1bHRzID0ge1xuICAgICAgICAgICAgYWpheFNldHRpbmdzOiB7fSxcbiAgICAgICAgICAgIGF1dG9TZWxlY3RGaXJzdDogZmFsc2UsXG4gICAgICAgICAgICBhcHBlbmRUbzogJ2JvZHknLFxuICAgICAgICAgICAgc2VydmljZVVybDogbnVsbCxcbiAgICAgICAgICAgIGxvb2t1cDogbnVsbCxcbiAgICAgICAgICAgIG9uU2VsZWN0OiBudWxsLFxuICAgICAgICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgICAgICAgIG1pbkNoYXJzOiAxLFxuICAgICAgICAgICAgbWF4SGVpZ2h0OiAzMDAsXG4gICAgICAgICAgICBkZWZlclJlcXVlc3RCeTogMCxcbiAgICAgICAgICAgIHBhcmFtczoge30sXG4gICAgICAgICAgICBmb3JtYXRSZXN1bHQ6IF9mb3JtYXRSZXN1bHQsXG4gICAgICAgICAgICBmb3JtYXRHcm91cDogX2Zvcm1hdEdyb3VwLFxuICAgICAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICAgICAgekluZGV4OiA5OTk5LFxuICAgICAgICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICAgICAgICBub0NhY2hlOiBmYWxzZSxcbiAgICAgICAgICAgIG9uU2VhcmNoU3RhcnQ6IG5vb3AsXG4gICAgICAgICAgICBvblNlYXJjaENvbXBsZXRlOiBub29wLFxuICAgICAgICAgICAgb25TZWFyY2hFcnJvcjogbm9vcCxcbiAgICAgICAgICAgIHByZXNlcnZlSW5wdXQ6IGZhbHNlLFxuICAgICAgICAgICAgY29udGFpbmVyQ2xhc3M6ICdhdXRvY29tcGxldGUtc3VnZ2VzdGlvbnMnLFxuICAgICAgICAgICAgdGFiRGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZGF0YVR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGN1cnJlbnRSZXF1ZXN0OiBudWxsLFxuICAgICAgICAgICAgdHJpZ2dlclNlbGVjdE9uVmFsaWRJbnB1dDogdHJ1ZSxcbiAgICAgICAgICAgIHByZXZlbnRCYWRRdWVyaWVzOiB0cnVlLFxuICAgICAgICAgICAgbG9va3VwRmlsdGVyOiBfbG9va3VwRmlsdGVyLFxuICAgICAgICAgICAgcGFyYW1OYW1lOiAncXVlcnknLFxuICAgICAgICAgICAgdHJhbnNmb3JtUmVzdWx0OiBfdHJhbnNmb3JtUmVzdWx0LFxuICAgICAgICAgICAgc2hvd05vU3VnZ2VzdGlvbk5vdGljZTogZmFsc2UsXG4gICAgICAgICAgICBub1N1Z2dlc3Rpb25Ob3RpY2U6ICdObyByZXN1bHRzJyxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiAnYm90dG9tJyxcbiAgICAgICAgICAgIGZvcmNlRml4UG9zaXRpb246IGZhbHNlXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIF9sb29rdXBGaWx0ZXIoc3VnZ2VzdGlvbiwgb3JpZ2luYWxRdWVyeSwgcXVlcnlMb3dlckNhc2UpIHtcbiAgICAgICAgcmV0dXJuIHN1Z2dlc3Rpb24udmFsdWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHF1ZXJ5TG93ZXJDYXNlKSAhPT0gLTE7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIF90cmFuc2Zvcm1SZXN1bHQocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiByZXNwb25zZSA9PT0gJ3N0cmluZycgPyAkLnBhcnNlSlNPTihyZXNwb25zZSkgOiByZXNwb25zZTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gX2Zvcm1hdFJlc3VsdChzdWdnZXN0aW9uLCBjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgLy8gRG8gbm90IHJlcGxhY2UgYW55dGhpbmcgaWYgdGhlIGN1cnJlbnQgdmFsdWUgaXMgZW1wdHlcbiAgICAgICAgaWYgKCFjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBzdWdnZXN0aW9uLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgcGF0dGVybiA9ICcoJyArIHV0aWxzLmVzY2FwZVJlZ0V4Q2hhcnMoY3VycmVudFZhbHVlKSArICcpJztcblxuICAgICAgICByZXR1cm4gc3VnZ2VzdGlvbi52YWx1ZVxuICAgICAgICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cChwYXR0ZXJuLCAnZ2knKSwgJzxzdHJvbmc+JDE8XFwvc3Ryb25nPicpXG4gICAgICAgICAgICAucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyZsdDsoXFwvP3N0cm9uZykmZ3Q7L2csICc8JDE+Jyk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIF9mb3JtYXRHcm91cChzdWdnZXN0aW9uLCBjYXRlZ29yeSkge1xuICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJhdXRvY29tcGxldGUtZ3JvdXBcIj4nICsgY2F0ZWdvcnkgKyAnPC9kaXY+JztcbiAgICB9O1xuXG4gICAgQXV0b2NvbXBsZXRlLnByb3RvdHlwZSA9IHtcblxuICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgc3VnZ2VzdGlvblNlbGVjdG9yID0gJy4nICsgdGhhdC5jbGFzc2VzLnN1Z2dlc3Rpb24sXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSB0aGF0LmNsYXNzZXMuc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHRoYXQub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBjb250YWluZXI7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBhdXRvY29tcGxldGUgYXR0cmlidXRlIHRvIHByZXZlbnQgbmF0aXZlIHN1Z2dlc3Rpb25zOlxuICAgICAgICAgICAgdGhhdC5lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXV0b2NvbXBsZXRlJywgJ29mZicpO1xuXG4gICAgICAgICAgICAvLyBodG1sKCkgZGVhbHMgd2l0aCBtYW55IHR5cGVzOiBodG1sU3RyaW5nIG9yIEVsZW1lbnQgb3IgQXJyYXkgb3IgalF1ZXJ5XG4gICAgICAgICAgICB0aGF0Lm5vU3VnZ2VzdGlvbnNDb250YWluZXIgPSAkKCc8ZGl2IGNsYXNzPVwiYXV0b2NvbXBsZXRlLW5vLXN1Z2dlc3Rpb25cIj48L2Rpdj4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmh0bWwodGhpcy5vcHRpb25zLm5vU3VnZ2VzdGlvbk5vdGljZSkuZ2V0KDApO1xuXG4gICAgICAgICAgICB0aGF0LnN1Z2dlc3Rpb25zQ29udGFpbmVyID0gQXV0b2NvbXBsZXRlLnV0aWxzLmNyZWF0ZU5vZGUob3B0aW9ucy5jb250YWluZXJDbGFzcyk7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lciA9ICQodGhhdC5zdWdnZXN0aW9uc0NvbnRhaW5lcik7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRUbyhvcHRpb25zLmFwcGVuZFRvIHx8ICdib2R5Jyk7XG5cbiAgICAgICAgICAgIC8vIE9ubHkgc2V0IHdpZHRoIGlmIGl0IHdhcyBwcm92aWRlZDpcbiAgICAgICAgICAgIGlmIChvcHRpb25zLndpZHRoICE9PSAnYXV0bycpIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuY3NzKCd3aWR0aCcsIG9wdGlvbnMud2lkdGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIG1vdXNlIG92ZXIgZXZlbnQgb24gc3VnZ2VzdGlvbnMgbGlzdDpcbiAgICAgICAgICAgIGNvbnRhaW5lci5vbignbW91c2VvdmVyLmF1dG9jb21wbGV0ZScsIHN1Z2dlc3Rpb25TZWxlY3RvciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuYWN0aXZhdGUoJCh0aGlzKS5kYXRhKCdpbmRleCcpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBEZXNlbGVjdCBhY3RpdmUgZWxlbWVudCB3aGVuIG1vdXNlIGxlYXZlcyBzdWdnZXN0aW9ucyBjb250YWluZXI6XG4gICAgICAgICAgICBjb250YWluZXIub24oJ21vdXNlb3V0LmF1dG9jb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuY2hpbGRyZW4oJy4nICsgc2VsZWN0ZWQpLnJlbW92ZUNsYXNzKHNlbGVjdGVkKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgY2xpY2sgZXZlbnQgb24gc3VnZ2VzdGlvbnMgbGlzdDpcbiAgICAgICAgICAgIGNvbnRhaW5lci5vbignY2xpY2suYXV0b2NvbXBsZXRlJywgc3VnZ2VzdGlvblNlbGVjdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5zZWxlY3QoJCh0aGlzKS5kYXRhKCdpbmRleCcpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb250YWluZXIub24oJ2NsaWNrLmF1dG9jb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhhdC5ibHVyVGltZW91dElkKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRoYXQuZml4UG9zaXRpb25DYXB0dXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGF0LnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5maXhQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICQod2luZG93KS5vbigncmVzaXplLmF1dG9jb21wbGV0ZScsIHRoYXQuZml4UG9zaXRpb25DYXB0dXJlKTtcblxuICAgICAgICAgICAgdGhhdC5lbC5vbigna2V5ZG93bi5hdXRvY29tcGxldGUnLCBmdW5jdGlvbiAoZSkgeyB0aGF0Lm9uS2V5UHJlc3MoZSk7IH0pO1xuICAgICAgICAgICAgdGhhdC5lbC5vbigna2V5dXAuYXV0b2NvbXBsZXRlJywgZnVuY3Rpb24gKGUpIHsgdGhhdC5vbktleVVwKGUpOyB9KTtcbiAgICAgICAgICAgIHRoYXQuZWwub24oJ2JsdXIuYXV0b2NvbXBsZXRlJywgZnVuY3Rpb24gKCkgeyB0aGF0Lm9uQmx1cigpOyB9KTtcbiAgICAgICAgICAgIHRoYXQuZWwub24oJ2ZvY3VzLmF1dG9jb21wbGV0ZScsIGZ1bmN0aW9uICgpIHsgdGhhdC5vbkZvY3VzKCk7IH0pO1xuICAgICAgICAgICAgdGhhdC5lbC5vbignY2hhbmdlLmF1dG9jb21wbGV0ZScsIGZ1bmN0aW9uIChlKSB7IHRoYXQub25LZXlVcChlKTsgfSk7XG4gICAgICAgICAgICB0aGF0LmVsLm9uKCdpbnB1dC5hdXRvY29tcGxldGUnLCBmdW5jdGlvbiAoZSkgeyB0aGF0Lm9uS2V5VXAoZSk7IH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIG9uRm9jdXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgdGhhdC5maXhQb3NpdGlvbigpO1xuXG4gICAgICAgICAgICBpZiAodGhhdC5lbC52YWwoKS5sZW5ndGggPj0gdGhhdC5vcHRpb25zLm1pbkNoYXJzKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5vblZhbHVlQ2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgb25CbHVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8vIElmIHVzZXIgY2xpY2tlZCBvbiBhIHN1Z2dlc3Rpb24sIGhpZGUoKSB3aWxsXG4gICAgICAgICAgICAvLyBiZSBjYW5jZWxlZCwgb3RoZXJ3aXNlIGNsb3NlIHN1Z2dlc3Rpb25zXG4gICAgICAgICAgICB0aGF0LmJsdXJUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGF0LmhpZGUoKTtcbiAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBhYm9ydEFqYXg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIGlmICh0aGF0LmN1cnJlbnRSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgdGhhdC5jdXJyZW50UmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICAgICAgICAgIHRoYXQuY3VycmVudFJlcXVlc3QgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uIChzdXBwbGllZE9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGhhdC5vcHRpb25zO1xuXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgb3B0aW9ucywgc3VwcGxpZWRPcHRpb25zKTtcblxuICAgICAgICAgICAgdGhhdC5pc0xvY2FsID0gJC5pc0FycmF5KG9wdGlvbnMubG9va3VwKTtcblxuICAgICAgICAgICAgaWYgKHRoYXQuaXNMb2NhbCkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubG9va3VwID0gdGhhdC52ZXJpZnlTdWdnZXN0aW9uc0Zvcm1hdChvcHRpb25zLmxvb2t1cCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMub3JpZW50YXRpb24gPSB0aGF0LnZhbGlkYXRlT3JpZW50YXRpb24ob3B0aW9ucy5vcmllbnRhdGlvbiwgJ2JvdHRvbScpO1xuXG4gICAgICAgICAgICAvLyBBZGp1c3QgaGVpZ2h0LCB3aWR0aCBhbmQgei1pbmRleDpcbiAgICAgICAgICAgICQodGhhdC5zdWdnZXN0aW9uc0NvbnRhaW5lcikuY3NzKHtcbiAgICAgICAgICAgICAgICAnbWF4LWhlaWdodCc6IG9wdGlvbnMubWF4SGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgICAgICAgICAnd2lkdGgnOiBvcHRpb25zLndpZHRoICsgJ3B4JyxcbiAgICAgICAgICAgICAgICAnei1pbmRleCc6IG9wdGlvbnMuekluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIGNsZWFyQ2FjaGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVkUmVzcG9uc2UgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuYmFkUXVlcmllcyA9IFtdO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFZhbHVlID0gJyc7XG4gICAgICAgICAgICB0aGlzLnN1Z2dlc3Rpb25zID0gW107XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzYWJsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdGhhdC5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhhdC5vbkNoYW5nZVRpbWVvdXQpO1xuICAgICAgICAgICAgdGhhdC5hYm9ydEFqYXgoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBlbmFibGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBmaXhQb3NpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gVXNlIG9ubHkgd2hlbiBjb250YWluZXIgaGFzIGFscmVhZHkgaXRzIGNvbnRlbnRcblxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgICRjb250YWluZXIgPSAkKHRoYXQuc3VnZ2VzdGlvbnNDb250YWluZXIpLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclBhcmVudCA9ICRjb250YWluZXIucGFyZW50KCkuZ2V0KDApO1xuICAgICAgICAgICAgLy8gRml4IHBvc2l0aW9uIGF1dG9tYXRpY2FsbHkgd2hlbiBhcHBlbmRlZCB0byBib2R5LlxuICAgICAgICAgICAgLy8gSW4gb3RoZXIgY2FzZXMgZm9yY2UgcGFyYW1ldGVyIG11c3QgYmUgZ2l2ZW4uXG4gICAgICAgICAgICBpZiAoY29udGFpbmVyUGFyZW50ICE9PSBkb2N1bWVudC5ib2R5ICYmICF0aGF0Lm9wdGlvbnMuZm9yY2VGaXhQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hvb3NlIG9yaWVudGF0aW9uXG4gICAgICAgICAgICB2YXIgb3JpZW50YXRpb24gPSB0aGF0Lm9wdGlvbnMub3JpZW50YXRpb24sXG4gICAgICAgICAgICAgICAgY29udGFpbmVySGVpZ2h0ID0gJGNvbnRhaW5lci5vdXRlckhlaWdodCgpLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IHRoYXQuZWwub3V0ZXJIZWlnaHQoKSxcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGF0LmVsLm9mZnNldCgpLFxuICAgICAgICAgICAgICAgIHN0eWxlcyA9IHsgJ3RvcCc6IG9mZnNldC50b3AsICdsZWZ0Jzogb2Zmc2V0LmxlZnQgfTtcblxuICAgICAgICAgICAgaWYgKG9yaWVudGF0aW9uID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmlld1BvcnRIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcCA9ICQod2luZG93KS5zY3JvbGxUb3AoKSxcbiAgICAgICAgICAgICAgICAgICAgdG9wT3ZlcmZsb3cgPSAtc2Nyb2xsVG9wICsgb2Zmc2V0LnRvcCAtIGNvbnRhaW5lckhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tT3ZlcmZsb3cgPSBzY3JvbGxUb3AgKyB2aWV3UG9ydEhlaWdodCAtIChvZmZzZXQudG9wICsgaGVpZ2h0ICsgY29udGFpbmVySGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uID0gKE1hdGgubWF4KHRvcE92ZXJmbG93LCBib3R0b21PdmVyZmxvdykgPT09IHRvcE92ZXJmbG93KSA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcmllbnRhdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgICAgICBzdHlsZXMudG9wICs9IC1jb250YWluZXJIZWlnaHQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0eWxlcy50b3AgKz0gaGVpZ2h0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBjb250YWluZXIgaXMgbm90IHBvc2l0aW9uZWQgdG8gYm9keSxcbiAgICAgICAgICAgIC8vIGNvcnJlY3QgaXRzIHBvc2l0aW9uIHVzaW5nIG9mZnNldCBwYXJlbnQgb2Zmc2V0XG4gICAgICAgICAgICBpZihjb250YWluZXJQYXJlbnQgIT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3BhY2l0eSA9ICRjb250YWluZXIuY3NzKCdvcGFjaXR5JyksXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE9mZnNldERpZmY7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGF0LnZpc2libGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRhaW5lci5jc3MoJ29wYWNpdHknLCAwKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBhcmVudE9mZnNldERpZmYgPSAkY29udGFpbmVyLm9mZnNldFBhcmVudCgpLm9mZnNldCgpO1xuICAgICAgICAgICAgICAgIHN0eWxlcy50b3AgLT0gcGFyZW50T2Zmc2V0RGlmZi50b3A7XG4gICAgICAgICAgICAgICAgc3R5bGVzLmxlZnQgLT0gcGFyZW50T2Zmc2V0RGlmZi5sZWZ0O1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGF0LnZpc2libGUpe1xuICAgICAgICAgICAgICAgICAgICAkY29udGFpbmVyLmNzcygnb3BhY2l0eScsIG9wYWNpdHkpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGF0Lm9wdGlvbnMud2lkdGggPT09ICdhdXRvJykge1xuICAgICAgICAgICAgICAgIHN0eWxlcy53aWR0aCA9IHRoYXQuZWwub3V0ZXJXaWR0aCgpICsgJ3B4JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJGNvbnRhaW5lci5jc3Moc3R5bGVzKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpc0N1cnNvckF0RW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgdmFsTGVuZ3RoID0gdGhhdC5lbC52YWwoKS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uU3RhcnQgPSB0aGF0LmVsZW1lbnQuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgICAgICAgcmFuZ2U7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0aW9uU3RhcnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvblN0YXJ0ID09PSB2YWxMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIC12YWxMZW5ndGgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWxMZW5ndGggPT09IHJhbmdlLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb25LZXlQcmVzczogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgLy8gSWYgc3VnZ2VzdGlvbnMgYXJlIGhpZGRlbiBhbmQgdXNlciBwcmVzc2VzIGFycm93IGRvd24sIGRpc3BsYXkgc3VnZ2VzdGlvbnM6XG4gICAgICAgICAgICBpZiAoIXRoYXQuZGlzYWJsZWQgJiYgIXRoYXQudmlzaWJsZSAmJiBlLndoaWNoID09PSBrZXlzLkRPV04gJiYgdGhhdC5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnN1Z2dlc3QoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGF0LmRpc2FibGVkIHx8ICF0aGF0LnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAoZS53aGljaCkge1xuICAgICAgICAgICAgICAgIGNhc2Uga2V5cy5FU0M6XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZWwudmFsKHRoYXQuY3VycmVudFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2Uga2V5cy5SSUdIVDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoYXQuaGludCAmJiB0aGF0Lm9wdGlvbnMub25IaW50ICYmIHRoYXQuaXNDdXJzb3JBdEVuZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnNlbGVjdEhpbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjYXNlIGtleXMuVEFCOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5oaW50ICYmIHRoYXQub3B0aW9ucy5vbkhpbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc2VsZWN0SGludCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0LnNlbGVjdGVkSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNlbGVjdCh0aGF0LnNlbGVjdGVkSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLnRhYkRpc2FibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2Uga2V5cy5SRVRVUk46XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0LnNlbGVjdGVkSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNlbGVjdCh0aGF0LnNlbGVjdGVkSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGtleXMuVVA6XG4gICAgICAgICAgICAgICAgICAgIHRoYXQubW92ZVVwKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2Uga2V5cy5ET1dOOlxuICAgICAgICAgICAgICAgICAgICB0aGF0Lm1vdmVEb3duKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2FuY2VsIGV2ZW50IGlmIGZ1bmN0aW9uIGRpZCBub3QgcmV0dXJuOlxuICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBvbktleVVwOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAodGhhdC5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dpdGNoIChlLndoaWNoKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBrZXlzLlVQOlxuICAgICAgICAgICAgICAgIGNhc2Uga2V5cy5ET1dOOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGF0Lm9uQ2hhbmdlVGltZW91dCk7XG5cbiAgICAgICAgICAgIGlmICh0aGF0LmN1cnJlbnRWYWx1ZSAhPT0gdGhhdC5lbC52YWwoKSkge1xuICAgICAgICAgICAgICAgIHRoYXQuZmluZEJlc3RIaW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoYXQub3B0aW9ucy5kZWZlclJlcXVlc3RCeSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGVmZXIgbG9va3VwIGluIGNhc2Ugd2hlbiB2YWx1ZSBjaGFuZ2VzIHZlcnkgcXVpY2tseTpcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5vbkNoYW5nZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQub25WYWx1ZUNoYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LCB0aGF0Lm9wdGlvbnMuZGVmZXJSZXF1ZXN0QnkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQub25WYWx1ZUNoYW5nZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBvblZhbHVlQ2hhbmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHRoYXQub3B0aW9ucyxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoYXQuZWwudmFsKCksXG4gICAgICAgICAgICAgICAgcXVlcnkgPSB0aGF0LmdldFF1ZXJ5KHZhbHVlKTtcblxuICAgICAgICAgICAgaWYgKHRoYXQuc2VsZWN0aW9uICYmIHRoYXQuY3VycmVudFZhbHVlICE9PSBxdWVyeSkge1xuICAgICAgICAgICAgICAgIHRoYXQuc2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICAob3B0aW9ucy5vbkludmFsaWRhdGVTZWxlY3Rpb24gfHwgJC5ub29wKS5jYWxsKHRoYXQuZWxlbWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGF0Lm9uQ2hhbmdlVGltZW91dCk7XG4gICAgICAgICAgICB0aGF0LmN1cnJlbnRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhhdC5zZWxlY3RlZEluZGV4ID0gLTE7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGV4aXN0aW5nIHN1Z2dlc3Rpb24gZm9yIHRoZSBtYXRjaCBiZWZvcmUgcHJvY2VlZGluZzpcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRyaWdnZXJTZWxlY3RPblZhbGlkSW5wdXQgJiYgdGhhdC5pc0V4YWN0TWF0Y2gocXVlcnkpKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5zZWxlY3QoMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocXVlcnkubGVuZ3RoIDwgb3B0aW9ucy5taW5DaGFycykge1xuICAgICAgICAgICAgICAgIHRoYXQuaGlkZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGF0LmdldFN1Z2dlc3Rpb25zKHF1ZXJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBpc0V4YWN0TWF0Y2g6IGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICAgICAgdmFyIHN1Z2dlc3Rpb25zID0gdGhpcy5zdWdnZXN0aW9ucztcblxuICAgICAgICAgICAgcmV0dXJuIChzdWdnZXN0aW9ucy5sZW5ndGggPT09IDEgJiYgc3VnZ2VzdGlvbnNbMF0udmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gcXVlcnkudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0UXVlcnk6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGRlbGltaXRlciA9IHRoaXMub3B0aW9ucy5kZWxpbWl0ZXIsXG4gICAgICAgICAgICAgICAgcGFydHM7XG5cbiAgICAgICAgICAgIGlmICghZGVsaW1pdGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFydHMgPSB2YWx1ZS5zcGxpdChkZWxpbWl0ZXIpO1xuICAgICAgICAgICAgcmV0dXJuICQudHJpbShwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0U3VnZ2VzdGlvbnNMb2NhbDogZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHRoYXQub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBxdWVyeUxvd2VyQ2FzZSA9IHF1ZXJ5LnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgZmlsdGVyID0gb3B0aW9ucy5sb29rdXBGaWx0ZXIsXG4gICAgICAgICAgICAgICAgbGltaXQgPSBwYXJzZUludChvcHRpb25zLmxvb2t1cExpbWl0LCAxMCksXG4gICAgICAgICAgICAgICAgZGF0YTtcblxuICAgICAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBzdWdnZXN0aW9uczogJC5ncmVwKG9wdGlvbnMubG9va3VwLCBmdW5jdGlvbiAoc3VnZ2VzdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyKHN1Z2dlc3Rpb24sIHF1ZXJ5LCBxdWVyeUxvd2VyQ2FzZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChsaW1pdCAmJiBkYXRhLnN1Z2dlc3Rpb25zLmxlbmd0aCA+IGxpbWl0KSB7XG4gICAgICAgICAgICAgICAgZGF0YS5zdWdnZXN0aW9ucyA9IGRhdGEuc3VnZ2VzdGlvbnMuc2xpY2UoMCwgbGltaXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRTdWdnZXN0aW9uczogZnVuY3Rpb24gKHEpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZSxcbiAgICAgICAgICAgICAgICB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGhhdC5vcHRpb25zLFxuICAgICAgICAgICAgICAgIHNlcnZpY2VVcmwgPSBvcHRpb25zLnNlcnZpY2VVcmwsXG4gICAgICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgICAgIGNhY2hlS2V5LFxuICAgICAgICAgICAgICAgIGFqYXhTZXR0aW5ncztcblxuICAgICAgICAgICAgb3B0aW9ucy5wYXJhbXNbb3B0aW9ucy5wYXJhbU5hbWVdID0gcTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMub25TZWFyY2hTdGFydC5jYWxsKHRoYXQuZWxlbWVudCwgb3B0aW9ucy5wYXJhbXMpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFyYW1zID0gb3B0aW9ucy5pZ25vcmVQYXJhbXMgPyBudWxsIDogb3B0aW9ucy5wYXJhbXM7XG5cbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0aW9ucy5sb29rdXApKXtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmxvb2t1cChxLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnN1Z2dlc3Rpb25zID0gZGF0YS5zdWdnZXN0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zdWdnZXN0KCk7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25TZWFyY2hDb21wbGV0ZS5jYWxsKHRoYXQuZWxlbWVudCwgcSwgZGF0YS5zdWdnZXN0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhhdC5pc0xvY2FsKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB0aGF0LmdldFN1Z2dlc3Rpb25zTG9jYWwocSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24oc2VydmljZVVybCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZVVybCA9IHNlcnZpY2VVcmwuY2FsbCh0aGF0LmVsZW1lbnQsIHEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWNoZUtleSA9IHNlcnZpY2VVcmwgKyAnPycgKyAkLnBhcmFtKHBhcmFtcyB8fCB7fSk7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB0aGF0LmNhY2hlZFJlc3BvbnNlW2NhY2hlS2V5XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmICQuaXNBcnJheShyZXNwb25zZS5zdWdnZXN0aW9ucykpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnN1Z2dlc3Rpb25zID0gcmVzcG9uc2Uuc3VnZ2VzdGlvbnM7XG4gICAgICAgICAgICAgICAgdGhhdC5zdWdnZXN0KCk7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5vblNlYXJjaENvbXBsZXRlLmNhbGwodGhhdC5lbGVtZW50LCBxLCByZXNwb25zZS5zdWdnZXN0aW9ucyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGF0LmlzQmFkUXVlcnkocSkpIHtcbiAgICAgICAgICAgICAgICB0aGF0LmFib3J0QWpheCgpO1xuXG4gICAgICAgICAgICAgICAgYWpheFNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgICAgICB1cmw6IHNlcnZpY2VVcmwsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogb3B0aW9ucy50eXBlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogb3B0aW9ucy5kYXRhVHlwZVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkLmV4dGVuZChhamF4U2V0dGluZ3MsIG9wdGlvbnMuYWpheFNldHRpbmdzKTtcblxuICAgICAgICAgICAgICAgIHRoYXQuY3VycmVudFJlcXVlc3QgPSAkLmFqYXgoYWpheFNldHRpbmdzKS5kb25lKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuY3VycmVudFJlcXVlc3QgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybVJlc3VsdChkYXRhLCBxKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5wcm9jZXNzUmVzcG9uc2UocmVzdWx0LCBxLCBjYWNoZUtleSk7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25TZWFyY2hDb21wbGV0ZS5jYWxsKHRoYXQuZWxlbWVudCwgcSwgcmVzdWx0LnN1Z2dlc3Rpb25zKTtcbiAgICAgICAgICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uIChqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vblNlYXJjaEVycm9yLmNhbGwodGhhdC5lbGVtZW50LCBxLCBqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLm9uU2VhcmNoQ29tcGxldGUuY2FsbCh0aGF0LmVsZW1lbnQsIHEsIFtdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBpc0JhZFF1ZXJ5OiBmdW5jdGlvbiAocSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMucHJldmVudEJhZFF1ZXJpZXMpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGJhZFF1ZXJpZXMgPSB0aGlzLmJhZFF1ZXJpZXMsXG4gICAgICAgICAgICAgICAgaSA9IGJhZFF1ZXJpZXMubGVuZ3RoO1xuXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgaWYgKHEuaW5kZXhPZihiYWRRdWVyaWVzW2ldKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gJCh0aGF0LnN1Z2dlc3Rpb25zQ29udGFpbmVyKTtcblxuICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbih0aGF0Lm9wdGlvbnMub25IaWRlKSAmJiB0aGF0LnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMub25IaWRlLmNhbGwodGhhdC5lbGVtZW50LCBjb250YWluZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGF0LnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoYXQuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoYXQub25DaGFuZ2VUaW1lb3V0KTtcbiAgICAgICAgICAgICQodGhhdC5zdWdnZXN0aW9uc0NvbnRhaW5lcikuaGlkZSgpO1xuICAgICAgICAgICAgdGhhdC5zaWduYWxIaW50KG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN1Z2dlc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dOb1N1Z2dlc3Rpb25Ob3RpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub1N1Z2dlc3Rpb25zKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB0aGF0Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgZ3JvdXBCeSA9IG9wdGlvbnMuZ3JvdXBCeSxcbiAgICAgICAgICAgICAgICBmb3JtYXRSZXN1bHQgPSBvcHRpb25zLmZvcm1hdFJlc3VsdCxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoYXQuZ2V0UXVlcnkodGhhdC5jdXJyZW50VmFsdWUpLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IHRoYXQuY2xhc3Nlcy5zdWdnZXN0aW9uLFxuICAgICAgICAgICAgICAgIGNsYXNzU2VsZWN0ZWQgPSB0aGF0LmNsYXNzZXMuc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gJCh0aGF0LnN1Z2dlc3Rpb25zQ29udGFpbmVyKSxcbiAgICAgICAgICAgICAgICBub1N1Z2dlc3Rpb25zQ29udGFpbmVyID0gJCh0aGF0Lm5vU3VnZ2VzdGlvbnNDb250YWluZXIpLFxuICAgICAgICAgICAgICAgIGJlZm9yZVJlbmRlciA9IG9wdGlvbnMuYmVmb3JlUmVuZGVyLFxuICAgICAgICAgICAgICAgIGh0bWwgPSAnJyxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeSxcbiAgICAgICAgICAgICAgICBmb3JtYXRHcm91cCA9IGZ1bmN0aW9uIChzdWdnZXN0aW9uLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRDYXRlZ29yeSA9IHN1Z2dlc3Rpb24uZGF0YVtncm91cEJ5XTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhdGVnb3J5ID09PSBjdXJyZW50Q2F0ZWdvcnkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkgPSBjdXJyZW50Q2F0ZWdvcnk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmZvcm1hdEdyb3VwKHN1Z2dlc3Rpb24sIGNhdGVnb3J5KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudHJpZ2dlclNlbGVjdE9uVmFsaWRJbnB1dCAmJiB0aGF0LmlzRXhhY3RNYXRjaCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnNlbGVjdCgwKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEJ1aWxkIHN1Z2dlc3Rpb25zIGlubmVyIEhUTUw6XG4gICAgICAgICAgICAkLmVhY2godGhhdC5zdWdnZXN0aW9ucywgZnVuY3Rpb24gKGksIHN1Z2dlc3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBCeSl7XG4gICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gZm9ybWF0R3JvdXAoc3VnZ2VzdGlvbiwgdmFsdWUsIGkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCInICsgY2xhc3NOYW1lICsgJ1wiIGRhdGEtaW5kZXg9XCInICsgaSArICdcIj4nICsgZm9ybWF0UmVzdWx0KHN1Z2dlc3Rpb24sIHZhbHVlLCBpKSArICc8L2Rpdj4nO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRqdXN0Q29udGFpbmVyV2lkdGgoKTtcblxuICAgICAgICAgICAgbm9TdWdnZXN0aW9uc0NvbnRhaW5lci5kZXRhY2goKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5odG1sKGh0bWwpO1xuXG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGJlZm9yZVJlbmRlcikpIHtcbiAgICAgICAgICAgICAgICBiZWZvcmVSZW5kZXIuY2FsbCh0aGF0LmVsZW1lbnQsIGNvbnRhaW5lciwgdGhhdC5zdWdnZXN0aW9ucyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoYXQuZml4UG9zaXRpb24oKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5zaG93KCk7XG5cbiAgICAgICAgICAgIC8vIFNlbGVjdCBmaXJzdCB2YWx1ZSBieSBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXV0b1NlbGVjdEZpcnN0KSB7XG4gICAgICAgICAgICAgICAgdGhhdC5zZWxlY3RlZEluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuc2Nyb2xsVG9wKDApO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5jaGlsZHJlbignLicgKyBjbGFzc05hbWUpLmZpcnN0KCkuYWRkQ2xhc3MoY2xhc3NTZWxlY3RlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoYXQudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGF0LmZpbmRCZXN0SGludCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG5vU3VnZ2VzdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgYmVmb3JlUmVuZGVyID0gdGhhdC5vcHRpb25zLmJlZm9yZVJlbmRlcixcbiAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gJCh0aGF0LnN1Z2dlc3Rpb25zQ29udGFpbmVyKSxcbiAgICAgICAgICAgICAgICAgbm9TdWdnZXN0aW9uc0NvbnRhaW5lciA9ICQodGhhdC5ub1N1Z2dlc3Rpb25zQ29udGFpbmVyKTtcblxuICAgICAgICAgICAgdGhpcy5hZGp1c3RDb250YWluZXJXaWR0aCgpO1xuXG4gICAgICAgICAgICAvLyBTb21lIGV4cGxpY2l0IHN0ZXBzLiBCZSBjYXJlZnVsIGhlcmUgYXMgaXQgZWFzeSB0byBnZXRcbiAgICAgICAgICAgIC8vIG5vU3VnZ2VzdGlvbnNDb250YWluZXIgcmVtb3ZlZCBmcm9tIERPTSBpZiBub3QgZGV0YWNoZWQgcHJvcGVybHkuXG4gICAgICAgICAgICBub1N1Z2dlc3Rpb25zQ29udGFpbmVyLmRldGFjaCgpO1xuXG4gICAgICAgICAgICAvLyBjbGVhbiBzdWdnZXN0aW9ucyBpZiBhbnlcbiAgICAgICAgICAgIGNvbnRhaW5lci5lbXB0eSgpOyBcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmQobm9TdWdnZXN0aW9uc0NvbnRhaW5lcik7XG5cbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24oYmVmb3JlUmVuZGVyKSkge1xuICAgICAgICAgICAgICAgIGJlZm9yZVJlbmRlci5jYWxsKHRoYXQuZWxlbWVudCwgY29udGFpbmVyLCB0aGF0LnN1Z2dlc3Rpb25zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhhdC5maXhQb3NpdGlvbigpO1xuXG4gICAgICAgICAgICBjb250YWluZXIuc2hvdygpO1xuICAgICAgICAgICAgdGhhdC52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBhZGp1c3RDb250YWluZXJXaWR0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHRoYXQub3B0aW9ucyxcbiAgICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgICBjb250YWluZXIgPSAkKHRoYXQuc3VnZ2VzdGlvbnNDb250YWluZXIpO1xuXG4gICAgICAgICAgICAvLyBJZiB3aWR0aCBpcyBhdXRvLCBhZGp1c3Qgd2lkdGggYmVmb3JlIGRpc3BsYXlpbmcgc3VnZ2VzdGlvbnMsXG4gICAgICAgICAgICAvLyBiZWNhdXNlIGlmIGluc3RhbmNlIHdhcyBjcmVhdGVkIGJlZm9yZSBpbnB1dCBoYWQgd2lkdGgsIGl0IHdpbGwgYmUgemVyby5cbiAgICAgICAgICAgIC8vIEFsc28gaXQgYWRqdXN0cyBpZiBpbnB1dCB3aWR0aCBoYXMgY2hhbmdlZC5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLndpZHRoID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgICAgICB3aWR0aCA9IHRoYXQuZWwub3V0ZXJXaWR0aCgpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5jc3MoJ3dpZHRoJywgd2lkdGggPiAwID8gd2lkdGggOiAzMDApO1xuICAgICAgICAgICAgfSBlbHNlIGlmKG9wdGlvbnMud2lkdGggPT09ICdmbGV4Jykge1xuICAgICAgICAgICAgICAgIC8vIFRydXN0IHRoZSBzb3VyY2UhIFVuc2V0IHRoZSB3aWR0aCBwcm9wZXJ0eSBzbyBpdCB3aWxsIGJlIHRoZSBtYXggbGVuZ3RoXG4gICAgICAgICAgICAgICAgLy8gdGhlIGNvbnRhaW5pbmcgZWxlbWVudHMuXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmNzcygnd2lkdGgnLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZmluZEJlc3RIaW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGF0LmVsLnZhbCgpLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgYmVzdE1hdGNoID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJC5lYWNoKHRoYXQuc3VnZ2VzdGlvbnMsIGZ1bmN0aW9uIChpLCBzdWdnZXN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZvdW5kTWF0Y2ggPSBzdWdnZXN0aW9uLnZhbHVlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih2YWx1ZSkgPT09IDA7XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgYmVzdE1hdGNoID0gc3VnZ2VzdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICFmb3VuZE1hdGNoO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoYXQuc2lnbmFsSGludChiZXN0TWF0Y2gpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNpZ25hbEhpbnQ6IGZ1bmN0aW9uIChzdWdnZXN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgaGludFZhbHVlID0gJycsXG4gICAgICAgICAgICAgICAgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoc3VnZ2VzdGlvbikge1xuICAgICAgICAgICAgICAgIGhpbnRWYWx1ZSA9IHRoYXQuY3VycmVudFZhbHVlICsgc3VnZ2VzdGlvbi52YWx1ZS5zdWJzdHIodGhhdC5jdXJyZW50VmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGF0LmhpbnRWYWx1ZSAhPT0gaGludFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5oaW50VmFsdWUgPSBoaW50VmFsdWU7XG4gICAgICAgICAgICAgICAgdGhhdC5oaW50ID0gc3VnZ2VzdGlvbjtcbiAgICAgICAgICAgICAgICAodGhpcy5vcHRpb25zLm9uSGludCB8fCAkLm5vb3ApKGhpbnRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdmVyaWZ5U3VnZ2VzdGlvbnNGb3JtYXQ6IGZ1bmN0aW9uIChzdWdnZXN0aW9ucykge1xuICAgICAgICAgICAgLy8gSWYgc3VnZ2VzdGlvbnMgaXMgc3RyaW5nIGFycmF5LCBjb252ZXJ0IHRoZW0gdG8gc3VwcG9ydGVkIGZvcm1hdDpcbiAgICAgICAgICAgIGlmIChzdWdnZXN0aW9ucy5sZW5ndGggJiYgdHlwZW9mIHN1Z2dlc3Rpb25zWzBdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAkLm1hcChzdWdnZXN0aW9ucywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZGF0YTogbnVsbCB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc3VnZ2VzdGlvbnM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdmFsaWRhdGVPcmllbnRhdGlvbjogZnVuY3Rpb24ob3JpZW50YXRpb24sIGZhbGxiYWNrKSB7XG4gICAgICAgICAgICBvcmllbnRhdGlvbiA9ICQudHJpbShvcmllbnRhdGlvbiB8fCAnJykudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgaWYoJC5pbkFycmF5KG9yaWVudGF0aW9uLCBbJ2F1dG8nLCAnYm90dG9tJywgJ3RvcCddKSA9PT0gLTEpe1xuICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uID0gZmFsbGJhY2s7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvcmllbnRhdGlvbjtcbiAgICAgICAgfSxcblxuICAgICAgICBwcm9jZXNzUmVzcG9uc2U6IGZ1bmN0aW9uIChyZXN1bHQsIG9yaWdpbmFsUXVlcnksIGNhY2hlS2V5KSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHRoYXQub3B0aW9ucztcblxuICAgICAgICAgICAgcmVzdWx0LnN1Z2dlc3Rpb25zID0gdGhhdC52ZXJpZnlTdWdnZXN0aW9uc0Zvcm1hdChyZXN1bHQuc3VnZ2VzdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyBDYWNoZSByZXN1bHRzIGlmIGNhY2hlIGlzIG5vdCBkaXNhYmxlZDpcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5ub0NhY2hlKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5jYWNoZWRSZXNwb25zZVtjYWNoZUtleV0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucHJldmVudEJhZFF1ZXJpZXMgJiYgIXJlc3VsdC5zdWdnZXN0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5iYWRRdWVyaWVzLnB1c2gob3JpZ2luYWxRdWVyeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXR1cm4gaWYgb3JpZ2luYWxRdWVyeSBpcyBub3QgbWF0Y2hpbmcgY3VycmVudCBxdWVyeTpcbiAgICAgICAgICAgIGlmIChvcmlnaW5hbFF1ZXJ5ICE9PSB0aGF0LmdldFF1ZXJ5KHRoYXQuY3VycmVudFZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhhdC5zdWdnZXN0aW9ucyA9IHJlc3VsdC5zdWdnZXN0aW9ucztcbiAgICAgICAgICAgIHRoYXQuc3VnZ2VzdCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBhY3RpdmVJdGVtLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gdGhhdC5jbGFzc2VzLnNlbGVjdGVkLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9ICQodGhhdC5zdWdnZXN0aW9uc0NvbnRhaW5lciksXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBjb250YWluZXIuZmluZCgnLicgKyB0aGF0LmNsYXNzZXMuc3VnZ2VzdGlvbik7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lci5maW5kKCcuJyArIHNlbGVjdGVkKS5yZW1vdmVDbGFzcyhzZWxlY3RlZCk7XG5cbiAgICAgICAgICAgIHRoYXQuc2VsZWN0ZWRJbmRleCA9IGluZGV4O1xuXG4gICAgICAgICAgICBpZiAodGhhdC5zZWxlY3RlZEluZGV4ICE9PSAtMSAmJiBjaGlsZHJlbi5sZW5ndGggPiB0aGF0LnNlbGVjdGVkSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVJdGVtID0gY2hpbGRyZW4uZ2V0KHRoYXQuc2VsZWN0ZWRJbmRleCk7XG4gICAgICAgICAgICAgICAgJChhY3RpdmVJdGVtKS5hZGRDbGFzcyhzZWxlY3RlZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZUl0ZW07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlbGVjdEhpbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBpID0gJC5pbkFycmF5KHRoYXQuaGludCwgdGhhdC5zdWdnZXN0aW9ucyk7XG5cbiAgICAgICAgICAgIHRoYXQuc2VsZWN0KGkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlbGVjdDogZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHRoYXQuaGlkZSgpO1xuICAgICAgICAgICAgdGhhdC5vblNlbGVjdChpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBtb3ZlVXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKHRoYXQuc2VsZWN0ZWRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGF0LnNlbGVjdGVkSW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICAkKHRoYXQuc3VnZ2VzdGlvbnNDb250YWluZXIpLmNoaWxkcmVuKCkuZmlyc3QoKS5yZW1vdmVDbGFzcyh0aGF0LmNsYXNzZXMuc2VsZWN0ZWQpO1xuICAgICAgICAgICAgICAgIHRoYXQuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgIHRoYXQuZWwudmFsKHRoYXQuY3VycmVudFZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGF0LmZpbmRCZXN0SGludCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhhdC5hZGp1c3RTY3JvbGwodGhhdC5zZWxlY3RlZEluZGV4IC0gMSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbW92ZURvd246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKHRoYXQuc2VsZWN0ZWRJbmRleCA9PT0gKHRoYXQuc3VnZ2VzdGlvbnMubGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoYXQuYWRqdXN0U2Nyb2xsKHRoYXQuc2VsZWN0ZWRJbmRleCArIDEpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFkanVzdFNjcm9sbDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYWN0aXZlSXRlbSA9IHRoYXQuYWN0aXZhdGUoaW5kZXgpO1xuXG4gICAgICAgICAgICBpZiAoIWFjdGl2ZUl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBvZmZzZXRUb3AsXG4gICAgICAgICAgICAgICAgdXBwZXJCb3VuZCxcbiAgICAgICAgICAgICAgICBsb3dlckJvdW5kLFxuICAgICAgICAgICAgICAgIGhlaWdodERlbHRhID0gJChhY3RpdmVJdGVtKS5vdXRlckhlaWdodCgpO1xuXG4gICAgICAgICAgICBvZmZzZXRUb3AgPSBhY3RpdmVJdGVtLm9mZnNldFRvcDtcbiAgICAgICAgICAgIHVwcGVyQm91bmQgPSAkKHRoYXQuc3VnZ2VzdGlvbnNDb250YWluZXIpLnNjcm9sbFRvcCgpO1xuICAgICAgICAgICAgbG93ZXJCb3VuZCA9IHVwcGVyQm91bmQgKyB0aGF0Lm9wdGlvbnMubWF4SGVpZ2h0IC0gaGVpZ2h0RGVsdGE7XG5cbiAgICAgICAgICAgIGlmIChvZmZzZXRUb3AgPCB1cHBlckJvdW5kKSB7XG4gICAgICAgICAgICAgICAgJCh0aGF0LnN1Z2dlc3Rpb25zQ29udGFpbmVyKS5zY3JvbGxUb3Aob2Zmc2V0VG9wKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob2Zmc2V0VG9wID4gbG93ZXJCb3VuZCkge1xuICAgICAgICAgICAgICAgICQodGhhdC5zdWdnZXN0aW9uc0NvbnRhaW5lcikuc2Nyb2xsVG9wKG9mZnNldFRvcCAtIHRoYXQub3B0aW9ucy5tYXhIZWlnaHQgKyBoZWlnaHREZWx0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhhdC5vcHRpb25zLnByZXNlcnZlSW5wdXQpIHtcbiAgICAgICAgICAgICAgICB0aGF0LmVsLnZhbCh0aGF0LmdldFZhbHVlKHRoYXQuc3VnZ2VzdGlvbnNbaW5kZXhdLnZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGF0LnNpZ25hbEhpbnQobnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb25TZWxlY3Q6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIG9uU2VsZWN0Q2FsbGJhY2sgPSB0aGF0Lm9wdGlvbnMub25TZWxlY3QsXG4gICAgICAgICAgICAgICAgc3VnZ2VzdGlvbiA9IHRoYXQuc3VnZ2VzdGlvbnNbaW5kZXhdO1xuXG4gICAgICAgICAgICB0aGF0LmN1cnJlbnRWYWx1ZSA9IHRoYXQuZ2V0VmFsdWUoc3VnZ2VzdGlvbi52YWx1ZSk7XG5cbiAgICAgICAgICAgIGlmICh0aGF0LmN1cnJlbnRWYWx1ZSAhPT0gdGhhdC5lbC52YWwoKSAmJiAhdGhhdC5vcHRpb25zLnByZXNlcnZlSW5wdXQpIHtcbiAgICAgICAgICAgICAgICB0aGF0LmVsLnZhbCh0aGF0LmN1cnJlbnRWYWx1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoYXQuc2lnbmFsSGludChudWxsKTtcbiAgICAgICAgICAgIHRoYXQuc3VnZ2VzdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIHRoYXQuc2VsZWN0aW9uID0gc3VnZ2VzdGlvbjtcblxuICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvblNlbGVjdENhbGxiYWNrKSkge1xuICAgICAgICAgICAgICAgIG9uU2VsZWN0Q2FsbGJhY2suY2FsbCh0aGF0LmVsZW1lbnQsIHN1Z2dlc3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBkZWxpbWl0ZXIgPSB0aGF0Lm9wdGlvbnMuZGVsaW1pdGVyLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICAgICAgICBwYXJ0cztcblxuICAgICAgICAgICAgaWYgKCFkZWxpbWl0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IHRoYXQuY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgcGFydHMgPSBjdXJyZW50VmFsdWUuc3BsaXQoZGVsaW1pdGVyKTtcblxuICAgICAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRWYWx1ZS5zdWJzdHIoMCwgY3VycmVudFZhbHVlLmxlbmd0aCAtIHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdLmxlbmd0aCkgKyB2YWx1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB0aGF0LmVsLm9mZignLmF1dG9jb21wbGV0ZScpLnJlbW92ZURhdGEoJ2F1dG9jb21wbGV0ZScpO1xuICAgICAgICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLmF1dG9jb21wbGV0ZScsIHRoYXQuZml4UG9zaXRpb25DYXB0dXJlKTtcbiAgICAgICAgICAgICQodGhhdC5zdWdnZXN0aW9uc0NvbnRhaW5lcikucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gQ3JlYXRlIGNoYWluYWJsZSBqUXVlcnkgcGx1Z2luOlxuICAgICQuZm4uZGV2YnJpZGdlQXV0b2NvbXBsZXRlID0gZnVuY3Rpb24gKG9wdGlvbnMsIGFyZ3MpIHtcbiAgICAgICAgdmFyIGRhdGFLZXkgPSAnYXV0b2NvbXBsZXRlJztcbiAgICAgICAgLy8gSWYgZnVuY3Rpb24gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50IHJldHVyblxuICAgICAgICAvLyBpbnN0YW5jZSBvZiB0aGUgZmlyc3QgbWF0Y2hlZCBlbGVtZW50OlxuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpcnN0KCkuZGF0YShkYXRhS2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGlucHV0RWxlbWVudCA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UgPSBpbnB1dEVsZW1lbnQuZGF0YShkYXRhS2V5KTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSAmJiB0eXBlb2YgaW5zdGFuY2Vbb3B0aW9uc10gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2Vbb3B0aW9uc10oYXJncyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBpbnN0YW5jZSBhbHJlYWR5IGV4aXN0cywgZGVzdHJveSBpdDpcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuZGlzcG9zZSkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGluc3RhbmNlID0gbmV3IEF1dG9jb21wbGV0ZSh0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQuZGF0YShkYXRhS2V5LCBpbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBEb24ndCBvdmVyd3JpdGUgaWYgaXQgYWxyZWFkeSBleGlzdHNcbiAgICBpZiAoISQuZm4uYXV0b2NvbXBsZXRlKSB7XG4gICAgICAgICQuZm4uYXV0b2NvbXBsZXRlID0gJC5mbi5kZXZicmlkZ2VBdXRvY29tcGxldGU7XG4gICAgfVxufSkpO1xuIiwiIWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChpKXt2YXIgcyxlLHI9aSYmaVswXXx8aSxvPXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCxuPW8/e3Jvb3Q6aX06aSxsPSEhbixhPXskOmMualF1ZXJ5LGRpcmVjdGlvbjpcInZcIixiYXJPbkNsczpcIl9zY3JvbGxiYXJcIixyZXNpemVEZWJvdW5jZTowLGV2ZW50OmZ1bmN0aW9uKHQsaSxzLGUpe24uJCh0KVtlfHxcIm9uXCJdKGkscyl9LGNzc0d1cnU6ITEsaW1wYWN0Olwic2Nyb2xsZXJcIixwb3NpdGlvbjpcInN0YXRpY1wifTtuPW58fHt9O2Zvcih2YXIgaCBpbiBhKXZvaWQgMD09PW5baF0mJihuW2hdPWFbaF0pO3M9bi4kJiZ0aGlzIGluc3RhbmNlb2Ygbi4kLG4uX2NoYWluP2U9bi5yb290OnM/bi5yb290PWU9dGhpczplPW4uJD9uLiQobi5yb290fHxuLnNjcm9sbGVyKTpbXTt2YXIgdT1uZXcgdC5mbi5jb25zdHJ1Y3RvcihlLG4sbCk7cmV0dXJuIHUuYXV0b1VwZGF0ZSYmdS5hdXRvVXBkYXRlKCksdX1mdW5jdGlvbiBpKHQsaSl7dmFyIHM9MCxlPXQ7Zm9yKHZvaWQgMCE9PWUubGVuZ3RoJiZlIT09Y3x8KGU9W2VdKTtlW3NdOylpLmNhbGwodGhpcyxlW3NdLHMpLHMrK31mdW5jdGlvbiBzKCl7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lKCl9ZnVuY3Rpb24gZSh0LHMsZSl7dC5fZXZlbnRIYW5kbGVycz10Ll9ldmVudEhhbmRsZXJzfHxbe2VsZW1lbnQ6dC5zY3JvbGxlcixoYW5kbGVyOmZ1bmN0aW9uKGkpe3Quc2Nyb2xsKGkpfSx0eXBlOlwic2Nyb2xsXCJ9LHtlbGVtZW50OnQucm9vdCxoYW5kbGVyOmZ1bmN0aW9uKCl7dC51cGRhdGUoKX0sdHlwZTpcInRyYW5zaXRpb25lbmQgYW5pbWF0aW9uZW5kXCJ9LHtlbGVtZW50OnQuc2Nyb2xsZXIsaGFuZGxlcjpmdW5jdGlvbigpe3QudXBkYXRlKCl9LHR5cGU6XCJrZXl1cFwifSx7ZWxlbWVudDp0LmJhcixoYW5kbGVyOmZ1bmN0aW9uKGkpe2kucHJldmVudERlZmF1bHQoKSx0LnNlbGVjdGlvbigpLHQuZHJhZy5ub3c9MSx0LmRyYWdnaW5nQ2xzJiZhKHQucm9vdCkuYWRkQ2xhc3ModC5kcmFnZ2luZ0Nscyl9LHR5cGU6XCJ0b3VjaHN0YXJ0IG1vdXNlZG93blwifSx7ZWxlbWVudDpkb2N1bWVudCxoYW5kbGVyOmZ1bmN0aW9uKCl7dC5zZWxlY3Rpb24oMSksdC5kcmFnLm5vdz0wLHQuZHJhZ2dpbmdDbHMmJmEodC5yb290KS5yZW1vdmVDbGFzcyh0LmRyYWdnaW5nQ2xzKX0sdHlwZTpcIm1vdXNldXAgYmx1ciB0b3VjaGVuZFwifSx7ZWxlbWVudDpkb2N1bWVudCxoYW5kbGVyOmZ1bmN0aW9uKGkpezIhPWkuYnV0dG9uJiZ0Ll9wb3MwKGkpfSx0eXBlOlwidG91Y2hzdGFydCBtb3VzZWRvd25cIn0se2VsZW1lbnQ6ZG9jdW1lbnQsaGFuZGxlcjpmdW5jdGlvbihpKXt0LmRyYWcubm93JiZ0LmRyYWcoaSl9LHR5cGU6XCJtb3VzZW1vdmUgdG91Y2htb3ZlXCJ9LHtlbGVtZW50OmMsaGFuZGxlcjpmdW5jdGlvbigpe3QudXBkYXRlKCl9LHR5cGU6XCJyZXNpemVcIn0se2VsZW1lbnQ6dC5yb290LGhhbmRsZXI6ZnVuY3Rpb24oKXt0LnVwZGF0ZSgpfSx0eXBlOlwic2l6ZUNoYW5nZVwifSx7ZWxlbWVudDp0LmNsaXBwZXIsaGFuZGxlcjpmdW5jdGlvbigpe3QuY2xpcHBlck9uU2Nyb2xsKCl9LHR5cGU6XCJzY3JvbGxcIn1dLGkodC5fZXZlbnRIYW5kbGVycyxmdW5jdGlvbih0KXt0LmVsZW1lbnQmJnModC5lbGVtZW50LHQudHlwZSx0LmhhbmRsZXIsZSl9KX1mdW5jdGlvbiByKHQsaSxzLGUpe3ZhciByPVwiZGF0YS1iYXJvbi1cIitpK1wiLWlkXCI7cmV0dXJuXCJvblwiPT1zP3Quc2V0QXR0cmlidXRlKHIsZSk6XCJvZmZcIj09cyYmdC5yZW1vdmVBdHRyaWJ1dGUociksdC5nZXRBdHRyaWJ1dGUocil9ZnVuY3Rpb24gbyh0KXt2YXIgaT1uZXcgdS5wcm90b3R5cGUuY29uc3RydWN0b3IodCk7cmV0dXJuIGUoaSx0LmV2ZW50LFwib25cIikscihpLnJvb3QsdC5kaXJlY3Rpb24sXCJvblwiLHAubGVuZ3RoKSxwLnB1c2goaSksaS51cGRhdGUoKSxpfWZ1bmN0aW9uIG4odCl7dmFyIGk9e30scz10fHx7fTtmb3IodmFyIGUgaW4gcylzLmhhc093blByb3BlcnR5KGUpJiYoaVtlXT1zW2VdKTtyZXR1cm4gaX1mdW5jdGlvbiBsKHQpe2lmKHRoaXMuZXZlbnRzJiZ0aGlzLmV2ZW50c1t0XSlmb3IodmFyIGk9MDtpPHRoaXMuZXZlbnRzW3RdLmxlbmd0aDtpKyspe3ZhciBzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTt0aGlzLmV2ZW50c1t0XVtpXS5hcHBseSh0aGlzLHMpfX12YXIgYz1mdW5jdGlvbigpe3JldHVybiB0aGlzfHwoMCxldmFsKShcInRoaXNcIil9KCksYT1jLiQsaD10LHU9e30sZj1bXCJsZWZ0XCIsXCJ0b3BcIixcInJpZ2h0XCIsXCJib3R0b21cIixcIndpZHRoXCIsXCJoZWlnaHRcIl0scD1bXSxkPXt2Ont4OlwiWVwiLHBvczpmWzFdLG9wcG9zOmZbM10sY3Jvc3NQb3M6ZlswXSxjcm9zc09wUG9zOmZbMl0sc2l6ZTpmWzVdLGNyb3NzU2l6ZTpmWzRdLGNyb3NzTWluU2l6ZTpcIm1pbi1cIitmWzRdLGNyb3NzTWF4U2l6ZTpcIm1heC1cIitmWzRdLGNsaWVudDpcImNsaWVudEhlaWdodFwiLGNyb3NzQ2xpZW50OlwiY2xpZW50V2lkdGhcIixzY3JvbGxFZGdlOlwic2Nyb2xsTGVmdFwiLG9mZnNldDpcIm9mZnNldEhlaWdodFwiLGNyb3NzT2Zmc2V0Olwib2Zmc2V0V2lkdGhcIixvZmZzZXRQb3M6XCJvZmZzZXRUb3BcIixzY3JvbGw6XCJzY3JvbGxUb3BcIixzY3JvbGxTaXplOlwic2Nyb2xsSGVpZ2h0XCJ9LGg6e3g6XCJYXCIscG9zOmZbMF0sb3Bwb3M6ZlsyXSxjcm9zc1BvczpmWzFdLGNyb3NzT3BQb3M6ZlszXSxzaXplOmZbNF0sY3Jvc3NTaXplOmZbNV0sY3Jvc3NNaW5TaXplOlwibWluLVwiK2ZbNV0sY3Jvc3NNYXhTaXplOlwibWF4LVwiK2ZbNV0sY2xpZW50OlwiY2xpZW50V2lkdGhcIixjcm9zc0NsaWVudDpcImNsaWVudEhlaWdodFwiLHNjcm9sbEVkZ2U6XCJzY3JvbGxUb3BcIixvZmZzZXQ6XCJvZmZzZXRXaWR0aFwiLGNyb3NzT2Zmc2V0Olwib2Zmc2V0SGVpZ2h0XCIsb2Zmc2V0UG9zOlwib2Zmc2V0TGVmdFwiLHNjcm9sbDpcInNjcm9sbExlZnRcIixzY3JvbGxTaXplOlwic2Nyb2xsV2lkdGhcIn19LHY9MTcsZz0xNSxtPS9bXFxzXFxTXSpNYWNpbnRvc2hbXFxzXFxTXSpcXCkgR2Vja29bXFxzXFxTXSovLGI9bS50ZXN0KGMubmF2aWdhdG9yJiZjLm5hdmlnYXRvci51c2VyQWdlbnQpO3QuZm49e2NvbnN0cnVjdG9yOmZ1bmN0aW9uKHQscyxlKXt2YXIgbD1uKHMpO2wuZXZlbnQ9ZnVuY3Rpb24odCxlLHIsbyl7aSh0LGZ1bmN0aW9uKHQpe3MuZXZlbnQodCxlLHIsbyl9KX0sdGhpcy5sZW5ndGg9MCxpLmNhbGwodGhpcyx0LGZ1bmN0aW9uKHQsaSl7dmFyIHM9cih0LGwuZGlyZWN0aW9uKSxlPStzO2lmKGU9PWUmJm51bGwhPT1zJiZwW2VdKXRoaXNbaV09cFtlXTtlbHNle3ZhciBjPW4obCk7aWYobC5yb290JiZsLnNjcm9sbGVyKXtpZihjLnNjcm9sbGVyPWwuJChsLnNjcm9sbGVyLHQpLCFjLnNjcm9sbGVyLmxlbmd0aClyZXR1cm59ZWxzZSBjLnNjcm9sbGVyPXQ7Yy5yb290PXQsdGhpc1tpXT1vKGMpfXRoaXMubGVuZ3RoPWkrMX0pLHRoaXMucGFyYW1zPWx9LGRpc3Bvc2U6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnBhcmFtcztpKHRoaXMsZnVuY3Rpb24oaSxzKXtpLmRpc3Bvc2UodCkscFtzXT1udWxsfSksdGhpcy5wYXJhbXM9bnVsbH0sdXBkYXRlOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzO2kodGhpcyxmdW5jdGlvbihpKXtpLnVwZGF0ZS5hcHBseShpLHQpfSl9LGJhcm9uOmZ1bmN0aW9uKHMpe3JldHVybiBzLnJvb3Q9W10sdGhpcy5wYXJhbXMucm9vdCYmKHMuc2Nyb2xsZXI9dGhpcy5wYXJhbXMuc2Nyb2xsZXIpLGkuY2FsbCh0aGlzLHRoaXMsZnVuY3Rpb24odCl7cy5yb290LnB1c2godC5yb290KX0pLHMuZGlyZWN0aW9uPVwidlwiPT10aGlzLnBhcmFtcy5kaXJlY3Rpb24/XCJoXCI6XCJ2XCIscy5fY2hhaW49ITAsdChzKX19LHUucHJvdG90eXBlPXtfZGVib3VuY2U6ZnVuY3Rpb24odCxpKXt2YXIgZSxyLG89dGhpcyxuPWZ1bmN0aW9uKCl7aWYoby5fZGlzcG9zZWQpcmV0dXJuIGNsZWFyVGltZW91dChlKSx2b2lkKGU9bz1udWxsKTt2YXIgbD1zKCktcjtsPGkmJmw+PTA/ZT1zZXRUaW1lb3V0KG4saS1sKTooZT1udWxsLHQoKSl9O3JldHVybiBmdW5jdGlvbigpe3I9cygpLGV8fChlPXNldFRpbWVvdXQobixpKSl9fSxjb25zdHJ1Y3RvcjpmdW5jdGlvbih0KXtmdW5jdGlvbiBpKHQsaSl7cmV0dXJuIHUodCxpKVswXX1mdW5jdGlvbiBlKHQpe3ZhciBpPXRoaXMuYmFyTWluU2l6ZXx8MjAscz10O3M+MCYmczxpJiYocz1pKSx0aGlzLmJhciYmdSh0aGlzLmJhcikuY3NzKHRoaXMub3JpZ2luLnNpemUscGFyc2VJbnQocywxMCkrXCJweFwiKX1mdW5jdGlvbiByKHQpe2lmKHRoaXMuYmFyKXt2YXIgaT11KHRoaXMuYmFyKS5jc3ModGhpcy5vcmlnaW4ucG9zKSxzPSt0K1wicHhcIjtzJiZzIT1pJiZ1KHRoaXMuYmFyKS5jc3ModGhpcy5vcmlnaW4ucG9zLHMpfX1mdW5jdGlvbiBvKCl7cmV0dXJuIG1bdGhpcy5vcmlnaW4uY2xpZW50XS10aGlzLmJhclRvcExpbWl0LXRoaXMuYmFyW3RoaXMub3JpZ2luLm9mZnNldF19ZnVuY3Rpb24gbih0KXtyZXR1cm4gdCpvLmNhbGwodGhpcykrdGhpcy5iYXJUb3BMaW1pdH1mdW5jdGlvbiBhKHQpe3JldHVybih0LXRoaXMuYmFyVG9wTGltaXQpL28uY2FsbCh0aGlzKX1mdW5jdGlvbiBoKCl7cmV0dXJuITF9dmFyIHUsZixwLG0sQyx5LHosJDtpZih6PXMoKSx1PXRoaXMuJD10LiQsdGhpcy5ldmVudD10LmV2ZW50LHRoaXMuZXZlbnRzPXt9LHRoaXMucm9vdD10LnJvb3QsdGhpcy5zY3JvbGxlcj1pKHQuc2Nyb2xsZXIpLHRoaXMuYmFyPWkodC5iYXIsdGhpcy5yb290KSxtPXRoaXMudHJhY2s9aSh0LnRyYWNrLHRoaXMucm9vdCksIXRoaXMudHJhY2smJnRoaXMuYmFyJiYobT10aGlzLmJhci5wYXJlbnROb2RlKSx0aGlzLmNsaXBwZXI9dGhpcy5zY3JvbGxlci5wYXJlbnROb2RlLHRoaXMuZGlyZWN0aW9uPXQuZGlyZWN0aW9uLHRoaXMucnRsPXQucnRsLHRoaXMub3JpZ2luPWRbdGhpcy5kaXJlY3Rpb25dLHRoaXMuYmFyT25DbHM9dC5iYXJPbkNscyx0aGlzLnNjcm9sbGluZ0Nscz10LnNjcm9sbGluZ0Nscyx0aGlzLmRyYWdnaW5nQ2xzPXQuZHJhZ2dpbmdDbHMsdGhpcy5pbXBhY3Q9dC5pbXBhY3QsdGhpcy5wb3NpdGlvbj10LnBvc2l0aW9uLHRoaXMucnRsPXQucnRsLHRoaXMuYmFyVG9wTGltaXQ9MCx0aGlzLnJlc2l6ZURlYm91bmNlPXQucmVzaXplRGVib3VuY2UsdGhpcy5jdXJzb3I9ZnVuY3Rpb24odCl7cmV0dXJuIHRbXCJjbGllbnRcIit0aGlzLm9yaWdpbi54XXx8KCgodC5vcmlnaW5hbEV2ZW50fHx0KS50b3VjaGVzfHx7fSlbMF18fHt9KVtcInBhZ2VcIit0aGlzLm9yaWdpbi54XX0sdGhpcy5wb3M9ZnVuY3Rpb24odCl7dmFyIGk9XCJwYWdlXCIrdGhpcy5vcmlnaW4ueCtcIk9mZnNldFwiLHM9dGhpcy5zY3JvbGxlcltpXT9pOnRoaXMub3JpZ2luLnNjcm9sbDtyZXR1cm4gdm9pZCAwIT09dCYmKHRoaXMuc2Nyb2xsZXJbc109dCksdGhpcy5zY3JvbGxlcltzXX0sdGhpcy5ycG9zPWZ1bmN0aW9uKHQpe3ZhciBpLHM9dGhpcy5zY3JvbGxlclt0aGlzLm9yaWdpbi5zY3JvbGxTaXplXS10aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLmNsaWVudF07cmV0dXJuIGk9dD90aGlzLnBvcyh0KnMpOnRoaXMucG9zKCksaS8oc3x8MSl9LHRoaXMuYmFyT249ZnVuY3Rpb24odCl7aWYodGhpcy5iYXJPbkNscyl7dmFyIGk9dGhpcy5zY3JvbGxlclt0aGlzLm9yaWdpbi5jbGllbnRdPj10aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLnNjcm9sbFNpemVdO3R8fGk/dSh0aGlzLnJvb3QpLmhhc0NsYXNzKHRoaXMuYmFyT25DbHMpJiZ1KHRoaXMucm9vdCkucmVtb3ZlQ2xhc3ModGhpcy5iYXJPbkNscyk6dSh0aGlzLnJvb3QpLmhhc0NsYXNzKHRoaXMuYmFyT25DbHMpfHx1KHRoaXMucm9vdCkuYWRkQ2xhc3ModGhpcy5iYXJPbkNscyl9fSx0aGlzLl9wb3MwPWZ1bmN0aW9uKHQpe3A9dGhpcy5jdXJzb3IodCktZn0sdGhpcy5kcmFnPWZ1bmN0aW9uKHQpe3ZhciBpPWEuY2FsbCh0aGlzLHRoaXMuY3Vyc29yKHQpLXApLHM9dGhpcy5zY3JvbGxlclt0aGlzLm9yaWdpbi5zY3JvbGxTaXplXS10aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLmNsaWVudF07dGhpcy5zY3JvbGxlclt0aGlzLm9yaWdpbi5zY3JvbGxdPWkqc30sdGhpcy5zZWxlY3Rpb249ZnVuY3Rpb24odCl7dGhpcy5ldmVudChkb2N1bWVudCxcInNlbGVjdHBvcyBzZWxlY3RzdGFydFwiLGgsdD9cIm9mZlwiOlwib25cIil9LHRoaXMucmVzaXplPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3ZhciB0LGUscj1pLnNjcm9sbGVyW2kub3JpZ2luLmNyb3NzT2Zmc2V0XSxvPWkuc2Nyb2xsZXJbaS5vcmlnaW4uY3Jvc3NDbGllbnRdLG49MDtpZihiP249ZzpvPjAmJjA9PT1yJiYocj1vK3YpLHIpaWYoaS5iYXJPbigpLFwic2Nyb2xsZXJcIj09aS5pbXBhY3Qpe3ZhciBjPXItbytuO2lmKFwic3RhdGljXCI9PWkucG9zaXRpb24pdD1pLiQoaS5zY3JvbGxlcikuY3NzKGkub3JpZ2luLmNyb3NzU2l6ZSksZT1pLmNsaXBwZXJbaS5vcmlnaW4uY3Jvc3NDbGllbnRdK2MrXCJweFwiLHQhPWUmJmkuX3NldENyb3NzU2l6ZXMoaS5zY3JvbGxlcixlKTtlbHNle3ZhciBhPXt9LGg9aS5ydGw/XCJMZWZ0XCI6XCJSaWdodFwiO1wiaFwiPT1pLmRpcmVjdGlvbiYmKGg9XCJCb3R0b21cIiksYVtcInBhZGRpbmdcIitoXT1jK1wicHhcIixpLiQoaS5zY3JvbGxlcikuY3NzKGEpfX1lbHNlIHQ9aS4kKGkuY2xpcHBlcikuY3NzKGkub3JpZ2luLmNyb3NzU2l6ZSksZT1vK1wicHhcIix0IT1lJiZpLl9zZXRDcm9zc1NpemVzKGkuY2xpcHBlcixlKTtBcnJheS5wcm90b3R5cGUudW5zaGlmdC5jYWxsKGFyZ3VtZW50cyxcInJlc2l6ZVwiKSxsLmFwcGx5KGksYXJndW1lbnRzKSx6PXMoKX12YXIgaT10aGlzLGU9dm9pZCAwPT09aS5yZXNpemVEZWJvdW5jZT8zMDA6aS5yZXNpemVEZWJvdW5jZSxyPTA7cygpLXo8ZSYmKGNsZWFyVGltZW91dChDKSxyPWUpLHI/Qz1zZXRUaW1lb3V0KHQscik6dCgpfSx0aGlzLnVwZGF0ZVBvc2l0aW9ucz1mdW5jdGlvbih0KXt2YXIgaSxzPXRoaXM7cy5iYXImJihpPShtW3Mub3JpZ2luLmNsaWVudF0tcy5iYXJUb3BMaW1pdCkqcy5zY3JvbGxlcltzLm9yaWdpbi5jbGllbnRdL3Muc2Nyb2xsZXJbcy5vcmlnaW4uc2Nyb2xsU2l6ZV0sKHR8fHBhcnNlSW50KCQsMTApIT1wYXJzZUludChpLDEwKSkmJihlLmNhbGwocyxpKSwkPWkpLGY9bi5jYWxsKHMscy5ycG9zKCkpLHIuY2FsbChzLGYpKSxBcnJheS5wcm90b3R5cGUudW5zaGlmdC5jYWxsKGFyZ3VtZW50cyxcInNjcm9sbFwiKSxsLmFwcGx5KHMsYXJndW1lbnRzKX0sdGhpcy5zY3JvbGw9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3QudXBkYXRlUG9zaXRpb25zKCksdC5zY3JvbGxpbmdDbHMmJih5fHx0LiQodC5yb290KS5hZGRDbGFzcyh0LnNjcm9sbGluZ0NscyksY2xlYXJUaW1lb3V0KHkpLHk9c2V0VGltZW91dChmdW5jdGlvbigpe3QuJCh0LnJvb3QpLnJlbW92ZUNsYXNzKHQuc2Nyb2xsaW5nQ2xzKSx5PXZvaWQgMH0sMzAwKSl9LHRoaXMuY2xpcHBlck9uU2Nyb2xsPWZ1bmN0aW9uKCl7dGhpcy5ydGw/dGhpcy5jbGlwcGVyW3RoaXMub3JpZ2luLnNjcm9sbEVkZ2VdPXRoaXMuY2xpcHBlclt0aGlzLm9yaWdpbi5zY3JvbGxTaXplXTp0aGlzLmNsaXBwZXJbdGhpcy5vcmlnaW4uc2Nyb2xsRWRnZV09MH0sdGhpcy5fc2V0Q3Jvc3NTaXplcz1mdW5jdGlvbih0LGkpe3ZhciBzPXt9O3NbdGhpcy5vcmlnaW4uY3Jvc3NTaXplXT1pLHNbdGhpcy5vcmlnaW4uY3Jvc3NNaW5TaXplXT1pLHNbdGhpcy5vcmlnaW4uY3Jvc3NNYXhTaXplXT1pLHRoaXMuJCh0KS5jc3Mocyl9LHRoaXMuX2R1bWJDc3M9ZnVuY3Rpb24oaSl7aWYoIXQuY3NzR3VydSl7dmFyIHM9aT9cImhpZGRlblwiOm51bGwsZT1pP1wibm9uZVwiOm51bGw7dGhpcy4kKHRoaXMuY2xpcHBlcikuY3NzKHtvdmVyZmxvdzpzLG1zT3ZlcmZsb3dTdHlsZTplLHBvc2l0aW9uOlwic3RhdGljXCI9PXRoaXMucG9zaXRpb24/XCJcIjpcInJlbGF0aXZlXCJ9KTt2YXIgcj1pP1wic2Nyb2xsXCI6bnVsbCxvPVwidlwiPT10aGlzLmRpcmVjdGlvbj9cInlcIjpcInhcIixuPXt9O25bXCJvdmVyZmxvdy1cIitvXT1yLG5bXCJib3gtc2l6aW5nXCJdPVwiYm9yZGVyLWJveFwiLG4ubWFyZ2luPVwiMFwiLG4uYm9yZGVyPVwiMFwiLFwiYWJzb2x1dGVcIj09dGhpcy5wb3NpdGlvbiYmKG4ucG9zaXRpb249XCJhYnNvbHV0ZVwiLG4udG9wPVwiMFwiLFwiaFwiPT10aGlzLmRpcmVjdGlvbj9uLmxlZnQ9bi5yaWdodD1cIjBcIjoobi5ib3R0b209XCIwXCIsbi5yaWdodD10aGlzLnJ0bD9cIjBcIjpcIlwiLG4ubGVmdD10aGlzLnJ0bD9cIlwiOlwiMFwiKSksdGhpcy4kKHRoaXMuc2Nyb2xsZXIpLmNzcyhuKX19LHRoaXMuX2R1bWJDc3MoITApLGIpe3ZhciBTPVwicGFkZGluZ1JpZ2h0XCIsXz17fSx3PWMuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnNjcm9sbGVyKVtbU11dO1wiaFwiPT10LmRpcmVjdGlvbj9TPVwicGFkZGluZ0JvdHRvbVwiOnQucnRsJiYoUz1cInBhZGRpbmdMZWZ0XCIpO3ZhciB4PXBhcnNlSW50KHcsMTApO3ghPXgmJih4PTApLF9bU109Zyt4K1wicHhcIix1KHRoaXMuc2Nyb2xsZXIpLmNzcyhfKX1yZXR1cm4gdGhpc30sdXBkYXRlOmZ1bmN0aW9uKHQpe3JldHVybiBsLmNhbGwodGhpcyxcInVwZFwiLHQpLHRoaXMucmVzaXplKDEpLHRoaXMudXBkYXRlUG9zaXRpb25zKDEpLHRoaXN9LGRpc3Bvc2U6ZnVuY3Rpb24odCl7ZSh0aGlzLHRoaXMuZXZlbnQsXCJvZmZcIikscih0aGlzLnJvb3QsdC5kaXJlY3Rpb24sXCJvZmZcIiksXCJ2XCI9PXQuZGlyZWN0aW9uP3RoaXMuX3NldENyb3NzU2l6ZXModGhpcy5zY3JvbGxlcixcIlwiKTp0aGlzLl9zZXRDcm9zc1NpemVzKHRoaXMuY2xpcHBlcixcIlwiKSx0aGlzLl9kdW1iQ3NzKCExKSx0aGlzLmJhck9uKCEwKSxsLmNhbGwodGhpcyxcImRpc3Bvc2VcIiksdGhpcy5fZGlzcG9zZWQ9ITB9LG9uOmZ1bmN0aW9uKHQsaSxzKXtmb3IodmFyIGU9dC5zcGxpdChcIiBcIikscj0wO3I8ZS5sZW5ndGg7cisrKVwiaW5pdFwiPT1lW3JdP2kuY2FsbCh0aGlzLHMpOih0aGlzLmV2ZW50c1tlW3JdXT10aGlzLmV2ZW50c1tlW3JdXXx8W10sdGhpcy5ldmVudHNbZVtyXV0ucHVzaChmdW5jdGlvbih0KXtpLmNhbGwodGhpcyx0fHxzKX0pKX19LHQuZm4uY29uc3RydWN0b3IucHJvdG90eXBlPXQuZm4sdS5wcm90b3R5cGUuY29uc3RydWN0b3IucHJvdG90eXBlPXUucHJvdG90eXBlLHQubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBjLmJhcm9uPWgsdH0sdC52ZXJzaW9uPVwiMi4zLjFcIixcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlPyhtb2R1bGUuZXhwb3J0cz10LHJlcXVpcmUoXCIuL2ZpeFwiKSxyZXF1aXJlKFwiLi9wdWxsXCIpLHJlcXVpcmUoXCIuL2NvbnRyb2xzXCIpLHJlcXVpcmUoXCIuL2F1dG9VcGRhdGVcIikpOih3aW5kb3cuYmFyb249dCxhJiZhLmZuJiYoYS5mbi5iYXJvbj10KSl9KCksZnVuY3Rpb24oKXt2YXIgdCxpPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN8fCgwLGV2YWwpKFwidGhpc1wiKX0oKTt0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/cmVxdWlyZShcIi4vY29yZS5qc1wiKTppLmJhcm9uO3ZhciBzPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGkodCxpLHMpe3ZhciBlPWksbD0xPT1zP1wicG9zXCI6XCJvcHBvc1wiO288KG4ubWluVmlld3x8MCkmJihlPXZvaWQgMCksdGhpcy4kKHJbdF0pLmNzcyh0aGlzLm9yaWdpbi5wb3MsXCJcIikuY3NzKHRoaXMub3JpZ2luLm9wcG9zLFwiXCIpLnJlbW92ZUNsYXNzKG4ub3V0c2lkZSksdm9pZCAwIT09ZSYmKGUrPVwicHhcIix0aGlzLiQoclt0XSkuY3NzKHRoaXMub3JpZ2luW2xdLGUpLmFkZENsYXNzKG4ub3V0c2lkZSkpfWZ1bmN0aW9uIHModCl7dHJ5e3ZhciBpPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiV2hlZWxFdmVudFwiKTtpLmluaXRXZWJLaXRXaGVlbEV2ZW50KHQub3JpZ2luYWxFdmVudC53aGVlbERlbHRhWCx0Lm9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YVkpLGguZGlzcGF0Y2hFdmVudChpKSx0LnByZXZlbnREZWZhdWx0KCl9Y2F0Y2gocyl7fX1mdW5jdGlvbiBlKHQpe3ZhciBpO2Zvcih2YXIgZSBpbiB0KW5bZV09dFtlXTtpZihyPXRoaXMuJChuLmVsZW1lbnRzLHRoaXMuc2Nyb2xsZXIpKXtvPXRoaXMuc2Nyb2xsZXJbdGhpcy5vcmlnaW4uY2xpZW50XTtmb3IodmFyIGg9MDtoPHIubGVuZ3RoO2grKylpPXt9LGlbdGhpcy5vcmlnaW4uc2l6ZV09cltoXVt0aGlzLm9yaWdpbi5vZmZzZXRdLHJbaF0ucGFyZW50Tm9kZSE9PXRoaXMuc2Nyb2xsZXImJnRoaXMuJChyW2hdLnBhcmVudE5vZGUpLmNzcyhpKSxpPXt9LGlbdGhpcy5vcmlnaW4uY3Jvc3NTaXplXT1yW2hdLnBhcmVudE5vZGVbdGhpcy5vcmlnaW4uY3Jvc3NDbGllbnRdLHRoaXMuJChyW2hdKS5jc3MoaSksby09cltoXVt0aGlzLm9yaWdpbi5vZmZzZXRdLGFbaF09cltoXS5wYXJlbnROb2RlW3RoaXMub3JpZ2luLm9mZnNldFBvc10sbFtoXT1sW2gtMV18fDAsY1toXT1jW2gtMV18fE1hdGgubWluKGFbaF0sMCkscltoLTFdJiYobFtoXSs9cltoLTFdW3RoaXMub3JpZ2luLm9mZnNldF0sY1toXSs9cltoLTFdW3RoaXMub3JpZ2luLm9mZnNldF0pLDA9PWgmJjA9PWFbaF18fCh0aGlzLmV2ZW50KHJbaF0sXCJtb3VzZXdoZWVsXCIscyxcIm9mZlwiKSx0aGlzLmV2ZW50KHJbaF0sXCJtb3VzZXdoZWVsXCIscykpO24ubGltaXRlciYmclswXSYmKHRoaXMudHJhY2smJnRoaXMudHJhY2shPXRoaXMuc2Nyb2xsZXI/KGk9e30saVt0aGlzLm9yaWdpbi5wb3NdPXJbMF0ucGFyZW50Tm9kZVt0aGlzLm9yaWdpbi5vZmZzZXRdLHRoaXMuJCh0aGlzLnRyYWNrKS5jc3MoaSkpOnRoaXMuYmFyVG9wTGltaXQ9clswXS5wYXJlbnROb2RlW3RoaXMub3JpZ2luLm9mZnNldF0sdGhpcy5zY3JvbGwoKSksbi5saW1pdGVyPT09ITEmJih0aGlzLmJhclRvcExpbWl0PTApfXZhciBkPXtlbGVtZW50OnIsaGFuZGxlcjpmdW5jdGlvbigpe2Zvcih2YXIgdCxpPWYodGhpcylbMF0ucGFyZW50Tm9kZSxzPWkub2Zmc2V0VG9wLGU9MDtlPHIubGVuZ3RoO2UrKylyW2VdPT09dGhpcyYmKHQ9ZSk7dmFyIG89cy1sW3RdO24uc2Nyb2xsP24uc2Nyb2xsKHt4MTpwLnNjcm9sbGVyLnNjcm9sbFRvcCx4MjpvfSk6cC5zY3JvbGxlci5zY3JvbGxUb3A9b30sdHlwZTpcImNsaWNrXCJ9O24uY2xpY2thYmxlJiYodGhpcy5fZXZlbnRIYW5kbGVycy5wdXNoKGQpLHUoZC5lbGVtZW50LGQudHlwZSxkLmhhbmRsZXIsXCJvblwiKSl9dmFyIHIsbyxuPXtvdXRzaWRlOlwiXCIsaW5zaWRlOlwiXCIsYmVmb3JlOlwiXCIsYWZ0ZXI6XCJcIixwYXN0OlwiXCIsZnV0dXJlOlwiXCIscmFkaXVzOjAsbWluVmlldzowfSxsPVtdLGM9W10sYT1bXSxoPXRoaXMuc2Nyb2xsZXIsdT10aGlzLmV2ZW50LGY9dGhpcy4kLHA9dGhpczt0aGlzLm9uKFwiaW5pdFwiLGUsdCk7dmFyIGQ9W10sdj1bXTt0aGlzLm9uKFwiaW5pdCBzY3JvbGxcIixmdW5jdGlvbigpe3ZhciB0LHMsZSxoO2lmKHIpe3ZhciB1O2ZvcihoPTA7aDxyLmxlbmd0aDtoKyspdD0wLGFbaF0tdGhpcy5wb3MoKTxjW2hdK24ucmFkaXVzPyh0PTEscz1sW2hdKTphW2hdLXRoaXMucG9zKCk+Y1toXStvLW4ucmFkaXVzPyh0PTIscz10aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLmNsaWVudF0tcltoXVt0aGlzLm9yaWdpbi5vZmZzZXRdLWxbaF0tbyk6KHQ9MyxzPXZvaWQgMCksZT0hMSwoYVtoXS10aGlzLnBvcygpPGNbaF18fGFbaF0tdGhpcy5wb3MoKT5jW2hdK28pJiYoZT0hMCksdD09ZFtoXSYmZT09dltoXXx8KGkuY2FsbCh0aGlzLGgscyx0KSxkW2hdPXQsdltoXT1lLHU9ITApO2lmKHUpZm9yKGg9MDtoPHIubGVuZ3RoO2grKykxPT1kW2hdJiZuLnBhc3QmJnRoaXMuJChyW2hdKS5hZGRDbGFzcyhuLnBhc3QpLnJlbW92ZUNsYXNzKG4uZnV0dXJlKSwyPT1kW2hdJiZuLmZ1dHVyZSYmdGhpcy4kKHJbaF0pLmFkZENsYXNzKG4uZnV0dXJlKS5yZW1vdmVDbGFzcyhuLnBhc3QpLDM9PWRbaF0/KChuLmZ1dHVyZXx8bi5wYXN0KSYmdGhpcy4kKHJbaF0pLnJlbW92ZUNsYXNzKG4ucGFzdCkucmVtb3ZlQ2xhc3Mobi5mdXR1cmUpLG4uaW5zaWRlJiZ0aGlzLiQocltoXSkuYWRkQ2xhc3Mobi5pbnNpZGUpKTpuLmluc2lkZSYmdGhpcy4kKHJbaF0pLnJlbW92ZUNsYXNzKG4uaW5zaWRlKSxkW2hdIT1kW2grMV0mJjE9PWRbaF0mJm4uYmVmb3JlP3RoaXMuJChyW2hdKS5hZGRDbGFzcyhuLmJlZm9yZSkucmVtb3ZlQ2xhc3Mobi5hZnRlcik6ZFtoXSE9ZFtoLTFdJiYyPT1kW2hdJiZuLmFmdGVyP3RoaXMuJChyW2hdKS5hZGRDbGFzcyhuLmFmdGVyKS5yZW1vdmVDbGFzcyhuLmJlZm9yZSk6dGhpcy4kKHJbaF0pLnJlbW92ZUNsYXNzKG4uYmVmb3JlKS5yZW1vdmVDbGFzcyhuLmFmdGVyKSxuLmdyYWQmJih2W2hdP3RoaXMuJChyW2hdKS5hZGRDbGFzcyhuLmdyYWQpOnRoaXMuJChyW2hdKS5yZW1vdmVDbGFzcyhuLmdyYWQpKX19KSx0aGlzLm9uKFwicmVzaXplIHVwZFwiLGZ1bmN0aW9uKHQpe2UuY2FsbCh0aGlzLHQmJnQuZml4KX0pfTt0LmZuLmZpeD1mdW5jdGlvbih0KXtmb3IodmFyIGk9MDt0aGlzW2ldOylzLmNhbGwodGhpc1tpXSx0KSxpKys7cmV0dXJuIHRoaXN9fSgpLGZ1bmN0aW9uKCl7dmFyIHQsaT1mdW5jdGlvbigpe3JldHVybiB0aGlzfHwoMCxldmFsKShcInRoaXNcIil9KCk7dD1cInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP3JlcXVpcmUoXCIuL2NvcmVcIik6aS5iYXJvbjt2YXIgcz1pLk11dGF0aW9uT2JzZXJ2ZXJ8fGkuV2ViS2l0TXV0YXRpb25PYnNlcnZlcnx8aS5Nb3pNdXRhdGlvbk9ic2VydmVyfHxudWxsLGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7by5yb290W28ub3JpZ2luLm9mZnNldF0/ZSgpOmkoKX1mdW5jdGlvbiBpKCl7cnx8KHI9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtvLnJvb3Rbby5vcmlnaW4ub2Zmc2V0XSYmKGUoKSxvLnVwZGF0ZSgpKX0sMzAwKSl9ZnVuY3Rpb24gZSgpe2NsZWFySW50ZXJ2YWwocikscj1udWxsfXZhciByLG89dGhpcztpZighdGhpcy5fYXUpe3ZhciBuPW8uX2RlYm91bmNlKGZ1bmN0aW9uKCl7by51cGRhdGUoKX0sMzAwKTt0aGlzLl9vYnNlcnZlcj1uZXcgcyhmdW5jdGlvbigpe3QoKSxvLnVwZGF0ZSgpLG4oKX0pLHRoaXMub24oXCJpbml0XCIsZnVuY3Rpb24oKXtvLl9vYnNlcnZlci5vYnNlcnZlKG8ucm9vdCx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITAsY2hhcmFjdGVyRGF0YTohMH0pLHQoKX0pLHRoaXMub24oXCJkaXNwb3NlXCIsZnVuY3Rpb24oKXtvLl9vYnNlcnZlci5kaXNjb25uZWN0KCksZSgpLGRlbGV0ZSBvLl9vYnNlcnZlcn0pLHRoaXMuX2F1PSEwfX07dC5mbi5hdXRvVXBkYXRlPWZ1bmN0aW9uKHQpe2lmKCFzKXJldHVybiB0aGlzO2Zvcih2YXIgaT0wO3RoaXNbaV07KWUuY2FsbCh0aGlzW2ldLHQpLGkrKztyZXR1cm4gdGhpc319KCksZnVuY3Rpb24oKXt2YXIgdCxpPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN8fCgwLGV2YWwpKFwidGhpc1wiKX0oKTt0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/cmVxdWlyZShcIi4vY29yZVwiKTppLmJhcm9uO3ZhciBzPWZ1bmN0aW9uKHQpe3ZhciBpLHMsZSxyLG8sbj10aGlzO3I9dC5zY3JlZW58fC45LHQuZm9yd2FyZCYmKGk9dGhpcy4kKHQuZm9yd2FyZCx0aGlzLmNsaXBwZXIpLG89e2VsZW1lbnQ6aSxoYW5kbGVyOmZ1bmN0aW9uKCl7dmFyIGk9bi5wb3MoKSsodC5kZWx0YXx8MzApO24ucG9zKGkpfSx0eXBlOlwiY2xpY2tcIn0sdGhpcy5fZXZlbnRIYW5kbGVycy5wdXNoKG8pLHRoaXMuZXZlbnQoby5lbGVtZW50LG8udHlwZSxvLmhhbmRsZXIsXCJvblwiKSksdC5iYWNrd2FyZCYmKHM9dGhpcy4kKHQuYmFja3dhcmQsdGhpcy5jbGlwcGVyKSxvPXtlbGVtZW50OnMsaGFuZGxlcjpmdW5jdGlvbigpe3ZhciBpPW4ucG9zKCktKHQuZGVsdGF8fDMwKTtuLnBvcyhpKX0sdHlwZTpcImNsaWNrXCJ9LHRoaXMuX2V2ZW50SGFuZGxlcnMucHVzaChvKSx0aGlzLmV2ZW50KG8uZWxlbWVudCxvLnR5cGUsby5oYW5kbGVyLFwib25cIikpLHQudHJhY2smJihlPXQudHJhY2s9PT0hMD90aGlzLnRyYWNrOnRoaXMuJCh0LnRyYWNrLHRoaXMuY2xpcHBlcilbMF0sZSYmKG89e2VsZW1lbnQ6ZSxoYW5kbGVyOmZ1bmN0aW9uKHQpe2lmKHQudGFyZ2V0PT1lKXt2YXIgaT10W1wib2Zmc2V0XCIrbi5vcmlnaW4ueF0scz1uLmJhcltuLm9yaWdpbi5vZmZzZXRQb3NdLG89MDtpPHM/bz0tMTppPnMrbi5iYXJbbi5vcmlnaW4ub2Zmc2V0XSYmKG89MSk7dmFyIGw9bi5wb3MoKStvKnIqbi5zY3JvbGxlcltuLm9yaWdpbi5jbGllbnRdO24ucG9zKGwpfX0sdHlwZTpcIm1vdXNlZG93blwifSx0aGlzLl9ldmVudEhhbmRsZXJzLnB1c2gobyksdGhpcy5ldmVudChvLmVsZW1lbnQsby50eXBlLG8uaGFuZGxlcixcIm9uXCIpKSl9O3QuZm4uY29udHJvbHM9ZnVuY3Rpb24odCl7Zm9yKHZhciBpPTA7dGhpc1tpXTspcy5jYWxsKHRoaXNbaV0sdCksaSsrO3JldHVybiB0aGlzfX0oKTsiLCIoZnVuY3Rpb24oICQgKSB7XG4gICAgJC5mbi5hdmF0YXJDcm9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpbWFnZUlucHV0ID0gJyc7XG4gICAgICAgICAgICB2YXIgY3JvcHBlciA9ICQodGhpcykuY3JvcHBpZSh7XG4gICAgICAgICAgICAgICAgdmlld3BvcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDMwMCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufSggalF1ZXJ5ICkpOyIsIihmdW5jdGlvbiggJCApIHtcbiAgICAkLmZuLmRhdGVQaWNrZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGxhbmcgPSAkKCdodG1sJykuYXR0cignbGFuZycpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJ1TGFuZyA9IHtcbiAgICAgICAgICAgICAgICBwcmV2aW91c01vbnRoOiAn0J/RgNC10LTRi9C00YPRidC40Lkg0LzQtdGB0Y/RhicsXG4gICAgICAgICAgICAgICAgICAgIG5leHRNb250aDogJ9Ch0LvQtdC00YPRjtGJ0LjQuSDQvNC10YHRj9GGJyxcbiAgICAgICAgICAgICAgICAgICAgbW9udGhzOiBbJ9Cv0L3QstCw0YDRjCcsICfQpNC10LLRgNCw0LvRjCcsICfQnNCw0YDRgicsICfQkNC/0YDQtdC70YwnLCAn0JzQsNC5JywgJ9CY0Y7QvdGMJywgJ9CY0Y7Qu9GMJywgJ9CQ0LLQs9GD0YHRgicsICfQodC10L3RgtGP0LHRgNGMJywgJ9Ce0LrRgtGP0LHRgNGMJywgJ9Cd0L7Rj9Cx0YDRjCcsICfQlNC10LrQsNCx0YDRjCddLFxuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5czogWyfQktC+0YHQutGA0LXRgdC10L3RjNC1JywgJ9Cf0L7QvdC10LTQtdC70YzQvdC40LonLCAn0JLRgtC+0YDQvdC40LonLCAn0KHRgNC10LTQsCcsICfQp9C10YLQstC10YDQsycsICfQn9GP0YLQvdC40YbQsCcsICfQodGD0LHQsdC+0YLQsCddLFxuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5c1Nob3J0OiBbJ9CS0YEnLCAn0J/QvScsICfQktGCJywgJ9Ch0YAnLCAn0KfRgicsICfQn9GCJywgJ9Ch0LEnXVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgZmllbGQ6IHRoaXMsXG4gICAgICAgICAgICAgICAgZmlyc3REYXk6IDEsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICAgICAgZGVmYXVsdERhdGU6IG5ldyBEYXRlKDE5ODAsIDAsIDEpLFxuICAgICAgICAgICAgICAgIG1heERhdGU6IG5ldyBEYXRlKDIwMTAsIDAsIDEpLFxuICAgICAgICAgICAgICAgIHllYXJSYW5nZTogWzE5MDAsIDIwMTBdXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAobGFuZyA9PT0gJ3J1Jykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuaTE4biA9IHJ1TGFuZztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBpY2tlciA9IG5ldyBQaWthZGF5KG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG59KCBqUXVlcnkgKSk7IiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgIHZhciAkZXZlbnRzQ29udGVudCA9ICQoJy5qcy1ldmVudHMtYmxvY2stY29udGVudCcpO1xuXG4gICAgJCgnLmpzLWV2ZW50cy1ibG9jay1maWx0ZXInKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkZWwgPSAkKHRoaXMpO1xuICAgICAgICB2YXIgbGluayA9ICRlbC5hdHRyKCdocmVmJyk7XG5cbiAgICAgICAgaWYgKCEkZWwuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XG5cbiAgICAgICAgICAgICRldmVudHNDb250ZW50LnNwaW4oJ2xhcmdlJywgJyMwMDAnKTtcblxuICAgICAgICAgICAgJC5hamF4KGxpbmssIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIGNhY2hlOiBmYWxzZVxuICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICQoJy5qcy1ldmVudHMtYmxvY2stZmlsdGVyJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICRlbC5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgJGV2ZW50c0NvbnRlbnQuaHRtbChkYXRhKTtcbiAgICAgICAgICAgIH0pLmZhaWwoZnVuY3Rpb24gKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIGFsZXJ0KCfQntGI0LjQsdC60LAg0LfQsNCz0YDRg9C30LrQuCDQtNCw0L3QvdGL0YUuINCf0L7QttCw0LvRg9C50YHRgtCwLCDQv9C+0L/RgNC+0LHRg9C50YLQtSDQtdGJ0ZEg0YDQsNC3LicpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGpxWEhSKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvclRocm93bik7XG4gICAgICAgICAgICB9KS5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRldmVudHNDb250ZW50LnNwaW4oZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbn0pOyIsIihmdW5jdGlvbiggJCApIHtcbiAgICAkLmZuLmZvcm1BamF4ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQodGhpcykub24oJ3N1Ym1pdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGZvcm0gPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICB1cmwgPSAkZm9ybS5hdHRyKCdhY3Rpb24nKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gJGZvcm0uYXR0cignbWV0aG9kJyksXG4gICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCRmb3JtWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbiA9ICRmb3JtLmlzKCdbZGF0YS12YWxpZGF0ZV0nKTtcblxuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uICYmICRmb3JtLnZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWl0Rm9ybSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWl0Rm9ybSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN1Ym1pdEZvcm0oKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJ2JvZHknKS5zcGluKCdsYXJnZScsICcjMDAwJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRGF0YTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICAgICAgICAgICAgICAgIH0pLmRvbmUoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmb3JtWzBdLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFNpZGVNb2RhbChkYXRhLm1lc3NhZ2UsICdtZXNzYWdlLW1vZGFsJywgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YSAmJiBkYXRhLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZm9ybS5maW5kKCcuanMtZm9ybS1tZXNzYWdlcycpLmFkZENsYXNzKCdhY3RpdmUnKS5odG1sKGRhdGEubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGZpZWxkID0gJCgnW25hbWU9XCInICsgZXJyb3IubmFtZSArICdcIl0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZmllbGQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZpZWxkLmFkZENsYXNzKCdlcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmaWVsZC5zaWJsaW5ncygnLmZvcm0tbGFiZWwnKS5hZGRDbGFzcygnZm9ybS1sYWJlbC1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmaWVsZC5zaWJsaW5ncygnLmZvcm0tY29udHJvbC1lcnJvcnMnKS5hZGRDbGFzcygnYWN0aXZlJykuaHRtbChlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnJlZGlyZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBkYXRhLnJlZGlyZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnJlbG9hZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgn0J7RiNC40LHQutCwINC+0YLQv9GA0LDQstC60Lgg0LTQsNC90L3Ri9GFLiDQn9C+0LbQsNC70YPQudGB0YLQsCwg0L/QvtC/0YDQvtCx0YPQudGC0LUg0LXRidGRINGA0LDQty4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGpxWEhSKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yVGhyb3duKTtcbiAgICAgICAgICAgICAgICAgICAgfSkuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ2JvZHknKS5zcGluKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0oIGpRdWVyeSApKTsiLCIoZnVuY3Rpb24oICQgKSB7XG4gICAgJC52YWxpZGF0b3IuYWRkTWV0aG9kKFwiZGF0ZVJhbmdlXCIsIGZ1bmN0aW9uKHZhbHVlLCBlbCwgcGFyYW1zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZGF0ZVJhbmdlID0gcGFyYW1zLnNwbGl0KCcsJyksXG4gICAgICAgICAgICAgICAgZGF0ZUZyb20gPSBkYXRlUmFuZ2VbMF0uc3BsaXQoJy4nKS5yZXZlcnNlKCksXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wRnJvbSA9IG1vbWVudChkYXRlRnJvbSkudW5peCgpLFxuICAgICAgICAgICAgICAgIGRhdGVUbyA9IGRhdGVSYW5nZVsxXS5zcGxpdCgnLicpLnJldmVyc2UoKSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXBUbyA9IG1vbWVudChkYXRlVG8pLnVuaXgoKSxcbiAgICAgICAgICAgICAgICBkYXRlVmFsdWUgPSB2YWx1ZS5zcGxpdCgnLicpLnJldmVyc2UoKSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXBWYWx1ZSA9IG1vbWVudChkYXRlVmFsdWUpLnVuaXgoKTtcblxuICAgICAgICAgICAgcmV0dXJuICh0aW1lc3RhbXBGcm9tIDw9IHRpbWVzdGFtcFZhbHVlICYmIHRpbWVzdGFtcFZhbHVlIDw9IHRpbWVzdGFtcFRvKTtcbiAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgJC52YWxpZGF0b3IubWV0aG9kcy5lbWFpbCA9IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uYWwoZWxlbWVudCkgfHwgLy4rQC4rXFwuLnsyLH0vaS50ZXN0KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgJC5mbi5mb3JtVmFsaWRhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKHRoaXMpLnZhbGlkYXRlKHtcbiAgICAgICAgICAgICAgICBlcnJvclBsYWNlbWVudDogZnVuY3Rpb24oZXJyb3IsIGVsZW1lbnQpIHt9LFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodDogZnVuY3Rpb24oZWxlbWVudCwgZXJyb3JDbGFzcywgdmFsaWRDbGFzcykge1xuICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNsb3Nlc3QoJy5mb3JtLWdyb3VwJykuZmluZCgnLmZvcm0tbGFiZWwnKS5hZGRDbGFzcygnZm9ybS1sYWJlbC1lcnJvcicpLnJlbW92ZUNsYXNzKCdmb3JtLWxhYmVsLXZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY2xvc2VzdCgnLmZvcm0tY29udHJvbCcpLmFkZENsYXNzKGVycm9yQ2xhc3MpLnJlbW92ZUNsYXNzKHZhbGlkQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmFkZENsYXNzKGVycm9yQ2xhc3MpLnJlbW92ZUNsYXNzKHZhbGlkQ2xhc3MpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdW5oaWdobGlnaHQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGVycm9yQ2xhc3MsIHZhbGlkQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5jbG9zZXN0KCcuZm9ybS1ncm91cCcpLmZpbmQoJy5mb3JtLWxhYmVsJykucmVtb3ZlQ2xhc3MoJ2Zvcm0tbGFiZWwtZXJyb3InKS5hZGRDbGFzcygnZm9ybS1sYWJlbC12YWxpZCcpO1xuICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNsb3Nlc3QoJy5mb3JtLWNvbnRyb2wnKS5yZW1vdmVDbGFzcyhlcnJvckNsYXNzKS5hZGRDbGFzcyh2YWxpZENsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5yZW1vdmVDbGFzcyhlcnJvckNsYXNzKS5hZGRDbGFzcyh2YWxpZENsYXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0oIGpRdWVyeSApKTsiLCIoZnVuY3Rpb24oICQgKSB7XG4gICAgJC5mbi5pbnB1dEZpbGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQodGhpcykub24oJ2ZvY3VzIGJsdXIgY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpbGVuYW1lID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSAkKHRoaXMpLnNpYmxpbmdzKCcuanMtaW5wdXQtZmlsZS10aXRsZScpLmRhdGEoJ2lucHV0LWZpbGUtZGVmYXVsdC10aXRsZScpO1xuICAgICAgICAgICAgICAgIHZhciBzdWJ0aXRsZSA9ICQodGhpcykuc2libGluZ3MoJy5qcy1pbnB1dC1maWxlLXN1YnRpdGxlJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZmlsZW5hbWUgIT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVuYW1lLmxlbmd0aCA+IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IGZpbGVuYW1lLnN1YnN0cigwLCAxMCkgKyAnLi4uJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnNpYmxpbmdzKCcuanMtaW5wdXQtZmlsZS10aXRsZScpLmh0bWwoZmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZS5hbmltYXRlKHtvcGFjaXR5OiAwfSwgMzAwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnNpYmxpbmdzKCcuanMtaW5wdXQtZmlsZS10aXRsZScpLmh0bWwodGl0bGUpO1xuICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZS5hbmltYXRlKHtvcGFjaXR5OiAxfSwgMzAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJCh0aGlzKS5vbignZm9jdXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcuZm9ybS1jb250cm9sJykuYWRkQ2xhc3MoJ2lzLWZvY3VzJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJCh0aGlzKS5vbignYmx1cicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5mb3JtLWNvbnRyb2wnKS5yZW1vdmVDbGFzcygnaXMtZm9jdXMnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xufSggalF1ZXJ5ICkpO1xuIiwiKGZ1bmN0aW9uKCAkICkge1xuICAgICQuZm4ubWFza2VkaW5wdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG1hc2sgPSAkKHRoaXMpLmRhdGEoJ21hc2tlZC1pbnB1dCcpLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gJCh0aGlzKS5kYXRhKCdtYXNrZWQtaW5wdXQtcGxhY2Vob2xkZXInKSxcbiAgICAgICAgICAgICAgICBjbGVhcklmTm90TWF0Y2ggPSAkKHRoaXMpLmlzKCdbZGF0YS1tYXNrZWQtaW5wdXQtY2xlYXJpZm5vdG1hdGNoXScpO1xuXG4gICAgICAgICAgICAkKHRoaXMpLm1hc2sobWFzaywge1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICBjbGVhcklmTm90TWF0Y2g6IGNsZWFySWZOb3RNYXRjaFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG59KCBqUXVlcnkgKSk7IiwiKGZ1bmN0aW9uKCAkICkge1xuICAgICQuZm4uaW5wdXRQaG90byA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGZpbGVJbnB1dCA9ICQodGhpcylbMF0sXG4gICAgICAgICAgICAgICAgJGZvcm1Db250cm9sID0gJCh0aGlzKS5jbG9zZXN0KCcuZm9ybS1jb250cm9sLXBob3RvJyksXG4gICAgICAgICAgICAgICAgJGZpbGVEaXNwbGF5QXJlYSA9ICQodGhpcykuc2libGluZ3MoJy5mb3JtLWNvbnRyb2wtcGhvdG8tYXJlYScpLFxuICAgICAgICAgICAgICAgICRub3RpZmljYXRpb25zQXJlYSA9ICQodGhpcykuc2libGluZ3MoJy5mb3JtLWNvbnRyb2wtcGhvdG8tbm90aWZ5Jyk7XG5cbiAgICAgICAgICAgIGZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBmaWxlSW5wdXQuZmlsZXNbMF07XG4gICAgICAgICAgICAgICAgdmFyIGltYWdlVHlwZSA9IC9pbWFnZS4qLztcblxuICAgICAgICAgICAgICAgIGlmIChmaWxlLnR5cGUubWF0Y2goaW1hZ2VUeXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAkZm9ybUNvbnRyb2wucmVtb3ZlQ2xhc3MoJ2lzLXdpdGgtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgJGZvcm1Db250cm9sLmFkZENsYXNzKCdpcy13aXRoLXBob3RvJyk7XG4gICAgICAgICAgICAgICAgICAgICRub3RpZmljYXRpb25zQXJlYS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRmaWxlRGlzcGxheUFyZWEuaHRtbCgnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSByZWFkZXIucmVzdWx0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkZmlsZURpc3BsYXlBcmVhLmFwcGVuZChpbWcpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVJbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAkZm9ybUNvbnRyb2wucmVtb3ZlQ2xhc3MoJ2lzLXdpdGgtcGhvdG8nKTtcbiAgICAgICAgICAgICAgICAgICAgJGZvcm1Db250cm9sLmFkZENsYXNzKCdpcy13aXRoLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICRub3RpZmljYXRpb25zQXJlYS5hZGRDbGFzcygnYWN0aXZlJykuaHRtbCgn0J3QtdC00L7Qv9GD0YHRgtC40LzRi9C5INGE0L7RgNC80LDRgiDRhNCw0LnQu9CwIScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xufSggalF1ZXJ5ICkpO1xuIiwiKGZ1bmN0aW9uKCAkICkge1xuICAgICQuZm4uaW5wdXRSZWdpb25DaXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgJHJlZ2lvbnNGaWVsZCA9ICQodGhpcykuZmluZCgnLmpzLXJlZ2lvbnMtYXV0b2NvbXBsZXRlJyksXG4gICAgICAgICAgICAgICAgJHJlZ2lvbklkRmllbGQgPSAkKHRoaXMpLmZpbmQoJy5qcy1yZWdpb24taWQnKSxcbiAgICAgICAgICAgICAgICAkY2l0aWVzRmllbGQgPSAkKHRoaXMpLmZpbmQoJy5qcy1jaXRpZXMtYXV0b2NvbXBsZXRlJyksXG4gICAgICAgICAgICAgICAgJGNpdHlJZEZpZWxkID0gJCh0aGlzKS5maW5kKCcuanMtY2l0eS1pZCcpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkUmVnaW9uID0gbnVsbCxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZENpdHkgPSBudWxsO1xuXG4gICAgICAgICAgICAkY2l0aWVzRmllbGQuYXR0cigncmVhZG9ubHknLCB0cnVlKTtcblxuICAgICAgICAgICAgJHJlZ2lvbnNGaWVsZC5kZXZicmlkZ2VBdXRvY29tcGxldGUoe1xuICAgICAgICAgICAgICAgIHNlcnZpY2VVcmw6ICdkYXRhL3JlZ2lvbnMuanNvbicsXG4gICAgICAgICAgICAgICAgbWluQ2hhcnM6IDEsXG4gICAgICAgICAgICAgICAgb25TZWxlY3Q6IGZ1bmN0aW9uIChzdWdnZXN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUmVnaW9uID0gc3VnZ2VzdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoJHJlZ2lvbklkRmllbGQudmFsKCkgIT0gc3VnZ2VzdGlvbi5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkY2l0aWVzRmllbGQuYXR0cigncmVhZG9ubHknLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkcmVnaW9uSWRGaWVsZC52YWwoc3VnZ2VzdGlvbi5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRjaXRpZXNGaWVsZC52YWwoJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGNpdHlJZEZpZWxkLnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uSW52YWxpZGF0ZVNlbGVjdGlvbjogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgJHJlZ2lvbklkRmllbGQudmFsKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgJHJlZ2lvbnNGaWVsZC52YWwoJycpO1xuICAgICAgICAgICAgICAgICAgICAkY2l0eUlkRmllbGQudmFsKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgJGNpdGllc0ZpZWxkLnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgICRjaXRpZXNGaWVsZC5hdHRyKCdyZWFkb25seScsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkY2l0aWVzRmllbGQuZGV2YnJpZGdlQXV0b2NvbXBsZXRlKHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlVXJsOiBmdW5jdGlvbiAoZWwsIHF1ZXJ5KXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkYXRhL2NpdGllcy5qc29uPycgKyBzZWxlY3RlZFJlZ2lvbi5kYXRhO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWluQ2hhcnM6IDEsXG4gICAgICAgICAgICAgICAgb25TZWxlY3Q6IGZ1bmN0aW9uIChzdWdnZXN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2l0eSA9IHN1Z2dlc3Rpb247XG5cbiAgICAgICAgICAgICAgICAgICAgJGNpdHlJZEZpZWxkLnZhbChzdWdnZXN0aW9uLmRhdGEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25JbnZhbGlkYXRlU2VsZWN0aW9uOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkY2l0aWVzRmllbGQudmFsKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgJGNpdHlJZEZpZWxkLnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG59KCBqUXVlcnkgKSk7IiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICQoJy5qcy1tb2JpbGUtbWVudS10b2dnbGUnKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLnNpYmxpbmdzKCd1bCcpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xuICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAkKHRoaXMpLnNpYmxpbmdzKCd1bCcpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQodGhpcykuc2libGluZ3MoJ3VsJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG59KTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gaGlkZUV2ZW50KGUsIGNsb3Nlc3RFbCwgaGlkZUZ1bmMpIHtcbiAgICAgICAgaWYoISQoZS50YXJnZXQpLmNsb3Nlc3QoY2xvc2VzdEVsKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGhpZGVGdW5jKCk7XG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vZmYoJ2NsaWNrJywgJ2JvZHknLCBoaWRlRXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG9mZmNhbnZhc092ZXJsYXkgPSAnI29mZmNhbnZhcycsXG4gICAgICAgIG9mZmNhbnZhcyA9ICcjb2ZmY2FudmFzID4gLm1haW4tb2ZmY2FudmFzJztcblxuICAgIGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICAgICQoJy5qcy1vZmZjYW52YXMnKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICQob2ZmY2FudmFzT3ZlcmxheSkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdib2R5JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGhpZGVFdmVudChlLCBvZmZjYW52YXMsIGhpZGUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgICAkKCcuanMtb2ZmY2FudmFzLCAnICsgb2ZmY2FudmFzT3ZlcmxheSkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgIH1cblxuICAgICQoJy5qcy1vZmZjYW52YXMnKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xuICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2hvdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuXG4gICAgaWYgKCAkKG9mZmNhbnZhc092ZXJsYXkpLmxlbmd0aCApIHtcbiAgICAgICAgdmFyIG9mZmNhbnZhc0hhbW1lciA9IG5ldyBIYW1tZXIoJChvZmZjYW52YXNPdmVybGF5KVswXSk7XG4gICAgICAgIG9mZmNhbnZhc0hhbW1lci5vbihcInN3aXBlbGVmdFwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0pKCk7IiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzcG9uc29yc0Jsb2NrU3dpcGUgPSBuZXcgU3dpcGVyKCcuanMtc3BvbnNvcnMtc3dpcGVyJywge1xuICAgICAgICBsb29wOiB0cnVlLFxuICAgICAgICBwYWdpbmF0aW9uOiAnLmpzLXNwb25zb3JzLXN3aXBlciAuc3dpcGVyLXBhZ2luYXRpb24nLFxuICAgICAgICBwYWdpbmF0aW9uQ2xpY2thYmxlOiB0cnVlXG4gICAgfSk7XG5cbiAgICB2YXIgc3BlYWtlcnNCbG9ja1N3aXBlID0gbmV3IFN3aXBlcignLmpzLXNwZWFrZXJzLXN3aXBlcicsIHtcbiAgICAgICAgbG9vcDogdHJ1ZSxcbiAgICAgICAgcHJldkJ1dHRvbjogJy5qcy1zcGVha2Vycy1ibG9jay1idXR0b24tcHJldicsXG4gICAgICAgIG5leHRCdXR0b246ICcuanMtc3BlYWtlcnMtYmxvY2stYnV0dG9uLW5leHQnLFxuICAgICAgICBwYWdpbmF0aW9uOiAnLmpzLXNwZWFrZXJzLXN3aXBlciAuc3dpcGVyLXBhZ2luYXRpb24nLFxuICAgICAgICBwYWdpbmF0aW9uQ2xpY2thYmxlOiB0cnVlXG4gICAgfSk7XG5cbiAgICB2YXIgbmV3c0Jsb2NrU3dpcGUgPSBuZXcgU3dpcGVyKCcuanMtbmV3cy1zd2lwZXInLCB7XG4gICAgICAgIGxvb3A6IHRydWUsXG4gICAgICAgIHByZXZCdXR0b246ICcuanMtbmV3cy1ibG9jay1idXR0b24tcHJldicsXG4gICAgICAgIG5leHRCdXR0b246ICcuanMtbmV3cy1ibG9jay1idXR0b24tbmV4dCcsXG4gICAgICAgIHBhZ2luYXRpb246ICcuanMtbmV3cy1zd2lwZXIgLnN3aXBlci1wYWdpbmF0aW9uJyxcbiAgICAgICAgcGFnaW5hdGlvbkNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgYnJlYWtwb2ludHM6IHtcbiAgICAgICAgICAgIDExNzA6IHtcbiAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgNjQwOiB7XG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKCcuanMtZXZlbnRzLXN3aXBlcicpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAkc3dpcGVyID0gJCh0aGlzKTtcblxuICAgICAgICBuZXcgU3dpcGVyKCRzd2lwZXIsIHtcbiAgICAgICAgICAgIGxvb3A6IHRydWUsXG4gICAgICAgICAgICBwYWdpbmF0aW9uOiAkc3dpcGVyLmZpbmQoJy5zd2lwZXItcGFnaW5hdGlvbicpLFxuICAgICAgICAgICAgcGFnaW5hdGlvbkNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGJyZWFrcG9pbnRzOiB7XG4gICAgICAgICAgICAgICAgMTE3MDoge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICA2NDA6IHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvL0NvdW50ZG93biB0aW1lclxuICAgIC8qJCgnLmpzLWZsaXAtY2xvY2snKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRpbWVMZWZ0ID0gKyQodGhpcykuZGF0YSgndGltZS1sZWZ0Jyk7XG5cbiAgICAgICAgJCh0aGlzKS5GbGlwQ2xvY2sodGltZUxlZnQsIHtcbiAgICAgICAgICAgIGNvdW50ZG93bjogdHJ1ZSxcbiAgICAgICAgICAgIGNsb2NrRmFjZTogJ0hvdXJseUNvdW50ZXInLFxuICAgICAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICAgICAgaW50ZXJ2YWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkKCdzcGFuLnNlY29uZHMnKS5uZXh0KCkubmV4dCgpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAkKCdzcGFuLnNlY29uZHMnKS5uZXh0KCkucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoJ3NwYW4uc2Vjb25kcycpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYW5ndWFnZTogJ3J1c3NpYW4nXG4gICAgICAgIH0pO1xuICAgIH0pOyovXG5cbiAgICAkKCdbZGF0YS1tYXNrZWQtaW5wdXRdJykubWFza2VkaW5wdXQoKTtcbiAgICAkKCdbZGF0YS12YWxpZGF0ZV0nKS5mb3JtVmFsaWRhdGlvbigpO1xuICAgICQoJy5qcy1pbnB1dC1maWxlJykuaW5wdXRGaWxlKCk7XG4gICAgJCgnLmpzLWlucHV0LXBob3RvJykuaW5wdXRQaG90bygpO1xuICAgICQoJy5qcy1kYXRlcGlja2VyJykuZGF0ZVBpY2tlcigpO1xuICAgICQoJy5qcy1pbnB1dC1yZWdpb24tY2l0eScpLmlucHV0UmVnaW9uQ2l0eSgpO1xuICAgICQoJy5qcy1hdmF0YXItY3JvcCcpLmF2YXRhckNyb3AoKTtcbiAgICAkKCdbZGF0YS1mb3JtLWFqYXhdJykuZm9ybUFqYXgoKTtcblxuICAgICQoJy5qcy1zbW9vdGgtc2Nyb2xsJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsICQodGhpcykuYXR0cignaHJlZicpKTtcbiAgICAgICAgdmFyIGVsZW1lbnRJZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgICAgICBpZiAoJChlbGVtZW50SWQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBzY3JvbGxUb3A6ICQoICQuYXR0cih0aGlzLCAnaHJlZicpICkub2Zmc2V0KCkudG9wIC0gMTBcbiAgICAgICAgICAgIH0sIDcwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdubyBlbGVtZW50IScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbn0pO1xuXG4iXX0=
