function initContactsMap(e){"use strict";var t=document.getElementById("js-contacts-map"),n=t.dataset.mapData;(contactsMap=new e.Map(t,{center:t.dataset.mapCoords.split(","),zoom:t.dataset.mapZoom,controls:["smallMapDefaultSet"]})).behaviors.disable("scrollZoom");var i=e.templateLayoutFactory.createClass('<div class="contacts-map-balloon {{ properties.iconClasses }} {{ properties.iconHoverClasses }}"><div class="contacts-map-balloon-content">{{ properties.iconContent }}</div></div>');$.ajax(n,{method:"GET",cache:!1,dataType:"json"}).done(function(t){t.objects&&t.objects.forEach(function(t){var n=[-100,-70],a="",r={type:"Rectangle",coordinates:[[0,0],[200,70]]};t.type&&"main"===t.type&&(n=[-130,-130],a="contacts-map-balloon-main",r={type:"Rectangle",coordinates:[[0,0],[260,130]]});var s=new e.Placemark(t.coords,{iconContent:t.name,hintContent:t.name},{iconHoverClasses:"",iconLayout:i,iconOffset:n,hasBalloon:!1,iconShape:r});s.properties.set("iconClasses",a),s.events.add("mouseenter",function(e){s.properties.set("iconHoverClasses","contacts-map-balloon-hover")}),s.events.add("mouseleave",function(e){s.properties.set("iconHoverClasses","")}),t.description.length&&s.events.add("click",function(e){initSideModal(t.description,"side-modal-map-object"),e.stopPropagation()}),contactsMap.geoObjects.add(s)})}).fail(function(e,t,n){alert("Ошибка загрузки данных. Пожалуйста, попробуйте перезагрузить страницу."),console.log(e),console.log(n)})}function initSideModalWrapper(e){var t=$('<div class="side-modal-overlay"><div class="side-modal '+e+'"><a href="#" class="side-modal-close" data-side-modal-close></a><div class="side-modal-overflow"></div></div></div>'),n=$("body").children(".side-modal-overlay");return n.length?(n.find(".side-modal").removeClass().addClass("side-modal "+e),n.find(".side-modal-overflow").html("")):$("body").append(t),$("body").children(".side-modal-overlay")}function initSideModal(e,t){var n=initSideModalWrapper(t);n.find(".side-modal-overflow").html(e),setTimeout(function(){n.addClass("active")},300)}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){var n=(t=t||ne).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function i(e){var t=!!e&&"length"in e&&e.length,n=fe.type(e);return"function"!==n&&!fe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function a(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function r(e,t,n){return fe.isFunction(t)?fe.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?fe.grep(e,function(e){return e===t!==n}):"string"!=typeof t?fe.grep(e,function(e){return oe.call(t,e)>-1!==n}):Se.test(t)?fe.filter(t,e,n):(t=fe.filter(t,e),fe.grep(e,function(e){return oe.call(t,e)>-1!==n&&1===e.nodeType}))}function s(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t={};return fe.each(e.match(Le)||[],function(e,n){t[n]=!0}),t}function l(e){return e}function c(e){throw e}function u(e,t,n,i){var a;try{e&&fe.isFunction(a=e.promise)?a.call(e).done(t).fail(n):e&&fe.isFunction(a=e.then)?a.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}function p(){ne.removeEventListener("DOMContentLoaded",p),e.removeEventListener("load",p),fe.ready()}function d(){this.expando=fe.expando+d.uid++}function h(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:He.test(e)?JSON.parse(e):e)}function f(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(je,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=h(n)}catch(e){}Ne.set(e,t,n)}else n=void 0;return n}function m(e,t,n,i){var a,r=1,s=20,o=i?function(){return i.cur()}:function(){return fe.css(e,t,"")},l=o(),c=n&&n[3]||(fe.cssNumber[t]?"":"px"),u=(fe.cssNumber[t]||"px"!==c&&+l)&&Be.exec(fe.css(e,t));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do{u/=r=r||".5",fe.style(e,t,u+c)}while(r!==(r=o()/l)&&1!==r&&--s)}return n&&(u=+u||+l||0,a=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=a)),a}function g(e){var t,n=e.ownerDocument,i=e.nodeName,a=We[i];return a||(t=n.body.appendChild(n.createElement(i)),a=fe.css(t,"display"),t.parentNode.removeChild(t),"none"===a&&(a="block"),We[i]=a,a)}function v(e,t){for(var n,i,a=[],r=0,s=e.length;r<s;r++)(i=e[r]).style&&(n=i.style.display,t?("none"===n&&(a[r]=Ae.get(i,"display")||null,a[r]||(i.style.display="")),""===i.style.display&&qe(i)&&(a[r]=g(i))):"none"!==n&&(a[r]="none",Ae.set(i,"display",n)));for(r=0;r<s;r++)null!=a[r]&&(e[r].style.display=a[r]);return e}function y(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&a(e,t)?fe.merge([e],n):n}function w(e,t){for(var n=0,i=e.length;n<i;n++)Ae.set(e[n],"globalEval",!t||Ae.get(t[n],"globalEval"))}function x(e,t,n,i,a){for(var r,s,o,l,c,u,p=t.createDocumentFragment(),d=[],h=0,f=e.length;h<f;h++)if((r=e[h])||0===r)if("object"===fe.type(r))fe.merge(d,r.nodeType?[r]:r);else if(Ve.test(r)){for(s=s||p.appendChild(t.createElement("div")),o=(Ge.exec(r)||["",""])[1].toLowerCase(),l=_e[o]||_e._default,s.innerHTML=l[1]+fe.htmlPrefilter(r)+l[2],u=l[0];u--;)s=s.lastChild;fe.merge(d,s.childNodes),(s=p.firstChild).textContent=""}else d.push(t.createTextNode(r));for(p.textContent="",h=0;r=d[h++];)if(i&&fe.inArray(r,i)>-1)a&&a.push(r);else if(c=fe.contains(r.ownerDocument,r),s=y(p.appendChild(r),"script"),c&&w(s),n)for(u=0;r=s[u++];)$e.test(r.type||"")&&n.push(r);return p}function b(){return!0}function C(){return!1}function T(){try{return ne.activeElement}catch(e){}}function S(e,t,n,i,a,r){var s,o;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(o in t)S(e,o,n,i,t[o],r);return e}if(null==i&&null==a?(a=n,i=n=void 0):null==a&&("string"==typeof n?(a=i,i=void 0):(a=i,i=n,n=void 0)),!1===a)a=C;else if(!a)return e;return 1===r&&(s=a,(a=function(e){return fe().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=fe.guid++)),e.each(function(){fe.event.add(this,t,a,i,n)})}function k(e,t){return a(e,"table")&&a(11!==t.nodeType?t:t.firstChild,"tr")?fe(">tbody",e)[0]||e:e}function E(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function M(e){var t=nt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function D(e,t){var n,i,a,r,s,o,l,c;if(1===t.nodeType){if(Ae.hasData(e)&&(r=Ae.access(e),s=Ae.set(t,r),c=r.events)){delete s.handle,s.events={};for(a in c)for(n=0,i=c[a].length;n<i;n++)fe.event.add(t,a,c[a][n])}Ne.hasData(e)&&(o=Ne.access(e),l=fe.extend({},o),Ne.set(t,l))}}function L(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ye.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function z(e,t,i,a){t=re.apply([],t);var r,s,o,l,c,u,p=0,d=e.length,h=d-1,f=t[0],m=fe.isFunction(f);if(m||d>1&&"string"==typeof f&&!he.checkClone&&tt.test(f))return e.each(function(n){var r=e.eq(n);m&&(t[0]=f.call(this,n,r.html())),z(r,t,i,a)});if(d&&(r=x(t,e[0].ownerDocument,!1,e,a),s=r.firstChild,1===r.childNodes.length&&(r=s),s||a)){for(l=(o=fe.map(y(r,"script"),E)).length;p<d;p++)c=r,p!==h&&(c=fe.clone(c,!0,!0),l&&fe.merge(o,y(c,"script"))),i.call(e[p],c,p);if(l)for(u=o[o.length-1].ownerDocument,fe.map(o,M),p=0;p<l;p++)c=o[p],$e.test(c.type||"")&&!Ae.access(c,"globalEval")&&fe.contains(u,c)&&(c.src?fe._evalUrl&&fe._evalUrl(c.src):n(c.textContent.replace(it,""),u))}return e}function P(e,t,n){for(var i,a=t?fe.filter(t,e):e,r=0;null!=(i=a[r]);r++)n||1!==i.nodeType||fe.cleanData(y(i)),i.parentNode&&(n&&fe.contains(i.ownerDocument,i)&&w(y(i,"script")),i.parentNode.removeChild(i));return e}function I(e,t,n){var i,a,r,s,o=e.style;return(n=n||st(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||fe.contains(e.ownerDocument,e)||(s=fe.style(e,t)),!he.pixelMarginRight()&&rt.test(s)&&at.test(t)&&(i=o.width,a=o.minWidth,r=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=i,o.minWidth=a,o.maxWidth=r)),void 0!==s?s+"":s}function F(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function A(e){if(e in dt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=pt.length;n--;)if((e=pt[n]+t)in dt)return e}function N(e){var t=fe.cssProps[e];return t||(t=fe.cssProps[e]=A(e)||e),t}function H(e,t,n){var i=Be.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function j(e,t,n,i,a){var r,s=0;for(r=n===(i?"border":"content")?4:"width"===t?1:0;r<4;r+=2)"margin"===n&&(s+=fe.css(e,n+Re[r],!0,a)),i?("content"===n&&(s-=fe.css(e,"padding"+Re[r],!0,a)),"margin"!==n&&(s-=fe.css(e,"border"+Re[r]+"Width",!0,a))):(s+=fe.css(e,"padding"+Re[r],!0,a),"padding"!==n&&(s+=fe.css(e,"border"+Re[r]+"Width",!0,a)));return s}function O(e,t,n){var i,a=st(e),r=I(e,t,a),s="border-box"===fe.css(e,"boxSizing",!1,a);return rt.test(r)?r:(i=s&&(he.boxSizingReliable()||r===e.style[t]),"auto"===r&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)]),(r=parseFloat(r)||0)+j(e,t,n||(s?"border":"content"),i,a)+"px")}function B(e,t,n,i,a){return new B.prototype.init(e,t,n,i,a)}function R(){ft&&(!1===ne.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(R):e.setTimeout(R,fe.fx.interval),fe.fx.tick())}function q(){return e.setTimeout(function(){ht=void 0}),ht=fe.now()}function X(e,t){var n,i=0,a={height:e};for(t=t?1:0;i<4;i+=2-t)a["margin"+(n=Re[i])]=a["padding"+n]=e;return t&&(a.opacity=a.width=e),a}function W(e,t,n){for(var i,a=($.tweeners[t]||[]).concat($.tweeners["*"]),r=0,s=a.length;r<s;r++)if(i=a[r].call(n,t,e))return i}function Y(e,t,n){var i,a,r,s,o,l,c,u,p="width"in t||"height"in t,d=this,h={},f=e.style,m=e.nodeType&&qe(e),g=Ae.get(e,"fxshow");n.queue||(null==(s=fe._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,fe.queue(e,"fx").length||s.empty.fire()})}));for(i in t)if(a=t[i],mt.test(a)){if(delete t[i],r=r||"toggle"===a,a===(m?"hide":"show")){if("show"!==a||!g||void 0===g[i])continue;m=!0}h[i]=g&&g[i]||fe.style(e,i)}if((l=!fe.isEmptyObject(t))||!fe.isEmptyObject(h)){p&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=Ae.get(e,"display")),"none"===(u=fe.css(e,"display"))&&(c?u=c:(v([e],!0),c=e.style.display||c,u=fe.css(e,"display"),v([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===fe.css(e,"float")&&(l||(d.done(function(){f.display=c}),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",d.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1;for(i in h)l||(g?"hidden"in g&&(m=g.hidden):g=Ae.access(e,"fxshow",{display:c}),r&&(g.hidden=!m),m&&v([e],!0),d.done(function(){m||v([e]),Ae.remove(e,"fxshow");for(i in h)fe.style(e,i,h[i])})),l=W(m?g[i]:0,i,d),i in g||(g[i]=l.start,m&&(l.end=l.start,l.start=0))}}function G(e,t){var n,i,a,r,s;for(n in e)if(i=fe.camelCase(n),a=t[i],r=e[n],Array.isArray(r)&&(a=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=fe.cssHooks[i])&&"expand"in s){r=s.expand(r),delete e[i];for(n in r)n in e||(e[n]=r[n],t[n]=a)}else t[i]=a}function $(e,t,n){var i,a,r=0,s=$.prefilters.length,o=fe.Deferred().always(function(){delete l.elem}),l=function(){if(a)return!1;for(var t=ht||q(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),r=0,s=c.tweens.length;r<s;r++)c.tweens[r].run(i);return o.notifyWith(e,[c,i,n]),i<1&&s?n:(s||o.notifyWith(e,[c,1,0]),o.resolveWith(e,[c]),!1)},c=o.promise({elem:e,props:fe.extend({},t),opts:fe.extend(!0,{specialEasing:{},easing:fe.easing._default},n),originalProperties:t,originalOptions:n,startTime:ht||q(),duration:n.duration,tweens:[],createTween:function(t,n){var i=fe.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(a)return this;for(a=!0;n<i;n++)c.tweens[n].run(1);return t?(o.notifyWith(e,[c,1,0]),o.resolveWith(e,[c,t])):o.rejectWith(e,[c,t]),this}}),u=c.props;for(G(u,c.opts.specialEasing);r<s;r++)if(i=$.prefilters[r].call(c,e,u,c.opts))return fe.isFunction(i.stop)&&(fe._queueHooks(c.elem,c.opts.queue).stop=fe.proxy(i.stop,i)),i;return fe.map(u,W,c),fe.isFunction(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),fe.fx.timer(fe.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}function _(e){return(e.match(Le)||[]).join(" ")}function V(e){return e.getAttribute&&e.getAttribute("class")||""}function Q(e,t,n,i){var a;if(Array.isArray(t))fe.each(t,function(t,a){n||Et.test(e)?i(e,a):Q(e+"["+("object"==typeof a&&null!=a?t:"")+"]",a,n,i)});else if(n||"object"!==fe.type(t))i(e,t);else for(a in t)Q(e+"["+a+"]",t[a],n,i)}function U(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,a=0,r=t.toLowerCase().match(Le)||[];if(fe.isFunction(n))for(;i=r[a++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function K(e,t,n,i){function a(o){var l;return r[o]=!0,fe.each(e[o]||[],function(e,o){var c=o(t,n,i);return"string"!=typeof c||s||r[c]?s?!(l=c):void 0:(t.dataTypes.unshift(c),a(c),!1)}),l}var r={},s=e===Ot;return a(t.dataTypes[0])||!r["*"]&&a("*")}function Z(e,t){var n,i,a=fe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((a[n]?e:i||(i={}))[n]=t[n]);return i&&fe.extend(!0,e,i),e}function J(e,t,n){for(var i,a,r,s,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(a in o)if(o[a]&&o[a].test(i)){l.unshift(a);break}if(l[0]in n)r=l[0];else{for(a in n){if(!l[0]||e.converters[a+" "+l[0]]){r=a;break}s||(s=a)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}function ee(e,t,n,i){var a,r,s,o,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(a in c)if((o=a.split(" "))[1]===r&&(s=c[l+" "+o[0]]||c["* "+o[0]])){!0===s?s=c[a]:!0!==c[a]&&(r=o[0],u.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}var te=[],ne=e.document,ie=Object.getPrototypeOf,ae=te.slice,re=te.concat,se=te.push,oe=te.indexOf,le={},ce=le.toString,ue=le.hasOwnProperty,pe=ue.toString,de=pe.call(Object),he={},fe=function(e,t){return new fe.fn.init(e,t)},me=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ge=/^-ms-/,ve=/-([a-z])/g,ye=function(e,t){return t.toUpperCase()};fe.fn=fe.prototype={jquery:"3.2.1",constructor:fe,length:0,toArray:function(){return ae.call(this)},get:function(e){return null==e?ae.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=fe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return fe.each(this,e)},map:function(e){return this.pushStack(fe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ae.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:se,sort:te.sort,splice:te.splice},fe.extend=fe.fn.extend=function(){var e,t,n,i,a,r,s=arguments[0]||{},o=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[o]||{},o++),"object"==typeof s||fe.isFunction(s)||(s={}),o===l&&(s=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)n=s[t],s!==(i=e[t])&&(c&&i&&(fe.isPlainObject(i)||(a=Array.isArray(i)))?(a?(a=!1,r=n&&Array.isArray(n)?n:[]):r=n&&fe.isPlainObject(n)?n:{},s[t]=fe.extend(c,r,i)):void 0!==i&&(s[t]=i));return s},fe.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===fe.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=fe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ce.call(e))&&(!(t=ie(e))||"function"==typeof(n=ue.call(t,"constructor")&&t.constructor)&&pe.call(n)===de)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[ce.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(ge,"ms-").replace(ve,ye)},each:function(e,t){var n,a=0;if(i(e))for(n=e.length;a<n&&!1!==t.call(e[a],a,e[a]);a++);else for(a in e)if(!1===t.call(e[a],a,e[a]))break;return e},trim:function(e){return null==e?"":(e+"").replace(me,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(i(Object(e))?fe.merge(n,"string"==typeof e?[e]:e):se.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:oe.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,a=e.length;i<n;i++)e[a++]=t[i];return e.length=a,e},grep:function(e,t,n){for(var i=[],a=0,r=e.length,s=!n;a<r;a++)!t(e[a],a)!==s&&i.push(e[a]);return i},map:function(e,t,n){var a,r,s=0,o=[];if(i(e))for(a=e.length;s<a;s++)null!=(r=t(e[s],s,n))&&o.push(r);else for(s in e)null!=(r=t(e[s],s,n))&&o.push(r);return re.apply([],o)},guid:1,proxy:function(e,t){var n,i,a;if("string"==typeof t&&(n=e[t],t=e,e=n),fe.isFunction(e))return i=ae.call(arguments,2),a=function(){return e.apply(t||this,i.concat(ae.call(arguments)))},a.guid=e.guid=e.guid||fe.guid++,a},now:Date.now,support:he}),"function"==typeof Symbol&&(fe.fn[Symbol.iterator]=te[Symbol.iterator]),fe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var we=function(e){function t(e,t,n,i){var a,r,s,o,l,u,d,h=t&&t.ownerDocument,f=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==f&&9!==f&&11!==f)return n;if(!i&&((t?t.ownerDocument||t:B)!==P&&z(t),t=t||P,F)){if(11!==f&&(l=me.exec(e)))if(a=l[1]){if(9===f){if(!(s=t.getElementById(a)))return n;if(s.id===a)return n.push(s),n}else if(h&&(s=h.getElementById(a))&&j(t,s)&&s.id===a)return n.push(s),n}else{if(l[2])return U.apply(n,t.getElementsByTagName(e)),n;if((a=l[3])&&x.getElementsByClassName&&t.getElementsByClassName)return U.apply(n,t.getElementsByClassName(a)),n}if(x.qsa&&!Y[e+" "]&&(!A||!A.test(e))){if(1!==f)h=t,d=e;else if("object"!==t.nodeName.toLowerCase()){for((o=t.getAttribute("id"))?o=o.replace(we,xe):t.setAttribute("id",o=O),r=(u=S(e)).length;r--;)u[r]="#"+o+" "+p(u[r]);d=u.join(","),h=ge.test(e)&&c(t.parentNode)||t}if(d)try{return U.apply(n,h.querySelectorAll(d)),n}catch(e){}finally{o===O&&t.removeAttribute("id")}}}return E(e.replace(re,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>b.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[O]=!0,e}function a(e){var t=P.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function r(e,t){for(var n=e.split("|"),i=n.length;i--;)b.attrHandle[n[i]]=t}function s(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function o(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Ce(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return i(function(t){return t=+t,i(function(n,i){for(var a,r=e([],n.length,t),s=r.length;s--;)n[a=r[s]]&&(n[a]=!(i[a]=n[a]))})})}function c(e){return e&&void 0!==e.getElementsByTagName&&e}function u(){}function p(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function d(e,t,n){var i=t.dir,a=t.next,r=a||i,s=n&&"parentNode"===r,o=q++;return t.first?function(t,n,a){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,a);return!1}:function(t,n,l){var c,u,p,d=[R,o];if(l){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(p=t[O]||(t[O]={}),u=p[t.uniqueID]||(p[t.uniqueID]={}),a&&a===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[r])&&c[0]===R&&c[1]===o)return d[2]=c[2];if(u[r]=d,d[2]=e(t,n,l))return!0}return!1}}function h(e){return e.length>1?function(t,n,i){for(var a=e.length;a--;)if(!e[a](t,n,i))return!1;return!0}:e[0]}function f(e,n,i){for(var a=0,r=n.length;a<r;a++)t(e,n[a],i);return i}function m(e,t,n,i,a){for(var r,s=[],o=0,l=e.length,c=null!=t;o<l;o++)(r=e[o])&&(n&&!n(r,i,a)||(s.push(r),c&&t.push(o)));return s}function g(e,t,n,a,r,s){return a&&!a[O]&&(a=g(a)),r&&!r[O]&&(r=g(r,s)),i(function(i,s,o,l){var c,u,p,d=[],h=[],g=s.length,v=i||f(t||"*",o.nodeType?[o]:o,[]),y=!e||!i&&t?v:m(v,d,e,o,l),w=n?r||(i?e:g||a)?[]:s:y;if(n&&n(y,w,o,l),a)for(c=m(w,h),a(c,[],o,l),u=c.length;u--;)(p=c[u])&&(w[h[u]]=!(y[h[u]]=p));if(i){if(r||e){if(r){for(c=[],u=w.length;u--;)(p=w[u])&&c.push(y[u]=p);r(null,w=[],c,l)}for(u=w.length;u--;)(p=w[u])&&(c=r?Z(i,p):d[u])>-1&&(i[c]=!(s[c]=p))}}else w=m(w===s?w.splice(g,w.length):w),r?r(null,s,w,l):U.apply(s,w)})}function v(e){for(var t,n,i,a=e.length,r=b.relative[e[0].type],s=r||b.relative[" "],o=r?1:0,l=d(function(e){return e===t},s,!0),c=d(function(e){return Z(t,e)>-1},s,!0),u=[function(e,n,i){var a=!r&&(i||n!==M)||((t=n).nodeType?l(e,n,i):c(e,n,i));return t=null,a}];o<a;o++)if(n=b.relative[e[o].type])u=[d(h(u),n)];else{if((n=b.filter[e[o].type].apply(null,e[o].matches))[O]){for(i=++o;i<a&&!b.relative[e[i].type];i++);return g(o>1&&h(u),o>1&&p(e.slice(0,o-1).concat({value:" "===e[o-2].type?"*":""})).replace(re,"$1"),n,o<i&&v(e.slice(o,i)),i<a&&v(e=e.slice(i)),i<a&&p(e))}u.push(n)}return h(u)}function y(e,n){var a=n.length>0,r=e.length>0,s=function(i,s,o,l,c){var u,p,d,h=0,f="0",g=i&&[],v=[],y=M,w=i||r&&b.find.TAG("*",c),x=R+=null==y?1:Math.random()||.1,C=w.length;for(c&&(M=s===P||s||c);f!==C&&null!=(u=w[f]);f++){if(r&&u){for(p=0,s||u.ownerDocument===P||(z(u),o=!F);d=e[p++];)if(d(u,s||P,o)){l.push(u);break}c&&(R=x)}a&&((u=!d&&u)&&h--,i&&g.push(u))}if(h+=f,a&&f!==h){for(p=0;d=n[p++];)d(g,v,s,o);if(i){if(h>0)for(;f--;)g[f]||v[f]||(v[f]=V.call(l));v=m(v)}U.apply(l,v),c&&!i&&v.length>0&&h+n.length>1&&t.uniqueSort(l)}return c&&(R=x,M=y),g};return a?i(s):s}var w,x,b,C,T,S,k,E,M,D,L,z,P,I,F,A,N,H,j,O="sizzle"+1*new Date,B=e.document,R=0,q=0,X=n(),W=n(),Y=n(),G=function(e,t){return e===t&&(L=!0),0},$={}.hasOwnProperty,_=[],V=_.pop,Q=_.push,U=_.push,K=_.slice,Z=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ie=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",ae=new RegExp(ee+"+","g"),re=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),se=new RegExp("^"+ee+"*,"+ee+"*"),oe=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ce=new RegExp(ie),ue=new RegExp("^"+te+"$"),pe={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+ie),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},de=/^(?:input|select|textarea|button)$/i,he=/^h\d$/i,fe=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ge=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},we=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,xe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},be=function(){z()},Ce=d(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{U.apply(_=K.call(B.childNodes),B.childNodes),_[B.childNodes.length].nodeType}catch(e){U={apply:_.length?function(e,t){Q.apply(e,K.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}x=t.support={},T=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},z=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:B;return i!==P&&9===i.nodeType&&i.documentElement?(P=i,I=P.documentElement,F=!T(P),B!==P&&(n=P.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",be,!1):n.attachEvent&&n.attachEvent("onunload",be)),x.attributes=a(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=a(function(e){return e.appendChild(P.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=fe.test(P.getElementsByClassName),x.getById=a(function(e){return I.appendChild(e).id=O,!P.getElementsByName||!P.getElementsByName(O).length}),x.getById?(b.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&F){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&F){var n,i,a,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(a=t.getElementsByName(e),i=0;r=a[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),b.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],a=0,r=t.getElementsByTagName(e);if("*"===e){for(;n=r[a++];)1===n.nodeType&&i.push(n);return i}return r},b.find.CLASS=x.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&F)return t.getElementsByClassName(e)},N=[],A=[],(x.qsa=fe.test(P.querySelectorAll))&&(a(function(e){I.appendChild(e).innerHTML="<a id='"+O+"'></a><select id='"+O+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&A.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||A.push("\\["+ee+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+O+"-]").length||A.push("~="),e.querySelectorAll(":checked").length||A.push(":checked"),e.querySelectorAll("a#"+O+"+*").length||A.push(".#.+[+~]")}),a(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=P.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&A.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&A.push(":enabled",":disabled"),I.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&A.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),A.push(",.*:")})),(x.matchesSelector=fe.test(H=I.matches||I.webkitMatchesSelector||I.mozMatchesSelector||I.oMatchesSelector||I.msMatchesSelector))&&a(function(e){x.disconnectedMatch=H.call(e,"*"),H.call(e,"[s!='']:x"),N.push("!=",ie)}),A=A.length&&new RegExp(A.join("|")),N=N.length&&new RegExp(N.join("|")),t=fe.test(I.compareDocumentPosition),j=t||fe.test(I.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},G=t?function(e,t){if(e===t)return L=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===P||e.ownerDocument===B&&j(B,e)?-1:t===P||t.ownerDocument===B&&j(B,t)?1:D?Z(D,e)-Z(D,t):0:4&n?-1:1)}:function(e,t){if(e===t)return L=!0,0;var n,i=0,a=e.parentNode,r=t.parentNode,o=[e],l=[t];if(!a||!r)return e===P?-1:t===P?1:a?-1:r?1:D?Z(D,e)-Z(D,t):0;if(a===r)return s(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;o[i]===l[i];)i++;return i?s(o[i],l[i]):o[i]===B?-1:l[i]===B?1:0},P):P},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==P&&z(e),n=n.replace(le,"='$1']"),x.matchesSelector&&F&&!Y[n+" "]&&(!N||!N.test(n))&&(!A||!A.test(n)))try{var i=H.call(e,n);if(i||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,P,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==P&&z(e),j(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==P&&z(e);var n=b.attrHandle[t.toLowerCase()],i=n&&$.call(b.attrHandle,t.toLowerCase())?n(e,t,!F):void 0;return void 0!==i?i:x.attributes||!F?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.escape=function(e){return(e+"").replace(we,xe)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,a=0;if(L=!x.detectDuplicates,D=!x.sortStable&&e.slice(0),e.sort(G),L){for(;t=e[a++];)t===e[a]&&(i=n.push(a));for(;i--;)e.splice(n[i],1)}return D=null,e},C=t.getText=function(e){var t,n="",i=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[i++];)n+=C(t);return n},(b=t.selectors={cacheLength:50,createPseudo:i,match:pe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return pe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ce.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=X[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&X(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(a){var r=t.attr(a,e);return null==r?"!="===n:!n||(r+="","="===n?r===i:"!="===n?r!==i:"^="===n?i&&0===r.indexOf(i):"*="===n?i&&r.indexOf(i)>-1:"$="===n?i&&r.slice(-i.length)===i:"~="===n?(" "+r.replace(ae," ")+" ").indexOf(i)>-1:"|="===n&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,a){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===t;return 1===i&&0===a?function(e){return!!e.parentNode}:function(t,n,l){var c,u,p,d,h,f,m=r!==s?"nextSibling":"previousSibling",g=t.parentNode,v=o&&t.nodeName.toLowerCase(),y=!l&&!o,w=!1;if(g){if(r){for(;m;){for(d=t;d=d[m];)if(o?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?g.firstChild:g.lastChild],s&&y){for(w=(h=(c=(u=(p=(d=g)[O]||(d[O]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]||[])[0]===R&&c[1])&&c[2],d=h&&g.childNodes[h];d=++h&&d&&d[m]||(w=h=0)||f.pop();)if(1===d.nodeType&&++w&&d===t){u[e]=[R,h,w];break}}else if(y&&(w=h=(c=(u=(p=(d=t)[O]||(d[O]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]||[])[0]===R&&c[1]),!1===w)for(;(d=++h&&d&&d[m]||(w=h=0)||f.pop())&&((o?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++w||(y&&((u=(p=d[O]||(d[O]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]=[R,w]),d!==t)););return(w-=a)===i||w%i==0&&w/i>=0}}},PSEUDO:function(e,n){var a,r=b.pseudos[e]||b.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return r[O]?r(n):r.length>1?(a=[e,e,"",n],b.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,a=r(e,n),s=a.length;s--;)e[i=Z(e,a[s])]=!(t[i]=a[s])}):function(e){return r(e,0,a)}):r}},pseudos:{not:i(function(e){var t=[],n=[],a=k(e.replace(re,"$1"));return a[O]?i(function(e,t,n,i){for(var r,s=a(e,null,i,[]),o=e.length;o--;)(r=s[o])&&(e[o]=!(t[o]=r))}):function(e,i,r){return t[0]=e,a(t,null,r,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(ve,ye),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:i(function(e){return ue.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var n;do{if(n=F?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===I},focus:function(e){return e===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:o(!1),disabled:o(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return he.test(e.nodeName)},input:function(e){return de.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:l(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=b.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[w]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(w);for(w in{submit:!0,reset:!0})b.pseudos[w]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(w);return u.prototype=b.filters=b.pseudos,b.setFilters=new u,S=t.tokenize=function(e,n){var i,a,r,s,o,l,c,u=W[e+" "];if(u)return n?0:u.slice(0);for(o=e,l=[],c=b.preFilter;o;){i&&!(a=se.exec(o))||(a&&(o=o.slice(a[0].length)||o),l.push(r=[])),i=!1,(a=oe.exec(o))&&(i=a.shift(),r.push({value:i,type:a[0].replace(re," ")}),o=o.slice(i.length));for(s in b.filter)!(a=pe[s].exec(o))||c[s]&&!(a=c[s](a))||(i=a.shift(),r.push({value:i,type:s,matches:a}),o=o.slice(i.length));if(!i)break}return n?o.length:o?t.error(e):W(e,l).slice(0)},k=t.compile=function(e,t){var n,i=[],a=[],r=Y[e+" "];if(!r){for(t||(t=S(e)),n=t.length;n--;)(r=v(t[n]))[O]?i.push(r):a.push(r);(r=Y(e,y(a,i))).selector=e}return r},E=t.select=function(e,t,n,i){var a,r,s,o,l,u="function"==typeof e&&e,d=!i&&S(e=u.selector||e);if(n=n||[],1===d.length){if((r=d[0]=d[0].slice(0)).length>2&&"ID"===(s=r[0]).type&&9===t.nodeType&&F&&b.relative[r[1].type]){if(!(t=(b.find.ID(s.matches[0].replace(ve,ye),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(a=pe.needsContext.test(e)?0:r.length;a--&&(s=r[a],!b.relative[o=s.type]);)if((l=b.find[o])&&(i=l(s.matches[0].replace(ve,ye),ge.test(r[0].type)&&c(t.parentNode)||t))){if(r.splice(a,1),!(e=i.length&&p(r)))return U.apply(n,i),n;break}}return(u||k(e,d))(i,t,!F,n,!t||ge.test(e)&&c(t.parentNode)||t),n},x.sortStable=O.split("").sort(G).join("")===O,x.detectDuplicates=!!L,z(),x.sortDetached=a(function(e){return 1&e.compareDocumentPosition(P.createElement("fieldset"))}),a(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||r("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&a(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||r("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),a(function(e){return null==e.getAttribute("disabled")})||r(J,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);fe.find=we,fe.expr=we.selectors,fe.expr[":"]=fe.expr.pseudos,fe.uniqueSort=fe.unique=we.uniqueSort,fe.text=we.getText,fe.isXMLDoc=we.isXML,fe.contains=we.contains,fe.escapeSelector=we.escape;var xe=function(e,t,n){for(var i=[],a=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&fe(e).is(n))break;i.push(e)}return i},be=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Ce=fe.expr.match.needsContext,Te=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Se=/^.[^:#\[\.,]*$/;fe.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?fe.find.matchesSelector(i,e)?[i]:[]:fe.find.matches(e,fe.grep(t,function(e){return 1===e.nodeType}))},fe.fn.extend({find:function(e){var t,n,i=this.length,a=this;if("string"!=typeof e)return this.pushStack(fe(e).filter(function(){for(t=0;t<i;t++)if(fe.contains(a[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)fe.find(e,a[t],n);return i>1?fe.uniqueSort(n):n},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&Ce.test(e)?fe(e):e||[],!1).length}});var ke,Ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(fe.fn.init=function(e,t,n){var i,a;if(!e)return this;if(n=n||ke,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Ee.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof fe?t[0]:t,fe.merge(this,fe.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:ne,!0)),Te.test(i[1])&&fe.isPlainObject(t))for(i in t)fe.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(a=ne.getElementById(i[2]))&&(this[0]=a,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):fe.isFunction(e)?void 0!==n.ready?n.ready(e):e(fe):fe.makeArray(e,this)}).prototype=fe.fn,ke=fe(ne);var Me=/^(?:parents|prev(?:Until|All))/,De={children:!0,contents:!0,next:!0,prev:!0};fe.fn.extend({has:function(e){var t=fe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(fe.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,a=this.length,r=[],s="string"!=typeof e&&fe(e);if(!Ce.test(e))for(;i<a;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&fe.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?fe.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?oe.call(fe(e),this[0]):oe.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(fe.uniqueSort(fe.merge(this.get(),fe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),fe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return xe(e,"parentNode")},parentsUntil:function(e,t,n){return xe(e,"parentNode",n)},next:function(e){return s(e,"nextSibling")},prev:function(e){return s(e,"previousSibling")},nextAll:function(e){return xe(e,"nextSibling")},prevAll:function(e){return xe(e,"previousSibling")},nextUntil:function(e,t,n){return xe(e,"nextSibling",n)},prevUntil:function(e,t,n){return xe(e,"previousSibling",n)},siblings:function(e){return be((e.parentNode||{}).firstChild,e)},children:function(e){return be(e.firstChild)},contents:function(e){return a(e,"iframe")?e.contentDocument:(a(e,"template")&&(e=e.content||e),fe.merge([],e.childNodes))}},function(e,t){fe.fn[e]=function(n,i){var a=fe.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(a=fe.filter(i,a)),this.length>1&&(De[e]||fe.uniqueSort(a),Me.test(e)&&a.reverse()),this.pushStack(a)}});var Le=/[^\x20\t\r\n\f]+/g;fe.Callbacks=function(e){e="string"==typeof e?o(e):fe.extend({},e);var t,n,i,a,r=[],s=[],l=-1,c=function(){for(a=a||e.once,i=t=!0;s.length;l=-1)for(n=s.shift();++l<r.length;)!1===r[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=r.length,n=!1);e.memory||(n=!1),t=!1,a&&(r=n?[]:"")},u={add:function(){return r&&(n&&!t&&(l=r.length-1,s.push(n)),function t(n){fe.each(n,function(n,i){fe.isFunction(i)?e.unique&&u.has(i)||r.push(i):i&&i.length&&"string"!==fe.type(i)&&t(i)})}(arguments),n&&!t&&c()),this},remove:function(){return fe.each(arguments,function(e,t){for(var n;(n=fe.inArray(t,r,n))>-1;)r.splice(n,1),n<=l&&l--}),this},has:function(e){return e?fe.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return a=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return a=s=[],n||t||(r=n=""),this},locked:function(){return!!a},fireWith:function(e,n){return a||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},fe.extend({Deferred:function(t){var n=[["notify","progress",fe.Callbacks("memory"),fe.Callbacks("memory"),2],["resolve","done",fe.Callbacks("once memory"),fe.Callbacks("once memory"),0,"resolved"],["reject","fail",fe.Callbacks("once memory"),fe.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var e=arguments;return fe.Deferred(function(t){fe.each(n,function(n,i){var a=fe.isFunction(e[i[4]])&&e[i[4]];r[i[1]](function(){var e=a&&a.apply(this,arguments);e&&fe.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,a?[e]:arguments)})}),e=null}).promise()},then:function(t,i,a){function r(t,n,i,a){return function(){var o=this,u=arguments,p=function(){var e,p;if(!(t<s)){if((e=i.apply(o,u))===n.promise())throw new TypeError("Thenable self-resolution");p=e&&("object"==typeof e||"function"==typeof e)&&e.then,fe.isFunction(p)?a?p.call(e,r(s,n,l,a),r(s,n,c,a)):(s++,p.call(e,r(s,n,l,a),r(s,n,c,a),r(s,n,l,n.notifyWith))):(i!==l&&(o=void 0,u=[e]),(a||n.resolveWith)(o,u))}},d=a?p:function(){try{p()}catch(e){fe.Deferred.exceptionHook&&fe.Deferred.exceptionHook(e,d.stackTrace),t+1>=s&&(i!==c&&(o=void 0,u=[e]),n.rejectWith(o,u))}};t?d():(fe.Deferred.getStackHook&&(d.stackTrace=fe.Deferred.getStackHook()),e.setTimeout(d))}}var s=0;return fe.Deferred(function(e){n[0][3].add(r(0,e,fe.isFunction(a)?a:l,e.notifyWith)),n[1][3].add(r(0,e,fe.isFunction(t)?t:l)),n[2][3].add(r(0,e,fe.isFunction(i)?i:c))}).promise()},promise:function(e){return null!=e?fe.extend(e,a):a}},r={};return fe.each(n,function(e,t){var s=t[2],o=t[5];a[t[1]]=s.add,o&&s.add(function(){i=o},n[3-e][2].disable,n[0][2].lock),s.add(t[3].fire),r[t[0]]=function(){return r[t[0]+"With"](this===r?void 0:this,arguments),this},r[t[0]+"With"]=s.fireWith}),a.promise(r),t&&t.call(r,r),r},when:function(e){var t=arguments.length,n=t,i=Array(n),a=ae.call(arguments),r=fe.Deferred(),s=function(e){return function(n){i[e]=this,a[e]=arguments.length>1?ae.call(arguments):n,--t||r.resolveWith(i,a)}};if(t<=1&&(u(e,r.done(s(n)).resolve,r.reject,!t),"pending"===r.state()||fe.isFunction(a[n]&&a[n].then)))return r.then();for(;n--;)u(a[n],s(n),r.reject);return r.promise()}});var ze=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;fe.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&ze.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},fe.readyException=function(t){e.setTimeout(function(){throw t})};var Pe=fe.Deferred();fe.fn.ready=function(e){return Pe.then(e).catch(function(e){fe.readyException(e)}),this},fe.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--fe.readyWait:fe.isReady)||(fe.isReady=!0,!0!==e&&--fe.readyWait>0||Pe.resolveWith(ne,[fe]))}}),fe.ready.then=Pe.then,"complete"===ne.readyState||"loading"!==ne.readyState&&!ne.documentElement.doScroll?e.setTimeout(fe.ready):(ne.addEventListener("DOMContentLoaded",p),e.addEventListener("load",p));var Ie=function(e,t,n,i,a,r,s){var o=0,l=e.length,c=null==n;if("object"===fe.type(n)){a=!0;for(o in n)Ie(e,t,o,n[o],!0,r,s)}else if(void 0!==i&&(a=!0,fe.isFunction(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(fe(e),n)})),t))for(;o<l;o++)t(e[o],n,s?i:i.call(e[o],o,t(e[o],n)));return a?e:c?t.call(e):l?t(e[0],n):r},Fe=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};d.uid=1,d.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Fe(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,a=this.cache(e);if("string"==typeof t)a[fe.camelCase(t)]=n;else for(i in t)a[fe.camelCase(i)]=t[i];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][fe.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(fe.camelCase):(t=fe.camelCase(t))in i?[t]:t.match(Le)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||fe.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!fe.isEmptyObject(t)}};var Ae=new d,Ne=new d,He=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,je=/[A-Z]/g;fe.extend({hasData:function(e){return Ne.hasData(e)||Ae.hasData(e)},data:function(e,t,n){return Ne.access(e,t,n)},removeData:function(e,t){Ne.remove(e,t)},_data:function(e,t,n){return Ae.access(e,t,n)},_removeData:function(e,t){Ae.remove(e,t)}}),fe.fn.extend({data:function(e,t){var n,i,a,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(a=Ne.get(r),1===r.nodeType&&!Ae.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=fe.camelCase(i.slice(5)),f(r,i,a[i]));Ae.set(r,"hasDataAttrs",!0)}return a}return"object"==typeof e?this.each(function(){Ne.set(this,e)}):Ie(this,function(t){var n;if(r&&void 0===t){if(void 0!==(n=Ne.get(r,e)))return n;if(void 0!==(n=f(r,e)))return n}else this.each(function(){Ne.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ne.remove(this,e)})}}),fe.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Ae.get(e,t),n&&(!i||Array.isArray(n)?i=Ae.access(e,t,fe.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=fe.queue(e,t),i=n.length,a=n.shift(),r=fe._queueHooks(e,t),s=function(){fe.dequeue(e,t)};"inprogress"===a&&(a=n.shift(),i--),a&&("fx"===t&&n.unshift("inprogress"),delete r.stop,a.call(e,s,r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Ae.get(e,n)||Ae.access(e,n,{empty:fe.Callbacks("once memory").add(function(){Ae.remove(e,[t+"queue",n])})})}}),fe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?fe.queue(this[0],e):void 0===t?this:this.each(function(){var n=fe.queue(this,e,t);fe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&fe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){fe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,a=fe.Deferred(),r=this,s=this.length,o=function(){--i||a.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Ae.get(r[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(o));return o(),a.promise(t)}});var Oe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Be=new RegExp("^(?:([+-])=|)("+Oe+")([a-z%]*)$","i"),Re=["Top","Right","Bottom","Left"],qe=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&fe.contains(e.ownerDocument,e)&&"none"===fe.css(e,"display")},Xe=function(e,t,n,i){var a,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];a=n.apply(e,i||[]);for(r in t)e.style[r]=s[r];return a},We={};fe.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){qe(this)?fe(this).show():fe(this).hide()})}});var Ye=/^(?:checkbox|radio)$/i,Ge=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,$e=/^$|\/(?:java|ecma)script/i,_e={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};_e.optgroup=_e.option,_e.tbody=_e.tfoot=_e.colgroup=_e.caption=_e.thead,_e.th=_e.td;var Ve=/<|&#?\w+;/;!function(){var e=ne.createDocumentFragment().appendChild(ne.createElement("div")),t=ne.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),he.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",he.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Qe=ne.documentElement,Ue=/^key/,Ke=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ze=/^([^.]*)(?:\.(.+)|)/;fe.event={global:{},add:function(e,t,n,i,a){var r,s,o,l,c,u,p,d,h,f,m,g=Ae.get(e);if(g)for(n.handler&&(n=(r=n).handler,a=r.selector),a&&fe.find.matchesSelector(Qe,a),n.guid||(n.guid=fe.guid++),(l=g.events)||(l=g.events={}),(s=g.handle)||(s=g.handle=function(t){return void 0!==fe&&fe.event.triggered!==t.type?fe.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(Le)||[""]).length;c--;)h=m=(o=Ze.exec(t[c])||[])[1],f=(o[2]||"").split(".").sort(),h&&(p=fe.event.special[h]||{},h=(a?p.delegateType:p.bindType)||h,p=fe.event.special[h]||{},u=fe.extend({type:h,origType:m,data:i,handler:n,guid:n.guid,selector:a,needsContext:a&&fe.expr.match.needsContext.test(a),namespace:f.join(".")},r),(d=l[h])||((d=l[h]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,i,f,s)||e.addEventListener&&e.addEventListener(h,s)),p.add&&(p.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),a?d.splice(d.delegateCount++,0,u):d.push(u),fe.event.global[h]=!0)},remove:function(e,t,n,i,a){var r,s,o,l,c,u,p,d,h,f,m,g=Ae.hasData(e)&&Ae.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(Le)||[""]).length;c--;)if(o=Ze.exec(t[c])||[],h=m=o[1],f=(o[2]||"").split(".").sort(),h){for(p=fe.event.special[h]||{},d=l[h=(i?p.delegateType:p.bindType)||h]||[],o=o[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=d.length;r--;)u=d[r],!a&&m!==u.origType||n&&n.guid!==u.guid||o&&!o.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(d.splice(r,1),u.selector&&d.delegateCount--,p.remove&&p.remove.call(e,u));s&&!d.length&&(p.teardown&&!1!==p.teardown.call(e,f,g.handle)||fe.removeEvent(e,h,g.handle),delete l[h])}else for(h in l)fe.event.remove(e,h+t[c],n,i,!0);fe.isEmptyObject(l)&&Ae.remove(e,"handle events")}},dispatch:function(e){var t,n,i,a,r,s,o=fe.event.fix(e),l=new Array(arguments.length),c=(Ae.get(this,"events")||{})[o.type]||[],u=fe.event.special[o.type]||{};for(l[0]=o,t=1;t<arguments.length;t++)l[t]=arguments[t];if(o.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,o)){for(s=fe.event.handlers.call(this,o,c),t=0;(a=s[t++])&&!o.isPropagationStopped();)for(o.currentTarget=a.elem,n=0;(r=a.handlers[n++])&&!o.isImmediatePropagationStopped();)o.rnamespace&&!o.rnamespace.test(r.namespace)||(o.handleObj=r,o.data=r.data,void 0!==(i=((fe.event.special[r.origType]||{}).handle||r.handler).apply(a.elem,l))&&!1===(o.result=i)&&(o.preventDefault(),o.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,o),o.result}},handlers:function(e,t){var n,i,a,r,s,o=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[a=(i=t[n]).selector+" "]&&(s[a]=i.needsContext?fe(a,this).index(c)>-1:fe.find(a,this,null,[c]).length),s[a]&&r.push(i);r.length&&o.push({elem:c,handlers:r})}return c=this,l<t.length&&o.push({elem:c,handlers:t.slice(l)}),o},addProp:function(e,t){Object.defineProperty(fe.Event.prototype,e,{enumerable:!0,configurable:!0,get:fe.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[fe.expando]?e:new fe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==T()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===T()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&a(this,"input"))return this.click(),!1},_default:function(e){return a(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},fe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},fe.Event=function(e,t){if(!(this instanceof fe.Event))return new fe.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?b:C,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&fe.extend(this,t),this.timeStamp=e&&e.timeStamp||fe.now(),this[fe.expando]=!0},fe.Event.prototype={constructor:fe.Event,isDefaultPrevented:C,isPropagationStopped:C,isImmediatePropagationStopped:C,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=b,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=b,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=b,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},fe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ue.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ke.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},fe.event.addProp),fe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){fe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,a=e.relatedTarget,r=e.handleObj;return a&&(a===i||fe.contains(i,a))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),fe.fn.extend({on:function(e,t,n,i){return S(this,e,t,n,i)},one:function(e,t,n,i){return S(this,e,t,n,i,1)},off:function(e,t,n){var i,a;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,fe(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(a in e)this.off(a,t,e[a]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=C),this.each(function(){fe.event.remove(this,e,n,t)})}});var Je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,et=/<script|<style|<link/i,tt=/checked\s*(?:[^=]|=\s*.checked.)/i,nt=/^true\/(.*)/,it=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;fe.extend({htmlPrefilter:function(e){return e.replace(Je,"<$1></$2>")},clone:function(e,t,n){var i,a,r,s,o=e.cloneNode(!0),l=fe.contains(e.ownerDocument,e);if(!(he.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||fe.isXMLDoc(e)))for(s=y(o),i=0,a=(r=y(e)).length;i<a;i++)L(r[i],s[i]);if(t)if(n)for(r=r||y(e),s=s||y(o),i=0,a=r.length;i<a;i++)D(r[i],s[i]);else D(e,o);return(s=y(o,"script")).length>0&&w(s,!l&&y(e,"script")),o},cleanData:function(e){for(var t,n,i,a=fe.event.special,r=0;void 0!==(n=e[r]);r++)if(Fe(n)){if(t=n[Ae.expando]){if(t.events)for(i in t.events)a[i]?fe.event.remove(n,i):fe.removeEvent(n,i,t.handle);n[Ae.expando]=void 0}n[Ne.expando]&&(n[Ne.expando]=void 0)}}}),fe.fn.extend({detach:function(e){return P(this,e,!0)},remove:function(e){return P(this,e)},text:function(e){return Ie(this,function(e){return void 0===e?fe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return z(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||k(this,e).appendChild(e)})},prepend:function(){return z(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=k(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return z(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return z(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(fe.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return fe.clone(this,e,t)})},html:function(e){return Ie(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!et.test(e)&&!_e[(Ge.exec(e)||["",""])[1].toLowerCase()]){e=fe.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(fe.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return z(this,arguments,function(t){var n=this.parentNode;fe.inArray(this,e)<0&&(fe.cleanData(y(this)),n&&n.replaceChild(t,this))},e)}}),fe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){fe.fn[e]=function(e){for(var n,i=[],a=fe(e),r=a.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),fe(a[s])[t](n),se.apply(i,n.get());return this.pushStack(i)}});var at=/^margin/,rt=new RegExp("^("+Oe+")(?!px)[a-z%]+$","i"),st=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(o){o.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",o.innerHTML="",Qe.appendChild(s);var t=e.getComputedStyle(o);n="1%"!==t.top,r="2px"===t.marginLeft,i="4px"===t.width,o.style.marginRight="50%",a="4px"===t.marginRight,Qe.removeChild(s),o=null}}var n,i,a,r,s=ne.createElement("div"),o=ne.createElement("div");o.style&&(o.style.backgroundClip="content-box",o.cloneNode(!0).style.backgroundClip="",he.clearCloneStyle="content-box"===o.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(o),fe.extend(he,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),a},reliableMarginLeft:function(){return t(),r}}))}();var ot=/^(none|table(?!-c[ea]).+)/,lt=/^--/,ct={position:"absolute",visibility:"hidden",display:"block"},ut={letterSpacing:"0",fontWeight:"400"},pt=["Webkit","Moz","ms"],dt=ne.createElement("div").style;fe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=I(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,r,s,o=fe.camelCase(t),l=lt.test(t),c=e.style;if(l||(t=N(o)),s=fe.cssHooks[t]||fe.cssHooks[o],void 0===n)return s&&"get"in s&&void 0!==(a=s.get(e,!1,i))?a:c[t];"string"===(r=typeof n)&&(a=Be.exec(n))&&a[1]&&(n=m(e,t,a),r="number"),null!=n&&n===n&&("number"===r&&(n+=a&&a[3]||(fe.cssNumber[o]?"":"px")),he.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var a,r,s,o=fe.camelCase(t);return lt.test(t)||(t=N(o)),(s=fe.cssHooks[t]||fe.cssHooks[o])&&"get"in s&&(a=s.get(e,!0,n)),void 0===a&&(a=I(e,t,i)),"normal"===a&&t in ut&&(a=ut[t]),""===n||n?(r=parseFloat(a),!0===n||isFinite(r)?r||0:a):a}}),fe.each(["height","width"],function(e,t){fe.cssHooks[t]={get:function(e,n,i){if(n)return!ot.test(fe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?O(e,t,i):Xe(e,ct,function(){return O(e,t,i)})},set:function(e,n,i){var a,r=i&&st(e),s=i&&j(e,t,i,"border-box"===fe.css(e,"boxSizing",!1,r),r);return s&&(a=Be.exec(n))&&"px"!==(a[3]||"px")&&(e.style[t]=n,n=fe.css(e,t)),H(e,n,s)}}}),fe.cssHooks.marginLeft=F(he.reliableMarginLeft,function(e,t){if(t)return(parseFloat(I(e,"marginLeft"))||e.getBoundingClientRect().left-Xe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),fe.each({margin:"",padding:"",border:"Width"},function(e,t){fe.cssHooks[e+t]={expand:function(n){for(var i=0,a={},r="string"==typeof n?n.split(" "):[n];i<4;i++)a[e+Re[i]+t]=r[i]||r[i-2]||r[0];return a}},at.test(e)||(fe.cssHooks[e+t].set=H)}),fe.fn.extend({css:function(e,t){return Ie(this,function(e,t,n){var i,a,r={},s=0;if(Array.isArray(t)){for(i=st(e),a=t.length;s<a;s++)r[t[s]]=fe.css(e,t[s],!1,i);return r}return void 0!==n?fe.style(e,t,n):fe.css(e,t)},e,t,arguments.length>1)}}),fe.Tween=B,B.prototype={constructor:B,init:function(e,t,n,i,a,r){this.elem=e,this.prop=n,this.easing=a||fe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(fe.cssNumber[n]?"":"px")},cur:function(){var e=B.propHooks[this.prop];return e&&e.get?e.get(this):B.propHooks._default.get(this)},run:function(e){var t,n=B.propHooks[this.prop];return this.options.duration?this.pos=t=fe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):B.propHooks._default.set(this),this}},B.prototype.init.prototype=B.prototype,B.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=fe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){fe.fx.step[e.prop]?fe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[fe.cssProps[e.prop]]&&!fe.cssHooks[e.prop]?e.elem[e.prop]=e.now:fe.style(e.elem,e.prop,e.now+e.unit)}}},B.propHooks.scrollTop=B.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},fe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},fe.fx=B.prototype.init,fe.fx.step={};var ht,ft,mt=/^(?:toggle|show|hide)$/,gt=/queueHooks$/;fe.Animation=fe.extend($,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return m(n.elem,e,Be.exec(t),n),n}]},tweener:function(e,t){fe.isFunction(e)?(t=e,e=["*"]):e=e.match(Le);for(var n,i=0,a=e.length;i<a;i++)n=e[i],$.tweeners[n]=$.tweeners[n]||[],$.tweeners[n].unshift(t)},prefilters:[Y],prefilter:function(e,t){t?$.prefilters.unshift(e):$.prefilters.push(e)}}),fe.speed=function(e,t,n){var i=e&&"object"==typeof e?fe.extend({},e):{complete:n||!n&&t||fe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!fe.isFunction(t)&&t};return fe.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in fe.fx.speeds?i.duration=fe.fx.speeds[i.duration]:i.duration=fe.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){fe.isFunction(i.old)&&i.old.call(this),i.queue&&fe.dequeue(this,i.queue)},i},fe.fn.extend({fadeTo:function(e,t,n,i){return this.filter(qe).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var a=fe.isEmptyObject(e),r=fe.speed(t,n,i),s=function(){var t=$(this,fe.extend({},e),r);(a||Ae.get(this,"finish"))&&t.stop(!0)};return s.finish=s,a||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,a=null!=e&&e+"queueHooks",r=fe.timers,s=Ae.get(this);if(a)s[a]&&s[a].stop&&i(s[a]);else for(a in s)s[a]&&s[a].stop&&gt.test(a)&&i(s[a]);for(a=r.length;a--;)r[a].elem!==this||null!=e&&r[a].queue!==e||(r[a].anim.stop(n),t=!1,r.splice(a,1));!t&&n||fe.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Ae.get(this),i=n[e+"queue"],a=n[e+"queueHooks"],r=fe.timers,s=i?i.length:0;for(n.finish=!0,fe.queue(this,e,[]),a&&a.stop&&a.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),fe.each(["toggle","show","hide"],function(e,t){var n=fe.fn[t];fe.fn[t]=function(e,i,a){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(X(t,!0),e,i,a)}}),fe.each({slideDown:X("show"),slideUp:X("hide"),slideToggle:X("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){fe.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),fe.timers=[],fe.fx.tick=function(){var e,t=0,n=fe.timers;for(ht=fe.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||fe.fx.stop(),ht=void 0},fe.fx.timer=function(e){fe.timers.push(e),fe.fx.start()},fe.fx.interval=13,fe.fx.start=function(){ft||(ft=!0,R())},fe.fx.stop=function(){ft=null},fe.fx.speeds={slow:600,fast:200,_default:400},fe.fn.delay=function(t,n){return t=fe.fx?fe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var a=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(a)}})},function(){var e=ne.createElement("input"),t=ne.createElement("select").appendChild(ne.createElement("option"));e.type="checkbox",he.checkOn=""!==e.value,he.optSelected=t.selected,(e=ne.createElement("input")).value="t",e.type="radio",he.radioValue="t"===e.value}();var vt,yt=fe.expr.attrHandle;fe.fn.extend({attr:function(e,t){return Ie(this,fe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){fe.removeAttr(this,e)})}}),fe.extend({attr:function(e,t,n){var i,a,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?fe.prop(e,t,n):(1===r&&fe.isXMLDoc(e)||(a=fe.attrHooks[t.toLowerCase()]||(fe.expr.match.bool.test(t)?vt:void 0)),void 0!==n?null===n?void fe.removeAttr(e,t):a&&"set"in a&&void 0!==(i=a.set(e,n,t))?i:(e.setAttribute(t,n+""),n):a&&"get"in a&&null!==(i=a.get(e,t))?i:(i=fe.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!he.radioValue&&"radio"===t&&a(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,a=t&&t.match(Le);if(a&&1===e.nodeType)for(;n=a[i++];)e.removeAttribute(n)}}),vt={set:function(e,t,n){return!1===t?fe.removeAttr(e,n):e.setAttribute(n,n),n}},fe.each(fe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=yt[t]||fe.find.attr;yt[t]=function(e,t,i){var a,r,s=t.toLowerCase();return i||(r=yt[s],yt[s]=a,a=null!=n(e,t,i)?s:null,yt[s]=r),a}});var wt=/^(?:input|select|textarea|button)$/i,xt=/^(?:a|area)$/i;fe.fn.extend({prop:function(e,t){return Ie(this,fe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[fe.propFix[e]||e]})}}),fe.extend({prop:function(e,t,n){var i,a,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&fe.isXMLDoc(e)||(t=fe.propFix[t]||t,a=fe.propHooks[t]),void 0!==n?a&&"set"in a&&void 0!==(i=a.set(e,n,t))?i:e[t]=n:a&&"get"in a&&null!==(i=a.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=fe.find.attr(e,"tabindex");return t?parseInt(t,10):wt.test(e.nodeName)||xt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),he.optSelected||(fe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),fe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){fe.propFix[this.toLowerCase()]=this}),fe.fn.extend({addClass:function(e){var t,n,i,a,r,s,o,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).addClass(e.call(this,t,V(this)))});if("string"==typeof e&&e)for(t=e.match(Le)||[];n=this[l++];)if(a=V(n),i=1===n.nodeType&&" "+_(a)+" "){for(s=0;r=t[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");a!==(o=_(i))&&n.setAttribute("class",o)}return this},removeClass:function(e){var t,n,i,a,r,s,o,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).removeClass(e.call(this,t,V(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Le)||[];n=this[l++];)if(a=V(n),i=1===n.nodeType&&" "+_(a)+" "){for(s=0;r=t[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");a!==(o=_(i))&&n.setAttribute("class",o)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):fe.isFunction(e)?this.each(function(n){fe(this).toggleClass(e.call(this,n,V(this),t),t)}):this.each(function(){var t,i,a,r;if("string"===n)for(i=0,a=fe(this),r=e.match(Le)||[];t=r[i++];)a.hasClass(t)?a.removeClass(t):a.addClass(t);else void 0!==e&&"boolean"!==n||((t=V(this))&&Ae.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Ae.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+_(V(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;fe.fn.extend({val:function(e){var t,n,i,a=this[0];{if(arguments.length)return i=fe.isFunction(e),this.each(function(n){var a;1===this.nodeType&&(null==(a=i?e.call(this,n,fe(this).val()):e)?a="":"number"==typeof a?a+="":Array.isArray(a)&&(a=fe.map(a,function(e){return null==e?"":e+""})),(t=fe.valHooks[this.type]||fe.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,a,"value")||(this.value=a))});if(a)return(t=fe.valHooks[a.type]||fe.valHooks[a.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(a,"value"))?n:(n=a.value,"string"==typeof n?n.replace(bt,""):null==n?"":n)}}}),fe.extend({valHooks:{option:{get:function(e){var t=fe.find.attr(e,"value");return null!=t?t:_(fe.text(e))}},select:{get:function(e){var t,n,i,r=e.options,s=e.selectedIndex,o="select-one"===e.type,l=o?null:[],c=o?s+1:r.length;for(i=s<0?c:o?s:0;i<c;i++)if(((n=r[i]).selected||i===s)&&!n.disabled&&(!n.parentNode.disabled||!a(n.parentNode,"optgroup"))){if(t=fe(n).val(),o)return t;l.push(t)}return l},set:function(e,t){for(var n,i,a=e.options,r=fe.makeArray(t),s=a.length;s--;)((i=a[s]).selected=fe.inArray(fe.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),fe.each(["radio","checkbox"],function(){fe.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=fe.inArray(fe(e).val(),t)>-1}},he.checkOn||(fe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Ct=/^(?:focusinfocus|focusoutblur)$/;fe.extend(fe.event,{trigger:function(t,n,i,a){var r,s,o,l,c,u,p,d=[i||ne],h=ue.call(t,"type")?t.type:t,f=ue.call(t,"namespace")?t.namespace.split("."):[];if(s=o=i=i||ne,3!==i.nodeType&&8!==i.nodeType&&!Ct.test(h+fe.event.triggered)&&(h.indexOf(".")>-1&&(h=(f=h.split(".")).shift(),f.sort()),c=h.indexOf(":")<0&&"on"+h,t=t[fe.expando]?t:new fe.Event(h,"object"==typeof t&&t),t.isTrigger=a?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:fe.makeArray(n,[t]),p=fe.event.special[h]||{},a||!p.trigger||!1!==p.trigger.apply(i,n))){if(!a&&!p.noBubble&&!fe.isWindow(i)){for(l=p.delegateType||h,Ct.test(l+h)||(s=s.parentNode);s;s=s.parentNode)d.push(s),o=s;o===(i.ownerDocument||ne)&&d.push(o.defaultView||o.parentWindow||e)}for(r=0;(s=d[r++])&&!t.isPropagationStopped();)t.type=r>1?l:p.bindType||h,(u=(Ae.get(s,"events")||{})[t.type]&&Ae.get(s,"handle"))&&u.apply(s,n),(u=c&&s[c])&&u.apply&&Fe(s)&&(t.result=u.apply(s,n),!1===t.result&&t.preventDefault());return t.type=h,a||t.isDefaultPrevented()||p._default&&!1!==p._default.apply(d.pop(),n)||!Fe(i)||c&&fe.isFunction(i[h])&&!fe.isWindow(i)&&((o=i[c])&&(i[c]=null),fe.event.triggered=h,i[h](),fe.event.triggered=void 0,o&&(i[c]=o)),t.result}},simulate:function(e,t,n){var i=fe.extend(new fe.Event,n,{type:e,isSimulated:!0});fe.event.trigger(i,null,t)}}),fe.fn.extend({trigger:function(e,t){return this.each(function(){fe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return fe.event.trigger(e,t,n,!0)}}),fe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){fe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),fe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),he.focusin="onfocusin"in e,he.focusin||fe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){fe.event.simulate(t,e.target,fe.event.fix(e))};fe.event.special[t]={setup:function(){var i=this.ownerDocument||this,a=Ae.access(i,t);a||i.addEventListener(e,n,!0),Ae.access(i,t,(a||0)+1)},teardown:function(){var i=this.ownerDocument||this,a=Ae.access(i,t)-1;a?Ae.access(i,t,a):(i.removeEventListener(e,n,!0),Ae.remove(i,t))}}});var Tt=e.location,St=fe.now(),kt=/\?/;fe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||fe.error("Invalid XML: "+t),n};var Et=/\[\]$/,Mt=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,Lt=/^(?:input|select|textarea|keygen)/i;fe.param=function(e,t){var n,i=[],a=function(e,t){var n=fe.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!fe.isPlainObject(e))fe.each(e,function(){a(this.name,this.value)});else for(n in e)Q(n,e[n],t,a);return i.join("&")},fe.fn.extend({serialize:function(){return fe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=fe.prop(this,"elements");return e?fe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!fe(this).is(":disabled")&&Lt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!Ye.test(e))}).map(function(e,t){var n=fe(this).val();return null==n?null:Array.isArray(n)?fe.map(n,function(e){return{name:t.name,value:e.replace(Mt,"\r\n")}}):{name:t.name,value:n.replace(Mt,"\r\n")}}).get()}});var zt=/%20/g,Pt=/#.*$/,It=/([?&])_=[^&]*/,Ft=/^(.*?):[ \t]*([^\r\n]*)$/gm,At=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Nt=/^(?:GET|HEAD)$/,Ht=/^\/\//,jt={},Ot={},Bt="*/".concat("*"),Rt=ne.createElement("a");Rt.href=Tt.href,fe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Tt.href,type:"GET",isLocal:At.test(Tt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Bt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":fe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Z(Z(e,fe.ajaxSettings),t):Z(fe.ajaxSettings,e)},ajaxPrefilter:U(jt),ajaxTransport:U(Ot),ajax:function(t,n){function i(t,n,i,o){var c,d,h,x,b,C=n;u||(u=!0,l&&e.clearTimeout(l),a=void 0,s=o||"",T.readyState=t>0?4:0,c=t>=200&&t<300||304===t,i&&(x=J(f,T,i)),x=ee(f,x,T,c),c?(f.ifModified&&((b=T.getResponseHeader("Last-Modified"))&&(fe.lastModified[r]=b),(b=T.getResponseHeader("etag"))&&(fe.etag[r]=b)),204===t||"HEAD"===f.type?C="nocontent":304===t?C="notmodified":(C=x.state,d=x.data,c=!(h=x.error))):(h=C,!t&&C||(C="error",t<0&&(t=0))),T.status=t,T.statusText=(n||C)+"",c?v.resolveWith(m,[d,C,T]):v.rejectWith(m,[T,C,h]),T.statusCode(w),w=void 0,p&&g.trigger(c?"ajaxSuccess":"ajaxError",[T,f,c?d:h]),y.fireWith(m,[T,C]),p&&(g.trigger("ajaxComplete",[T,f]),--fe.active||fe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var a,r,s,o,l,c,u,p,d,h,f=fe.ajaxSetup({},n),m=f.context||f,g=f.context&&(m.nodeType||m.jquery)?fe(m):fe.event,v=fe.Deferred(),y=fe.Callbacks("once memory"),w=f.statusCode||{},x={},b={},C="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(u){if(!o)for(o={};t=Ft.exec(s);)o[t[1].toLowerCase()]=t[2];t=o[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?s:null},setRequestHeader:function(e,t){return null==u&&(e=b[e.toLowerCase()]=b[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||C;return a&&a.abort(t),i(0,t),this}};if(v.promise(T),f.url=((t||f.url||Tt.href)+"").replace(Ht,Tt.protocol+"//"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(Le)||[""],null==f.crossDomain){c=ne.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=Rt.protocol+"//"+Rt.host!=c.protocol+"//"+c.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=fe.param(f.data,f.traditional)),K(jt,f,n,T),u)return T;(p=fe.event&&f.global)&&0==fe.active++&&fe.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Nt.test(f.type),r=f.url.replace(Pt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(zt,"+")):(h=f.url.slice(r.length),f.data&&(r+=(kt.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(r=r.replace(It,"$1"),h=(kt.test(r)?"&":"?")+"_="+St+++h),f.url=r+h),f.ifModified&&(fe.lastModified[r]&&T.setRequestHeader("If-Modified-Since",fe.lastModified[r]),fe.etag[r]&&T.setRequestHeader("If-None-Match",fe.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||n.contentType)&&T.setRequestHeader("Content-Type",f.contentType),T.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Bt+"; q=0.01":""):f.accepts["*"]);for(d in f.headers)T.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(m,T,f)||u))return T.abort();if(C="abort",y.add(f.complete),T.done(f.success),T.fail(f.error),a=K(Ot,f,n,T)){if(T.readyState=1,p&&g.trigger("ajaxSend",[T,f]),u)return T;f.async&&f.timeout>0&&(l=e.setTimeout(function(){T.abort("timeout")},f.timeout));try{u=!1,a.send(x,i)}catch(e){if(u)throw e;i(-1,e)}}else i(-1,"No Transport");return T},getJSON:function(e,t,n){return fe.get(e,t,n,"json")},getScript:function(e,t){return fe.get(e,void 0,t,"script")}}),fe.each(["get","post"],function(e,t){fe[t]=function(e,n,i,a){return fe.isFunction(n)&&(a=a||i,i=n,n=void 0),fe.ajax(fe.extend({url:e,type:t,dataType:a,data:n,success:i},fe.isPlainObject(e)&&e))}}),fe._evalUrl=function(e){return fe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},fe.fn.extend({wrapAll:function(e){var t;return this[0]&&(fe.isFunction(e)&&(e=e.call(this[0])),t=fe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return fe.isFunction(e)?this.each(function(t){fe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=fe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=fe.isFunction(e);return this.each(function(n){fe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){fe(this).replaceWith(this.childNodes)}),this}}),fe.expr.pseudos.hidden=function(e){return!fe.expr.pseudos.visible(e)},fe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},fe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var qt={0:200,1223:204},Xt=fe.ajaxSettings.xhr();he.cors=!!Xt&&"withCredentials"in Xt,he.ajax=Xt=!!Xt,fe.ajaxTransport(function(t){var n,i;if(he.cors||Xt&&!t.crossDomain)return{send:function(a,r){var s,o=t.xhr();if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)o[s]=t.xhrFields[s];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||a["X-Requested-With"]||(a["X-Requested-With"]="XMLHttpRequest");for(s in a)o.setRequestHeader(s,a[s]);n=function(e){return function(){n&&(n=i=o.onload=o.onerror=o.onabort=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?r(0,"error"):r(o.status,o.statusText):r(qt[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=n(),i=o.onerror=n("error"),void 0!==o.onabort?o.onabort=i:o.onreadystatechange=function(){4===o.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{o.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),fe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),fe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return fe.globalEval(e),e}}}),fe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),fe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,a){t=fe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&a("error"===e.type?404:200,e.type)}),ne.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Wt=[],Yt=/(=)\?(?=&|$)|\?\?/;fe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Wt.pop()||fe.expando+"_"+St++;return this[e]=!0,e}}),fe.ajaxPrefilter("json jsonp",function(t,n,i){var a,r,s,o=!1!==t.jsonp&&(Yt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(t.data)&&"data");if(o||"jsonp"===t.dataTypes[0])return a=t.jsonpCallback=fe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,o?t[o]=t[o].replace(Yt,"$1"+a):!1!==t.jsonp&&(t.url+=(kt.test(t.url)?"&":"?")+t.jsonp+"="+a),t.converters["script json"]=function(){return s||fe.error(a+" was not called"),s[0]},t.dataTypes[0]="json",r=e[a],e[a]=function(){s=arguments},i.always(function(){void 0===r?fe(e).removeProp(a):e[a]=r,t[a]&&(t.jsonpCallback=n.jsonpCallback,Wt.push(a)),s&&fe.isFunction(r)&&r(s[0]),s=r=void 0}),"script"}),he.createHTMLDocument=function(){var e=ne.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),fe.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,a,r;return t||(he.createHTMLDocument?((i=(t=ne.implementation.createHTMLDocument("")).createElement("base")).href=ne.location.href,t.head.appendChild(i)):t=ne),a=Te.exec(e),r=!n&&[],a?[t.createElement(a[1])]:(a=x([e],t,r),r&&r.length&&fe(r).remove(),fe.merge([],a.childNodes))},fe.fn.load=function(e,t,n){var i,a,r,s=this,o=e.indexOf(" ");return o>-1&&(i=_(e.slice(o)),e=e.slice(0,o)),fe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(a="POST"),s.length>0&&fe.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?fe("<div>").append(fe.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},fe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){fe.fn[t]=function(e){return this.on(t,e)}}),fe.expr.pseudos.animated=function(e){return fe.grep(fe.timers,function(t){return e===t.elem}).length},fe.offset={setOffset:function(e,t,n){var i,a,r,s,o,l,c=fe.css(e,"position"),u=fe(e),p={};"static"===c&&(e.style.position="relative"),o=u.offset(),r=fe.css(e,"top"),l=fe.css(e,"left"),("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1?(s=(i=u.position()).top,a=i.left):(s=parseFloat(r)||0,a=parseFloat(l)||0),fe.isFunction(t)&&(t=t.call(e,n,fe.extend({},o))),null!=t.top&&(p.top=t.top-o.top+s),null!=t.left&&(p.left=t.left-o.left+a),"using"in t?t.using.call(e,p):u.css(p)}},fe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){fe.offset.setOffset(this,e,t)});var t,n,i,a,r=this[0];if(r)return r.getClientRects().length?(i=r.getBoundingClientRect(),t=r.ownerDocument,n=t.documentElement,a=t.defaultView,{top:i.top+a.pageYOffset-n.clientTop,left:i.left+a.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===fe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),a(e[0],"html")||(i=e.offset()),i={top:i.top+fe.css(e[0],"borderTopWidth",!0),left:i.left+fe.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-fe.css(n,"marginTop",!0),left:t.left-i.left-fe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===fe.css(e,"position");)e=e.offsetParent;return e||Qe})}}),fe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;fe.fn[e]=function(i){return Ie(this,function(e,i,a){var r;if(fe.isWindow(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===a)return r?r[t]:e[i];r?r.scrollTo(n?r.pageXOffset:a,n?a:r.pageYOffset):e[i]=a},e,i,arguments.length)}}),fe.each(["top","left"],function(e,t){fe.cssHooks[t]=F(he.pixelPosition,function(e,n){if(n)return n=I(e,t),rt.test(n)?fe(e).position()[t]+"px":n})}),fe.each({Height:"height",Width:"width"},function(e,t){fe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){fe.fn[i]=function(a,r){var s=arguments.length&&(n||"boolean"!=typeof a),o=n||(!0===a||!0===r?"margin":"border");return Ie(this,function(t,n,a){var r;return fe.isWindow(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===a?fe.css(t,n,o):fe.style(t,n,a,o)},t,s?a:void 0,s)}})}),fe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),fe.holdReady=function(e){e?fe.readyWait++:fe.ready(!0)},fe.isArray=Array.isArray,fe.parseJSON=JSON.parse,fe.nodeName=a,"function"==typeof define&&define.amd&&define("jquery",[],function(){return fe});var Gt=e.jQuery,$t=e.$;return fe.noConflict=function(t){return e.$===fe&&(e.$=$t),t&&e.jQuery===fe&&(e.jQuery=Gt),fe},t||(e.jQuery=e.$=fe),fe}),function(e,t){"object"==typeof module&&module.exports?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Spinner=t()}(this,function(){"use strict";function e(e,t){var n,i=document.createElement(e||"div");for(n in t)i[n]=t[n];return i}function t(e){for(var t=1,n=arguments.length;t<n;t++)e.appendChild(arguments[t]);return e}function n(e,t,n,i){var a=["opacity",t,~~(100*e),n,i].join("-"),r=.01+n/i*100,s=Math.max(1-(1-e)/t*(100-r),e),o=l.substring(0,l.indexOf("Animation")).toLowerCase(),u=o&&"-"+o+"-"||"";return p[a]||(c.insertRule("@"+u+"keyframes "+a+"{0%{opacity:"+s+"}"+r+"%{opacity:"+e+"}"+(r+.01)+"%{opacity:1}"+(r+t)%100+"%{opacity:"+e+"}100%{opacity:"+s+"}}",c.cssRules.length),p[a]=1),a}function i(e,t){var n,i,a=e.style;if(t=t.charAt(0).toUpperCase()+t.slice(1),void 0!==a[t])return t;for(i=0;i<u.length;i++)if(n=u[i]+t,void 0!==a[n])return n}function a(e,t){for(var n in t)e.style[i(e,n)||n]=t[n];return e}function r(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)void 0===e[i]&&(e[i]=n[i])}return e}function s(e,t){return"string"==typeof e?e:e[t%e.length]}function o(e){this.opts=r(e||{},o.defaults,d)}var l,c,u=["webkit","Moz","ms","O"],p={},d={lines:12,length:7,width:5,radius:10,scale:1,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:100,fps:20,zIndex:2e9,className:"spinner",top:"50%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};if(o.defaults={},r(o.prototype,{spin:function(t){this.stop();var n=this,i=n.opts,r=n.el=e(null,{className:i.className});if(a(r,{position:i.position,width:0,zIndex:i.zIndex,left:i.left,top:i.top}),t&&t.insertBefore(r,t.firstChild||null),r.setAttribute("role","progressbar"),n.lines(r,n.opts),!l){var s,o=0,c=(i.lines-1)*(1-i.direction)/2,u=i.fps,p=u/i.speed,d=(1-i.opacity)/(p*i.trail/100),h=p/i.lines;!function e(){o++;for(var t=0;t<i.lines;t++)s=Math.max(1-(o+(i.lines-t)*h)%p*d,i.opacity),n.opacity(r,t*i.direction+c,s,i);n.timeout=n.el&&setTimeout(e,~~(1e3/u))}()}return n},stop:function(){var e=this.el;return e&&(clearTimeout(this.timeout),e.parentNode&&e.parentNode.removeChild(e),this.el=void 0),this},lines:function(i,r){function o(t,n){return a(e(),{position:"absolute",width:r.scale*(r.length+r.width)+"px",height:r.scale*r.width+"px",background:t,boxShadow:n,transformOrigin:"left",transform:"rotate("+~~(360/r.lines*u+r.rotate)+"deg) translate("+r.scale*r.radius+"px,0)",borderRadius:(r.corners*r.scale*r.width>>1)+"px"})}for(var c,u=0,p=(r.lines-1)*(1-r.direction)/2;u<r.lines;u++)c=a(e(),{position:"absolute",top:1+~(r.scale*r.width/2)+"px",transform:r.hwaccel?"translate3d(0,0,0)":"",opacity:r.opacity,animation:l&&n(r.opacity,r.trail,p+u*r.direction,r.lines)+" "+1/r.speed+"s linear infinite"}),r.shadow&&t(c,a(o("#000","0 0 4px #000"),{top:"2px"})),t(i,t(c,o(s(r.color,u),"0 0 1px rgba(0,0,0,.1)")));return i},opacity:function(e,t,n){t<e.childNodes.length&&(e.childNodes[t].style.opacity=n)}}),"undefined"!=typeof document){c=function(){var n=e("style",{type:"text/css"});return t(document.getElementsByTagName("head")[0],n),n.sheet||n.styleSheet}();var h=a(e("group"),{behavior:"url(#default#VML)"});!i(h,"transform")&&h.adj?function(){function n(t,n){return e("<"+t+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',n)}c.addRule(".spin-vml","behavior:url(#default#VML)"),o.prototype.lines=function(e,i){function r(){return a(n("group",{coordsize:u+" "+u,coordorigin:-c+" "+-c}),{width:u,height:u})}function o(e,o,l){t(d,t(a(r(),{rotation:360/i.lines*e+"deg",left:~~o}),t(a(n("roundrect",{arcsize:i.corners}),{width:c,height:i.scale*i.width,left:i.scale*i.radius,top:-i.scale*i.width>>1,filter:l}),n("fill",{color:s(i.color,e),opacity:i.opacity}),n("stroke",{opacity:0}))))}var l,c=i.scale*(i.length+i.width),u=2*i.scale*c,p=-(i.width+i.length)*i.scale*2+"px",d=a(r(),{position:"absolute",top:p,left:p});if(i.shadow)for(l=1;l<=i.lines;l++)o(l,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(l=1;l<=i.lines;l++)o(l);return t(e,d)},o.prototype.opacity=function(e,t,n,i){var a=e.firstChild;i=i.shadow&&i.lines||0,a&&t+i<a.childNodes.length&&(a=(a=(a=a.childNodes[t+i])&&a.firstChild)&&a.firstChild)&&(a.opacity=n)}}():l=i(h,"animation")}return o}),function(e){if("object"==typeof exports)e(require("jquery"),require("spin.js"));else if("function"==typeof define&&define.amd)define(["jquery","spin"],e);else{if(!window.Spinner)throw new Error("Spin.js not present");e(window.jQuery,window.Spinner)}}(function(e,t){e.fn.spin=function(n,i){return this.each(function(){var a=e(this),r=a.data();r.spinner&&(r.spinner.stop(),delete r.spinner),!1!==n&&(n=e.extend({color:i||a.css("color")},e.fn.spin.presets[n]||n),r.spinner=new t(n).spin(this))})},e.fn.spin.presets={tiny:{lines:8,length:2,width:2,radius:3},small:{lines:8,length:4,width:3,radius:5},large:{lines:10,length:8,width:4,radius:8}}}),function(){"use strict";var e,t=function(n,i){function a(e){return Math.floor(e)}function r(){var e=x.params.autoplay,t=x.slides.eq(x.activeIndex);t.attr("data-swiper-autoplay")&&(e=t.attr("data-swiper-autoplay")||x.params.autoplay),x.autoplayTimeoutId=setTimeout(function(){x.params.loop?(x.fixLoop(),x._slideNext(),x.emit("onAutoplay",x)):x.isEnd?i.autoplayStopOnLast?x.stopAutoplay():(x._slideTo(0),x.emit("onAutoplay",x)):(x._slideNext(),x.emit("onAutoplay",x))},e)}function s(t,n){var i=e(t.target);if(!i.is(n))if("string"==typeof n)i=i.parents(n);else if(n.nodeType){var a;return i.parents().each(function(e,t){t===n&&(a=n)}),a?n:void 0}if(0!==i.length)return i[0]}function o(e,t){t=t||{};var n=new(window.MutationObserver||window.WebkitMutationObserver)(function(e){e.forEach(function(e){x.onResize(!0),x.emit("onObserverUpdate",x,e)})});n.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),x.observers.push(n)}function l(e){e.originalEvent&&(e=e.originalEvent);var t=e.keyCode||e.charCode;if(!x.params.allowSwipeToNext&&(x.isHorizontal()&&39===t||!x.isHorizontal()&&40===t))return!1;if(!x.params.allowSwipeToPrev&&(x.isHorizontal()&&37===t||!x.isHorizontal()&&38===t))return!1;if(!(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey||document.activeElement&&document.activeElement.nodeName&&("input"===document.activeElement.nodeName.toLowerCase()||"textarea"===document.activeElement.nodeName.toLowerCase()))){if(37===t||39===t||38===t||40===t){var n=!1;if(x.container.parents("."+x.params.slideClass).length>0&&0===x.container.parents("."+x.params.slideActiveClass).length)return;var i={left:window.pageXOffset,top:window.pageYOffset},a=window.innerWidth,r=window.innerHeight,s=x.container.offset();x.rtl&&(s.left=s.left-x.container[0].scrollLeft);for(var o=[[s.left,s.top],[s.left+x.width,s.top],[s.left,s.top+x.height],[s.left+x.width,s.top+x.height]],l=0;l<o.length;l++){var c=o[l];c[0]>=i.left&&c[0]<=i.left+a&&c[1]>=i.top&&c[1]<=i.top+r&&(n=!0)}if(!n)return}x.isHorizontal()?(37!==t&&39!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),(39===t&&!x.rtl||37===t&&x.rtl)&&x.slideNext(),(37===t&&!x.rtl||39===t&&x.rtl)&&x.slidePrev()):(38!==t&&40!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),40===t&&x.slideNext(),38===t&&x.slidePrev()),x.emit("onKeyPress",x,t)}}function c(e){var t=0,n=0,i=0,a=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),i=10*t,a=10*n,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(i=e.deltaX),(i||a)&&e.deltaMode&&(1===e.deltaMode?(i*=40,a*=40):(i*=800,a*=800)),i&&!t&&(t=i<1?-1:1),a&&!n&&(n=a<1?-1:1),{spinX:t,spinY:n,pixelX:i,pixelY:a}}function u(e){e.originalEvent&&(e=e.originalEvent);var t=0,n=x.rtl?-1:1,i=c(e);if(x.params.mousewheelForceToAxis)if(x.isHorizontal()){if(!(Math.abs(i.pixelX)>Math.abs(i.pixelY)))return;t=i.pixelX*n}else{if(!(Math.abs(i.pixelY)>Math.abs(i.pixelX)))return;t=i.pixelY}else t=Math.abs(i.pixelX)>Math.abs(i.pixelY)?-i.pixelX*n:-i.pixelY;if(0!==t){if(x.params.mousewheelInvert&&(t=-t),x.params.freeMode){var a=x.getWrapperTranslate()+t*x.params.mousewheelSensitivity,r=x.isBeginning,s=x.isEnd;if(a>=x.minTranslate()&&(a=x.minTranslate()),a<=x.maxTranslate()&&(a=x.maxTranslate()),x.setWrapperTransition(0),x.setWrapperTranslate(a),x.updateProgress(),x.updateActiveIndex(),(!r&&x.isBeginning||!s&&x.isEnd)&&x.updateClasses(),x.params.freeModeSticky?(clearTimeout(x.mousewheel.timeout),x.mousewheel.timeout=setTimeout(function(){x.slideReset()},300)):x.params.lazyLoading&&x.lazy&&x.lazy.load(),x.emit("onScroll",x,e),x.params.autoplay&&x.params.autoplayDisableOnInteraction&&x.stopAutoplay(),0===a||a===x.maxTranslate())return}else{if((new window.Date).getTime()-x.mousewheel.lastScrollTime>60)if(t<0)if(x.isEnd&&!x.params.loop||x.animating){if(x.params.mousewheelReleaseOnEdges)return!0}else x.slideNext(),x.emit("onScroll",x,e);else if(x.isBeginning&&!x.params.loop||x.animating){if(x.params.mousewheelReleaseOnEdges)return!0}else x.slidePrev(),x.emit("onScroll",x,e);x.mousewheel.lastScrollTime=(new window.Date).getTime()}return e.preventDefault?e.preventDefault():e.returnValue=!1,!1}}function p(t,n){t=e(t);var i,a,r,s=x.rtl?-1:1;i=t.attr("data-swiper-parallax")||"0",a=t.attr("data-swiper-parallax-x"),r=t.attr("data-swiper-parallax-y"),a||r?(a=a||"0",r=r||"0"):x.isHorizontal()?(a=i,r="0"):(r=i,a="0"),a=a.indexOf("%")>=0?parseInt(a,10)*n*s+"%":a*n*s+"px",r=r.indexOf("%")>=0?parseInt(r,10)*n+"%":r*n+"px",t.transform("translate3d("+a+", "+r+",0px)")}function d(e){return 0!==e.indexOf("on")&&(e=e[0]!==e[0].toUpperCase()?"on"+e[0].toUpperCase()+e.substring(1):"on"+e),e}if(!(this instanceof t))return new t(n,i);var h={direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,autoplay:!1,autoplayDisableOnInteraction:!0,autoplayStopOnLast:!1,iOSEdgeSwipeDetection:!1,iOSEdgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",coverflow:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0},flip:{slideShadows:!0,limitRotation:!0},cube:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94},fade:{crossFade:!1},parallax:!1,zoom:!1,zoomMax:3,zoomMin:1,zoomToggle:!0,scrollbar:null,scrollbarHide:!0,scrollbarDraggable:!1,scrollbarSnapOnRelease:!1,keyboardControl:!1,mousewheelControl:!1,mousewheelReleaseOnEdges:!1,mousewheelInvert:!1,mousewheelForceToAxis:!1,mousewheelSensitivity:1,mousewheelEventsTarged:"container",hashnav:!1,hashnavWatchState:!1,history:!1,replaceState:!1,breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,onlyExternal:!1,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,pagination:null,paginationElement:"span",paginationClickable:!1,paginationHide:!1,paginationBulletRender:null,paginationProgressRender:null,paginationFractionRender:null,paginationCustomRender:null,paginationType:"bullets",resistance:!0,resistanceRatio:.85,nextButton:null,prevButton:null,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,lazyLoading:!1,lazyLoadingInPrevNext:!1,lazyLoadingInPrevNextAmount:1,lazyLoadingOnTransitionStart:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,control:void 0,controlInverse:!1,controlBy:"slide",normalizeSlideIndex:!0,allowSwipeToPrev:!0,allowSwipeToNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",buttonDisabledClass:"swiper-button-disabled",paginationCurrentClass:"swiper-pagination-current",paginationTotalClass:"swiper-pagination-total",paginationHiddenClass:"swiper-pagination-hidden",paginationProgressbarClass:"swiper-pagination-progressbar",paginationClickableClass:"swiper-pagination-clickable",paginationModifierClass:"swiper-pagination-",lazyLoadingClass:"swiper-lazy",lazyStatusLoadingClass:"swiper-lazy-loading",lazyStatusLoadedClass:"swiper-lazy-loaded",lazyPreloaderClass:"swiper-lazy-preloader",notificationClass:"swiper-notification",preloaderClass:"preloader",zoomContainerClass:"swiper-zoom-container",observer:!1,observeParents:!1,a11y:!1,prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",runCallbacksOnInit:!0},f=i&&i.virtualTranslate;i=i||{};var m={};for(var g in i)if("object"!=typeof i[g]||null===i[g]||(i[g].nodeType||i[g]===window||i[g]===document||"undefined"!=typeof Dom7&&i[g]instanceof Dom7||"undefined"!=typeof jQuery&&i[g]instanceof jQuery))m[g]=i[g];else{m[g]={};for(var v in i[g])m[g][v]=i[g][v]}for(var y in h)if(void 0===i[y])i[y]=h[y];else if("object"==typeof i[y])for(var w in h[y])void 0===i[y][w]&&(i[y][w]=h[y][w]);var x=this;if(x.params=i,x.originalParams=m,x.classNames=[],void 0!==e&&"undefined"!=typeof Dom7&&(e=Dom7),(void 0!==e||(e="undefined"==typeof Dom7?window.Dom7||window.Zepto||window.jQuery:Dom7))&&(x.$=e,x.currentBreakpoint=void 0,x.getActiveBreakpoint=function(){if(!x.params.breakpoints)return!1;var e,t=!1,n=[];for(e in x.params.breakpoints)x.params.breakpoints.hasOwnProperty(e)&&n.push(e);n.sort(function(e,t){return parseInt(e,10)>parseInt(t,10)});for(var i=0;i<n.length;i++)(e=n[i])>=window.innerWidth&&!t&&(t=e);return t||"max"},x.setBreakpoint=function(){var e=x.getActiveBreakpoint();if(e&&x.currentBreakpoint!==e){var t=e in x.params.breakpoints?x.params.breakpoints[e]:x.originalParams,n=x.params.loop&&t.slidesPerView!==x.params.slidesPerView;for(var i in t)x.params[i]=t[i];x.currentBreakpoint=e,n&&x.destroyLoop&&x.reLoop(!0)}},x.params.breakpoints&&x.setBreakpoint(),x.container=e(n),0!==x.container.length)){if(x.container.length>1){var b=[];return x.container.each(function(){b.push(new t(this,i))}),b}x.container[0].swiper=x,x.container.data("swiper",x),x.classNames.push(x.params.containerModifierClass+x.params.direction),x.params.freeMode&&x.classNames.push(x.params.containerModifierClass+"free-mode"),x.support.flexbox||(x.classNames.push(x.params.containerModifierClass+"no-flexbox"),x.params.slidesPerColumn=1),x.params.autoHeight&&x.classNames.push(x.params.containerModifierClass+"autoheight"),(x.params.parallax||x.params.watchSlidesVisibility)&&(x.params.watchSlidesProgress=!0),x.params.touchReleaseOnEdges&&(x.params.resistanceRatio=0),["cube","coverflow","flip"].indexOf(x.params.effect)>=0&&(x.support.transforms3d?(x.params.watchSlidesProgress=!0,x.classNames.push(x.params.containerModifierClass+"3d")):x.params.effect="slide"),"slide"!==x.params.effect&&x.classNames.push(x.params.containerModifierClass+x.params.effect),"cube"===x.params.effect&&(x.params.resistanceRatio=0,x.params.slidesPerView=1,x.params.slidesPerColumn=1,x.params.slidesPerGroup=1,x.params.centeredSlides=!1,x.params.spaceBetween=0,x.params.virtualTranslate=!0),"fade"!==x.params.effect&&"flip"!==x.params.effect||(x.params.slidesPerView=1,x.params.slidesPerColumn=1,x.params.slidesPerGroup=1,x.params.watchSlidesProgress=!0,x.params.spaceBetween=0,void 0===f&&(x.params.virtualTranslate=!0)),x.params.grabCursor&&x.support.touch&&(x.params.grabCursor=!1),x.wrapper=x.container.children("."+x.params.wrapperClass),x.params.pagination&&(x.paginationContainer=e(x.params.pagination),x.params.uniqueNavElements&&"string"==typeof x.params.pagination&&x.paginationContainer.length>1&&1===x.container.find(x.params.pagination).length&&(x.paginationContainer=x.container.find(x.params.pagination)),"bullets"===x.params.paginationType&&x.params.paginationClickable?x.paginationContainer.addClass(x.params.paginationModifierClass+"clickable"):x.params.paginationClickable=!1,x.paginationContainer.addClass(x.params.paginationModifierClass+x.params.paginationType)),(x.params.nextButton||x.params.prevButton)&&(x.params.nextButton&&(x.nextButton=e(x.params.nextButton),x.params.uniqueNavElements&&"string"==typeof x.params.nextButton&&x.nextButton.length>1&&1===x.container.find(x.params.nextButton).length&&(x.nextButton=x.container.find(x.params.nextButton))),x.params.prevButton&&(x.prevButton=e(x.params.prevButton),x.params.uniqueNavElements&&"string"==typeof x.params.prevButton&&x.prevButton.length>1&&1===x.container.find(x.params.prevButton).length&&(x.prevButton=x.container.find(x.params.prevButton)))),x.isHorizontal=function(){return"horizontal"===x.params.direction},x.rtl=x.isHorizontal()&&("rtl"===x.container[0].dir.toLowerCase()||"rtl"===x.container.css("direction")),x.rtl&&x.classNames.push(x.params.containerModifierClass+"rtl"),x.rtl&&(x.wrongRTL="-webkit-box"===x.wrapper.css("display")),x.params.slidesPerColumn>1&&x.classNames.push(x.params.containerModifierClass+"multirow"),x.device.android&&x.classNames.push(x.params.containerModifierClass+"android"),x.container.addClass(x.classNames.join(" ")),x.translate=0,x.progress=0,x.velocity=0,x.lockSwipeToNext=function(){x.params.allowSwipeToNext=!1,!1===x.params.allowSwipeToPrev&&x.params.grabCursor&&x.unsetGrabCursor()},x.lockSwipeToPrev=function(){x.params.allowSwipeToPrev=!1,!1===x.params.allowSwipeToNext&&x.params.grabCursor&&x.unsetGrabCursor()},x.lockSwipes=function(){x.params.allowSwipeToNext=x.params.allowSwipeToPrev=!1,x.params.grabCursor&&x.unsetGrabCursor()},x.unlockSwipeToNext=function(){x.params.allowSwipeToNext=!0,!0===x.params.allowSwipeToPrev&&x.params.grabCursor&&x.setGrabCursor()},x.unlockSwipeToPrev=function(){x.params.allowSwipeToPrev=!0,!0===x.params.allowSwipeToNext&&x.params.grabCursor&&x.setGrabCursor()},x.unlockSwipes=function(){x.params.allowSwipeToNext=x.params.allowSwipeToPrev=!0,x.params.grabCursor&&x.setGrabCursor()},x.setGrabCursor=function(e){x.container[0].style.cursor="move",x.container[0].style.cursor=e?"-webkit-grabbing":"-webkit-grab",x.container[0].style.cursor=e?"-moz-grabbin":"-moz-grab",x.container[0].style.cursor=e?"grabbing":"grab"},x.unsetGrabCursor=function(){x.container[0].style.cursor=""},x.params.grabCursor&&x.setGrabCursor(),x.imagesToLoad=[],x.imagesLoaded=0,x.loadImage=function(e,t,n,i,a,r){function s(){r&&r()}var o;e.complete&&a?s():t?((o=new window.Image).onload=s,o.onerror=s,i&&(o.sizes=i),n&&(o.srcset=n),t&&(o.src=t)):s()},x.preloadImages=function(){function e(){void 0!==x&&null!==x&&x&&(void 0!==x.imagesLoaded&&x.imagesLoaded++,x.imagesLoaded===x.imagesToLoad.length&&(x.params.updateOnImagesReady&&x.update(),x.emit("onImagesReady",x)))}x.imagesToLoad=x.container.find("img");for(var t=0;t<x.imagesToLoad.length;t++)x.loadImage(x.imagesToLoad[t],x.imagesToLoad[t].currentSrc||x.imagesToLoad[t].getAttribute("src"),x.imagesToLoad[t].srcset||x.imagesToLoad[t].getAttribute("srcset"),x.imagesToLoad[t].sizes||x.imagesToLoad[t].getAttribute("sizes"),!0,e)},x.autoplayTimeoutId=void 0,x.autoplaying=!1,x.autoplayPaused=!1,x.startAutoplay=function(){return void 0===x.autoplayTimeoutId&&(!!x.params.autoplay&&(!x.autoplaying&&(x.autoplaying=!0,x.emit("onAutoplayStart",x),void r())))},x.stopAutoplay=function(e){x.autoplayTimeoutId&&(x.autoplayTimeoutId&&clearTimeout(x.autoplayTimeoutId),x.autoplaying=!1,x.autoplayTimeoutId=void 0,x.emit("onAutoplayStop",x))},x.pauseAutoplay=function(e){x.autoplayPaused||(x.autoplayTimeoutId&&clearTimeout(x.autoplayTimeoutId),x.autoplayPaused=!0,0===e?(x.autoplayPaused=!1,r()):x.wrapper.transitionEnd(function(){x&&(x.autoplayPaused=!1,x.autoplaying?r():x.stopAutoplay())}))},x.minTranslate=function(){return-x.snapGrid[0]},x.maxTranslate=function(){return-x.snapGrid[x.snapGrid.length-1]},x.updateAutoHeight=function(){var e,t=[],n=0;if("auto"!==x.params.slidesPerView&&x.params.slidesPerView>1)for(e=0;e<Math.ceil(x.params.slidesPerView);e++){var i=x.activeIndex+e;if(i>x.slides.length)break;t.push(x.slides.eq(i)[0])}else t.push(x.slides.eq(x.activeIndex)[0]);for(e=0;e<t.length;e++)if(void 0!==t[e]){var a=t[e].offsetHeight;n=a>n?a:n}n&&x.wrapper.css("height",n+"px")},x.updateContainerSize=function(){var e,t;e=void 0!==x.params.width?x.params.width:x.container[0].clientWidth,t=void 0!==x.params.height?x.params.height:x.container[0].clientHeight,0===e&&x.isHorizontal()||0===t&&!x.isHorizontal()||(e=e-parseInt(x.container.css("padding-left"),10)-parseInt(x.container.css("padding-right"),10),t=t-parseInt(x.container.css("padding-top"),10)-parseInt(x.container.css("padding-bottom"),10),x.width=e,x.height=t,x.size=x.isHorizontal()?x.width:x.height)},x.updateSlidesSize=function(){x.slides=x.wrapper.children("."+x.params.slideClass),x.snapGrid=[],x.slidesGrid=[],x.slidesSizesGrid=[];var e,t=x.params.spaceBetween,n=-x.params.slidesOffsetBefore,i=0,r=0;if(void 0!==x.size){"string"==typeof t&&t.indexOf("%")>=0&&(t=parseFloat(t.replace("%",""))/100*x.size),x.virtualSize=-t,x.rtl?x.slides.css({marginLeft:"",marginTop:""}):x.slides.css({marginRight:"",marginBottom:""});var s;x.params.slidesPerColumn>1&&(s=Math.floor(x.slides.length/x.params.slidesPerColumn)===x.slides.length/x.params.slidesPerColumn?x.slides.length:Math.ceil(x.slides.length/x.params.slidesPerColumn)*x.params.slidesPerColumn,"auto"!==x.params.slidesPerView&&"row"===x.params.slidesPerColumnFill&&(s=Math.max(s,x.params.slidesPerView*x.params.slidesPerColumn)));var o,l=x.params.slidesPerColumn,c=s/l,u=c-(x.params.slidesPerColumn*c-x.slides.length);for(e=0;e<x.slides.length;e++){o=0;var p=x.slides.eq(e);if(x.params.slidesPerColumn>1){var d,h,f;"column"===x.params.slidesPerColumnFill?(f=e-(h=Math.floor(e/l))*l,(h>u||h===u&&f===l-1)&&++f>=l&&(f=0,h++),d=h+f*s/l,p.css({"-webkit-box-ordinal-group":d,"-moz-box-ordinal-group":d,"-ms-flex-order":d,"-webkit-order":d,order:d})):h=e-(f=Math.floor(e/c))*c,p.css("margin-"+(x.isHorizontal()?"top":"left"),0!==f&&x.params.spaceBetween&&x.params.spaceBetween+"px").attr("data-swiper-column",h).attr("data-swiper-row",f)}"none"!==p.css("display")&&("auto"===x.params.slidesPerView?(o=x.isHorizontal()?p.outerWidth(!0):p.outerHeight(!0),x.params.roundLengths&&(o=a(o))):(o=(x.size-(x.params.slidesPerView-1)*t)/x.params.slidesPerView,x.params.roundLengths&&(o=a(o)),x.isHorizontal()?x.slides[e].style.width=o+"px":x.slides[e].style.height=o+"px"),x.slides[e].swiperSlideSize=o,x.slidesSizesGrid.push(o),x.params.centeredSlides?(n=n+o/2+i/2+t,0===i&&0!==e&&(n=n-x.size/2-t),0===e&&(n=n-x.size/2-t),Math.abs(n)<.001&&(n=0),r%x.params.slidesPerGroup==0&&x.snapGrid.push(n),x.slidesGrid.push(n)):(r%x.params.slidesPerGroup==0&&x.snapGrid.push(n),x.slidesGrid.push(n),n=n+o+t),x.virtualSize+=o+t,i=o,r++)}x.virtualSize=Math.max(x.virtualSize,x.size)+x.params.slidesOffsetAfter;var m;if(x.rtl&&x.wrongRTL&&("slide"===x.params.effect||"coverflow"===x.params.effect)&&x.wrapper.css({width:x.virtualSize+x.params.spaceBetween+"px"}),x.support.flexbox&&!x.params.setWrapperSize||(x.isHorizontal()?x.wrapper.css({width:x.virtualSize+x.params.spaceBetween+"px"}):x.wrapper.css({height:x.virtualSize+x.params.spaceBetween+"px"})),x.params.slidesPerColumn>1&&(x.virtualSize=(o+x.params.spaceBetween)*s,x.virtualSize=Math.ceil(x.virtualSize/x.params.slidesPerColumn)-x.params.spaceBetween,x.isHorizontal()?x.wrapper.css({width:x.virtualSize+x.params.spaceBetween+"px"}):x.wrapper.css({height:x.virtualSize+x.params.spaceBetween+"px"}),x.params.centeredSlides)){for(m=[],e=0;e<x.snapGrid.length;e++)x.snapGrid[e]<x.virtualSize+x.snapGrid[0]&&m.push(x.snapGrid[e]);x.snapGrid=m}if(!x.params.centeredSlides){for(m=[],e=0;e<x.snapGrid.length;e++)x.snapGrid[e]<=x.virtualSize-x.size&&m.push(x.snapGrid[e]);x.snapGrid=m,Math.floor(x.virtualSize-x.size)-Math.floor(x.snapGrid[x.snapGrid.length-1])>1&&x.snapGrid.push(x.virtualSize-x.size)}0===x.snapGrid.length&&(x.snapGrid=[0]),0!==x.params.spaceBetween&&(x.isHorizontal()?x.rtl?x.slides.css({marginLeft:t+"px"}):x.slides.css({marginRight:t+"px"}):x.slides.css({marginBottom:t+"px"})),x.params.watchSlidesProgress&&x.updateSlidesOffset()}},x.updateSlidesOffset=function(){for(var e=0;e<x.slides.length;e++)x.slides[e].swiperSlideOffset=x.isHorizontal()?x.slides[e].offsetLeft:x.slides[e].offsetTop},x.currentSlidesPerView=function(){var e,t,n=1;if(x.params.centeredSlides){var i,a=x.slides[x.activeIndex].swiperSlideSize;for(e=x.activeIndex+1;e<x.slides.length;e++)x.slides[e]&&!i&&(n++,(a+=x.slides[e].swiperSlideSize)>x.size&&(i=!0));for(t=x.activeIndex-1;t>=0;t--)x.slides[t]&&!i&&(n++,(a+=x.slides[t].swiperSlideSize)>x.size&&(i=!0))}else for(e=x.activeIndex+1;e<x.slides.length;e++)x.slidesGrid[e]-x.slidesGrid[x.activeIndex]<x.size&&n++;return n},x.updateSlidesProgress=function(e){if(void 0===e&&(e=x.translate||0),0!==x.slides.length){void 0===x.slides[0].swiperSlideOffset&&x.updateSlidesOffset();var t=-e;x.rtl&&(t=e),x.slides.removeClass(x.params.slideVisibleClass);for(var n=0;n<x.slides.length;n++){var i=x.slides[n],a=(t+(x.params.centeredSlides?x.minTranslate():0)-i.swiperSlideOffset)/(i.swiperSlideSize+x.params.spaceBetween);if(x.params.watchSlidesVisibility){var r=-(t-i.swiperSlideOffset),s=r+x.slidesSizesGrid[n];(r>=0&&r<x.size||s>0&&s<=x.size||r<=0&&s>=x.size)&&x.slides.eq(n).addClass(x.params.slideVisibleClass)}i.progress=x.rtl?-a:a}}},x.updateProgress=function(e){void 0===e&&(e=x.translate||0);var t=x.maxTranslate()-x.minTranslate(),n=x.isBeginning,i=x.isEnd;0===t?(x.progress=0,x.isBeginning=x.isEnd=!0):(x.progress=(e-x.minTranslate())/t,x.isBeginning=x.progress<=0,x.isEnd=x.progress>=1),x.isBeginning&&!n&&x.emit("onReachBeginning",x),x.isEnd&&!i&&x.emit("onReachEnd",x),x.params.watchSlidesProgress&&x.updateSlidesProgress(e),x.emit("onProgress",x,x.progress)},x.updateActiveIndex=function(){var e,t,n,i=x.rtl?x.translate:-x.translate;for(t=0;t<x.slidesGrid.length;t++)void 0!==x.slidesGrid[t+1]?i>=x.slidesGrid[t]&&i<x.slidesGrid[t+1]-(x.slidesGrid[t+1]-x.slidesGrid[t])/2?e=t:i>=x.slidesGrid[t]&&i<x.slidesGrid[t+1]&&(e=t+1):i>=x.slidesGrid[t]&&(e=t);x.params.normalizeSlideIndex&&(e<0||void 0===e)&&(e=0),(n=Math.floor(e/x.params.slidesPerGroup))>=x.snapGrid.length&&(n=x.snapGrid.length-1),e!==x.activeIndex&&(x.snapIndex=n,x.previousIndex=x.activeIndex,x.activeIndex=e,x.updateClasses(),x.updateRealIndex())},x.updateRealIndex=function(){x.realIndex=parseInt(x.slides.eq(x.activeIndex).attr("data-swiper-slide-index")||x.activeIndex,10)},x.updateClasses=function(){x.slides.removeClass(x.params.slideActiveClass+" "+x.params.slideNextClass+" "+x.params.slidePrevClass+" "+x.params.slideDuplicateActiveClass+" "+x.params.slideDuplicateNextClass+" "+x.params.slideDuplicatePrevClass);var t=x.slides.eq(x.activeIndex);t.addClass(x.params.slideActiveClass),i.loop&&(t.hasClass(x.params.slideDuplicateClass)?x.wrapper.children("."+x.params.slideClass+":not(."+x.params.slideDuplicateClass+')[data-swiper-slide-index="'+x.realIndex+'"]').addClass(x.params.slideDuplicateActiveClass):x.wrapper.children("."+x.params.slideClass+"."+x.params.slideDuplicateClass+'[data-swiper-slide-index="'+x.realIndex+'"]').addClass(x.params.slideDuplicateActiveClass));var n=t.next("."+x.params.slideClass).addClass(x.params.slideNextClass);x.params.loop&&0===n.length&&(n=x.slides.eq(0)).addClass(x.params.slideNextClass);var a=t.prev("."+x.params.slideClass).addClass(x.params.slidePrevClass);if(x.params.loop&&0===a.length&&(a=x.slides.eq(-1)).addClass(x.params.slidePrevClass),i.loop&&(n.hasClass(x.params.slideDuplicateClass)?x.wrapper.children("."+x.params.slideClass+":not(."+x.params.slideDuplicateClass+')[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]').addClass(x.params.slideDuplicateNextClass):x.wrapper.children("."+x.params.slideClass+"."+x.params.slideDuplicateClass+'[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]').addClass(x.params.slideDuplicateNextClass),a.hasClass(x.params.slideDuplicateClass)?x.wrapper.children("."+x.params.slideClass+":not(."+x.params.slideDuplicateClass+')[data-swiper-slide-index="'+a.attr("data-swiper-slide-index")+'"]').addClass(x.params.slideDuplicatePrevClass):x.wrapper.children("."+x.params.slideClass+"."+x.params.slideDuplicateClass+'[data-swiper-slide-index="'+a.attr("data-swiper-slide-index")+'"]').addClass(x.params.slideDuplicatePrevClass)),x.paginationContainer&&x.paginationContainer.length>0){var r,s=x.params.loop?Math.ceil((x.slides.length-2*x.loopedSlides)/x.params.slidesPerGroup):x.snapGrid.length;if(x.params.loop?((r=Math.ceil((x.activeIndex-x.loopedSlides)/x.params.slidesPerGroup))>x.slides.length-1-2*x.loopedSlides&&(r-=x.slides.length-2*x.loopedSlides),r>s-1&&(r-=s),r<0&&"bullets"!==x.params.paginationType&&(r=s+r)):r=void 0!==x.snapIndex?x.snapIndex:x.activeIndex||0,"bullets"===x.params.paginationType&&x.bullets&&x.bullets.length>0&&(x.bullets.removeClass(x.params.bulletActiveClass),x.paginationContainer.length>1?x.bullets.each(function(){e(this).index()===r&&e(this).addClass(x.params.bulletActiveClass)}):x.bullets.eq(r).addClass(x.params.bulletActiveClass)),"fraction"===x.params.paginationType&&(x.paginationContainer.find("."+x.params.paginationCurrentClass).text(r+1),x.paginationContainer.find("."+x.params.paginationTotalClass).text(s)),"progress"===x.params.paginationType){var o=(r+1)/s,l=o,c=1;x.isHorizontal()||(c=o,l=1),x.paginationContainer.find("."+x.params.paginationProgressbarClass).transform("translate3d(0,0,0) scaleX("+l+") scaleY("+c+")").transition(x.params.speed)}"custom"===x.params.paginationType&&x.params.paginationCustomRender&&(x.paginationContainer.html(x.params.paginationCustomRender(x,r+1,s)),x.emit("onPaginationRendered",x,x.paginationContainer[0]))}x.params.loop||(x.params.prevButton&&x.prevButton&&x.prevButton.length>0&&(x.isBeginning?(x.prevButton.addClass(x.params.buttonDisabledClass),x.params.a11y&&x.a11y&&x.a11y.disable(x.prevButton)):(x.prevButton.removeClass(x.params.buttonDisabledClass),x.params.a11y&&x.a11y&&x.a11y.enable(x.prevButton))),x.params.nextButton&&x.nextButton&&x.nextButton.length>0&&(x.isEnd?(x.nextButton.addClass(x.params.buttonDisabledClass),x.params.a11y&&x.a11y&&x.a11y.disable(x.nextButton)):(x.nextButton.removeClass(x.params.buttonDisabledClass),x.params.a11y&&x.a11y&&x.a11y.enable(x.nextButton))))},x.updatePagination=function(){if(x.params.pagination&&x.paginationContainer&&x.paginationContainer.length>0){var e="";if("bullets"===x.params.paginationType){for(var t=x.params.loop?Math.ceil((x.slides.length-2*x.loopedSlides)/x.params.slidesPerGroup):x.snapGrid.length,n=0;n<t;n++)x.params.paginationBulletRender?e+=x.params.paginationBulletRender(x,n,x.params.bulletClass):e+="<"+x.params.paginationElement+' class="'+x.params.bulletClass+'"></'+x.params.paginationElement+">";x.paginationContainer.html(e),x.bullets=x.paginationContainer.find("."+x.params.bulletClass),x.params.paginationClickable&&x.params.a11y&&x.a11y&&x.a11y.initPagination()}"fraction"===x.params.paginationType&&(e=x.params.paginationFractionRender?x.params.paginationFractionRender(x,x.params.paginationCurrentClass,x.params.paginationTotalClass):'<span class="'+x.params.paginationCurrentClass+'"></span> / <span class="'+x.params.paginationTotalClass+'"></span>',x.paginationContainer.html(e)),"progress"===x.params.paginationType&&(e=x.params.paginationProgressRender?x.params.paginationProgressRender(x,x.params.paginationProgressbarClass):'<span class="'+x.params.paginationProgressbarClass+'"></span>',x.paginationContainer.html(e)),"custom"!==x.params.paginationType&&x.emit("onPaginationRendered",x,x.paginationContainer[0])}},x.update=function(e){function t(){x.rtl,x.translate;n=Math.min(Math.max(x.translate,x.maxTranslate()),x.minTranslate()),x.setWrapperTranslate(n),x.updateActiveIndex(),x.updateClasses()}if(x){x.updateContainerSize(),x.updateSlidesSize(),x.updateProgress(),x.updatePagination(),x.updateClasses(),x.params.scrollbar&&x.scrollbar&&x.scrollbar.set();var n;if(e){x.controller&&x.controller.spline&&(x.controller.spline=void 0),x.params.freeMode?(t(),x.params.autoHeight&&x.updateAutoHeight()):(("auto"===x.params.slidesPerView||x.params.slidesPerView>1)&&x.isEnd&&!x.params.centeredSlides?x.slideTo(x.slides.length-1,0,!1,!0):x.slideTo(x.activeIndex,0,!1,!0))||t()}else x.params.autoHeight&&x.updateAutoHeight()}},x.onResize=function(e){x.params.onBeforeResize&&x.params.onBeforeResize(x),x.params.breakpoints&&x.setBreakpoint();var t=x.params.allowSwipeToPrev,n=x.params.allowSwipeToNext;x.params.allowSwipeToPrev=x.params.allowSwipeToNext=!0,x.updateContainerSize(),x.updateSlidesSize(),("auto"===x.params.slidesPerView||x.params.freeMode||e)&&x.updatePagination(),x.params.scrollbar&&x.scrollbar&&x.scrollbar.set(),x.controller&&x.controller.spline&&(x.controller.spline=void 0);var i=!1;if(x.params.freeMode){var a=Math.min(Math.max(x.translate,x.maxTranslate()),x.minTranslate());x.setWrapperTranslate(a),x.updateActiveIndex(),x.updateClasses(),x.params.autoHeight&&x.updateAutoHeight()}else x.updateClasses(),i=("auto"===x.params.slidesPerView||x.params.slidesPerView>1)&&x.isEnd&&!x.params.centeredSlides?x.slideTo(x.slides.length-1,0,!1,!0):x.slideTo(x.activeIndex,0,!1,!0);x.params.lazyLoading&&!i&&x.lazy&&x.lazy.load(),x.params.allowSwipeToPrev=t,x.params.allowSwipeToNext=n,x.params.onAfterResize&&x.params.onAfterResize(x)},x.touchEventsDesktop={start:"mousedown",move:"mousemove",end:"mouseup"},window.navigator.pointerEnabled?x.touchEventsDesktop={start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled&&(x.touchEventsDesktop={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}),x.touchEvents={start:x.support.touch||!x.params.simulateTouch?"touchstart":x.touchEventsDesktop.start,move:x.support.touch||!x.params.simulateTouch?"touchmove":x.touchEventsDesktop.move,end:x.support.touch||!x.params.simulateTouch?"touchend":x.touchEventsDesktop.end},(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&("container"===x.params.touchEventsTarget?x.container:x.wrapper).addClass("swiper-wp8-"+x.params.direction),x.initEvents=function(e){var t=e?"off":"on",n=e?"removeEventListener":"addEventListener",a="container"===x.params.touchEventsTarget?x.container[0]:x.wrapper[0],r=x.support.touch?a:document,s=!!x.params.nested;if(x.browser.ie)a[n](x.touchEvents.start,x.onTouchStart,!1),r[n](x.touchEvents.move,x.onTouchMove,s),r[n](x.touchEvents.end,x.onTouchEnd,!1);else{if(x.support.touch){var o=!("touchstart"!==x.touchEvents.start||!x.support.passiveListener||!x.params.passiveListeners)&&{passive:!0,capture:!1};a[n](x.touchEvents.start,x.onTouchStart,o),a[n](x.touchEvents.move,x.onTouchMove,s),a[n](x.touchEvents.end,x.onTouchEnd,o)}(i.simulateTouch&&!x.device.ios&&!x.device.android||i.simulateTouch&&!x.support.touch&&x.device.ios)&&(a[n]("mousedown",x.onTouchStart,!1),document[n]("mousemove",x.onTouchMove,s),document[n]("mouseup",x.onTouchEnd,!1))}window[n]("resize",x.onResize),x.params.nextButton&&x.nextButton&&x.nextButton.length>0&&(x.nextButton[t]("click",x.onClickNext),x.params.a11y&&x.a11y&&x.nextButton[t]("keydown",x.a11y.onEnterKey)),x.params.prevButton&&x.prevButton&&x.prevButton.length>0&&(x.prevButton[t]("click",x.onClickPrev),x.params.a11y&&x.a11y&&x.prevButton[t]("keydown",x.a11y.onEnterKey)),x.params.pagination&&x.params.paginationClickable&&(x.paginationContainer[t]("click","."+x.params.bulletClass,x.onClickIndex),x.params.a11y&&x.a11y&&x.paginationContainer[t]("keydown","."+x.params.bulletClass,x.a11y.onEnterKey)),(x.params.preventClicks||x.params.preventClicksPropagation)&&a[n]("click",x.preventClicks,!0)},x.attachEvents=function(){x.initEvents()},x.detachEvents=function(){x.initEvents(!0)},x.allowClick=!0,x.preventClicks=function(e){x.allowClick||(x.params.preventClicks&&e.preventDefault(),x.params.preventClicksPropagation&&x.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))},x.onClickNext=function(e){e.preventDefault(),x.isEnd&&!x.params.loop||x.slideNext()},x.onClickPrev=function(e){e.preventDefault(),x.isBeginning&&!x.params.loop||x.slidePrev()},x.onClickIndex=function(t){t.preventDefault();var n=e(this).index()*x.params.slidesPerGroup;x.params.loop&&(n+=x.loopedSlides),x.slideTo(n)},x.updateClickedSlide=function(t){var n=s(t,"."+x.params.slideClass),i=!1;if(n)for(var a=0;a<x.slides.length;a++)x.slides[a]===n&&(i=!0);if(!n||!i)return x.clickedSlide=void 0,void(x.clickedIndex=void 0);if(x.clickedSlide=n,x.clickedIndex=e(n).index(),x.params.slideToClickedSlide&&void 0!==x.clickedIndex&&x.clickedIndex!==x.activeIndex){var r,o=x.clickedIndex,l="auto"===x.params.slidesPerView?x.currentSlidesPerView():x.params.slidesPerView;if(x.params.loop){if(x.animating)return;r=parseInt(e(x.clickedSlide).attr("data-swiper-slide-index"),10),x.params.centeredSlides?o<x.loopedSlides-l/2||o>x.slides.length-x.loopedSlides+l/2?(x.fixLoop(),o=x.wrapper.children("."+x.params.slideClass+'[data-swiper-slide-index="'+r+'"]:not(.'+x.params.slideDuplicateClass+")").eq(0).index(),setTimeout(function(){x.slideTo(o)},0)):x.slideTo(o):o>x.slides.length-l?(x.fixLoop(),o=x.wrapper.children("."+x.params.slideClass+'[data-swiper-slide-index="'+r+'"]:not(.'+x.params.slideDuplicateClass+")").eq(0).index(),setTimeout(function(){x.slideTo(o)},0)):x.slideTo(o)}else x.slideTo(o)}};var C,T,S,k,E,M,D,L,z,P,I="input, select, textarea, button, video",F=Date.now(),A=[];x.animating=!1,x.touches={startX:0,startY:0,currentX:0,currentY:0,diff:0};var N,H;x.onTouchStart=function(t){if(t.originalEvent&&(t=t.originalEvent),(N="touchstart"===t.type)||!("which"in t)||3!==t.which)if(x.params.noSwiping&&s(t,"."+x.params.noSwipingClass))x.allowClick=!0;else if(!x.params.swipeHandler||s(t,x.params.swipeHandler)){var n=x.touches.currentX="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,i=x.touches.currentY="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY;if(!(x.device.ios&&x.params.iOSEdgeSwipeDetection&&n<=x.params.iOSEdgeSwipeThreshold)){if(C=!0,T=!1,S=!0,E=void 0,H=void 0,x.touches.startX=n,x.touches.startY=i,k=Date.now(),x.allowClick=!0,x.updateContainerSize(),x.swipeDirection=void 0,x.params.threshold>0&&(L=!1),"touchstart"!==t.type){var a=!0;e(t.target).is(I)&&(a=!1),document.activeElement&&e(document.activeElement).is(I)&&document.activeElement.blur(),a&&t.preventDefault()}x.emit("onTouchStart",x,t)}}},x.onTouchMove=function(t){if(t.originalEvent&&(t=t.originalEvent),!N||"mousemove"!==t.type){if(t.preventedByNestedSwiper)return x.touches.startX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,void(x.touches.startY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY);if(x.params.onlyExternal)return x.allowClick=!1,void(C&&(x.touches.startX=x.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,x.touches.startY=x.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,k=Date.now()));if(N&&x.params.touchReleaseOnEdges&&!x.params.loop)if(x.isHorizontal()){if(x.touches.currentX<x.touches.startX&&x.translate<=x.maxTranslate()||x.touches.currentX>x.touches.startX&&x.translate>=x.minTranslate())return}else if(x.touches.currentY<x.touches.startY&&x.translate<=x.maxTranslate()||x.touches.currentY>x.touches.startY&&x.translate>=x.minTranslate())return;if(N&&document.activeElement&&t.target===document.activeElement&&e(t.target).is(I))return T=!0,void(x.allowClick=!1);if(S&&x.emit("onTouchMove",x,t),!(t.targetTouches&&t.targetTouches.length>1)){if(x.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,x.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,void 0===E){var n;x.isHorizontal()&&x.touches.currentY===x.touches.startY||!x.isHorizontal()&&x.touches.currentX===x.touches.startX?E=!1:(n=180*Math.atan2(Math.abs(x.touches.currentY-x.touches.startY),Math.abs(x.touches.currentX-x.touches.startX))/Math.PI,E=x.isHorizontal()?n>x.params.touchAngle:90-n>x.params.touchAngle)}if(E&&x.emit("onTouchMoveOpposite",x,t),void 0===H&&(x.touches.currentX===x.touches.startX&&x.touches.currentY===x.touches.startY||(H=!0)),C)if(E)C=!1;else if(H){x.allowClick=!1,x.emit("onSliderMove",x,t),t.preventDefault(),x.params.touchMoveStopPropagation&&!x.params.nested&&t.stopPropagation(),T||(i.loop&&x.fixLoop(),D=x.getWrapperTranslate(),x.setWrapperTransition(0),x.animating&&x.wrapper.trigger("webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd"),x.params.autoplay&&x.autoplaying&&(x.params.autoplayDisableOnInteraction?x.stopAutoplay():x.pauseAutoplay()),P=!1,!x.params.grabCursor||!0!==x.params.allowSwipeToNext&&!0!==x.params.allowSwipeToPrev||x.setGrabCursor(!0)),T=!0;var a=x.touches.diff=x.isHorizontal()?x.touches.currentX-x.touches.startX:x.touches.currentY-x.touches.startY;a*=x.params.touchRatio,x.rtl&&(a=-a),x.swipeDirection=a>0?"prev":"next",M=a+D;var r=!0;if(a>0&&M>x.minTranslate()?(r=!1,x.params.resistance&&(M=x.minTranslate()-1+Math.pow(-x.minTranslate()+D+a,x.params.resistanceRatio))):a<0&&M<x.maxTranslate()&&(r=!1,x.params.resistance&&(M=x.maxTranslate()+1-Math.pow(x.maxTranslate()-D-a,x.params.resistanceRatio))),r&&(t.preventedByNestedSwiper=!0),!x.params.allowSwipeToNext&&"next"===x.swipeDirection&&M<D&&(M=D),!x.params.allowSwipeToPrev&&"prev"===x.swipeDirection&&M>D&&(M=D),x.params.threshold>0){if(!(Math.abs(a)>x.params.threshold||L))return void(M=D);if(!L)return L=!0,x.touches.startX=x.touches.currentX,x.touches.startY=x.touches.currentY,M=D,void(x.touches.diff=x.isHorizontal()?x.touches.currentX-x.touches.startX:x.touches.currentY-x.touches.startY)}x.params.followFinger&&((x.params.freeMode||x.params.watchSlidesProgress)&&x.updateActiveIndex(),x.params.freeMode&&(0===A.length&&A.push({position:x.touches[x.isHorizontal()?"startX":"startY"],time:k}),A.push({position:x.touches[x.isHorizontal()?"currentX":"currentY"],time:(new window.Date).getTime()})),x.updateProgress(M),x.setWrapperTranslate(M))}}}},x.onTouchEnd=function(t){if(t.originalEvent&&(t=t.originalEvent),S&&x.emit("onTouchEnd",x,t),S=!1,C){x.params.grabCursor&&T&&C&&(!0===x.params.allowSwipeToNext||!0===x.params.allowSwipeToPrev)&&x.setGrabCursor(!1);var n=Date.now(),i=n-k;if(x.allowClick&&(x.updateClickedSlide(t),x.emit("onTap",x,t),i<300&&n-F>300&&(z&&clearTimeout(z),z=setTimeout(function(){x&&(x.params.paginationHide&&x.paginationContainer.length>0&&!e(t.target).hasClass(x.params.bulletClass)&&x.paginationContainer.toggleClass(x.params.paginationHiddenClass),x.emit("onClick",x,t))},300)),i<300&&n-F<300&&(z&&clearTimeout(z),x.emit("onDoubleTap",x,t))),F=Date.now(),setTimeout(function(){x&&(x.allowClick=!0)},0),C&&T&&x.swipeDirection&&0!==x.touches.diff&&M!==D){C=T=!1;var a;if(a=x.params.followFinger?x.rtl?x.translate:-x.translate:-M,x.params.freeMode){if(a<-x.minTranslate())return void x.slideTo(x.activeIndex);if(a>-x.maxTranslate())return void(x.slides.length<x.snapGrid.length?x.slideTo(x.snapGrid.length-1):x.slideTo(x.slides.length-1));if(x.params.freeModeMomentum){if(A.length>1){var r=A.pop(),s=A.pop(),o=r.position-s.position,l=r.time-s.time;x.velocity=o/l,x.velocity=x.velocity/2,Math.abs(x.velocity)<x.params.freeModeMinimumVelocity&&(x.velocity=0),(l>150||(new window.Date).getTime()-r.time>300)&&(x.velocity=0)}else x.velocity=0;x.velocity=x.velocity*x.params.freeModeMomentumVelocityRatio,A.length=0;var c=1e3*x.params.freeModeMomentumRatio,u=x.velocity*c,p=x.translate+u;x.rtl&&(p=-p);var d,h=!1,f=20*Math.abs(x.velocity)*x.params.freeModeMomentumBounceRatio;if(p<x.maxTranslate())x.params.freeModeMomentumBounce?(p+x.maxTranslate()<-f&&(p=x.maxTranslate()-f),d=x.maxTranslate(),h=!0,P=!0):p=x.maxTranslate();else if(p>x.minTranslate())x.params.freeModeMomentumBounce?(p-x.minTranslate()>f&&(p=x.minTranslate()+f),d=x.minTranslate(),h=!0,P=!0):p=x.minTranslate();else if(x.params.freeModeSticky){var m,g=0;for(g=0;g<x.snapGrid.length;g+=1)if(x.snapGrid[g]>-p){m=g;break}p=Math.abs(x.snapGrid[m]-p)<Math.abs(x.snapGrid[m-1]-p)||"next"===x.swipeDirection?x.snapGrid[m]:x.snapGrid[m-1],x.rtl||(p=-p)}if(0!==x.velocity)c=x.rtl?Math.abs((-p-x.translate)/x.velocity):Math.abs((p-x.translate)/x.velocity);else if(x.params.freeModeSticky)return void x.slideReset();x.params.freeModeMomentumBounce&&h?(x.updateProgress(d),x.setWrapperTransition(c),x.setWrapperTranslate(p),x.onTransitionStart(),x.animating=!0,x.wrapper.transitionEnd(function(){x&&P&&(x.emit("onMomentumBounce",x),x.setWrapperTransition(x.params.speed),x.setWrapperTranslate(d),x.wrapper.transitionEnd(function(){x&&x.onTransitionEnd()}))})):x.velocity?(x.updateProgress(p),x.setWrapperTransition(c),x.setWrapperTranslate(p),x.onTransitionStart(),x.animating||(x.animating=!0,x.wrapper.transitionEnd(function(){x&&x.onTransitionEnd()}))):x.updateProgress(p),x.updateActiveIndex()}(!x.params.freeModeMomentum||i>=x.params.longSwipesMs)&&(x.updateProgress(),x.updateActiveIndex())}else{var v,y=0,w=x.slidesSizesGrid[0];for(v=0;v<x.slidesGrid.length;v+=x.params.slidesPerGroup)void 0!==x.slidesGrid[v+x.params.slidesPerGroup]?a>=x.slidesGrid[v]&&a<x.slidesGrid[v+x.params.slidesPerGroup]&&(y=v,w=x.slidesGrid[v+x.params.slidesPerGroup]-x.slidesGrid[v]):a>=x.slidesGrid[v]&&(y=v,w=x.slidesGrid[x.slidesGrid.length-1]-x.slidesGrid[x.slidesGrid.length-2]);var b=(a-x.slidesGrid[y])/w;if(i>x.params.longSwipesMs){if(!x.params.longSwipes)return void x.slideTo(x.activeIndex);"next"===x.swipeDirection&&(b>=x.params.longSwipesRatio?x.slideTo(y+x.params.slidesPerGroup):x.slideTo(y)),"prev"===x.swipeDirection&&(b>1-x.params.longSwipesRatio?x.slideTo(y+x.params.slidesPerGroup):x.slideTo(y))}else{if(!x.params.shortSwipes)return void x.slideTo(x.activeIndex);"next"===x.swipeDirection&&x.slideTo(y+x.params.slidesPerGroup),"prev"===x.swipeDirection&&x.slideTo(y)}}}else C=T=!1}},x._slideTo=function(e,t){return x.slideTo(e,t,!0,!0)},x.slideTo=function(e,t,n,i){void 0===n&&(n=!0),void 0===e&&(e=0),e<0&&(e=0),x.snapIndex=Math.floor(e/x.params.slidesPerGroup),x.snapIndex>=x.snapGrid.length&&(x.snapIndex=x.snapGrid.length-1);var a=-x.snapGrid[x.snapIndex];if(x.params.autoplay&&x.autoplaying&&(i||!x.params.autoplayDisableOnInteraction?x.pauseAutoplay(t):x.stopAutoplay()),x.updateProgress(a),x.params.normalizeSlideIndex)for(var r=0;r<x.slidesGrid.length;r++)-Math.floor(100*a)>=Math.floor(100*x.slidesGrid[r])&&(e=r);return!(!x.params.allowSwipeToNext&&a<x.translate&&a<x.minTranslate())&&(!(!x.params.allowSwipeToPrev&&a>x.translate&&a>x.maxTranslate()&&(x.activeIndex||0)!==e)&&(void 0===t&&(t=x.params.speed),x.previousIndex=x.activeIndex||0,x.activeIndex=e,x.updateRealIndex(),x.rtl&&-a===x.translate||!x.rtl&&a===x.translate?(x.params.autoHeight&&x.updateAutoHeight(),x.updateClasses(),"slide"!==x.params.effect&&x.setWrapperTranslate(a),!1):(x.updateClasses(),x.onTransitionStart(n),0===t||x.browser.lteIE9?(x.setWrapperTranslate(a),x.setWrapperTransition(0),x.onTransitionEnd(n)):(x.setWrapperTranslate(a),x.setWrapperTransition(t),x.animating||(x.animating=!0,x.wrapper.transitionEnd(function(){x&&x.onTransitionEnd(n)}))),!0)))},x.onTransitionStart=function(e){void 0===e&&(e=!0),x.params.autoHeight&&x.updateAutoHeight(),x.lazy&&x.lazy.onTransitionStart(),e&&(x.emit("onTransitionStart",x),x.activeIndex!==x.previousIndex&&(x.emit("onSlideChangeStart",x),x.activeIndex>x.previousIndex?x.emit("onSlideNextStart",x):x.emit("onSlidePrevStart",x)))},x.onTransitionEnd=function(e){x.animating=!1,x.setWrapperTransition(0),void 0===e&&(e=!0),x.lazy&&x.lazy.onTransitionEnd(),e&&(x.emit("onTransitionEnd",x),x.activeIndex!==x.previousIndex&&(x.emit("onSlideChangeEnd",x),x.activeIndex>x.previousIndex?x.emit("onSlideNextEnd",x):x.emit("onSlidePrevEnd",x))),x.params.history&&x.history&&x.history.setHistory(x.params.history,x.activeIndex),x.params.hashnav&&x.hashnav&&x.hashnav.setHash()},x.slideNext=function(e,t,n){if(x.params.loop){if(x.animating)return!1;x.fixLoop();x.container[0].clientLeft;return x.slideTo(x.activeIndex+x.params.slidesPerGroup,t,e,n)}return x.slideTo(x.activeIndex+x.params.slidesPerGroup,t,e,n)},x._slideNext=function(e){return x.slideNext(!0,e,!0)},x.slidePrev=function(e,t,n){if(x.params.loop){if(x.animating)return!1;x.fixLoop();x.container[0].clientLeft;return x.slideTo(x.activeIndex-1,t,e,n)}return x.slideTo(x.activeIndex-1,t,e,n)},x._slidePrev=function(e){return x.slidePrev(!0,e,!0)},x.slideReset=function(e,t,n){return x.slideTo(x.activeIndex,t,e)},x.disableTouchControl=function(){return x.params.onlyExternal=!0,!0},x.enableTouchControl=function(){return x.params.onlyExternal=!1,!0},x.setWrapperTransition=function(e,t){x.wrapper.transition(e),"slide"!==x.params.effect&&x.effects[x.params.effect]&&x.effects[x.params.effect].setTransition(e),x.params.parallax&&x.parallax&&x.parallax.setTransition(e),x.params.scrollbar&&x.scrollbar&&x.scrollbar.setTransition(e),x.params.control&&x.controller&&x.controller.setTransition(e,t),x.emit("onSetTransition",x,e)},x.setWrapperTranslate=function(e,t,n){var i=0,r=0;x.isHorizontal()?i=x.rtl?-e:e:r=e,x.params.roundLengths&&(i=a(i),r=a(r)),x.params.virtualTranslate||(x.support.transforms3d?x.wrapper.transform("translate3d("+i+"px, "+r+"px, 0px)"):x.wrapper.transform("translate("+i+"px, "+r+"px)")),x.translate=x.isHorizontal()?i:r;var s=x.maxTranslate()-x.minTranslate();(0===s?0:(e-x.minTranslate())/s)!==x.progress&&x.updateProgress(e),t&&x.updateActiveIndex(),"slide"!==x.params.effect&&x.effects[x.params.effect]&&x.effects[x.params.effect].setTranslate(x.translate),x.params.parallax&&x.parallax&&x.parallax.setTranslate(x.translate),x.params.scrollbar&&x.scrollbar&&x.scrollbar.setTranslate(x.translate),x.params.control&&x.controller&&x.controller.setTranslate(x.translate,n),x.emit("onSetTranslate",x,x.translate)},x.getTranslate=function(e,t){var n,i,a,r;return void 0===t&&(t="x"),x.params.virtualTranslate?x.rtl?-x.translate:x.translate:(a=window.getComputedStyle(e,null),window.WebKitCSSMatrix?((i=a.transform||a.webkitTransform).split(",").length>6&&(i=i.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),r=new window.WebKitCSSMatrix("none"===i?"":i)):n=(r=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(i=window.WebKitCSSMatrix?r.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(i=window.WebKitCSSMatrix?r.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),x.rtl&&i&&(i=-i),i||0)},x.getWrapperTranslate=function(e){return void 0===e&&(e=x.isHorizontal()?"x":"y"),x.getTranslate(x.wrapper[0],e)},x.observers=[],x.initObservers=function(){if(x.params.observeParents)for(var e=x.container.parents(),t=0;t<e.length;t++)o(e[t]);o(x.container[0],{childList:!1}),o(x.wrapper[0],{attributes:!1})},x.disconnectObservers=function(){for(var e=0;e<x.observers.length;e++)x.observers[e].disconnect();x.observers=[]},x.createLoop=function(){x.wrapper.children("."+x.params.slideClass+"."+x.params.slideDuplicateClass).remove();var t=x.wrapper.children("."+x.params.slideClass);"auto"!==x.params.slidesPerView||x.params.loopedSlides||(x.params.loopedSlides=t.length),x.loopedSlides=parseInt(x.params.loopedSlides||x.params.slidesPerView,10),x.loopedSlides=x.loopedSlides+x.params.loopAdditionalSlides,x.loopedSlides>t.length&&(x.loopedSlides=t.length);var n,i=[],a=[];for(t.each(function(n,r){var s=e(this);n<x.loopedSlides&&a.push(r),n<t.length&&n>=t.length-x.loopedSlides&&i.push(r),s.attr("data-swiper-slide-index",n)}),n=0;n<a.length;n++)x.wrapper.append(e(a[n].cloneNode(!0)).addClass(x.params.slideDuplicateClass));for(n=i.length-1;n>=0;n--)x.wrapper.prepend(e(i[n].cloneNode(!0)).addClass(x.params.slideDuplicateClass))},x.destroyLoop=function(){x.wrapper.children("."+x.params.slideClass+"."+x.params.slideDuplicateClass).remove(),x.slides.removeAttr("data-swiper-slide-index")},x.reLoop=function(e){var t=x.activeIndex-x.loopedSlides;x.destroyLoop(),x.createLoop(),x.updateSlidesSize(),e&&x.slideTo(t+x.loopedSlides,0,!1)},x.fixLoop=function(){var e;x.activeIndex<x.loopedSlides?(e=x.slides.length-3*x.loopedSlides+x.activeIndex,e+=x.loopedSlides,x.slideTo(e,0,!1,!0)):("auto"===x.params.slidesPerView&&x.activeIndex>=2*x.loopedSlides||x.activeIndex>x.slides.length-2*x.params.slidesPerView)&&(e=-x.slides.length+x.activeIndex+x.loopedSlides,e+=x.loopedSlides,x.slideTo(e,0,!1,!0))},x.appendSlide=function(e){if(x.params.loop&&x.destroyLoop(),"object"==typeof e&&e.length)for(var t=0;t<e.length;t++)e[t]&&x.wrapper.append(e[t]);else x.wrapper.append(e);x.params.loop&&x.createLoop(),x.params.observer&&x.support.observer||x.update(!0)},x.prependSlide=function(e){x.params.loop&&x.destroyLoop();var t=x.activeIndex+1;if("object"==typeof e&&e.length){for(var n=0;n<e.length;n++)e[n]&&x.wrapper.prepend(e[n]);t=x.activeIndex+e.length}else x.wrapper.prepend(e);x.params.loop&&x.createLoop(),x.params.observer&&x.support.observer||x.update(!0),x.slideTo(t,0,!1)},x.removeSlide=function(e){x.params.loop&&(x.destroyLoop(),x.slides=x.wrapper.children("."+x.params.slideClass));var t,n=x.activeIndex;if("object"==typeof e&&e.length){for(var i=0;i<e.length;i++)t=e[i],x.slides[t]&&x.slides.eq(t).remove(),t<n&&n--;n=Math.max(n,0)}else t=e,x.slides[t]&&x.slides.eq(t).remove(),t<n&&n--,n=Math.max(n,0);x.params.loop&&x.createLoop(),x.params.observer&&x.support.observer||x.update(!0),x.params.loop?x.slideTo(n+x.loopedSlides,0,!1):x.slideTo(n,0,!1)},x.removeAllSlides=function(){for(var e=[],t=0;t<x.slides.length;t++)e.push(t);x.removeSlide(e)},x.effects={fade:{setTranslate:function(){for(var e=0;e<x.slides.length;e++){var t=x.slides.eq(e),n=-t[0].swiperSlideOffset;x.params.virtualTranslate||(n-=x.translate);var i=0;x.isHorizontal()||(i=n,n=0);var a=x.params.fade.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:a}).transform("translate3d("+n+"px, "+i+"px, 0px)")}},setTransition:function(e){if(x.slides.transition(e),x.params.virtualTranslate&&0!==e){var t=!1;x.slides.transitionEnd(function(){if(!t&&x){t=!0,x.animating=!1;for(var e=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],n=0;n<e.length;n++)x.wrapper.trigger(e[n])}})}}},flip:{setTranslate:function(){for(var t=0;t<x.slides.length;t++){var n=x.slides.eq(t),i=n[0].progress;x.params.flip.limitRotation&&(i=Math.max(Math.min(n[0].progress,1),-1));var a=-180*i,r=0,s=-n[0].swiperSlideOffset,o=0;if(x.isHorizontal()?x.rtl&&(a=-a):(o=s,s=0,r=-a,a=0),n[0].style.zIndex=-Math.abs(Math.round(i))+x.slides.length,x.params.flip.slideShadows){var l=x.isHorizontal()?n.find(".swiper-slide-shadow-left"):n.find(".swiper-slide-shadow-top"),c=x.isHorizontal()?n.find(".swiper-slide-shadow-right"):n.find(".swiper-slide-shadow-bottom");0===l.length&&(l=e('<div class="swiper-slide-shadow-'+(x.isHorizontal()?"left":"top")+'"></div>'),n.append(l)),0===c.length&&(c=e('<div class="swiper-slide-shadow-'+(x.isHorizontal()?"right":"bottom")+'"></div>'),n.append(c)),l.length&&(l[0].style.opacity=Math.max(-i,0)),c.length&&(c[0].style.opacity=Math.max(i,0))}n.transform("translate3d("+s+"px, "+o+"px, 0px) rotateX("+r+"deg) rotateY("+a+"deg)")}},setTransition:function(t){if(x.slides.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t),x.params.virtualTranslate&&0!==t){var n=!1;x.slides.eq(x.activeIndex).transitionEnd(function(){if(!n&&x&&e(this).hasClass(x.params.slideActiveClass)){n=!0,x.animating=!1;for(var t=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],i=0;i<t.length;i++)x.wrapper.trigger(t[i])}})}}},cube:{setTranslate:function(){var t,n=0;x.params.cube.shadow&&(x.isHorizontal()?(0===(t=x.wrapper.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),x.wrapper.append(t)),t.css({height:x.width+"px"})):0===(t=x.container.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),x.container.append(t)));for(var i=0;i<x.slides.length;i++){var a=x.slides.eq(i),r=90*i,s=Math.floor(r/360);x.rtl&&(r=-r,s=Math.floor(-r/360));var o=Math.max(Math.min(a[0].progress,1),-1),l=0,c=0,u=0;i%4==0?(l=4*-s*x.size,u=0):(i-1)%4==0?(l=0,u=4*-s*x.size):(i-2)%4==0?(l=x.size+4*s*x.size,u=x.size):(i-3)%4==0&&(l=-x.size,u=3*x.size+4*x.size*s),x.rtl&&(l=-l),x.isHorizontal()||(c=l,l=0);var p="rotateX("+(x.isHorizontal()?0:-r)+"deg) rotateY("+(x.isHorizontal()?r:0)+"deg) translate3d("+l+"px, "+c+"px, "+u+"px)";if(o<=1&&o>-1&&(n=90*i+90*o,x.rtl&&(n=90*-i-90*o)),a.transform(p),x.params.cube.slideShadows){var d=x.isHorizontal()?a.find(".swiper-slide-shadow-left"):a.find(".swiper-slide-shadow-top"),h=x.isHorizontal()?a.find(".swiper-slide-shadow-right"):a.find(".swiper-slide-shadow-bottom");0===d.length&&(d=e('<div class="swiper-slide-shadow-'+(x.isHorizontal()?"left":"top")+'"></div>'),a.append(d)),0===h.length&&(h=e('<div class="swiper-slide-shadow-'+(x.isHorizontal()?"right":"bottom")+'"></div>'),a.append(h)),d.length&&(d[0].style.opacity=Math.max(-o,0)),h.length&&(h[0].style.opacity=Math.max(o,0))}}if(x.wrapper.css({"-webkit-transform-origin":"50% 50% -"+x.size/2+"px","-moz-transform-origin":"50% 50% -"+x.size/2+"px","-ms-transform-origin":"50% 50% -"+x.size/2+"px","transform-origin":"50% 50% -"+x.size/2+"px"}),x.params.cube.shadow)if(x.isHorizontal())t.transform("translate3d(0px, "+(x.width/2+x.params.cube.shadowOffset)+"px, "+-x.width/2+"px) rotateX(90deg) rotateZ(0deg) scale("+x.params.cube.shadowScale+")");else{var f=Math.abs(n)-90*Math.floor(Math.abs(n)/90),m=1.5-(Math.sin(2*f*Math.PI/360)/2+Math.cos(2*f*Math.PI/360)/2),g=x.params.cube.shadowScale,v=x.params.cube.shadowScale/m,y=x.params.cube.shadowOffset;t.transform("scale3d("+g+", 1, "+v+") translate3d(0px, "+(x.height/2+y)+"px, "+-x.height/2/v+"px) rotateX(-90deg)")}var w=x.isSafari||x.isUiWebView?-x.size/2:0;x.wrapper.transform("translate3d(0px,0,"+w+"px) rotateX("+(x.isHorizontal()?0:n)+"deg) rotateY("+(x.isHorizontal()?-n:0)+"deg)")},setTransition:function(e){x.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),x.params.cube.shadow&&!x.isHorizontal()&&x.container.find(".swiper-cube-shadow").transition(e)}},coverflow:{setTranslate:function(){for(var t=x.translate,n=x.isHorizontal()?-t+x.width/2:-t+x.height/2,i=x.isHorizontal()?x.params.coverflow.rotate:-x.params.coverflow.rotate,a=x.params.coverflow.depth,r=0,s=x.slides.length;r<s;r++){var o=x.slides.eq(r),l=x.slidesSizesGrid[r],c=(n-o[0].swiperSlideOffset-l/2)/l*x.params.coverflow.modifier,u=x.isHorizontal()?i*c:0,p=x.isHorizontal()?0:i*c,d=-a*Math.abs(c),h=x.isHorizontal()?0:x.params.coverflow.stretch*c,f=x.isHorizontal()?x.params.coverflow.stretch*c:0;Math.abs(f)<.001&&(f=0),Math.abs(h)<.001&&(h=0),Math.abs(d)<.001&&(d=0),Math.abs(u)<.001&&(u=0),Math.abs(p)<.001&&(p=0);var m="translate3d("+f+"px,"+h+"px,"+d+"px)  rotateX("+p+"deg) rotateY("+u+"deg)";if(o.transform(m),o[0].style.zIndex=1-Math.abs(Math.round(c)),x.params.coverflow.slideShadows){var g=x.isHorizontal()?o.find(".swiper-slide-shadow-left"):o.find(".swiper-slide-shadow-top"),v=x.isHorizontal()?o.find(".swiper-slide-shadow-right"):o.find(".swiper-slide-shadow-bottom");0===g.length&&(g=e('<div class="swiper-slide-shadow-'+(x.isHorizontal()?"left":"top")+'"></div>'),o.append(g)),0===v.length&&(v=e('<div class="swiper-slide-shadow-'+(x.isHorizontal()?"right":"bottom")+'"></div>'),o.append(v)),g.length&&(g[0].style.opacity=c>0?c:0),v.length&&(v[0].style.opacity=-c>0?-c:0)}}x.browser.ie&&(x.wrapper[0].style.perspectiveOrigin=n+"px 50%")},setTransition:function(e){x.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}}},x.lazy={initialImageLoaded:!1,loadImageInSlide:function(t,n){if(void 0!==t&&(void 0===n&&(n=!0),0!==x.slides.length)){var i=x.slides.eq(t),a=i.find("."+x.params.lazyLoadingClass+":not(."+x.params.lazyStatusLoadedClass+"):not(."+x.params.lazyStatusLoadingClass+")");!i.hasClass(x.params.lazyLoadingClass)||i.hasClass(x.params.lazyStatusLoadedClass)||i.hasClass(x.params.lazyStatusLoadingClass)||(a=a.add(i[0])),0!==a.length&&a.each(function(){var t=e(this);t.addClass(x.params.lazyStatusLoadingClass);var a=t.attr("data-background"),r=t.attr("data-src"),s=t.attr("data-srcset"),o=t.attr("data-sizes");x.loadImage(t[0],r||a,s,o,!1,function(){if(void 0!==x&&null!==x&&x){if(a?(t.css("background-image",'url("'+a+'")'),t.removeAttr("data-background")):(s&&(t.attr("srcset",s),t.removeAttr("data-srcset")),o&&(t.attr("sizes",o),t.removeAttr("data-sizes")),r&&(t.attr("src",r),t.removeAttr("data-src"))),t.addClass(x.params.lazyStatusLoadedClass).removeClass(x.params.lazyStatusLoadingClass),i.find("."+x.params.lazyPreloaderClass+", ."+x.params.preloaderClass).remove(),x.params.loop&&n){var e=i.attr("data-swiper-slide-index");if(i.hasClass(x.params.slideDuplicateClass)){var l=x.wrapper.children('[data-swiper-slide-index="'+e+'"]:not(.'+x.params.slideDuplicateClass+")");x.lazy.loadImageInSlide(l.index(),!1)}else{var c=x.wrapper.children("."+x.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');x.lazy.loadImageInSlide(c.index(),!1)}}x.emit("onLazyImageReady",x,i[0],t[0])}}),x.emit("onLazyImageLoad",x,i[0],t[0])})}},load:function(){var t,n=x.params.slidesPerView;if("auto"===n&&(n=0),x.lazy.initialImageLoaded||(x.lazy.initialImageLoaded=!0),x.params.watchSlidesVisibility)x.wrapper.children("."+x.params.slideVisibleClass).each(function(){x.lazy.loadImageInSlide(e(this).index())});else if(n>1)for(t=x.activeIndex;t<x.activeIndex+n;t++)x.slides[t]&&x.lazy.loadImageInSlide(t);else x.lazy.loadImageInSlide(x.activeIndex);if(x.params.lazyLoadingInPrevNext)if(n>1||x.params.lazyLoadingInPrevNextAmount&&x.params.lazyLoadingInPrevNextAmount>1){var i=x.params.lazyLoadingInPrevNextAmount,a=n,r=Math.min(x.activeIndex+a+Math.max(i,a),x.slides.length),s=Math.max(x.activeIndex-Math.max(a,i),0);for(t=x.activeIndex+n;t<r;t++)x.slides[t]&&x.lazy.loadImageInSlide(t);for(t=s;t<x.activeIndex;t++)x.slides[t]&&x.lazy.loadImageInSlide(t)}else{var o=x.wrapper.children("."+x.params.slideNextClass);o.length>0&&x.lazy.loadImageInSlide(o.index());var l=x.wrapper.children("."+x.params.slidePrevClass);l.length>0&&x.lazy.loadImageInSlide(l.index())}},onTransitionStart:function(){x.params.lazyLoading&&(x.params.lazyLoadingOnTransitionStart||!x.params.lazyLoadingOnTransitionStart&&!x.lazy.initialImageLoaded)&&x.lazy.load()},onTransitionEnd:function(){x.params.lazyLoading&&!x.params.lazyLoadingOnTransitionStart&&x.lazy.load()}},x.scrollbar={isTouched:!1,setDragPosition:function(e){var t=x.scrollbar,n=(x.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY)-t.track.offset()[x.isHorizontal()?"left":"top"]-t.dragSize/2,i=-x.minTranslate()*t.moveDivider,a=-x.maxTranslate()*t.moveDivider;n<i?n=i:n>a&&(n=a),n=-n/t.moveDivider,x.updateProgress(n),x.setWrapperTranslate(n,!0)},dragStart:function(e){var t=x.scrollbar;t.isTouched=!0,e.preventDefault(),e.stopPropagation(),t.setDragPosition(e),clearTimeout(t.dragTimeout),t.track.transition(0),x.params.scrollbarHide&&t.track.css("opacity",1),x.wrapper.transition(100),t.drag.transition(100),x.emit("onScrollbarDragStart",x)},dragMove:function(e){var t=x.scrollbar;t.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),x.wrapper.transition(0),t.track.transition(0),t.drag.transition(0),x.emit("onScrollbarDragMove",x))},dragEnd:function(e){var t=x.scrollbar;t.isTouched&&(t.isTouched=!1,x.params.scrollbarHide&&(clearTimeout(t.dragTimeout),t.dragTimeout=setTimeout(function(){t.track.css("opacity",0),t.track.transition(400)},1e3)),x.emit("onScrollbarDragEnd",x),x.params.scrollbarSnapOnRelease&&x.slideReset())},draggableEvents:function(){return!1!==x.params.simulateTouch||x.support.touch?x.touchEvents:x.touchEventsDesktop}(),enableDraggable:function(){var t=x.scrollbar,n=x.support.touch?t.track:document;e(t.track).on(t.draggableEvents.start,t.dragStart),e(n).on(t.draggableEvents.move,t.dragMove),e(n).on(t.draggableEvents.end,t.dragEnd)},disableDraggable:function(){var t=x.scrollbar,n=x.support.touch?t.track:document;e(t.track).off(t.draggableEvents.start,t.dragStart),e(n).off(t.draggableEvents.move,t.dragMove),e(n).off(t.draggableEvents.end,t.dragEnd)},set:function(){if(x.params.scrollbar){var t=x.scrollbar;t.track=e(x.params.scrollbar),x.params.uniqueNavElements&&"string"==typeof x.params.scrollbar&&t.track.length>1&&1===x.container.find(x.params.scrollbar).length&&(t.track=x.container.find(x.params.scrollbar)),t.drag=t.track.find(".swiper-scrollbar-drag"),0===t.drag.length&&(t.drag=e('<div class="swiper-scrollbar-drag"></div>'),t.track.append(t.drag)),t.drag[0].style.width="",t.drag[0].style.height="",t.trackSize=x.isHorizontal()?t.track[0].offsetWidth:t.track[0].offsetHeight,t.divider=x.size/x.virtualSize,t.moveDivider=t.divider*(t.trackSize/x.size),t.dragSize=t.trackSize*t.divider,x.isHorizontal()?t.drag[0].style.width=t.dragSize+"px":t.drag[0].style.height=t.dragSize+"px",t.divider>=1?t.track[0].style.display="none":t.track[0].style.display="",x.params.scrollbarHide&&(t.track[0].style.opacity=0)}},setTranslate:function(){if(x.params.scrollbar){var e,t=x.scrollbar,n=(x.translate,t.dragSize);e=(t.trackSize-t.dragSize)*x.progress,x.rtl&&x.isHorizontal()?(e=-e)>0?(n=t.dragSize-e,e=0):-e+t.dragSize>t.trackSize&&(n=t.trackSize+e):e<0?(n=t.dragSize+e,e=0):e+t.dragSize>t.trackSize&&(n=t.trackSize-e),x.isHorizontal()?(x.support.transforms3d?t.drag.transform("translate3d("+e+"px, 0, 0)"):t.drag.transform("translateX("+e+"px)"),t.drag[0].style.width=n+"px"):(x.support.transforms3d?t.drag.transform("translate3d(0px, "+e+"px, 0)"):t.drag.transform("translateY("+e+"px)"),t.drag[0].style.height=n+"px"),x.params.scrollbarHide&&(clearTimeout(t.timeout),t.track[0].style.opacity=1,t.timeout=setTimeout(function(){t.track[0].style.opacity=0,t.track.transition(400)},1e3))}},setTransition:function(e){x.params.scrollbar&&x.scrollbar.drag.transition(e)}},x.controller={LinearSpline:function(e,t){var n=function(){var e,t,n;return function(i,a){for(t=-1,e=i.length;e-t>1;)i[n=e+t>>1]<=a?t=n:e=n;return e}}();this.x=e,this.y=t,this.lastIndex=e.length-1;var i,a;this.x.length;this.interpolate=function(e){return e?(a=n(this.x,e),i=a-1,(e-this.x[i])*(this.y[a]-this.y[i])/(this.x[a]-this.x[i])+this.y[i]):0}},getInterpolateFunction:function(e){x.controller.spline||(x.controller.spline=x.params.loop?new x.controller.LinearSpline(x.slidesGrid,e.slidesGrid):new x.controller.LinearSpline(x.snapGrid,e.snapGrid))},setTranslate:function(e,n){function i(t){e=t.rtl&&"horizontal"===t.params.direction?-x.translate:x.translate,"slide"===x.params.controlBy&&(x.controller.getInterpolateFunction(t),r=-x.controller.spline.interpolate(-e)),r&&"container"!==x.params.controlBy||(a=(t.maxTranslate()-t.minTranslate())/(x.maxTranslate()-x.minTranslate()),r=(e-x.minTranslate())*a+t.minTranslate()),x.params.controlInverse&&(r=t.maxTranslate()-r),t.updateProgress(r),t.setWrapperTranslate(r,!1,x),t.updateActiveIndex()}var a,r,s=x.params.control;if(Array.isArray(s))for(var o=0;o<s.length;o++)s[o]!==n&&s[o]instanceof t&&i(s[o]);else s instanceof t&&n!==s&&i(s)},setTransition:function(e,n){function i(t){t.setWrapperTransition(e,x),0!==e&&(t.onTransitionStart(),t.wrapper.transitionEnd(function(){r&&(t.params.loop&&"slide"===x.params.controlBy&&t.fixLoop(),t.onTransitionEnd())}))}var a,r=x.params.control;if(Array.isArray(r))for(a=0;a<r.length;a++)r[a]!==n&&r[a]instanceof t&&i(r[a]);else r instanceof t&&n!==r&&i(r)}},x.hashnav={onHashCange:function(e,t){var n=document.location.hash.replace("#","");n!==x.slides.eq(x.activeIndex).attr("data-hash")&&x.slideTo(x.wrapper.children("."+x.params.slideClass+'[data-hash="'+n+'"]').index())},attachEvents:function(t){var n=t?"off":"on";e(window)[n]("hashchange",x.hashnav.onHashCange)},setHash:function(){if(x.hashnav.initialized&&x.params.hashnav)if(x.params.replaceState&&window.history&&window.history.replaceState)window.history.replaceState(null,null,"#"+x.slides.eq(x.activeIndex).attr("data-hash")||"");else{var e=x.slides.eq(x.activeIndex),t=e.attr("data-hash")||e.attr("data-history");document.location.hash=t||""}},init:function(){if(x.params.hashnav&&!x.params.history){x.hashnav.initialized=!0;var e=document.location.hash.replace("#","");if(e)for(var t=0,n=x.slides.length;t<n;t++){var i=x.slides.eq(t);if((i.attr("data-hash")||i.attr("data-history"))===e&&!i.hasClass(x.params.slideDuplicateClass)){var a=i.index();x.slideTo(a,0,x.params.runCallbacksOnInit,!0)}}x.params.hashnavWatchState&&x.hashnav.attachEvents()}},destroy:function(){x.params.hashnavWatchState&&x.hashnav.attachEvents(!0)}},x.history={init:function(){if(x.params.history){if(!window.history||!window.history.pushState)return x.params.history=!1,void(x.params.hashnav=!0);x.history.initialized=!0,this.paths=this.getPathValues(),(this.paths.key||this.paths.value)&&(this.scrollToSlide(0,this.paths.value,x.params.runCallbacksOnInit),x.params.replaceState||window.addEventListener("popstate",this.setHistoryPopState))}},setHistoryPopState:function(){x.history.paths=x.history.getPathValues(),x.history.scrollToSlide(x.params.speed,x.history.paths.value,!1)},getPathValues:function(){var e=window.location.pathname.slice(1).split("/"),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){if(x.history.initialized&&x.params.history){var n=x.slides.eq(t),i=this.slugify(n.attr("data-history"));window.location.pathname.includes(e)||(i=e+"/"+i),x.params.replaceState?window.history.replaceState(null,null,i):window.history.pushState(null,null,i)}},slugify:function(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,n){if(t)for(var i=0,a=x.slides.length;i<a;i++){var r=x.slides.eq(i);if(this.slugify(r.attr("data-history"))===t&&!r.hasClass(x.params.slideDuplicateClass)){var s=r.index();x.slideTo(s,e,n)}}else x.slideTo(0,e,n)}},x.disableKeyboardControl=function(){x.params.keyboardControl=!1,e(document).off("keydown",l)},x.enableKeyboardControl=function(){x.params.keyboardControl=!0,e(document).on("keydown",l)},x.mousewheel={event:!1,lastScrollTime:(new window.Date).getTime()},x.params.mousewheelControl&&(x.mousewheel.event=navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e="onwheel"in document;if(!e){var t=document.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")&&(e=document.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel"),x.disableMousewheelControl=function(){if(!x.mousewheel.event)return!1;var t=x.container;return"container"!==x.params.mousewheelEventsTarged&&(t=e(x.params.mousewheelEventsTarged)),t.off(x.mousewheel.event,u),x.params.mousewheelControl=!1,!0},x.enableMousewheelControl=function(){if(!x.mousewheel.event)return!1;var t=x.container;return"container"!==x.params.mousewheelEventsTarged&&(t=e(x.params.mousewheelEventsTarged)),t.on(x.mousewheel.event,u),x.params.mousewheelControl=!0,!0},x.parallax={setTranslate:function(){x.container.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){p(this,x.progress)}),x.slides.each(function(){var t=e(this);t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){p(this,Math.min(Math.max(t[0].progress,-1),1))})})},setTransition:function(t){void 0===t&&(t=x.params.speed),x.container.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){var n=e(this),i=parseInt(n.attr("data-swiper-parallax-duration"),10)||t;0===t&&(i=0),n.transition(i)})}},x.zoom={scale:1,currentScale:1,isScaling:!1,gesture:{slide:void 0,slideWidth:void 0,slideHeight:void 0,image:void 0,imageWrap:void 0,zoomMax:x.params.zoomMax},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0},getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,n=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,a=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(i-t,2)+Math.pow(a-n,2))},onGestureStart:function(t){var n=x.zoom;if(!x.support.gestures){if("touchstart"!==t.type||"touchstart"===t.type&&t.targetTouches.length<2)return;n.gesture.scaleStart=n.getDistanceBetweenTouches(t)}n.gesture.slide&&n.gesture.slide.length||(n.gesture.slide=e(this),0===n.gesture.slide.length&&(n.gesture.slide=x.slides.eq(x.activeIndex)),n.gesture.image=n.gesture.slide.find("img, svg, canvas"),n.gesture.imageWrap=n.gesture.image.parent("."+x.params.zoomContainerClass),n.gesture.zoomMax=n.gesture.imageWrap.attr("data-swiper-zoom")||x.params.zoomMax,0!==n.gesture.imageWrap.length)?(n.gesture.image.transition(0),n.isScaling=!0):n.gesture.image=void 0},onGestureChange:function(e){var t=x.zoom;if(!x.support.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;t.gesture.scaleMove=t.getDistanceBetweenTouches(e)}t.gesture.image&&0!==t.gesture.image.length&&(x.support.gestures?t.scale=e.scale*t.currentScale:t.scale=t.gesture.scaleMove/t.gesture.scaleStart*t.currentScale,t.scale>t.gesture.zoomMax&&(t.scale=t.gesture.zoomMax-1+Math.pow(t.scale-t.gesture.zoomMax+1,.5)),t.scale<x.params.zoomMin&&(t.scale=x.params.zoomMin+1-Math.pow(x.params.zoomMin-t.scale+1,.5)),t.gesture.image.transform("translate3d(0,0,0) scale("+t.scale+")"))},onGestureEnd:function(e){var t=x.zoom;!x.support.gestures&&("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2)||t.gesture.image&&0!==t.gesture.image.length&&(t.scale=Math.max(Math.min(t.scale,t.gesture.zoomMax),x.params.zoomMin),t.gesture.image.transition(x.params.speed).transform("translate3d(0,0,0) scale("+t.scale+")"),t.currentScale=t.scale,t.isScaling=!1,1===t.scale&&(t.gesture.slide=void 0))},onTouchStart:function(e,t){var n=e.zoom;n.gesture.image&&0!==n.gesture.image.length&&(n.image.isTouched||("android"===e.device.os&&t.preventDefault(),n.image.isTouched=!0,n.image.touchesStart.x="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,n.image.touchesStart.y="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY))},onTouchMove:function(e){var t=x.zoom;if(t.gesture.image&&0!==t.gesture.image.length&&(x.allowClick=!1,t.image.isTouched&&t.gesture.slide)){t.image.isMoved||(t.image.width=t.gesture.image[0].offsetWidth,t.image.height=t.gesture.image[0].offsetHeight,t.image.startX=x.getTranslate(t.gesture.imageWrap[0],"x")||0,t.image.startY=x.getTranslate(t.gesture.imageWrap[0],"y")||0,t.gesture.slideWidth=t.gesture.slide[0].offsetWidth,t.gesture.slideHeight=t.gesture.slide[0].offsetHeight,t.gesture.imageWrap.transition(0),x.rtl&&(t.image.startX=-t.image.startX),x.rtl&&(t.image.startY=-t.image.startY));var n=t.image.width*t.scale,i=t.image.height*t.scale;if(!(n<t.gesture.slideWidth&&i<t.gesture.slideHeight)){if(t.image.minX=Math.min(t.gesture.slideWidth/2-n/2,0),t.image.maxX=-t.image.minX,t.image.minY=Math.min(t.gesture.slideHeight/2-i/2,0),t.image.maxY=-t.image.minY,t.image.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,t.image.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!t.image.isMoved&&!t.isScaling){if(x.isHorizontal()&&Math.floor(t.image.minX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x<t.image.touchesStart.x||Math.floor(t.image.maxX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x>t.image.touchesStart.x)return void(t.image.isTouched=!1);if(!x.isHorizontal()&&Math.floor(t.image.minY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y<t.image.touchesStart.y||Math.floor(t.image.maxY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y>t.image.touchesStart.y)return void(t.image.isTouched=!1)}e.preventDefault(),e.stopPropagation(),t.image.isMoved=!0,t.image.currentX=t.image.touchesCurrent.x-t.image.touchesStart.x+t.image.startX,t.image.currentY=t.image.touchesCurrent.y-t.image.touchesStart.y+t.image.startY,t.image.currentX<t.image.minX&&(t.image.currentX=t.image.minX+1-Math.pow(t.image.minX-t.image.currentX+1,.8)),t.image.currentX>t.image.maxX&&(t.image.currentX=t.image.maxX-1+Math.pow(t.image.currentX-t.image.maxX+1,.8)),t.image.currentY<t.image.minY&&(t.image.currentY=t.image.minY+1-Math.pow(t.image.minY-t.image.currentY+1,.8)),t.image.currentY>t.image.maxY&&(t.image.currentY=t.image.maxY-1+Math.pow(t.image.currentY-t.image.maxY+1,.8)),t.velocity.prevPositionX||(t.velocity.prevPositionX=t.image.touchesCurrent.x),t.velocity.prevPositionY||(t.velocity.prevPositionY=t.image.touchesCurrent.y),t.velocity.prevTime||(t.velocity.prevTime=Date.now()),t.velocity.x=(t.image.touchesCurrent.x-t.velocity.prevPositionX)/(Date.now()-t.velocity.prevTime)/2,t.velocity.y=(t.image.touchesCurrent.y-t.velocity.prevPositionY)/(Date.now()-t.velocity.prevTime)/2,Math.abs(t.image.touchesCurrent.x-t.velocity.prevPositionX)<2&&(t.velocity.x=0),Math.abs(t.image.touchesCurrent.y-t.velocity.prevPositionY)<2&&(t.velocity.y=0),t.velocity.prevPositionX=t.image.touchesCurrent.x,t.velocity.prevPositionY=t.image.touchesCurrent.y,t.velocity.prevTime=Date.now(),t.gesture.imageWrap.transform("translate3d("+t.image.currentX+"px, "+t.image.currentY+"px,0)")}}},onTouchEnd:function(e,t){var n=e.zoom;if(n.gesture.image&&0!==n.gesture.image.length){if(!n.image.isTouched||!n.image.isMoved)return n.image.isTouched=!1,void(n.image.isMoved=!1);n.image.isTouched=!1,n.image.isMoved=!1;var i=300,a=300,r=n.velocity.x*i,s=n.image.currentX+r,o=n.velocity.y*a,l=n.image.currentY+o;0!==n.velocity.x&&(i=Math.abs((s-n.image.currentX)/n.velocity.x)),0!==n.velocity.y&&(a=Math.abs((l-n.image.currentY)/n.velocity.y));var c=Math.max(i,a);n.image.currentX=s,n.image.currentY=l;var u=n.image.width*n.scale,p=n.image.height*n.scale;n.image.minX=Math.min(n.gesture.slideWidth/2-u/2,0),n.image.maxX=-n.image.minX,n.image.minY=Math.min(n.gesture.slideHeight/2-p/2,0),n.image.maxY=-n.image.minY,n.image.currentX=Math.max(Math.min(n.image.currentX,n.image.maxX),n.image.minX),n.image.currentY=Math.max(Math.min(n.image.currentY,n.image.maxY),n.image.minY),n.gesture.imageWrap.transition(c).transform("translate3d("+n.image.currentX+"px, "+n.image.currentY+"px,0)")}},onTransitionEnd:function(e){var t=e.zoom;t.gesture.slide&&e.previousIndex!==e.activeIndex&&(t.gesture.image.transform("translate3d(0,0,0) scale(1)"),t.gesture.imageWrap.transform("translate3d(0,0,0)"),t.gesture.slide=t.gesture.image=t.gesture.imageWrap=void 0,t.scale=t.currentScale=1)},toggleZoom:function(t,n){var i=t.zoom;if(i.gesture.slide||(i.gesture.slide=t.clickedSlide?e(t.clickedSlide):t.slides.eq(t.activeIndex),i.gesture.image=i.gesture.slide.find("img, svg, canvas"),i.gesture.imageWrap=i.gesture.image.parent("."+t.params.zoomContainerClass)),i.gesture.image&&0!==i.gesture.image.length){var a,r,s,o,l,c,u,p,d,h,f,m,g,v,y,w;void 0===i.image.touchesStart.x&&n?(a="touchend"===n.type?n.changedTouches[0].pageX:n.pageX,r="touchend"===n.type?n.changedTouches[0].pageY:n.pageY):(a=i.image.touchesStart.x,r=i.image.touchesStart.y),i.scale&&1!==i.scale?(i.scale=i.currentScale=1,i.gesture.imageWrap.transition(300).transform("translate3d(0,0,0)"),i.gesture.image.transition(300).transform("translate3d(0,0,0) scale(1)"),i.gesture.slide=void 0):(i.scale=i.currentScale=i.gesture.imageWrap.attr("data-swiper-zoom")||t.params.zoomMax,n?(y=i.gesture.slide[0].offsetWidth,w=i.gesture.slide[0].offsetHeight,s=i.gesture.slide.offset().left+y/2-a,o=i.gesture.slide.offset().top+w/2-r,u=i.gesture.image[0].offsetWidth,p=i.gesture.image[0].offsetHeight,d=u*i.scale,h=p*i.scale,g=-(f=Math.min(y/2-d/2,0)),v=-(m=Math.min(w/2-h/2,0)),l=s*i.scale,c=o*i.scale,l<f&&(l=f),l>g&&(l=g),c<m&&(c=m),c>v&&(c=v)):(l=0,c=0),i.gesture.imageWrap.transition(300).transform("translate3d("+l+"px, "+c+"px,0)"),i.gesture.image.transition(300).transform("translate3d(0,0,0) scale("+i.scale+")"))}},attachEvents:function(t){var n=t?"off":"on";if(x.params.zoom){x.slides;var i=!("touchstart"!==x.touchEvents.start||!x.support.passiveListener||!x.params.passiveListeners)&&{passive:!0,capture:!1};x.support.gestures?(x.slides[n]("gesturestart",x.zoom.onGestureStart,i),x.slides[n]("gesturechange",x.zoom.onGestureChange,i),x.slides[n]("gestureend",x.zoom.onGestureEnd,i)):"touchstart"===x.touchEvents.start&&(x.slides[n](x.touchEvents.start,x.zoom.onGestureStart,i),x.slides[n](x.touchEvents.move,x.zoom.onGestureChange,i),x.slides[n](x.touchEvents.end,x.zoom.onGestureEnd,i)),x[n]("touchStart",x.zoom.onTouchStart),x.slides.each(function(t,i){e(i).find("."+x.params.zoomContainerClass).length>0&&e(i)[n](x.touchEvents.move,x.zoom.onTouchMove)}),x[n]("touchEnd",x.zoom.onTouchEnd),x[n]("transitionEnd",x.zoom.onTransitionEnd),x.params.zoomToggle&&x.on("doubleTap",x.zoom.toggleZoom)}},init:function(){x.zoom.attachEvents()},destroy:function(){x.zoom.attachEvents(!0)}},x._plugins=[];for(var j in x.plugins){var O=x.plugins[j](x,x.params[j]);O&&x._plugins.push(O)}return x.callPlugins=function(e){for(var t=0;t<x._plugins.length;t++)e in x._plugins[t]&&x._plugins[t][e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},x.emitterEventListeners={},x.emit=function(e){x.params[e]&&x.params[e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);var t;if(x.emitterEventListeners[e])for(t=0;t<x.emitterEventListeners[e].length;t++)x.emitterEventListeners[e][t](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);x.callPlugins&&x.callPlugins(e,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},x.on=function(e,t){return e=d(e),x.emitterEventListeners[e]||(x.emitterEventListeners[e]=[]),x.emitterEventListeners[e].push(t),x},x.off=function(e,t){var n;if(e=d(e),void 0===t)return x.emitterEventListeners[e]=[],x;if(x.emitterEventListeners[e]&&0!==x.emitterEventListeners[e].length){for(n=0;n<x.emitterEventListeners[e].length;n++)x.emitterEventListeners[e][n]===t&&x.emitterEventListeners[e].splice(n,1);return x}},x.once=function(e,t){e=d(e);var n=function(){t(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]),x.off(e,n)};return x.on(e,n),x},x.a11y={makeFocusable:function(e){return e.attr("tabIndex","0"),e},addRole:function(e,t){return e.attr("role",t),e},addLabel:function(e,t){return e.attr("aria-label",t),e},disable:function(e){return e.attr("aria-disabled",!0),e},enable:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(t){13===t.keyCode&&(e(t.target).is(x.params.nextButton)?(x.onClickNext(t),x.isEnd?x.a11y.notify(x.params.lastSlideMessage):x.a11y.notify(x.params.nextSlideMessage)):e(t.target).is(x.params.prevButton)&&(x.onClickPrev(t),x.isBeginning?x.a11y.notify(x.params.firstSlideMessage):x.a11y.notify(x.params.prevSlideMessage)),e(t.target).is("."+x.params.bulletClass)&&e(t.target)[0].click())},liveRegion:e('<span class="'+x.params.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>'),notify:function(e){var t=x.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},init:function(){x.params.nextButton&&x.nextButton&&x.nextButton.length>0&&(x.a11y.makeFocusable(x.nextButton),x.a11y.addRole(x.nextButton,"button"),x.a11y.addLabel(x.nextButton,x.params.nextSlideMessage)),x.params.prevButton&&x.prevButton&&x.prevButton.length>0&&(x.a11y.makeFocusable(x.prevButton),x.a11y.addRole(x.prevButton,"button"),x.a11y.addLabel(x.prevButton,x.params.prevSlideMessage)),e(x.container).append(x.a11y.liveRegion)},initPagination:function(){x.params.pagination&&x.params.paginationClickable&&x.bullets&&x.bullets.length&&x.bullets.each(function(){var t=e(this);x.a11y.makeFocusable(t),x.a11y.addRole(t,"button"),x.a11y.addLabel(t,x.params.paginationBulletMessage.replace(/{{index}}/,t.index()+1))})},destroy:function(){x.a11y.liveRegion&&x.a11y.liveRegion.length>0&&x.a11y.liveRegion.remove()}},x.init=function(){x.params.loop&&x.createLoop(),x.updateContainerSize(),x.updateSlidesSize(),x.updatePagination(),x.params.scrollbar&&x.scrollbar&&(x.scrollbar.set(),x.params.scrollbarDraggable&&x.scrollbar.enableDraggable()),"slide"!==x.params.effect&&x.effects[x.params.effect]&&(x.params.loop||x.updateProgress(),x.effects[x.params.effect].setTranslate()),x.params.loop?x.slideTo(x.params.initialSlide+x.loopedSlides,0,x.params.runCallbacksOnInit):(x.slideTo(x.params.initialSlide,0,x.params.runCallbacksOnInit),0===x.params.initialSlide&&(x.parallax&&x.params.parallax&&x.parallax.setTranslate(),x.lazy&&x.params.lazyLoading&&(x.lazy.load(),x.lazy.initialImageLoaded=!0))),x.attachEvents(),x.params.observer&&x.support.observer&&x.initObservers(),x.params.preloadImages&&!x.params.lazyLoading&&x.preloadImages(),x.params.zoom&&x.zoom&&x.zoom.init(),x.params.autoplay&&x.startAutoplay(),x.params.keyboardControl&&x.enableKeyboardControl&&x.enableKeyboardControl(),x.params.mousewheelControl&&x.enableMousewheelControl&&x.enableMousewheelControl(),x.params.hashnavReplaceState&&(x.params.replaceState=x.params.hashnavReplaceState),x.params.history&&x.history&&x.history.init(),x.params.hashnav&&x.hashnav&&x.hashnav.init(),x.params.a11y&&x.a11y&&x.a11y.init(),x.emit("onInit",x)},x.cleanupStyles=function(){x.container.removeClass(x.classNames.join(" ")).removeAttr("style"),x.wrapper.removeAttr("style"),x.slides&&x.slides.length&&x.slides.removeClass([x.params.slideVisibleClass,x.params.slideActiveClass,x.params.slideNextClass,x.params.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-column").removeAttr("data-swiper-row"),x.paginationContainer&&x.paginationContainer.length&&x.paginationContainer.removeClass(x.params.paginationHiddenClass),x.bullets&&x.bullets.length&&x.bullets.removeClass(x.params.bulletActiveClass),x.params.prevButton&&e(x.params.prevButton).removeClass(x.params.buttonDisabledClass),x.params.nextButton&&e(x.params.nextButton).removeClass(x.params.buttonDisabledClass),x.params.scrollbar&&x.scrollbar&&(x.scrollbar.track&&x.scrollbar.track.length&&x.scrollbar.track.removeAttr("style"),x.scrollbar.drag&&x.scrollbar.drag.length&&x.scrollbar.drag.removeAttr("style"))},x.destroy=function(e,t){x.detachEvents(),x.stopAutoplay(),x.params.scrollbar&&x.scrollbar&&x.params.scrollbarDraggable&&x.scrollbar.disableDraggable(),x.params.loop&&x.destroyLoop(),t&&x.cleanupStyles(),x.disconnectObservers(),x.params.zoom&&x.zoom&&x.zoom.destroy(),x.params.keyboardControl&&x.disableKeyboardControl&&x.disableKeyboardControl(),x.params.mousewheelControl&&x.disableMousewheelControl&&x.disableMousewheelControl(),x.params.a11y&&x.a11y&&x.a11y.destroy(),x.params.history&&!x.params.replaceState&&window.removeEventListener("popstate",x.history.setHistoryPopState),x.params.hashnav&&x.hashnav&&x.hashnav.destroy(),x.emit("onDestroy"),!1!==e&&(x=null)},x.init(),x}};t.prototype={isSafari:function(){var e=window.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent),isArray:function(e){return"[object Array]"===Object.prototype.toString.apply(e)},browser:{ie:window.navigator.pointerEnabled||window.navigator.msPointerEnabled,ieTouch:window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>1||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>1,lteIE9:function(){var e=document.createElement("div");return e.innerHTML="\x3c!--[if lte IE 9]><i></i><![endif]--\x3e",1===e.getElementsByTagName("i").length}()},device:function(){var e=window.navigator.userAgent,t=e.match(/(Android);?[\s\/]+([\d.]+)?/),n=e.match(/(iPad).*OS\s([\d_]+)/),i=e.match(/(iPod)(.*OS\s([\d_]+))?/),a=!n&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);return{ios:n||a||i,android:t}}(),support:{touch:window.Modernizr&&!0===Modernizr.touch||function(){return!!("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch)}(),transforms3d:window.Modernizr&&!0===Modernizr.csstransforms3d||function(){var e=document.createElement("div").style;return"webkitPerspective"in e||"MozPerspective"in e||"OPerspective"in e||"MsPerspective"in e||"perspective"in e}(),flexbox:function(){for(var e=document.createElement("div").style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),n=0;n<t.length;n++)if(t[n]in e)return!0}(),observer:function(){return"MutationObserver"in window||"WebkitMutationObserver"in window}(),passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:function(){return"ongesturestart"in window}()},plugins:{}};for(var n=["jQuery","Zepto","Dom7"],i=0;i<n.length;i++)window[n[i]]&&function(e){e.fn.swiper=function(n){var i;return e(this).each(function(){var e=new t(this,n);i||(i=e)}),i}}(window[n[i]]);var a;(a="undefined"==typeof Dom7?window.Dom7||window.Zepto||window.jQuery:Dom7)&&("transitionEnd"in a.fn||(a.fn.transitionEnd=function(e){function t(r){if(r.target===this)for(e.call(this,r),n=0;n<i.length;n++)a.off(i[n],t)}var n,i=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],a=this;if(e)for(n=0;n<i.length;n++)a.on(i[n],t);return this}),"transform"in a.fn||(a.fn.transform=function(e){for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransform=n.MsTransform=n.msTransform=n.MozTransform=n.OTransform=n.transform=e}return this}),"transition"in a.fn||(a.fn.transition=function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransitionDuration=n.MsTransitionDuration=n.msTransitionDuration=n.MozTransitionDuration=n.OTransitionDuration=n.transitionDuration=e}return this}),"outerWidth"in a.fn||(a.fn.outerWidth=function(e){return this.length>0?e?this[0].offsetWidth+parseFloat(this.css("margin-right"))+parseFloat(this.css("margin-left")):this[0].offsetWidth:null})),window.Swiper=t}(),"undefined"!=typeof module?module.exports=window.Swiper:"function"==typeof define&&define.amd&&define([],function(){"use strict";return window.Swiper}),function(e,t,n,i){"use strict";function a(e,t,n){return setTimeout(c(e,n),t)}function r(e,t,n){return!!Array.isArray(e)&&(s(e,n[t],n),!0)}function s(e,t,n){var a;if(e)if(e.forEach)e.forEach(t,n);else if(e.length!==i)for(a=0;a<e.length;)t.call(n,e[a],a,e),a++;else for(a in e)e.hasOwnProperty(a)&&t.call(n,e[a],a,e)}function o(t,n,i){var a="DEPRECATED METHOD: "+n+"\n"+i+" AT \n";return function(){var n=new Error("get-stack-trace"),i=n&&n.stack?n.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",r=e.console&&(e.console.warn||e.console.log);return r&&r.call(e.console,a,i),t.apply(this,arguments)}}function l(e,t,n){var i,a=t.prototype;(i=e.prototype=Object.create(a)).constructor=e,i._super=a,n&&ue(i,n)}function c(e,t){return function(){return e.apply(t,arguments)}}function u(e,t){return typeof e==he?e.apply(t?t[0]||i:i,t):e}function p(e,t){return e===i?t:e}function d(e,t,n){s(g(t),function(t){e.addEventListener(t,n,!1)})}function h(e,t,n){s(g(t),function(t){e.removeEventListener(t,n,!1)})}function f(e,t){for(;e;){if(e==t)return!0;e=e.parentNode}return!1}function m(e,t){return e.indexOf(t)>-1}function g(e){return e.trim().split(/\s+/g)}function v(e,t,n){if(e.indexOf&&!n)return e.indexOf(t);for(var i=0;i<e.length;){if(n&&e[i][n]==t||!n&&e[i]===t)return i;i++}return-1}function y(e){return Array.prototype.slice.call(e,0)}function w(e,t,n){for(var i=[],a=[],r=0;r<e.length;){var s=t?e[r][t]:e[r];v(a,s)<0&&i.push(e[r]),a[r]=s,r++}return n&&(i=t?i.sort(function(e,n){return e[t]>n[t]}):i.sort()),i}function x(e,t){for(var n,a,r=t[0].toUpperCase()+t.slice(1),s=0;s<pe.length;){if(n=pe[s],(a=n?n+r:t)in e)return a;s++}return i}function b(){return we++}function C(t){var n=t.ownerDocument||t;return n.defaultView||n.parentWindow||e}function T(e,t){var n=this;this.manager=e,this.callback=t,this.element=e.element,this.target=e.options.inputTarget,this.domHandler=function(t){u(e.options.enable,[e])&&n.handler(t)},this.init()}function S(e){var t=e.options.inputClass;return new(t||(Ce?O:Te?q:be?W:j))(e,k)}function k(e,t,n){var i=n.pointers.length,a=n.changedPointers.length,r=t&ke&&i-a==0,s=t&(Me|De)&&i-a==0;n.isFirst=!!r,n.isFinal=!!s,r&&(e.session={}),n.eventType=t,E(e,n),e.emit("hammer.input",n),e.recognize(n),e.session.prevInput=n}function E(e,t){var n=e.session,i=t.pointers,a=i.length;n.firstInput||(n.firstInput=L(t)),a>1&&!n.firstMultiple?n.firstMultiple=L(t):1===a&&(n.firstMultiple=!1);var r=n.firstInput,s=n.firstMultiple,o=s?s.center:r.center,l=t.center=z(i);t.timeStamp=ge(),t.deltaTime=t.timeStamp-r.timeStamp,t.angle=A(o,l),t.distance=F(o,l),M(n,t),t.offsetDirection=I(t.deltaX,t.deltaY);var c=P(t.deltaTime,t.deltaX,t.deltaY);t.overallVelocityX=c.x,t.overallVelocityY=c.y,t.overallVelocity=me(c.x)>me(c.y)?c.x:c.y,t.scale=s?H(s.pointers,i):1,t.rotation=s?N(s.pointers,i):0,t.maxPointers=n.prevInput?t.pointers.length>n.prevInput.maxPointers?t.pointers.length:n.prevInput.maxPointers:t.pointers.length,D(n,t);var u=e.element;f(t.srcEvent.target,u)&&(u=t.srcEvent.target),t.target=u}function M(e,t){var n=t.center,i=e.offsetDelta||{},a=e.prevDelta||{},r=e.prevInput||{};t.eventType!==ke&&r.eventType!==Me||(a=e.prevDelta={x:r.deltaX||0,y:r.deltaY||0},i=e.offsetDelta={x:n.x,y:n.y}),t.deltaX=a.x+(n.x-i.x),t.deltaY=a.y+(n.y-i.y)}function D(e,t){var n,a,r,s,o=e.lastInterval||t,l=t.timeStamp-o.timeStamp;if(t.eventType!=De&&(l>Se||o.velocity===i)){var c=t.deltaX-o.deltaX,u=t.deltaY-o.deltaY,p=P(l,c,u);a=p.x,r=p.y,n=me(p.x)>me(p.y)?p.x:p.y,s=I(c,u),e.lastInterval=t}else n=o.velocity,a=o.velocityX,r=o.velocityY,s=o.direction;t.velocity=n,t.velocityX=a,t.velocityY=r,t.direction=s}function L(e){for(var t=[],n=0;n<e.pointers.length;)t[n]={clientX:fe(e.pointers[n].clientX),clientY:fe(e.pointers[n].clientY)},n++;return{timeStamp:ge(),pointers:t,center:z(t),deltaX:e.deltaX,deltaY:e.deltaY}}function z(e){var t=e.length;if(1===t)return{x:fe(e[0].clientX),y:fe(e[0].clientY)};for(var n=0,i=0,a=0;a<t;)n+=e[a].clientX,i+=e[a].clientY,a++;return{x:fe(n/t),y:fe(i/t)}}function P(e,t,n){return{x:t/e||0,y:n/e||0}}function I(e,t){return e===t?Le:me(e)>=me(t)?e<0?ze:Pe:t<0?Ie:Fe}function F(e,t,n){n||(n=je);var i=t[n[0]]-e[n[0]],a=t[n[1]]-e[n[1]];return Math.sqrt(i*i+a*a)}function A(e,t,n){n||(n=je);var i=t[n[0]]-e[n[0]],a=t[n[1]]-e[n[1]];return 180*Math.atan2(a,i)/Math.PI}function N(e,t){return A(t[1],t[0],Oe)+A(e[1],e[0],Oe)}function H(e,t){return F(t[0],t[1],Oe)/F(e[0],e[1],Oe)}function j(){this.evEl=Re,this.evWin=qe,this.pressed=!1,T.apply(this,arguments)}function O(){this.evEl=Ye,this.evWin=Ge,T.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function B(){this.evTarget=_e,this.evWin=Ve,this.started=!1,T.apply(this,arguments)}function R(e,t){var n=y(e.touches),i=y(e.changedTouches);return t&(Me|De)&&(n=w(n.concat(i),"identifier",!0)),[n,i]}function q(){this.evTarget=Ue,this.targetIds={},T.apply(this,arguments)}function X(e,t){var n=y(e.touches),i=this.targetIds;if(t&(ke|Ee)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var a,r,s=y(e.changedTouches),o=[],l=this.target;if(r=n.filter(function(e){return f(e.target,l)}),t===ke)for(a=0;a<r.length;)i[r[a].identifier]=!0,a++;for(a=0;a<s.length;)i[s[a].identifier]&&o.push(s[a]),t&(Me|De)&&delete i[s[a].identifier],a++;return o.length?[w(r.concat(o),"identifier",!0),o]:void 0}function W(){T.apply(this,arguments);var e=c(this.handler,this);this.touch=new q(this.manager,e),this.mouse=new j(this.manager,e),this.primaryTouch=null,this.lastTouches=[]}function Y(e,t){e&ke?(this.primaryTouch=t.changedPointers[0].identifier,G.call(this,t)):e&(Me|De)&&G.call(this,t)}function G(e){var t=e.changedPointers[0];if(t.identifier===this.primaryTouch){var n={x:t.clientX,y:t.clientY};this.lastTouches.push(n);var i=this.lastTouches,a=function(){var e=i.indexOf(n);e>-1&&i.splice(e,1)};setTimeout(a,Ke)}}function $(e){for(var t=e.srcEvent.clientX,n=e.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var a=this.lastTouches[i],r=Math.abs(t-a.x),s=Math.abs(n-a.y);if(r<=Ze&&s<=Ze)return!0}return!1}function _(e,t){this.manager=e,this.set(t)}function V(e){if(m(e,it))return it;var t=m(e,at),n=m(e,rt);return t&&n?it:t||n?t?at:rt:m(e,nt)?nt:tt}function Q(e){this.options=ue({},this.defaults,e||{}),this.id=b(),this.manager=null,this.options.enable=p(this.options.enable,!0),this.state=ot,this.simultaneous={},this.requireFail=[]}function U(e){return e&dt?"cancel":e&ut?"end":e&ct?"move":e&lt?"start":""}function K(e){return e==Fe?"down":e==Ie?"up":e==ze?"left":e==Pe?"right":""}function Z(e,t){var n=t.manager;return n?n.get(e):e}function J(){Q.apply(this,arguments)}function ee(){J.apply(this,arguments),this.pX=null,this.pY=null}function te(){J.apply(this,arguments)}function ne(){Q.apply(this,arguments),this._timer=null,this._input=null}function ie(){J.apply(this,arguments)}function ae(){J.apply(this,arguments)}function re(){Q.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function se(e,t){return t=t||{},t.recognizers=p(t.recognizers,se.defaults.preset),new oe(e,t)}function oe(e,t){this.options=ue({},se.defaults,t||{}),this.options.inputTarget=this.options.inputTarget||e,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=e,this.input=S(this),this.touchAction=new _(this,this.options.touchAction),le(this,!0),s(this.options.recognizers,function(e){var t=this.add(new e[0](e[1]));e[2]&&t.recognizeWith(e[2]),e[3]&&t.requireFailure(e[3])},this)}function le(e,t){var n=e.element;if(n.style){var i;s(e.options.cssProps,function(a,r){i=x(n.style,r),t?(e.oldCssProps[i]=n.style[i],n.style[i]=a):n.style[i]=e.oldCssProps[i]||""}),t||(e.oldCssProps={})}}function ce(e,n){var i=t.createEvent("Event");i.initEvent(e,!0,!0),i.gesture=n,n.target.dispatchEvent(i)}var ue,pe=["","webkit","Moz","MS","ms","o"],de=t.createElement("div"),he="function",fe=Math.round,me=Math.abs,ge=Date.now;ue="function"!=typeof Object.assign?function(e){if(e===i||null===e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var a=arguments[n];if(a!==i&&null!==a)for(var r in a)a.hasOwnProperty(r)&&(t[r]=a[r])}return t}:Object.assign;var ve=o(function(e,t,n){for(var a=Object.keys(t),r=0;r<a.length;)(!n||n&&e[a[r]]===i)&&(e[a[r]]=t[a[r]]),r++;return e},"extend","Use `assign`."),ye=o(function(e,t){return ve(e,t,!0)},"merge","Use `assign`."),we=1,xe=/mobile|tablet|ip(ad|hone|od)|android/i,be="ontouchstart"in e,Ce=x(e,"PointerEvent")!==i,Te=be&&xe.test(navigator.userAgent),Se=25,ke=1,Ee=2,Me=4,De=8,Le=1,ze=2,Pe=4,Ie=8,Fe=16,Ae=ze|Pe,Ne=Ie|Fe,He=Ae|Ne,je=["x","y"],Oe=["clientX","clientY"];T.prototype={handler:function(){},init:function(){this.evEl&&d(this.element,this.evEl,this.domHandler),this.evTarget&&d(this.target,this.evTarget,this.domHandler),this.evWin&&d(C(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&h(this.element,this.evEl,this.domHandler),this.evTarget&&h(this.target,this.evTarget,this.domHandler),this.evWin&&h(C(this.element),this.evWin,this.domHandler)}};var Be={mousedown:ke,mousemove:Ee,mouseup:Me},Re="mousedown",qe="mousemove mouseup";l(j,T,{handler:function(e){var t=Be[e.type];t&ke&&0===e.button&&(this.pressed=!0),t&Ee&&1!==e.which&&(t=Me),this.pressed&&(t&Me&&(this.pressed=!1),this.callback(this.manager,t,{pointers:[e],changedPointers:[e],pointerType:"mouse",srcEvent:e}))}});var Xe={pointerdown:ke,pointermove:Ee,pointerup:Me,pointercancel:De,pointerout:De},We={2:"touch",3:"pen",4:"mouse",5:"kinect"},Ye="pointerdown",Ge="pointermove pointerup pointercancel";e.MSPointerEvent&&!e.PointerEvent&&(Ye="MSPointerDown",Ge="MSPointerMove MSPointerUp MSPointerCancel"),l(O,T,{handler:function(e){var t=this.store,n=!1,i=e.type.toLowerCase().replace("ms",""),a=Xe[i],r=We[e.pointerType]||e.pointerType,s="touch"==r,o=v(t,e.pointerId,"pointerId");a&ke&&(0===e.button||s)?o<0&&(t.push(e),o=t.length-1):a&(Me|De)&&(n=!0),o<0||(t[o]=e,this.callback(this.manager,a,{pointers:t,changedPointers:[e],pointerType:r,srcEvent:e}),n&&t.splice(o,1))}});var $e={touchstart:ke,touchmove:Ee,touchend:Me,touchcancel:De},_e="touchstart",Ve="touchstart touchmove touchend touchcancel";l(B,T,{handler:function(e){var t=$e[e.type];if(t===ke&&(this.started=!0),this.started){var n=R.call(this,e,t);t&(Me|De)&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:e})}}});var Qe={touchstart:ke,touchmove:Ee,touchend:Me,touchcancel:De},Ue="touchstart touchmove touchend touchcancel";l(q,T,{handler:function(e){var t=Qe[e.type],n=X.call(this,e,t);n&&this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:e})}});var Ke=2500,Ze=25;l(W,T,{handler:function(e,t,n){var i="touch"==n.pointerType,a="mouse"==n.pointerType;if(!(a&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(i)Y.call(this,t,n);else if(a&&$.call(this,n))return;this.callback(e,t,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Je=x(de.style,"touchAction"),et=Je!==i,tt="auto",nt="manipulation",it="none",at="pan-x",rt="pan-y",st=function(){if(!et)return!1;var t={},n=e.CSS&&e.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(i){t[i]=!n||e.CSS.supports("touch-action",i)}),t}();_.prototype={set:function(e){"compute"==e&&(e=this.compute()),et&&this.manager.element.style&&st[e]&&(this.manager.element.style[Je]=e),this.actions=e.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var e=[];return s(this.manager.recognizers,function(t){u(t.options.enable,[t])&&(e=e.concat(t.getTouchAction()))}),V(e.join(" "))},preventDefaults:function(e){var t=e.srcEvent,n=e.offsetDirection;if(this.manager.session.prevented)t.preventDefault();else{var i=this.actions,a=m(i,it)&&!st[it],r=m(i,rt)&&!st[rt],s=m(i,at)&&!st[at];if(a){var o=1===e.pointers.length,l=e.distance<2,c=e.deltaTime<250;if(o&&l&&c)return}if(!s||!r)return a||r&&n&Ae||s&&n&Ne?this.preventSrc(t):void 0}},preventSrc:function(e){this.manager.session.prevented=!0,e.preventDefault()}};var ot=1,lt=2,ct=4,ut=8,pt=ut,dt=16;Q.prototype={defaults:{},set:function(e){return ue(this.options,e),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(e){if(r(e,"recognizeWith",this))return this;var t=this.simultaneous;return e=Z(e,this),t[e.id]||(t[e.id]=e,e.recognizeWith(this)),this},dropRecognizeWith:function(e){return r(e,"dropRecognizeWith",this)?this:(e=Z(e,this),delete this.simultaneous[e.id],this)},requireFailure:function(e){if(r(e,"requireFailure",this))return this;var t=this.requireFail;return e=Z(e,this),-1===v(t,e)&&(t.push(e),e.requireFailure(this)),this},dropRequireFailure:function(e){if(r(e,"dropRequireFailure",this))return this;e=Z(e,this);var t=v(this.requireFail,e);return t>-1&&this.requireFail.splice(t,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(e){return!!this.simultaneous[e.id]},emit:function(e){function t(t){n.manager.emit(t,e)}var n=this,i=this.state;i<ut&&t(n.options.event+U(i)),t(n.options.event),e.additionalEvent&&t(e.additionalEvent),i>=ut&&t(n.options.event+U(i))},tryEmit:function(e){if(this.canEmit())return this.emit(e);this.state=32},canEmit:function(){for(var e=0;e<this.requireFail.length;){if(!(this.requireFail[e].state&(32|ot)))return!1;e++}return!0},recognize:function(e){var t=ue({},e);if(!u(this.options.enable,[this,t]))return this.reset(),void(this.state=32);this.state&(pt|dt|32)&&(this.state=ot),this.state=this.process(t),this.state&(lt|ct|ut|dt)&&this.tryEmit(t)},process:function(e){},getTouchAction:function(){},reset:function(){}},l(J,Q,{defaults:{pointers:1},attrTest:function(e){var t=this.options.pointers;return 0===t||e.pointers.length===t},process:function(e){var t=this.state,n=e.eventType,i=t&(lt|ct),a=this.attrTest(e);return i&&(n&De||!a)?t|dt:i||a?n&Me?t|ut:t&lt?t|ct:lt:32}}),l(ee,J,{defaults:{event:"pan",threshold:10,pointers:1,direction:He},getTouchAction:function(){var e=this.options.direction,t=[];return e&Ae&&t.push(rt),e&Ne&&t.push(at),t},directionTest:function(e){var t=this.options,n=!0,i=e.distance,a=e.direction,r=e.deltaX,s=e.deltaY;return a&t.direction||(t.direction&Ae?(a=0===r?Le:r<0?ze:Pe,n=r!=this.pX,i=Math.abs(e.deltaX)):(a=0===s?Le:s<0?Ie:Fe,n=s!=this.pY,i=Math.abs(e.deltaY))),e.direction=a,n&&i>t.threshold&&a&t.direction},attrTest:function(e){return J.prototype.attrTest.call(this,e)&&(this.state&lt||!(this.state&lt)&&this.directionTest(e))},emit:function(e){this.pX=e.deltaX,this.pY=e.deltaY;var t=K(e.direction);t&&(e.additionalEvent=this.options.event+t),this._super.emit.call(this,e)}}),l(te,J,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[it]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.scale-1)>this.options.threshold||this.state&lt)},emit:function(e){if(1!==e.scale){var t=e.scale<1?"in":"out";e.additionalEvent=this.options.event+t}this._super.emit.call(this,e)}}),l(ne,Q,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[tt]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,r=e.deltaTime>t.time;if(this._input=e,!i||!n||e.eventType&(Me|De)&&!r)this.reset();else if(e.eventType&ke)this.reset(),this._timer=a(function(){this.state=pt,this.tryEmit()},t.time,this);else if(e.eventType&Me)return pt;return 32},reset:function(){clearTimeout(this._timer)},emit:function(e){this.state===pt&&(e&&e.eventType&Me?this.manager.emit(this.options.event+"up",e):(this._input.timeStamp=ge(),this.manager.emit(this.options.event,this._input)))}}),l(ie,J,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[it]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.rotation)>this.options.threshold||this.state&lt)}}),l(ae,J,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Ae|Ne,pointers:1},getTouchAction:function(){return ee.prototype.getTouchAction.call(this)},attrTest:function(e){var t,n=this.options.direction;return n&(Ae|Ne)?t=e.overallVelocity:n&Ae?t=e.overallVelocityX:n&Ne&&(t=e.overallVelocityY),this._super.attrTest.call(this,e)&&n&e.offsetDirection&&e.distance>this.options.threshold&&e.maxPointers==this.options.pointers&&me(t)>this.options.velocity&&e.eventType&Me},emit:function(e){var t=K(e.offsetDirection);t&&this.manager.emit(this.options.event+t,e),this.manager.emit(this.options.event,e)}}),l(re,Q,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[nt]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,r=e.deltaTime<t.time;if(this.reset(),e.eventType&ke&&0===this.count)return this.failTimeout();if(i&&r&&n){if(e.eventType!=Me)return this.failTimeout();var s=!this.pTime||e.timeStamp-this.pTime<t.interval,o=!this.pCenter||F(this.pCenter,e.center)<t.posThreshold;if(this.pTime=e.timeStamp,this.pCenter=e.center,o&&s?this.count+=1:this.count=1,this._input=e,0===this.count%t.taps)return this.hasRequireFailures()?(this._timer=a(function(){this.state=pt,this.tryEmit()},t.interval,this),lt):pt}return 32},failTimeout:function(){return this._timer=a(function(){this.state=32},this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==pt&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),se.VERSION="2.0.7",se.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[ie,{enable:!1}],[te,{enable:!1},["rotate"]],[ae,{direction:Ae}],[ee,{direction:Ae},["swipe"]],[re],[re,{event:"doubletap",taps:2},["tap"]],[ne]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};oe.prototype={set:function(e){return ue(this.options,e),e.touchAction&&this.touchAction.update(),e.inputTarget&&(this.input.destroy(),this.input.target=e.inputTarget,this.input.init()),this},stop:function(e){this.session.stopped=e?2:1},recognize:function(e){var t=this.session;if(!t.stopped){this.touchAction.preventDefaults(e);var n,i=this.recognizers,a=t.curRecognizer;(!a||a&&a.state&pt)&&(a=t.curRecognizer=null);for(var r=0;r<i.length;)n=i[r],2===t.stopped||a&&n!=a&&!n.canRecognizeWith(a)?n.reset():n.recognize(e),!a&&n.state&(lt|ct|ut)&&(a=t.curRecognizer=n),r++}},get:function(e){if(e instanceof Q)return e;for(var t=this.recognizers,n=0;n<t.length;n++)if(t[n].options.event==e)return t[n];return null},add:function(e){if(r(e,"add",this))return this;var t=this.get(e.options.event);return t&&this.remove(t),this.recognizers.push(e),e.manager=this,this.touchAction.update(),e},remove:function(e){if(r(e,"remove",this))return this;if(e=this.get(e)){var t=this.recognizers,n=v(t,e);-1!==n&&(t.splice(n,1),this.touchAction.update())}return this},on:function(e,t){if(e!==i&&t!==i){var n=this.handlers;return s(g(e),function(e){n[e]=n[e]||[],n[e].push(t)}),this}},off:function(e,t){if(e!==i){var n=this.handlers;return s(g(e),function(e){t?n[e]&&n[e].splice(v(n[e],t),1):delete n[e]}),this}},emit:function(e,t){this.options.domEvents&&ce(e,t);var n=this.handlers[e]&&this.handlers[e].slice();if(n&&n.length){t.type=e,t.preventDefault=function(){t.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](t),i++}},destroy:function(){this.element&&le(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},ue(se,{INPUT_START:ke,INPUT_MOVE:Ee,INPUT_END:Me,INPUT_CANCEL:De,STATE_POSSIBLE:ot,STATE_BEGAN:lt,STATE_CHANGED:ct,STATE_ENDED:ut,STATE_RECOGNIZED:pt,STATE_CANCELLED:dt,STATE_FAILED:32,DIRECTION_NONE:Le,DIRECTION_LEFT:ze,DIRECTION_RIGHT:Pe,DIRECTION_UP:Ie,DIRECTION_DOWN:Fe,DIRECTION_HORIZONTAL:Ae,DIRECTION_VERTICAL:Ne,DIRECTION_ALL:He,Manager:oe,Input:T,TouchAction:_,TouchInput:q,MouseInput:j,PointerEventInput:O,TouchMouseInput:W,SingleTouchInput:B,Recognizer:Q,AttrRecognizer:J,Tap:re,Pan:ee,Swipe:ae,Pinch:te,Rotate:ie,Press:ne,on:d,off:h,each:s,merge:ye,extend:ve,assign:ue,inherit:l,bindFn:c,prefixed:x}),(void 0!==e?e:"undefined"!=typeof self?self:{}).Hammer=se,"function"==typeof define&&define.amd?define(function(){return se}):"undefined"!=typeof module&&module.exports?module.exports=se:e.Hammer=se}(window,document);var Base=function(){};Base.extend=function(e,t){"use strict";var n=Base.prototype.extend;Base._prototyping=!0;var i=new this;n.call(i,e),i.base=function(){},delete Base._prototyping;var a=i.constructor,r=i.constructor=function(){if(!Base._prototyping)if(this._constructing||this.constructor==r)this._constructing=!0,a.apply(this,arguments),delete this._constructing;else if(null!==arguments[0])return(arguments[0].extend||n).call(arguments[0],i)};return r.ancestor=this,r.extend=this.extend,r.forEach=this.forEach,r.implement=this.implement,r.prototype=i,r.toString=this.toString,r.valueOf=function(e){return"object"==e?r:a.valueOf()},n.call(r,t),"function"==typeof r.init&&r.init(),r},Base.prototype={extend:function(e,t){if(arguments.length>1){var n=this[e];if(n&&"function"==typeof t&&(!n.valueOf||n.valueOf()!=t.valueOf())&&/\bbase\b/.test(t)){var i=t.valueOf();(t=function(){var e=this.base||Base.prototype.base;this.base=n;var t=i.apply(this,arguments);return this.base=e,t}).valueOf=function(e){return"object"==e?t:i},t.toString=Base.toString}this[e]=t}else if(e){var a=Base.prototype.extend;Base._prototyping||"function"==typeof this||(a=this.extend||a);for(var r={toSource:null},s=["constructor","toString","valueOf"],o=Base._prototyping?0:1;l=s[o++];)e[l]!=r[l]&&a.call(this,l,e[l]);for(var l in e)r[l]||a.call(this,l,e[l])}return this}},Base=Base.extend({constructor:function(){this.extend(arguments[0])}},{ancestor:Object,version:"1.1",forEach:function(e,t,n){for(var i in e)void 0===this.prototype[i]&&t.call(n,e[i],i,e)},implement:function(){for(var e=0;e<arguments.length;e++)"function"==typeof arguments[e]?arguments[e](this.prototype):this.prototype.extend(arguments[e]);return this},toString:function(){return String(this.valueOf())}});var FlipClock;!function(e){"use strict";(FlipClock=function(e,t,n){return t instanceof Object&&t instanceof Date==!1&&(n=t,t=0),new FlipClock.Factory(e,t,n)}).Lang={},FlipClock.Base=Base.extend({buildDate:"2014-12-12",version:"0.7.7",constructor:function(t,n){"object"!=typeof t&&(t={}),"object"!=typeof n&&(n={}),this.setOptions(e.extend(!0,{},t,n))},callback:function(e){if("function"==typeof e){for(var t=[],n=1;n<=arguments.length;n++)arguments[n]&&t.push(arguments[n]);e.apply(this,t)}},log:function(e){window.console&&console.log&&console.log(e)},getOption:function(e){return!!this[e]&&this[e]},getOptions:function(){return this},setOption:function(e,t){this[e]=t},setOptions:function(e){for(var t in e)void 0!==e[t]&&this.setOption(t,e[t])}})}(jQuery),function(e){"use strict";FlipClock.Face=FlipClock.Base.extend({autoStart:!0,dividers:[],factory:!1,lists:[],constructor:function(e,t){this.dividers=[],this.lists=[],this.base(t),this.factory=e},build:function(){this.autoStart&&this.start()},createDivider:function(t,n,i){"boolean"!=typeof n&&n||(i=n,n=t);var a=['<span class="'+this.factory.classes.dot+' top"></span>','<span class="'+this.factory.classes.dot+' bottom"></span>'].join("");i&&(a=""),t=this.factory.localize(t);var r=['<span class="'+this.factory.classes.divider+" "+(n||"").toLowerCase()+'">','<span class="'+this.factory.classes.label+'">'+(t||"")+"</span>",a,"</span>"],s=e(r.join(""));return this.dividers.push(s),s},createList:function(e,t){"object"==typeof e&&(t=e,e=0);var n=new FlipClock.List(this.factory,e,t);return this.lists.push(n),n},reset:function(){this.factory.time=new FlipClock.Time(this.factory,this.factory.original?Math.round(this.factory.original):0,{minimumDigits:this.factory.minimumDigits}),this.flip(this.factory.original,!1)},appendDigitToClock:function(e){e.$el.append(!1)},addDigit:function(e){var t=this.createList(e,{classes:{active:this.factory.classes.active,before:this.factory.classes.before,flip:this.factory.classes.flip}});this.appendDigitToClock(t)},start:function(){},stop:function(){},autoIncrement:function(){this.factory.countdown?this.decrement():this.increment()},increment:function(){this.factory.time.addSecond()},decrement:function(){0==this.factory.time.getTimeSeconds()?this.factory.stop():this.factory.time.subSecond()},flip:function(t,n){var i=this;e.each(t,function(e,t){var a=i.lists[e];a?(n||t==a.digit||a.play(),a.select(t)):i.addDigit(t)})}})}(jQuery),function(e){"use strict";FlipClock.Factory=FlipClock.Base.extend({animationRate:1e3,autoStart:!0,callbacks:{destroy:!1,create:!1,init:!1,interval:!1,start:!1,stop:!1,reset:!1},classes:{active:"flip-clock-active",before:"flip-clock-before",divider:"flip-clock-divider",dot:"flip-clock-dot",label:"flip-clock-label",flip:"flip",play:"play",wrapper:"flip-clock-wrapper"},clockFace:"HourlyCounter",countdown:!1,defaultClockFace:"HourlyCounter",defaultLanguage:"english",$el:!1,face:!0,lang:!1,language:"english",minimumDigits:0,original:!1,running:!1,time:!1,timer:!1,$wrapper:!1,constructor:function(t,n,i){i||(i={}),this.lists=[],this.running=!1,this.base(i),this.$el=e(t).addClass(this.classes.wrapper),this.$wrapper=this.$el,this.original=n instanceof Date?n:n?Math.round(n):0,this.time=new FlipClock.Time(this,this.original,{minimumDigits:this.minimumDigits,animationRate:this.animationRate}),this.timer=new FlipClock.Timer(this,i),this.loadLanguage(this.language),this.loadClockFace(this.clockFace,i),this.autoStart&&this.start()},loadClockFace:function(e,t){var n,i=!1;return e=e.ucfirst()+"Face",this.face.stop&&(this.stop(),i=!0),this.$el.html(""),this.time.minimumDigits=this.minimumDigits,(n=FlipClock[e]?new FlipClock[e](this,t):new FlipClock[this.defaultClockFace+"Face"](this,t)).build(),this.face=n,i&&this.start(),this.face},loadLanguage:function(e){var t;return t=FlipClock.Lang[e.ucfirst()]?FlipClock.Lang[e.ucfirst()]:FlipClock.Lang[e]?FlipClock.Lang[e]:FlipClock.Lang[this.defaultLanguage],this.lang=t},localize:function(e,t){var n=this.lang;if(!e)return null;var i=e.toLowerCase();return"object"==typeof t&&(n=t),n&&n[i]?n[i]:e},start:function(e){var t=this;t.running||t.countdown&&!(t.countdown&&t.time.time>0)?t.log("Trying to start timer when countdown already at 0"):(t.face.start(t.time),t.timer.start(function(){t.flip(),"function"==typeof e&&e()}))},stop:function(e){this.face.stop(),this.timer.stop(e);for(var t in this.lists)this.lists.hasOwnProperty(t)&&this.lists[t].stop()},reset:function(e){this.timer.reset(e),this.face.reset()},setTime:function(e){this.time.time=e,this.flip(!0)},getTime:function(e){return this.time},setCountdown:function(e){var t=this.running;this.countdown=!!e,t&&(this.stop(),this.start())},flip:function(e){this.face.flip(!1,e)}})}(jQuery),function(e){"use strict";FlipClock.List=FlipClock.Base.extend({digit:0,classes:{active:"flip-clock-active",before:"flip-clock-before",flip:"flip"},factory:!1,$el:!1,$obj:!1,items:[],lastDigit:0,constructor:function(e,t,n){this.factory=e,this.digit=t,this.lastDigit=t,this.$el=this.createList(),this.$obj=this.$el,t>0&&this.select(t),this.factory.$el.append(this.$el)},select:function(e){if(void 0===e?e=this.digit:this.digit=e,this.digit!=this.lastDigit){var t=this.$el.find("."+this.classes.before).removeClass(this.classes.before);this.$el.find("."+this.classes.active).removeClass(this.classes.active).addClass(this.classes.before),this.appendListItem(this.classes.active,this.digit),t.remove(),this.lastDigit=this.digit}},play:function(){this.$el.addClass(this.factory.classes.play)},stop:function(){var e=this;setTimeout(function(){e.$el.removeClass(e.factory.classes.play)},this.factory.timer.interval)},createListItem:function(e,t){return['<li class="'+(e||"")+'">','<a href="#">','<div class="up">','<div class="shadow"></div>','<div class="inn">'+(t||"")+"</div>","</div>",'<div class="down">','<div class="shadow"></div>','<div class="inn">'+(t||"")+"</div>","</div>","</a>","</li>"].join("")},appendListItem:function(e,t){var n=this.createListItem(e,t);this.$el.append(n)},createList:function(){var t=this.getPrevDigit()?this.getPrevDigit():this.digit;return e(['<ul class="'+this.classes.flip+" "+(this.factory.running?this.factory.classes.play:"")+'">',this.createListItem(this.classes.before,t),this.createListItem(this.classes.active,this.digit),"</ul>"].join(""))},getNextDigit:function(){return 9==this.digit?0:this.digit+1},getPrevDigit:function(){return 0==this.digit?9:this.digit-1}})}(jQuery),function(e){"use strict";String.prototype.ucfirst=function(){return this.substr(0,1).toUpperCase()+this.substr(1)},e.fn.FlipClock=function(t,n){return new FlipClock(e(this),t,n)},e.fn.flipClock=function(t,n){return e.fn.FlipClock(t,n)}}(jQuery),function(e){"use strict";FlipClock.Time=FlipClock.Base.extend({time:0,factory:!1,minimumDigits:0,constructor:function(e,t,n){"object"!=typeof n&&(n={}),n.minimumDigits||(n.minimumDigits=e.minimumDigits),this.base(n),this.factory=e,t&&(this.time=t)},convertDigitsToArray:function(e){var t=[];e=e.toString();for(var n=0;n<e.length;n++)e[n].match(/^\d*$/g)&&t.push(e[n]);return t},digit:function(e){var t=this.toString(),n=t.length;return!!t[n-e]&&t[n-e]},digitize:function(t){var n=[];if(e.each(t,function(e,t){1==(t=t.toString()).length&&(t="0"+t);for(var i=0;i<t.length;i++)n.push(t.charAt(i))}),n.length>this.minimumDigits&&(this.minimumDigits=n.length),this.minimumDigits>n.length)for(var i=n.length;i<this.minimumDigits;i++)n.unshift("0");return n},getDateObject:function(){return this.time instanceof Date?this.time:new Date((new Date).getTime()+1e3*this.getTimeSeconds())},getDayCounter:function(e){var t=[this.getDays(),this.getHours(!0),this.getMinutes(!0)];return e&&t.push(this.getSeconds(!0)),this.digitize(t)},getDays:function(e){var t=this.getTimeSeconds()/60/60/24;return e&&(t%=7),Math.floor(t)},getHourCounter:function(){return this.digitize([this.getHours(),this.getMinutes(!0),this.getSeconds(!0)])},getHourly:function(){return this.getHourCounter()},getHours:function(e){var t=this.getTimeSeconds()/60/60;return e&&(t%=24),Math.floor(t)},getMilitaryTime:function(e,t){void 0===t&&(t=!0),e||(e=this.getDateObject());var n=[e.getHours(),e.getMinutes()];return!0===t&&n.push(e.getSeconds()),this.digitize(n)},getMinutes:function(e){var t=this.getTimeSeconds()/60;return e&&(t%=60),Math.floor(t)},getMinuteCounter:function(){return this.digitize([this.getMinutes(),this.getSeconds(!0)])},getTimeSeconds:function(e){return e||(e=new Date),this.time instanceof Date?this.factory.countdown?Math.max(this.time.getTime()/1e3-e.getTime()/1e3,0):e.getTime()/1e3-this.time.getTime()/1e3:this.time},getTime:function(e,t){void 0===t&&(t=!0),e||(e=this.getDateObject()),console.log(e);var n=e.getHours(),i=[n>12?n-12:0===n?12:n,e.getMinutes()];return!0===t&&i.push(e.getSeconds()),this.digitize(i)},getSeconds:function(e){var t=this.getTimeSeconds();return e&&(60==t?t=0:t%=60),Math.ceil(t)},getWeeks:function(e){var t=this.getTimeSeconds()/60/60/24/7;return e&&(t%=52),Math.floor(t)},removeLeadingZeros:function(t,n){var i=0,a=[];return e.each(n,function(e,r){e<t?i+=parseInt(n[e],10):a.push(n[e])}),0===i?a:n},addSeconds:function(e){this.time instanceof Date?this.time.setSeconds(this.time.getSeconds()+e):this.time+=e},addSecond:function(){this.addSeconds(1)},subSeconds:function(e){this.time instanceof Date?this.time.setSeconds(this.time.getSeconds()-e):this.time-=e},subSecond:function(){this.subSeconds(1)},toString:function(){return this.getTimeSeconds().toString()}})}(jQuery),function(e){"use strict";FlipClock.Timer=FlipClock.Base.extend({callbacks:{destroy:!1,create:!1,init:!1,interval:!1,start:!1,stop:!1,reset:!1},count:0,factory:!1,interval:1e3,animationRate:1e3,constructor:function(e,t){this.base(t),this.factory=e,this.callback(this.callbacks.init),this.callback(this.callbacks.create)},getElapsed:function(){return this.count*this.interval},getElapsedTime:function(){return new Date(this.time+this.getElapsed())},reset:function(e){clearInterval(this.timer),this.count=0,this._setInterval(e),this.callback(this.callbacks.reset)},start:function(e){this.factory.running=!0,this._createTimer(e),this.callback(this.callbacks.start)},stop:function(e){this.factory.running=!1,this._clearInterval(e),this.callback(this.callbacks.stop),this.callback(e)},_clearInterval:function(){clearInterval(this.timer)},_createTimer:function(e){this._setInterval(e)},_destroyTimer:function(e){this._clearInterval(),this.timer=!1,this.callback(e),this.callback(this.callbacks.destroy)},_interval:function(e){this.callback(this.callbacks.interval),this.callback(e),this.count++},_setInterval:function(e){var t=this;t._interval(e),t.timer=setInterval(function(){t._interval(e)},this.interval)}})}(jQuery),function(e){FlipClock.TwentyFourHourClockFace=FlipClock.Face.extend({constructor:function(e,t){this.base(e,t)},build:function(t){var n=this,i=this.factory.$el.find("ul");this.factory.time.time||(this.factory.original=new Date,this.factory.time=new FlipClock.Time(this.factory,this.factory.original)),(t=t||this.factory.time.getMilitaryTime(!1,this.showSeconds)).length>i.length&&e.each(t,function(e,t){n.createList(t)}),this.createDivider(),this.createDivider(),e(this.dividers[0]).insertBefore(this.lists[this.lists.length-2].$el),e(this.dividers[1]).insertBefore(this.lists[this.lists.length-4].$el),this.base()},flip:function(e,t){this.autoIncrement(),e=e||this.factory.time.getMilitaryTime(!1,this.showSeconds),this.base(e,t)}})}(jQuery),function(e){FlipClock.CounterFace=FlipClock.Face.extend({shouldAutoIncrement:!1,constructor:function(e,t){"object"!=typeof t&&(t={}),e.autoStart=!!t.autoStart,t.autoStart&&(this.shouldAutoIncrement=!0),e.increment=function(){e.countdown=!1,e.setTime(e.getTime().getTimeSeconds()+1)},e.decrement=function(){e.countdown=!0;var t=e.getTime().getTimeSeconds();t>0&&e.setTime(t-1)},e.setValue=function(t){e.setTime(t)},e.setCounter=function(t){e.setTime(t)},this.base(e,t)},build:function(){var t=this,n=this.factory.$el.find("ul"),i=this.factory.getTime().digitize([this.factory.getTime().time]);i.length>n.length&&e.each(i,function(e,n){t.createList(n).select(n)}),e.each(this.lists,function(e,t){t.play()}),this.base()},flip:function(e,t){this.shouldAutoIncrement&&this.autoIncrement(),e||(e=this.factory.getTime().digitize([this.factory.getTime().time])),this.base(e,t)},reset:function(){this.factory.time=new FlipClock.Time(this.factory,this.factory.original?Math.round(this.factory.original):0),this.flip()}})}(jQuery),function(e){FlipClock.DailyCounterFace=FlipClock.Face.extend({showSeconds:!0,constructor:function(e,t){this.base(e,t)},build:function(t){var n=this,i=this.factory.$el.find("ul"),a=0;(t=t||this.factory.time.getDayCounter(this.showSeconds)).length>i.length&&e.each(t,function(e,t){n.createList(t)}),this.showSeconds?e(this.createDivider("Seconds")).insertBefore(this.lists[this.lists.length-2].$el):a=2,e(this.createDivider("Minutes")).insertBefore(this.lists[this.lists.length-4+a].$el),e(this.createDivider("Hours")).insertBefore(this.lists[this.lists.length-6+a].$el),e(this.createDivider("Days",!0)).insertBefore(this.lists[0].$el),this.base()},flip:function(e,t){e||(e=this.factory.time.getDayCounter(this.showSeconds)),this.autoIncrement(),this.base(e,t)}})}(jQuery),function(e){FlipClock.HourlyCounterFace=FlipClock.Face.extend({constructor:function(e,t){this.base(e,t)},build:function(t,n){var i=this,a=this.factory.$el.find("ul");(n=n||this.factory.time.getHourCounter()).length>a.length&&e.each(n,function(e,t){i.createList(t)}),e(this.createDivider("Seconds")).insertBefore(this.lists[this.lists.length-2].$el),e(this.createDivider("Minutes")).insertBefore(this.lists[this.lists.length-4].$el),t||e(this.createDivider("Hours",!0)).insertBefore(this.lists[0].$el),this.base()},flip:function(e,t){e||(e=this.factory.time.getHourCounter()),this.autoIncrement(),this.base(e,t)},appendDigitToClock:function(e){this.base(e),this.dividers[0].insertAfter(this.dividers[0].next())}})}(jQuery),function(e){FlipClock.MinuteCounterFace=FlipClock.HourlyCounterFace.extend({clearExcessDigits:!1,constructor:function(e,t){this.base(e,t)},build:function(){this.base(!0,this.factory.time.getMinuteCounter())},flip:function(e,t){e||(e=this.factory.time.getMinuteCounter()),this.base(e,t)}})}(jQuery),function(e){FlipClock.TwelveHourClockFace=FlipClock.TwentyFourHourClockFace.extend({meridium:!1,meridiumText:"AM",build:function(){var t=this.factory.time.getTime(!1,this.showSeconds);this.base(t),this.meridiumText=this.getMeridium(),this.meridium=e(['<ul class="flip-clock-meridium">',"<li>",'<a href="#">'+this.meridiumText+"</a>","</li>","</ul>"].join("")),this.meridium.insertAfter(this.lists[this.lists.length-1].$el)},flip:function(e,t){this.meridiumText!=this.getMeridium()&&(this.meridiumText=this.getMeridium(),this.meridium.find("a").html(this.meridiumText)),this.base(this.factory.time.getTime(!1,this.showSeconds),t)},getMeridium:function(){return(new Date).getHours()>=12?"PM":"AM"},isPM:function(){return"PM"==this.getMeridium()},isAM:function(){return"AM"==this.getMeridium()}})}(jQuery),function(e){FlipClock.Lang.Arabic={years:"سنوات",months:"شهور",days:"أيام",hours:"ساعات",minutes:"دقائق",seconds:"ثواني"},FlipClock.Lang.ar=FlipClock.Lang.Arabic,FlipClock.Lang["ar-ar"]=FlipClock.Lang.Arabic,FlipClock.Lang.arabic=FlipClock.Lang.Arabic}(jQuery),function(e){FlipClock.Lang.Danish={years:"År",months:"Måneder",days:"Dage",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},FlipClock.Lang.da=FlipClock.Lang.Danish,FlipClock.Lang["da-dk"]=FlipClock.Lang.Danish,FlipClock.Lang.danish=FlipClock.Lang.Danish}(jQuery),function(e){FlipClock.Lang.German={years:"Jahre",months:"Monate",days:"Tage",hours:"Stunden",minutes:"Minuten",seconds:"Sekunden"},FlipClock.Lang.de=FlipClock.Lang.German,FlipClock.Lang["de-de"]=FlipClock.Lang.German,FlipClock.Lang.german=FlipClock.Lang.German}(jQuery),function(e){FlipClock.Lang.English={years:"Years",months:"Months",days:"Days",hours:"Hours",minutes:"Minutes",seconds:"Seconds"},FlipClock.Lang.en=FlipClock.Lang.English,FlipClock.Lang["en-us"]=FlipClock.Lang.English,FlipClock.Lang.english=FlipClock.Lang.English}(jQuery),function(e){FlipClock.Lang.Spanish={years:"A&#241;os",months:"Meses",days:"D&#205;as",hours:"Horas",minutes:"Minutos",seconds:"Segundo"},FlipClock.Lang.es=FlipClock.Lang.Spanish,FlipClock.Lang["es-es"]=FlipClock.Lang.Spanish,FlipClock.Lang.spanish=FlipClock.Lang.Spanish}(jQuery),function(e){FlipClock.Lang.Finnish={years:"Vuotta",months:"Kuukautta",days:"Päivää",hours:"Tuntia",minutes:"Minuuttia",seconds:"Sekuntia"},FlipClock.Lang.fi=FlipClock.Lang.Finnish,FlipClock.Lang["fi-fi"]=FlipClock.Lang.Finnish,FlipClock.Lang.finnish=FlipClock.Lang.Finnish}(jQuery),function(e){FlipClock.Lang.French={years:"Ans",months:"Mois",days:"Jours",hours:"Heures",minutes:"Minutes",seconds:"Secondes"},FlipClock.Lang.fr=FlipClock.Lang.French,FlipClock.Lang["fr-ca"]=FlipClock.Lang.French,FlipClock.Lang.french=FlipClock.Lang.French}(jQuery),function(e){FlipClock.Lang.Italian={years:"Anni",months:"Mesi",days:"Giorni",hours:"Ore",minutes:"Minuti",seconds:"Secondi"},FlipClock.Lang.it=FlipClock.Lang.Italian,FlipClock.Lang["it-it"]=FlipClock.Lang.Italian,FlipClock.Lang.italian=FlipClock.Lang.Italian}(jQuery),function(e){FlipClock.Lang.Latvian={years:"Gadi",months:"Mēneši",days:"Dienas",hours:"Stundas",minutes:"Minūtes",seconds:"Sekundes"},FlipClock.Lang.lv=FlipClock.Lang.Latvian,FlipClock.Lang["lv-lv"]=FlipClock.Lang.Latvian,FlipClock.Lang.latvian=FlipClock.Lang.Latvian}(jQuery),function(e){FlipClock.Lang.Dutch={years:"Jaren",months:"Maanden",days:"Dagen",hours:"Uren",minutes:"Minuten",seconds:"Seconden"},FlipClock.Lang.nl=FlipClock.Lang.Dutch,FlipClock.Lang["nl-be"]=FlipClock.Lang.Dutch,FlipClock.Lang.dutch=FlipClock.Lang.Dutch}(jQuery),function(e){FlipClock.Lang.Norwegian={years:"År",months:"Måneder",days:"Dager",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},FlipClock.Lang.no=FlipClock.Lang.Norwegian,FlipClock.Lang.nb=FlipClock.Lang.Norwegian,FlipClock.Lang["no-nb"]=FlipClock.Lang.Norwegian,FlipClock.Lang.norwegian=FlipClock.Lang.Norwegian}(jQuery),function(e){FlipClock.Lang.Portuguese={years:"Anos",months:"Meses",days:"Dias",hours:"Horas",minutes:"Minutos",seconds:"Segundos"},FlipClock.Lang.pt=FlipClock.Lang.Portuguese,FlipClock.Lang["pt-br"]=FlipClock.Lang.Portuguese,FlipClock.Lang.portuguese=FlipClock.Lang.Portuguese}(jQuery),function(e){FlipClock.Lang.Russian={years:"лет",months:"месяцев",days:"дней",hours:"часов",minutes:"минут",seconds:"секунд"},FlipClock.Lang.ru=FlipClock.Lang.Russian,FlipClock.Lang["ru-ru"]=FlipClock.Lang.Russian,FlipClock.Lang.russian=FlipClock.Lang.Russian}(jQuery),function(e){FlipClock.Lang.Swedish={years:"År",months:"Månader",days:"Dagar",hours:"Timmar",minutes:"Minuter",seconds:"Sekunder"},FlipClock.Lang.sv=FlipClock.Lang.Swedish,FlipClock.Lang["sv-se"]=FlipClock.Lang.Swedish,FlipClock.Lang.swedish=FlipClock.Lang.Swedish}(jQuery),$(document).ready(function(){new Swiper(".js-sponsors-swiper",{loop:!0,pagination:".js-sponsors-swiper .swiper-pagination",paginationClickable:!0}),new Swiper(".js-speakers-swiper",{loop:!0,prevButton:".js-speakers-block-button-prev",nextButton:".js-speakers-block-button-next",pagination:".js-speakers-swiper .swiper-pagination",paginationClickable:!0}),new Swiper(".js-news-swiper",{loop:!0,prevButton:".js-news-block-button-prev",nextButton:".js-news-block-button-next",pagination:".js-news-swiper .swiper-pagination",paginationClickable:!0});$(".js-events-swiper").each(function(){$swiper=$(this),new Swiper($swiper,{loop:!0,pagination:$swiper.find(".swiper-pagination"),paginationClickable:!0})}),$(".js-flip-clock").each(function(){var e=+$(this).data("time-left");$(this).FlipClock(e,{countdown:!0,clockFace:"HourlyCounter",callbacks:{interval:function(){$("span.seconds").next().next().remove(),$("span.seconds").next().remove(),$("span.seconds").remove()}},language:"russian"})})}),$(document).ready(function(){var e=$(".js-events-block-content");$(".js-events-block-filter").click(function(){var t=$(this),n=t.attr("href");return t.hasClass("active")||(e.spin("large","#000"),$.ajax(n,{method:"GET",cache:!1}).done(function(n){$(".js-events-block-filter").removeClass("active"),t.addClass("active"),e.html(n)}).fail(function(e,t,n){alert("Ошибка загрузки данных. Пожалуйста, попробуйте ещё раз."),console.log(e),console.log(n)}).always(function(){e.spin(!1)})),!1})});var contactsMap;$(document).ready(function(){$(".js-mobile-menu-toggle").click(function(){return $(this).siblings("ul").hasClass("active")?($(this).removeClass("active"),$(this).siblings("ul").removeClass("active")):($(this).siblings("ul").addClass("active"),$(this).addClass("active")),!1})}),function(){function e(t,n,i){$(t.target).closest(n).length||(i(),$(document).off("click","body",e))}function t(){$(".js-offcanvas").addClass("active"),$(i).addClass("active"),$(document).on("click","body",function(t){e(t,a,n)})}function n(){$(".js-offcanvas, "+i).removeClass("active")}var i="#offcanvas",a="#offcanvas > .main-offcanvas";$(".js-offcanvas").click(function(){return $(this).hasClass("active")?n():t(),!1}),new Hammer(document.querySelector(i)).on("swipeleft",function(e){n()})}(),$(document).on("click","[data-side-modal]",function(e){var t=$(this).data("side-modal"),n=$(t),i=$(this).data("side-modal-class");return initSideModal(n.clone(),i),!1}),$(document).on("click","[data-side-modal-close]",function(){return $(this).closest(".side-modal-overlay").removeClass("active"),!1});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
