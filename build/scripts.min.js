function initContactsMap(e){"use strict";var t=document.getElementById("js-contacts-map"),n=t.dataset.mapData;(contactsMap=new e.Map(t,{center:t.dataset.mapCoords.split(","),zoom:t.dataset.mapZoom,controls:["smallMapDefaultSet"]})).behaviors.disable("scrollZoom");var i=e.templateLayoutFactory.createClass('<div class="contacts-map-balloon {{ properties.iconClasses }} {{ properties.iconHoverClasses }}"><div class="contacts-map-balloon-content">{{ properties.iconContent }}</div></div>');$.ajax(n,{method:"GET",cache:!1,dataType:"json"}).done(function(t){t.objects&&t.objects.forEach(function(t){var n=[-100,-70],a="",s={type:"Rectangle",coordinates:[[0,0],[200,70]]};t.type&&"main"===t.type&&(n=[-130,-130],a="contacts-map-balloon-main",s={type:"Rectangle",coordinates:[[0,0],[260,130]]});var r=new e.Placemark(t.coords,{iconContent:t.name,hintContent:t.name},{iconHoverClasses:"",iconLayout:i,iconOffset:n,hasBalloon:!1,iconShape:s});r.properties.set("iconClasses",a),r.events.add("mouseenter",function(e){r.properties.set("iconHoverClasses","contacts-map-balloon-hover")}),r.events.add("mouseleave",function(e){r.properties.set("iconHoverClasses","")}),t.description.length&&r.events.add("click",function(e){initSideModal(t.description,"side-modal-map-object"),e.stopPropagation()}),contactsMap.geoObjects.add(r)})}).fail(function(e,t,n){alert("Ошибка загрузки данных. Пожалуйста, попробуйте перезагрузить страницу."),console.log(e),console.log(n)})}function initSideModalWrapper(e){var t=$('<div class="side-modal-overlay"><div class="side-modal '+e+'"><a href="#" class="side-modal-close" data-side-modal-close></a><div class="side-modal-overflow"></div></div></div>'),n=$("body").children(".side-modal-overlay");return n.length&&n.remove(),$("body").append(t),$("body").children(".side-modal-overlay")}function initSideModal(e,t,n,i){var a=initSideModalWrapper(t);a.find(".side-modal-overflow").html(e),a.find("[data-masked-input]").maskedinput(),a.find("[data-validate]").formValidation(),a.find(".js-input-file").inputFile(),a.find(".js-input-photo").inputPhoto(),a.find(".js-datepicker").datePicker(),a.find(".js-input-region-city").inputRegionCity(),a.find("[data-form-ajax]").formAjax(),setTimeout(function(){a.addClass("active"),n||$(document).on("click","body",s),i||$(document).on("keyup",s)},200);var s=function(e){($(e.target).closest(".side-modal").length||$(e.target).is("input, label"))&&27!==e.keyCode||(a.removeClass("active"),$(document).off("click","body",s))};a.find("[data-side-modal-close]").click(function(){return n||$(document).off("click","body",s),i||$(document).off("keyup",s),a.removeClass("active"),!1})}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){var n=(t=t||ne).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function i(e){var t=!!e&&"length"in e&&e.length,n=fe.type(e);return"function"!==n&&!fe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function a(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function s(e,t,n){return fe.isFunction(t)?fe.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?fe.grep(e,function(e){return e===t!==n}):"string"!=typeof t?fe.grep(e,function(e){return oe.call(t,e)>-1!==n}):Se.test(t)?fe.filter(t,e,n):(t=fe.filter(t,e),fe.grep(e,function(e){return oe.call(t,e)>-1!==n&&1===e.nodeType}))}function r(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t={};return fe.each(e.match(Ee)||[],function(e,n){t[n]=!0}),t}function l(e){return e}function u(e){throw e}function c(e,t,n,i){var a;try{e&&fe.isFunction(a=e.promise)?a.call(e).done(t).fail(n):e&&fe.isFunction(a=e.then)?a.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}function d(){ne.removeEventListener("DOMContentLoaded",d),e.removeEventListener("load",d),fe.ready()}function h(){this.expando=fe.expando+h.uid++}function p(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Oe.test(e)?JSON.parse(e):e)}function f(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Re,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=p(n)}catch(e){}Ae.set(e,t,n)}else n=void 0;return n}function m(e,t,n,i){var a,s=1,r=20,o=i?function(){return i.cur()}:function(){return fe.css(e,t,"")},l=o(),u=n&&n[3]||(fe.cssNumber[t]?"":"px"),c=(fe.cssNumber[t]||"px"!==u&&+l)&&Ne.exec(fe.css(e,t));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+l||1;do{c/=s=s||".5",fe.style(e,t,c+u)}while(s!==(s=o()/l)&&1!==s&&--r)}return n&&(c=+c||+l||0,a=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=a)),a}function g(e){var t,n=e.ownerDocument,i=e.nodeName,a=Be[i];return a||(t=n.body.appendChild(n.createElement(i)),a=fe.css(t,"display"),t.parentNode.removeChild(t),"none"===a&&(a="block"),Be[i]=a,a)}function v(e,t){for(var n,i,a=[],s=0,r=e.length;s<r;s++)(i=e[s]).style&&(n=i.style.display,t?("none"===n&&(a[s]=ze.get(i,"display")||null,a[s]||(i.style.display="")),""===i.style.display&&He(i)&&(a[s]=g(i))):"none"!==n&&(a[s]="none",ze.set(i,"display",n)));for(s=0;s<r;s++)null!=a[s]&&(e[s].style.display=a[s]);return e}function y(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&a(e,t)?fe.merge([e],n):n}function w(e,t){for(var n=0,i=e.length;n<i;n++)ze.set(e[n],"globalEval",!t||ze.get(t[n],"globalEval"))}function b(e,t,n,i,a){for(var s,r,o,l,u,c,d=t.createDocumentFragment(),h=[],p=0,f=e.length;p<f;p++)if((s=e[p])||0===s)if("object"===fe.type(s))fe.merge(h,s.nodeType?[s]:s);else if(Xe.test(s)){for(r=r||d.appendChild(t.createElement("div")),o=(Ge.exec(s)||["",""])[1].toLowerCase(),l=Ve[o]||Ve._default,r.innerHTML=l[1]+fe.htmlPrefilter(s)+l[2],c=l[0];c--;)r=r.lastChild;fe.merge(h,r.childNodes),(r=d.firstChild).textContent=""}else h.push(t.createTextNode(s));for(d.textContent="",p=0;s=h[p++];)if(i&&fe.inArray(s,i)>-1)a&&a.push(s);else if(u=fe.contains(s.ownerDocument,s),r=y(d.appendChild(s),"script"),u&&w(r),n)for(c=0;s=r[c++];)$e.test(s.type||"")&&n.push(s);return d}function x(){return!0}function C(){return!1}function T(){try{return ne.activeElement}catch(e){}}function S(e,t,n,i,a,s){var r,o;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(o in t)S(e,o,n,i,t[o],s);return e}if(null==i&&null==a?(a=n,i=n=void 0):null==a&&("string"==typeof n?(a=i,i=void 0):(a=i,i=n,n=void 0)),!1===a)a=C;else if(!a)return e;return 1===s&&(r=a,(a=function(e){return fe().off(e),r.apply(this,arguments)}).guid=r.guid||(r.guid=fe.guid++)),e.each(function(){fe.event.add(this,t,a,i,n)})}function k(e,t){return a(e,"table")&&a(11!==t.nodeType?t:t.firstChild,"tr")?fe(">tbody",e)[0]||e:e}function M(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function D(e){var t=nt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function _(e,t){var n,i,a,s,r,o,l,u;if(1===t.nodeType){if(ze.hasData(e)&&(s=ze.access(e),r=ze.set(t,s),u=s.events)){delete r.handle,r.events={};for(a in u)for(n=0,i=u[a].length;n<i;n++)fe.event.add(t,a,u[a][n])}Ae.hasData(e)&&(o=Ae.access(e),l=fe.extend({},o),Ae.set(t,l))}}function E(e,t){var n=t.nodeName.toLowerCase();"input"===n&&qe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function L(e,t,i,a){t=se.apply([],t);var s,r,o,l,u,c,d=0,h=e.length,p=h-1,f=t[0],m=fe.isFunction(f);if(m||h>1&&"string"==typeof f&&!pe.checkClone&&tt.test(f))return e.each(function(n){var s=e.eq(n);m&&(t[0]=f.call(this,n,s.html())),L(s,t,i,a)});if(h&&(s=b(t,e[0].ownerDocument,!1,e,a),r=s.firstChild,1===s.childNodes.length&&(s=r),r||a)){for(l=(o=fe.map(y(s,"script"),M)).length;d<h;d++)u=s,d!==p&&(u=fe.clone(u,!0,!0),l&&fe.merge(o,y(u,"script"))),i.call(e[d],u,d);if(l)for(c=o[o.length-1].ownerDocument,fe.map(o,D),d=0;d<l;d++)u=o[d],$e.test(u.type||"")&&!ze.access(u,"globalEval")&&fe.contains(c,u)&&(u.src?fe._evalUrl&&fe._evalUrl(u.src):n(u.textContent.replace(it,""),c))}return e}function P(e,t,n){for(var i,a=t?fe.filter(t,e):e,s=0;null!=(i=a[s]);s++)n||1!==i.nodeType||fe.cleanData(y(i)),i.parentNode&&(n&&fe.contains(i.ownerDocument,i)&&w(y(i,"script")),i.parentNode.removeChild(i));return e}function I(e,t,n){var i,a,s,r,o=e.style;return(n=n||rt(e))&&(""!==(r=n.getPropertyValue(t)||n[t])||fe.contains(e.ownerDocument,e)||(r=fe.style(e,t)),!pe.pixelMarginRight()&&st.test(r)&&at.test(t)&&(i=o.width,a=o.minWidth,s=o.maxWidth,o.minWidth=o.maxWidth=o.width=r,r=n.width,o.width=i,o.minWidth=a,o.maxWidth=s)),void 0!==r?r+"":r}function F(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function z(e){if(e in ht)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=dt.length;n--;)if((e=dt[n]+t)in ht)return e}function A(e){var t=fe.cssProps[e];return t||(t=fe.cssProps[e]=z(e)||e),t}function O(e,t,n){var i=Ne.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function R(e,t,n,i,a){var s,r=0;for(s=n===(i?"border":"content")?4:"width"===t?1:0;s<4;s+=2)"margin"===n&&(r+=fe.css(e,n+Ye[s],!0,a)),i?("content"===n&&(r-=fe.css(e,"padding"+Ye[s],!0,a)),"margin"!==n&&(r-=fe.css(e,"border"+Ye[s]+"Width",!0,a))):(r+=fe.css(e,"padding"+Ye[s],!0,a),"padding"!==n&&(r+=fe.css(e,"border"+Ye[s]+"Width",!0,a)));return r}function j(e,t,n){var i,a=rt(e),s=I(e,t,a),r="border-box"===fe.css(e,"boxSizing",!1,a);return st.test(s)?s:(i=r&&(pe.boxSizingReliable()||s===e.style[t]),"auto"===s&&(s=e["offset"+t[0].toUpperCase()+t.slice(1)]),(s=parseFloat(s)||0)+R(e,t,n||(r?"border":"content"),i,a)+"px")}function N(e,t,n,i,a){return new N.prototype.init(e,t,n,i,a)}function Y(){ft&&(!1===ne.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(Y):e.setTimeout(Y,fe.fx.interval),fe.fx.tick())}function H(){return e.setTimeout(function(){pt=void 0}),pt=fe.now()}function W(e,t){var n,i=0,a={height:e};for(t=t?1:0;i<4;i+=2-t)a["margin"+(n=Ye[i])]=a["padding"+n]=e;return t&&(a.opacity=a.width=e),a}function B(e,t,n){for(var i,a=($.tweeners[t]||[]).concat($.tweeners["*"]),s=0,r=a.length;s<r;s++)if(i=a[s].call(n,t,e))return i}function q(e,t,n){var i,a,s,r,o,l,u,c,d="width"in t||"height"in t,h=this,p={},f=e.style,m=e.nodeType&&He(e),g=ze.get(e,"fxshow");n.queue||(null==(r=fe._queueHooks(e,"fx")).unqueued&&(r.unqueued=0,o=r.empty.fire,r.empty.fire=function(){r.unqueued||o()}),r.unqueued++,h.always(function(){h.always(function(){r.unqueued--,fe.queue(e,"fx").length||r.empty.fire()})}));for(i in t)if(a=t[i],mt.test(a)){if(delete t[i],s=s||"toggle"===a,a===(m?"hide":"show")){if("show"!==a||!g||void 0===g[i])continue;m=!0}p[i]=g&&g[i]||fe.style(e,i)}if((l=!fe.isEmptyObject(t))||!fe.isEmptyObject(p)){d&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(u=g&&g.display)&&(u=ze.get(e,"display")),"none"===(c=fe.css(e,"display"))&&(u?c=u:(v([e],!0),u=e.style.display||u,c=fe.css(e,"display"),v([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===fe.css(e,"float")&&(l||(h.done(function(){f.display=u}),null==u&&(c=f.display,u="none"===c?"":c)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1;for(i in p)l||(g?"hidden"in g&&(m=g.hidden):g=ze.access(e,"fxshow",{display:u}),s&&(g.hidden=!m),m&&v([e],!0),h.done(function(){m||v([e]),ze.remove(e,"fxshow");for(i in p)fe.style(e,i,p[i])})),l=B(m?g[i]:0,i,h),i in g||(g[i]=l.start,m&&(l.end=l.start,l.start=0))}}function G(e,t){var n,i,a,s,r;for(n in e)if(i=fe.camelCase(n),a=t[i],s=e[n],Array.isArray(s)&&(a=s[1],s=e[n]=s[0]),n!==i&&(e[i]=s,delete e[n]),(r=fe.cssHooks[i])&&"expand"in r){s=r.expand(s),delete e[i];for(n in s)n in e||(e[n]=s[n],t[n]=a)}else t[i]=a}function $(e,t,n){var i,a,s=0,r=$.prefilters.length,o=fe.Deferred().always(function(){delete l.elem}),l=function(){if(a)return!1;for(var t=pt||H(),n=Math.max(0,u.startTime+u.duration-t),i=1-(n/u.duration||0),s=0,r=u.tweens.length;s<r;s++)u.tweens[s].run(i);return o.notifyWith(e,[u,i,n]),i<1&&r?n:(r||o.notifyWith(e,[u,1,0]),o.resolveWith(e,[u]),!1)},u=o.promise({elem:e,props:fe.extend({},t),opts:fe.extend(!0,{specialEasing:{},easing:fe.easing._default},n),originalProperties:t,originalOptions:n,startTime:pt||H(),duration:n.duration,tweens:[],createTween:function(t,n){var i=fe.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(a)return this;for(a=!0;n<i;n++)u.tweens[n].run(1);return t?(o.notifyWith(e,[u,1,0]),o.resolveWith(e,[u,t])):o.rejectWith(e,[u,t]),this}}),c=u.props;for(G(c,u.opts.specialEasing);s<r;s++)if(i=$.prefilters[s].call(u,e,c,u.opts))return fe.isFunction(i.stop)&&(fe._queueHooks(u.elem,u.opts.queue).stop=fe.proxy(i.stop,i)),i;return fe.map(c,B,u),fe.isFunction(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),fe.fx.timer(fe.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}function V(e){return(e.match(Ee)||[]).join(" ")}function X(e){return e.getAttribute&&e.getAttribute("class")||""}function U(e,t,n,i){var a;if(Array.isArray(t))fe.each(t,function(t,a){n||Mt.test(e)?i(e,a):U(e+"["+("object"==typeof a&&null!=a?t:"")+"]",a,n,i)});else if(n||"object"!==fe.type(t))i(e,t);else for(a in t)U(e+"["+a+"]",t[a],n,i)}function Z(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,a=0,s=t.toLowerCase().match(Ee)||[];if(fe.isFunction(n))for(;i=s[a++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Q(e,t,n,i){function a(o){var l;return s[o]=!0,fe.each(e[o]||[],function(e,o){var u=o(t,n,i);return"string"!=typeof u||r||s[u]?r?!(l=u):void 0:(t.dataTypes.unshift(u),a(u),!1)}),l}var s={},r=e===jt;return a(t.dataTypes[0])||!s["*"]&&a("*")}function K(e,t){var n,i,a=fe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((a[n]?e:i||(i={}))[n]=t[n]);return i&&fe.extend(!0,e,i),e}function J(e,t,n){for(var i,a,s,r,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(a in o)if(o[a]&&o[a].test(i)){l.unshift(a);break}if(l[0]in n)s=l[0];else{for(a in n){if(!l[0]||e.converters[a+" "+l[0]]){s=a;break}r||(r=a)}s=s||r}if(s)return s!==l[0]&&l.unshift(s),n[s]}function ee(e,t,n,i){var a,s,r,o,l,u={},c=e.dataTypes.slice();if(c[1])for(r in e.converters)u[r.toLowerCase()]=e.converters[r];for(s=c.shift();s;)if(e.responseFields[s]&&(n[e.responseFields[s]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=s,s=c.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(r=u[l+" "+s]||u["* "+s]))for(a in u)if((o=a.split(" "))[1]===s&&(r=u[l+" "+o[0]]||u["* "+o[0]])){!0===r?r=u[a]:!0!==u[a]&&(s=o[0],c.unshift(o[1]));break}if(!0!==r)if(r&&e.throws)t=r(t);else try{t=r(t)}catch(e){return{state:"parsererror",error:r?e:"No conversion from "+l+" to "+s}}}return{state:"success",data:t}}var te=[],ne=e.document,ie=Object.getPrototypeOf,ae=te.slice,se=te.concat,re=te.push,oe=te.indexOf,le={},ue=le.toString,ce=le.hasOwnProperty,de=ce.toString,he=de.call(Object),pe={},fe=function(e,t){return new fe.fn.init(e,t)},me=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ge=/^-ms-/,ve=/-([a-z])/g,ye=function(e,t){return t.toUpperCase()};fe.fn=fe.prototype={jquery:"3.2.1",constructor:fe,length:0,toArray:function(){return ae.call(this)},get:function(e){return null==e?ae.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=fe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return fe.each(this,e)},map:function(e){return this.pushStack(fe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ae.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:re,sort:te.sort,splice:te.splice},fe.extend=fe.fn.extend=function(){var e,t,n,i,a,s,r=arguments[0]||{},o=1,l=arguments.length,u=!1;for("boolean"==typeof r&&(u=r,r=arguments[o]||{},o++),"object"==typeof r||fe.isFunction(r)||(r={}),o===l&&(r=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)n=r[t],r!==(i=e[t])&&(u&&i&&(fe.isPlainObject(i)||(a=Array.isArray(i)))?(a?(a=!1,s=n&&Array.isArray(n)?n:[]):s=n&&fe.isPlainObject(n)?n:{},r[t]=fe.extend(u,s,i)):void 0!==i&&(r[t]=i));return r},fe.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===fe.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=fe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ue.call(e))&&(!(t=ie(e))||"function"==typeof(n=ce.call(t,"constructor")&&t.constructor)&&de.call(n)===he)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[ue.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(ge,"ms-").replace(ve,ye)},each:function(e,t){var n,a=0;if(i(e))for(n=e.length;a<n&&!1!==t.call(e[a],a,e[a]);a++);else for(a in e)if(!1===t.call(e[a],a,e[a]))break;return e},trim:function(e){return null==e?"":(e+"").replace(me,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(i(Object(e))?fe.merge(n,"string"==typeof e?[e]:e):re.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:oe.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,a=e.length;i<n;i++)e[a++]=t[i];return e.length=a,e},grep:function(e,t,n){for(var i=[],a=0,s=e.length,r=!n;a<s;a++)!t(e[a],a)!==r&&i.push(e[a]);return i},map:function(e,t,n){var a,s,r=0,o=[];if(i(e))for(a=e.length;r<a;r++)null!=(s=t(e[r],r,n))&&o.push(s);else for(r in e)null!=(s=t(e[r],r,n))&&o.push(s);return se.apply([],o)},guid:1,proxy:function(e,t){var n,i,a;if("string"==typeof t&&(n=e[t],t=e,e=n),fe.isFunction(e))return i=ae.call(arguments,2),a=function(){return e.apply(t||this,i.concat(ae.call(arguments)))},a.guid=e.guid=e.guid||fe.guid++,a},now:Date.now,support:pe}),"function"==typeof Symbol&&(fe.fn[Symbol.iterator]=te[Symbol.iterator]),fe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var we=function(e){function t(e,t,n,i){var a,s,r,o,l,c,h,p=t&&t.ownerDocument,f=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==f&&9!==f&&11!==f)return n;if(!i&&((t?t.ownerDocument||t:N)!==P&&L(t),t=t||P,F)){if(11!==f&&(l=me.exec(e)))if(a=l[1]){if(9===f){if(!(r=t.getElementById(a)))return n;if(r.id===a)return n.push(r),n}else if(p&&(r=p.getElementById(a))&&R(t,r)&&r.id===a)return n.push(r),n}else{if(l[2])return Z.apply(n,t.getElementsByTagName(e)),n;if((a=l[3])&&b.getElementsByClassName&&t.getElementsByClassName)return Z.apply(n,t.getElementsByClassName(a)),n}if(b.qsa&&!q[e+" "]&&(!z||!z.test(e))){if(1!==f)p=t,h=e;else if("object"!==t.nodeName.toLowerCase()){for((o=t.getAttribute("id"))?o=o.replace(we,be):t.setAttribute("id",o=j),s=(c=S(e)).length;s--;)c[s]="#"+o+" "+d(c[s]);h=c.join(","),p=ge.test(e)&&u(t.parentNode)||t}if(h)try{return Z.apply(n,p.querySelectorAll(h)),n}catch(e){}finally{o===j&&t.removeAttribute("id")}}}return M(e.replace(se,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>x.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[j]=!0,e}function a(e){var t=P.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function s(e,t){for(var n=e.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=t}function r(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function o(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Ce(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return i(function(t){return t=+t,i(function(n,i){for(var a,s=e([],n.length,t),r=s.length;r--;)n[a=s[r]]&&(n[a]=!(i[a]=n[a]))})})}function u(e){return e&&void 0!==e.getElementsByTagName&&e}function c(){}function d(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function h(e,t,n){var i=t.dir,a=t.next,s=a||i,r=n&&"parentNode"===s,o=H++;return t.first?function(t,n,a){for(;t=t[i];)if(1===t.nodeType||r)return e(t,n,a);return!1}:function(t,n,l){var u,c,d,h=[Y,o];if(l){for(;t=t[i];)if((1===t.nodeType||r)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||r)if(d=t[j]||(t[j]={}),c=d[t.uniqueID]||(d[t.uniqueID]={}),a&&a===t.nodeName.toLowerCase())t=t[i]||t;else{if((u=c[s])&&u[0]===Y&&u[1]===o)return h[2]=u[2];if(c[s]=h,h[2]=e(t,n,l))return!0}return!1}}function p(e){return e.length>1?function(t,n,i){for(var a=e.length;a--;)if(!e[a](t,n,i))return!1;return!0}:e[0]}function f(e,n,i){for(var a=0,s=n.length;a<s;a++)t(e,n[a],i);return i}function m(e,t,n,i,a){for(var s,r=[],o=0,l=e.length,u=null!=t;o<l;o++)(s=e[o])&&(n&&!n(s,i,a)||(r.push(s),u&&t.push(o)));return r}function g(e,t,n,a,s,r){return a&&!a[j]&&(a=g(a)),s&&!s[j]&&(s=g(s,r)),i(function(i,r,o,l){var u,c,d,h=[],p=[],g=r.length,v=i||f(t||"*",o.nodeType?[o]:o,[]),y=!e||!i&&t?v:m(v,h,e,o,l),w=n?s||(i?e:g||a)?[]:r:y;if(n&&n(y,w,o,l),a)for(u=m(w,p),a(u,[],o,l),c=u.length;c--;)(d=u[c])&&(w[p[c]]=!(y[p[c]]=d));if(i){if(s||e){if(s){for(u=[],c=w.length;c--;)(d=w[c])&&u.push(y[c]=d);s(null,w=[],u,l)}for(c=w.length;c--;)(d=w[c])&&(u=s?K(i,d):h[c])>-1&&(i[u]=!(r[u]=d))}}else w=m(w===r?w.splice(g,w.length):w),s?s(null,r,w,l):Z.apply(r,w)})}function v(e){for(var t,n,i,a=e.length,s=x.relative[e[0].type],r=s||x.relative[" "],o=s?1:0,l=h(function(e){return e===t},r,!0),u=h(function(e){return K(t,e)>-1},r,!0),c=[function(e,n,i){var a=!s&&(i||n!==D)||((t=n).nodeType?l(e,n,i):u(e,n,i));return t=null,a}];o<a;o++)if(n=x.relative[e[o].type])c=[h(p(c),n)];else{if((n=x.filter[e[o].type].apply(null,e[o].matches))[j]){for(i=++o;i<a&&!x.relative[e[i].type];i++);return g(o>1&&p(c),o>1&&d(e.slice(0,o-1).concat({value:" "===e[o-2].type?"*":""})).replace(se,"$1"),n,o<i&&v(e.slice(o,i)),i<a&&v(e=e.slice(i)),i<a&&d(e))}c.push(n)}return p(c)}function y(e,n){var a=n.length>0,s=e.length>0,r=function(i,r,o,l,u){var c,d,h,p=0,f="0",g=i&&[],v=[],y=D,w=i||s&&x.find.TAG("*",u),b=Y+=null==y?1:Math.random()||.1,C=w.length;for(u&&(D=r===P||r||u);f!==C&&null!=(c=w[f]);f++){if(s&&c){for(d=0,r||c.ownerDocument===P||(L(c),o=!F);h=e[d++];)if(h(c,r||P,o)){l.push(c);break}u&&(Y=b)}a&&((c=!h&&c)&&p--,i&&g.push(c))}if(p+=f,a&&f!==p){for(d=0;h=n[d++];)h(g,v,r,o);if(i){if(p>0)for(;f--;)g[f]||v[f]||(v[f]=X.call(l));v=m(v)}Z.apply(l,v),u&&!i&&v.length>0&&p+n.length>1&&t.uniqueSort(l)}return u&&(Y=b,D=y),g};return a?i(r):r}var w,b,x,C,T,S,k,M,D,_,E,L,P,I,F,z,A,O,R,j="sizzle"+1*new Date,N=e.document,Y=0,H=0,W=n(),B=n(),q=n(),G=function(e,t){return e===t&&(E=!0),0},$={}.hasOwnProperty,V=[],X=V.pop,U=V.push,Z=V.push,Q=V.slice,K=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ie=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",ae=new RegExp(ee+"+","g"),se=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),re=new RegExp("^"+ee+"*,"+ee+"*"),oe=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ue=new RegExp(ie),ce=new RegExp("^"+te+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+ie),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,pe=/^h\d$/i,fe=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ge=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},we=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,be=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},xe=function(){L()},Ce=h(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{Z.apply(V=Q.call(N.childNodes),N.childNodes),V[N.childNodes.length].nodeType}catch(e){Z={apply:V.length?function(e,t){U.apply(e,Q.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}b=t.support={},T=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},L=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:N;return i!==P&&9===i.nodeType&&i.documentElement?(P=i,I=P.documentElement,F=!T(P),N!==P&&(n=P.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xe,!1):n.attachEvent&&n.attachEvent("onunload",xe)),b.attributes=a(function(e){return e.className="i",!e.getAttribute("className")}),b.getElementsByTagName=a(function(e){return e.appendChild(P.createComment("")),!e.getElementsByTagName("*").length}),b.getElementsByClassName=fe.test(P.getElementsByClassName),b.getById=a(function(e){return I.appendChild(e).id=j,!P.getElementsByName||!P.getElementsByName(j).length}),b.getById?(x.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&F){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&F){var n,i,a,s=t.getElementById(e);if(s){if((n=s.getAttributeNode("id"))&&n.value===e)return[s];for(a=t.getElementsByName(e),i=0;s=a[i++];)if((n=s.getAttributeNode("id"))&&n.value===e)return[s]}return[]}}),x.find.TAG=b.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):b.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],a=0,s=t.getElementsByTagName(e);if("*"===e){for(;n=s[a++];)1===n.nodeType&&i.push(n);return i}return s},x.find.CLASS=b.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&F)return t.getElementsByClassName(e)},A=[],z=[],(b.qsa=fe.test(P.querySelectorAll))&&(a(function(e){I.appendChild(e).innerHTML="<a id='"+j+"'></a><select id='"+j+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&z.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||z.push("\\["+ee+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+j+"-]").length||z.push("~="),e.querySelectorAll(":checked").length||z.push(":checked"),e.querySelectorAll("a#"+j+"+*").length||z.push(".#.+[+~]")}),a(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=P.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&z.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&z.push(":enabled",":disabled"),I.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&z.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),z.push(",.*:")})),(b.matchesSelector=fe.test(O=I.matches||I.webkitMatchesSelector||I.mozMatchesSelector||I.oMatchesSelector||I.msMatchesSelector))&&a(function(e){b.disconnectedMatch=O.call(e,"*"),O.call(e,"[s!='']:x"),A.push("!=",ie)}),z=z.length&&new RegExp(z.join("|")),A=A.length&&new RegExp(A.join("|")),t=fe.test(I.compareDocumentPosition),R=t||fe.test(I.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},G=t?function(e,t){if(e===t)return E=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!b.sortDetached&&t.compareDocumentPosition(e)===n?e===P||e.ownerDocument===N&&R(N,e)?-1:t===P||t.ownerDocument===N&&R(N,t)?1:_?K(_,e)-K(_,t):0:4&n?-1:1)}:function(e,t){if(e===t)return E=!0,0;var n,i=0,a=e.parentNode,s=t.parentNode,o=[e],l=[t];if(!a||!s)return e===P?-1:t===P?1:a?-1:s?1:_?K(_,e)-K(_,t):0;if(a===s)return r(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;o[i]===l[i];)i++;return i?r(o[i],l[i]):o[i]===N?-1:l[i]===N?1:0},P):P},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==P&&L(e),n=n.replace(le,"='$1']"),b.matchesSelector&&F&&!q[n+" "]&&(!A||!A.test(n))&&(!z||!z.test(n)))try{var i=O.call(e,n);if(i||b.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,P,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==P&&L(e),R(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==P&&L(e);var n=x.attrHandle[t.toLowerCase()],i=n&&$.call(x.attrHandle,t.toLowerCase())?n(e,t,!F):void 0;return void 0!==i?i:b.attributes||!F?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.escape=function(e){return(e+"").replace(we,be)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,a=0;if(E=!b.detectDuplicates,_=!b.sortStable&&e.slice(0),e.sort(G),E){for(;t=e[a++];)t===e[a]&&(i=n.push(a));for(;i--;)e.splice(n[i],1)}return _=null,e},C=t.getText=function(e){var t,n="",i=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[i++];)n+=C(t);return n},(x=t.selectors={cacheLength:50,createPseudo:i,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ue.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(a){var s=t.attr(a,e);return null==s?"!="===n:!n||(s+="","="===n?s===i:"!="===n?s!==i:"^="===n?i&&0===s.indexOf(i):"*="===n?i&&s.indexOf(i)>-1:"$="===n?i&&s.slice(-i.length)===i:"~="===n?(" "+s.replace(ae," ")+" ").indexOf(i)>-1:"|="===n&&(s===i||s.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,a){var s="nth"!==e.slice(0,3),r="last"!==e.slice(-4),o="of-type"===t;return 1===i&&0===a?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,h,p,f,m=s!==r?"nextSibling":"previousSibling",g=t.parentNode,v=o&&t.nodeName.toLowerCase(),y=!l&&!o,w=!1;if(g){if(s){for(;m;){for(h=t;h=h[m];)if(o?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[r?g.firstChild:g.lastChild],r&&y){for(w=(p=(u=(c=(d=(h=g)[j]||(h[j]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===Y&&u[1])&&u[2],h=p&&g.childNodes[p];h=++p&&h&&h[m]||(w=p=0)||f.pop();)if(1===h.nodeType&&++w&&h===t){c[e]=[Y,p,w];break}}else if(y&&(w=p=(u=(c=(d=(h=t)[j]||(h[j]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===Y&&u[1]),!1===w)for(;(h=++p&&h&&h[m]||(w=p=0)||f.pop())&&((o?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++w||(y&&((c=(d=h[j]||(h[j]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]=[Y,w]),h!==t)););return(w-=a)===i||w%i==0&&w/i>=0}}},PSEUDO:function(e,n){var a,s=x.pseudos[e]||x.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return s[j]?s(n):s.length>1?(a=[e,e,"",n],x.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,a=s(e,n),r=a.length;r--;)e[i=K(e,a[r])]=!(t[i]=a[r])}):function(e){return s(e,0,a)}):s}},pseudos:{not:i(function(e){var t=[],n=[],a=k(e.replace(se,"$1"));return a[j]?i(function(e,t,n,i){for(var s,r=a(e,null,i,[]),o=e.length;o--;)(s=r[o])&&(e[o]=!(t[o]=s))}):function(e,i,s){return t[0]=e,a(t,null,s,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(ve,ye),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:i(function(e){return ce.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var n;do{if(n=F?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===I},focus:function(e){return e===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:o(!1),disabled:o(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return pe.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:l(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=x.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[w]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(w);for(w in{submit:!0,reset:!0})x.pseudos[w]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(w);return c.prototype=x.filters=x.pseudos,x.setFilters=new c,S=t.tokenize=function(e,n){var i,a,s,r,o,l,u,c=B[e+" "];if(c)return n?0:c.slice(0);for(o=e,l=[],u=x.preFilter;o;){i&&!(a=re.exec(o))||(a&&(o=o.slice(a[0].length)||o),l.push(s=[])),i=!1,(a=oe.exec(o))&&(i=a.shift(),s.push({value:i,type:a[0].replace(se," ")}),o=o.slice(i.length));for(r in x.filter)!(a=de[r].exec(o))||u[r]&&!(a=u[r](a))||(i=a.shift(),s.push({value:i,type:r,matches:a}),o=o.slice(i.length));if(!i)break}return n?o.length:o?t.error(e):B(e,l).slice(0)},k=t.compile=function(e,t){var n,i=[],a=[],s=q[e+" "];if(!s){for(t||(t=S(e)),n=t.length;n--;)(s=v(t[n]))[j]?i.push(s):a.push(s);(s=q(e,y(a,i))).selector=e}return s},M=t.select=function(e,t,n,i){var a,s,r,o,l,c="function"==typeof e&&e,h=!i&&S(e=c.selector||e);if(n=n||[],1===h.length){if((s=h[0]=h[0].slice(0)).length>2&&"ID"===(r=s[0]).type&&9===t.nodeType&&F&&x.relative[s[1].type]){if(!(t=(x.find.ID(r.matches[0].replace(ve,ye),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(s.shift().value.length)}for(a=de.needsContext.test(e)?0:s.length;a--&&(r=s[a],!x.relative[o=r.type]);)if((l=x.find[o])&&(i=l(r.matches[0].replace(ve,ye),ge.test(s[0].type)&&u(t.parentNode)||t))){if(s.splice(a,1),!(e=i.length&&d(s)))return Z.apply(n,i),n;break}}return(c||k(e,h))(i,t,!F,n,!t||ge.test(e)&&u(t.parentNode)||t),n},b.sortStable=j.split("").sort(G).join("")===j,b.detectDuplicates=!!E,L(),b.sortDetached=a(function(e){return 1&e.compareDocumentPosition(P.createElement("fieldset"))}),a(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||s("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),b.attributes&&a(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||s("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),a(function(e){return null==e.getAttribute("disabled")})||s(J,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);fe.find=we,fe.expr=we.selectors,fe.expr[":"]=fe.expr.pseudos,fe.uniqueSort=fe.unique=we.uniqueSort,fe.text=we.getText,fe.isXMLDoc=we.isXML,fe.contains=we.contains,fe.escapeSelector=we.escape;var be=function(e,t,n){for(var i=[],a=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&fe(e).is(n))break;i.push(e)}return i},xe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Ce=fe.expr.match.needsContext,Te=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Se=/^.[^:#\[\.,]*$/;fe.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?fe.find.matchesSelector(i,e)?[i]:[]:fe.find.matches(e,fe.grep(t,function(e){return 1===e.nodeType}))},fe.fn.extend({find:function(e){var t,n,i=this.length,a=this;if("string"!=typeof e)return this.pushStack(fe(e).filter(function(){for(t=0;t<i;t++)if(fe.contains(a[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)fe.find(e,a[t],n);return i>1?fe.uniqueSort(n):n},filter:function(e){return this.pushStack(s(this,e||[],!1))},not:function(e){return this.pushStack(s(this,e||[],!0))},is:function(e){return!!s(this,"string"==typeof e&&Ce.test(e)?fe(e):e||[],!1).length}});var ke,Me=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(fe.fn.init=function(e,t,n){var i,a;if(!e)return this;if(n=n||ke,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Me.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof fe?t[0]:t,fe.merge(this,fe.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:ne,!0)),Te.test(i[1])&&fe.isPlainObject(t))for(i in t)fe.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(a=ne.getElementById(i[2]))&&(this[0]=a,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):fe.isFunction(e)?void 0!==n.ready?n.ready(e):e(fe):fe.makeArray(e,this)}).prototype=fe.fn,ke=fe(ne);var De=/^(?:parents|prev(?:Until|All))/,_e={children:!0,contents:!0,next:!0,prev:!0};fe.fn.extend({has:function(e){var t=fe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(fe.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,a=this.length,s=[],r="string"!=typeof e&&fe(e);if(!Ce.test(e))for(;i<a;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(r?r.index(n)>-1:1===n.nodeType&&fe.find.matchesSelector(n,e))){s.push(n);break}return this.pushStack(s.length>1?fe.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?oe.call(fe(e),this[0]):oe.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(fe.uniqueSort(fe.merge(this.get(),fe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),fe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return be(e,"parentNode")},parentsUntil:function(e,t,n){return be(e,"parentNode",n)},next:function(e){return r(e,"nextSibling")},prev:function(e){return r(e,"previousSibling")},nextAll:function(e){return be(e,"nextSibling")},prevAll:function(e){return be(e,"previousSibling")},nextUntil:function(e,t,n){return be(e,"nextSibling",n)},prevUntil:function(e,t,n){return be(e,"previousSibling",n)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return a(e,"iframe")?e.contentDocument:(a(e,"template")&&(e=e.content||e),fe.merge([],e.childNodes))}},function(e,t){fe.fn[e]=function(n,i){var a=fe.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(a=fe.filter(i,a)),this.length>1&&(_e[e]||fe.uniqueSort(a),De.test(e)&&a.reverse()),this.pushStack(a)}});var Ee=/[^\x20\t\r\n\f]+/g;fe.Callbacks=function(e){e="string"==typeof e?o(e):fe.extend({},e);var t,n,i,a,s=[],r=[],l=-1,u=function(){for(a=a||e.once,i=t=!0;r.length;l=-1)for(n=r.shift();++l<s.length;)!1===s[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=s.length,n=!1);e.memory||(n=!1),t=!1,a&&(s=n?[]:"")},c={add:function(){return s&&(n&&!t&&(l=s.length-1,r.push(n)),function t(n){fe.each(n,function(n,i){fe.isFunction(i)?e.unique&&c.has(i)||s.push(i):i&&i.length&&"string"!==fe.type(i)&&t(i)})}(arguments),n&&!t&&u()),this},remove:function(){return fe.each(arguments,function(e,t){for(var n;(n=fe.inArray(t,s,n))>-1;)s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?fe.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return a=r=[],s=n="",this},disabled:function(){return!s},lock:function(){return a=r=[],n||t||(s=n=""),this},locked:function(){return!!a},fireWith:function(e,n){return a||(n=[e,(n=n||[]).slice?n.slice():n],r.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},fe.extend({Deferred:function(t){var n=[["notify","progress",fe.Callbacks("memory"),fe.Callbacks("memory"),2],["resolve","done",fe.Callbacks("once memory"),fe.Callbacks("once memory"),0,"resolved"],["reject","fail",fe.Callbacks("once memory"),fe.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var e=arguments;return fe.Deferred(function(t){fe.each(n,function(n,i){var a=fe.isFunction(e[i[4]])&&e[i[4]];s[i[1]](function(){var e=a&&a.apply(this,arguments);e&&fe.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,a?[e]:arguments)})}),e=null}).promise()},then:function(t,i,a){function s(t,n,i,a){return function(){var o=this,c=arguments,d=function(){var e,d;if(!(t<r)){if((e=i.apply(o,c))===n.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,fe.isFunction(d)?a?d.call(e,s(r,n,l,a),s(r,n,u,a)):(r++,d.call(e,s(r,n,l,a),s(r,n,u,a),s(r,n,l,n.notifyWith))):(i!==l&&(o=void 0,c=[e]),(a||n.resolveWith)(o,c))}},h=a?d:function(){try{d()}catch(e){fe.Deferred.exceptionHook&&fe.Deferred.exceptionHook(e,h.stackTrace),t+1>=r&&(i!==u&&(o=void 0,c=[e]),n.rejectWith(o,c))}};t?h():(fe.Deferred.getStackHook&&(h.stackTrace=fe.Deferred.getStackHook()),e.setTimeout(h))}}var r=0;return fe.Deferred(function(e){n[0][3].add(s(0,e,fe.isFunction(a)?a:l,e.notifyWith)),n[1][3].add(s(0,e,fe.isFunction(t)?t:l)),n[2][3].add(s(0,e,fe.isFunction(i)?i:u))}).promise()},promise:function(e){return null!=e?fe.extend(e,a):a}},s={};return fe.each(n,function(e,t){var r=t[2],o=t[5];a[t[1]]=r.add,o&&r.add(function(){i=o},n[3-e][2].disable,n[0][2].lock),r.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=r.fireWith}),a.promise(s),t&&t.call(s,s),s},when:function(e){var t=arguments.length,n=t,i=Array(n),a=ae.call(arguments),s=fe.Deferred(),r=function(e){return function(n){i[e]=this,a[e]=arguments.length>1?ae.call(arguments):n,--t||s.resolveWith(i,a)}};if(t<=1&&(c(e,s.done(r(n)).resolve,s.reject,!t),"pending"===s.state()||fe.isFunction(a[n]&&a[n].then)))return s.then();for(;n--;)c(a[n],r(n),s.reject);return s.promise()}});var Le=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;fe.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Le.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},fe.readyException=function(t){e.setTimeout(function(){throw t})};var Pe=fe.Deferred();fe.fn.ready=function(e){return Pe.then(e).catch(function(e){fe.readyException(e)}),this},fe.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--fe.readyWait:fe.isReady)||(fe.isReady=!0,!0!==e&&--fe.readyWait>0||Pe.resolveWith(ne,[fe]))}}),fe.ready.then=Pe.then,"complete"===ne.readyState||"loading"!==ne.readyState&&!ne.documentElement.doScroll?e.setTimeout(fe.ready):(ne.addEventListener("DOMContentLoaded",d),e.addEventListener("load",d));var Ie=function(e,t,n,i,a,s,r){var o=0,l=e.length,u=null==n;if("object"===fe.type(n)){a=!0;for(o in n)Ie(e,t,o,n[o],!0,s,r)}else if(void 0!==i&&(a=!0,fe.isFunction(i)||(r=!0),u&&(r?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(fe(e),n)})),t))for(;o<l;o++)t(e[o],n,r?i:i.call(e[o],o,t(e[o],n)));return a?e:u?t.call(e):l?t(e[0],n):s},Fe=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};h.uid=1,h.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Fe(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,a=this.cache(e);if("string"==typeof t)a[fe.camelCase(t)]=n;else for(i in t)a[fe.camelCase(i)]=t[i];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][fe.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(fe.camelCase):(t=fe.camelCase(t))in i?[t]:t.match(Ee)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||fe.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!fe.isEmptyObject(t)}};var ze=new h,Ae=new h,Oe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Re=/[A-Z]/g;fe.extend({hasData:function(e){return Ae.hasData(e)||ze.hasData(e)},data:function(e,t,n){return Ae.access(e,t,n)},removeData:function(e,t){Ae.remove(e,t)},_data:function(e,t,n){return ze.access(e,t,n)},_removeData:function(e,t){ze.remove(e,t)}}),fe.fn.extend({data:function(e,t){var n,i,a,s=this[0],r=s&&s.attributes;if(void 0===e){if(this.length&&(a=Ae.get(s),1===s.nodeType&&!ze.get(s,"hasDataAttrs"))){for(n=r.length;n--;)r[n]&&0===(i=r[n].name).indexOf("data-")&&(i=fe.camelCase(i.slice(5)),f(s,i,a[i]));ze.set(s,"hasDataAttrs",!0)}return a}return"object"==typeof e?this.each(function(){Ae.set(this,e)}):Ie(this,function(t){var n;if(s&&void 0===t){if(void 0!==(n=Ae.get(s,e)))return n;if(void 0!==(n=f(s,e)))return n}else this.each(function(){Ae.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ae.remove(this,e)})}}),fe.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=ze.get(e,t),n&&(!i||Array.isArray(n)?i=ze.access(e,t,fe.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=fe.queue(e,t),i=n.length,a=n.shift(),s=fe._queueHooks(e,t),r=function(){fe.dequeue(e,t)};"inprogress"===a&&(a=n.shift(),i--),a&&("fx"===t&&n.unshift("inprogress"),delete s.stop,a.call(e,r,s)),!i&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return ze.get(e,n)||ze.access(e,n,{empty:fe.Callbacks("once memory").add(function(){ze.remove(e,[t+"queue",n])})})}}),fe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?fe.queue(this[0],e):void 0===t?this:this.each(function(){var n=fe.queue(this,e,t);fe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&fe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){fe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,a=fe.Deferred(),s=this,r=this.length,o=function(){--i||a.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";r--;)(n=ze.get(s[r],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(o));return o(),a.promise(t)}});var je=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ne=new RegExp("^(?:([+-])=|)("+je+")([a-z%]*)$","i"),Ye=["Top","Right","Bottom","Left"],He=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&fe.contains(e.ownerDocument,e)&&"none"===fe.css(e,"display")},We=function(e,t,n,i){var a,s,r={};for(s in t)r[s]=e.style[s],e.style[s]=t[s];a=n.apply(e,i||[]);for(s in t)e.style[s]=r[s];return a},Be={};fe.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){He(this)?fe(this).show():fe(this).hide()})}});var qe=/^(?:checkbox|radio)$/i,Ge=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,$e=/^$|\/(?:java|ecma)script/i,Ve={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ve.optgroup=Ve.option,Ve.tbody=Ve.tfoot=Ve.colgroup=Ve.caption=Ve.thead,Ve.th=Ve.td;var Xe=/<|&#?\w+;/;!function(){var e=ne.createDocumentFragment().appendChild(ne.createElement("div")),t=ne.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),pe.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",pe.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Ue=ne.documentElement,Ze=/^key/,Qe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ke=/^([^.]*)(?:\.(.+)|)/;fe.event={global:{},add:function(e,t,n,i,a){var s,r,o,l,u,c,d,h,p,f,m,g=ze.get(e);if(g)for(n.handler&&(n=(s=n).handler,a=s.selector),a&&fe.find.matchesSelector(Ue,a),n.guid||(n.guid=fe.guid++),(l=g.events)||(l=g.events={}),(r=g.handle)||(r=g.handle=function(t){return void 0!==fe&&fe.event.triggered!==t.type?fe.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(Ee)||[""]).length;u--;)p=m=(o=Ke.exec(t[u])||[])[1],f=(o[2]||"").split(".").sort(),p&&(d=fe.event.special[p]||{},p=(a?d.delegateType:d.bindType)||p,d=fe.event.special[p]||{},c=fe.extend({type:p,origType:m,data:i,handler:n,guid:n.guid,selector:a,needsContext:a&&fe.expr.match.needsContext.test(a),namespace:f.join(".")},s),(h=l[p])||((h=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,f,r)||e.addEventListener&&e.addEventListener(p,r)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),a?h.splice(h.delegateCount++,0,c):h.push(c),fe.event.global[p]=!0)},remove:function(e,t,n,i,a){var s,r,o,l,u,c,d,h,p,f,m,g=ze.hasData(e)&&ze.get(e);if(g&&(l=g.events)){for(u=(t=(t||"").match(Ee)||[""]).length;u--;)if(o=Ke.exec(t[u])||[],p=m=o[1],f=(o[2]||"").split(".").sort(),p){for(d=fe.event.special[p]||{},h=l[p=(i?d.delegateType:d.bindType)||p]||[],o=o[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=s=h.length;s--;)c=h[s],!a&&m!==c.origType||n&&n.guid!==c.guid||o&&!o.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(h.splice(s,1),c.selector&&h.delegateCount--,d.remove&&d.remove.call(e,c));r&&!h.length&&(d.teardown&&!1!==d.teardown.call(e,f,g.handle)||fe.removeEvent(e,p,g.handle),delete l[p])}else for(p in l)fe.event.remove(e,p+t[u],n,i,!0);fe.isEmptyObject(l)&&ze.remove(e,"handle events")}},dispatch:function(e){var t,n,i,a,s,r,o=fe.event.fix(e),l=new Array(arguments.length),u=(ze.get(this,"events")||{})[o.type]||[],c=fe.event.special[o.type]||{};for(l[0]=o,t=1;t<arguments.length;t++)l[t]=arguments[t];if(o.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,o)){for(r=fe.event.handlers.call(this,o,u),t=0;(a=r[t++])&&!o.isPropagationStopped();)for(o.currentTarget=a.elem,n=0;(s=a.handlers[n++])&&!o.isImmediatePropagationStopped();)o.rnamespace&&!o.rnamespace.test(s.namespace)||(o.handleObj=s,o.data=s.data,void 0!==(i=((fe.event.special[s.origType]||{}).handle||s.handler).apply(a.elem,l))&&!1===(o.result=i)&&(o.preventDefault(),o.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,o),o.result}},handlers:function(e,t){var n,i,a,s,r,o=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(s=[],r={},n=0;n<l;n++)void 0===r[a=(i=t[n]).selector+" "]&&(r[a]=i.needsContext?fe(a,this).index(u)>-1:fe.find(a,this,null,[u]).length),r[a]&&s.push(i);s.length&&o.push({elem:u,handlers:s})}return u=this,l<t.length&&o.push({elem:u,handlers:t.slice(l)}),o},addProp:function(e,t){Object.defineProperty(fe.Event.prototype,e,{enumerable:!0,configurable:!0,get:fe.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[fe.expando]?e:new fe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==T()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===T()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&a(this,"input"))return this.click(),!1},_default:function(e){return a(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},fe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},fe.Event=function(e,t){if(!(this instanceof fe.Event))return new fe.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?x:C,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&fe.extend(this,t),this.timeStamp=e&&e.timeStamp||fe.now(),this[fe.expando]=!0},fe.Event.prototype={constructor:fe.Event,isDefaultPrevented:C,isPropagationStopped:C,isImmediatePropagationStopped:C,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=x,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=x,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=x,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},fe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ze.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Qe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},fe.event.addProp),fe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){fe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,a=e.relatedTarget,s=e.handleObj;return a&&(a===i||fe.contains(i,a))||(e.type=s.origType,n=s.handler.apply(this,arguments),e.type=t),n}}}),fe.fn.extend({on:function(e,t,n,i){return S(this,e,t,n,i)},one:function(e,t,n,i){return S(this,e,t,n,i,1)},off:function(e,t,n){var i,a;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,fe(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(a in e)this.off(a,t,e[a]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=C),this.each(function(){fe.event.remove(this,e,n,t)})}});var Je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,et=/<script|<style|<link/i,tt=/checked\s*(?:[^=]|=\s*.checked.)/i,nt=/^true\/(.*)/,it=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;fe.extend({htmlPrefilter:function(e){return e.replace(Je,"<$1></$2>")},clone:function(e,t,n){var i,a,s,r,o=e.cloneNode(!0),l=fe.contains(e.ownerDocument,e);if(!(pe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||fe.isXMLDoc(e)))for(r=y(o),i=0,a=(s=y(e)).length;i<a;i++)E(s[i],r[i]);if(t)if(n)for(s=s||y(e),r=r||y(o),i=0,a=s.length;i<a;i++)_(s[i],r[i]);else _(e,o);return(r=y(o,"script")).length>0&&w(r,!l&&y(e,"script")),o},cleanData:function(e){for(var t,n,i,a=fe.event.special,s=0;void 0!==(n=e[s]);s++)if(Fe(n)){if(t=n[ze.expando]){if(t.events)for(i in t.events)a[i]?fe.event.remove(n,i):fe.removeEvent(n,i,t.handle);n[ze.expando]=void 0}n[Ae.expando]&&(n[Ae.expando]=void 0)}}}),fe.fn.extend({detach:function(e){return P(this,e,!0)},remove:function(e){return P(this,e)},text:function(e){return Ie(this,function(e){return void 0===e?fe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return L(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||k(this,e).appendChild(e)})},prepend:function(){return L(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=k(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return L(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return L(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(fe.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return fe.clone(this,e,t)})},html:function(e){return Ie(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!et.test(e)&&!Ve[(Ge.exec(e)||["",""])[1].toLowerCase()]){e=fe.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(fe.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return L(this,arguments,function(t){var n=this.parentNode;fe.inArray(this,e)<0&&(fe.cleanData(y(this)),n&&n.replaceChild(t,this))},e)}}),fe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){fe.fn[e]=function(e){for(var n,i=[],a=fe(e),s=a.length-1,r=0;r<=s;r++)n=r===s?this:this.clone(!0),fe(a[r])[t](n),re.apply(i,n.get());return this.pushStack(i)}});var at=/^margin/,st=new RegExp("^("+je+")(?!px)[a-z%]+$","i"),rt=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(o){o.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",o.innerHTML="",Ue.appendChild(r);var t=e.getComputedStyle(o);n="1%"!==t.top,s="2px"===t.marginLeft,i="4px"===t.width,o.style.marginRight="50%",a="4px"===t.marginRight,Ue.removeChild(r),o=null}}var n,i,a,s,r=ne.createElement("div"),o=ne.createElement("div");o.style&&(o.style.backgroundClip="content-box",o.cloneNode(!0).style.backgroundClip="",pe.clearCloneStyle="content-box"===o.style.backgroundClip,r.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",r.appendChild(o),fe.extend(pe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),a},reliableMarginLeft:function(){return t(),s}}))}();var ot=/^(none|table(?!-c[ea]).+)/,lt=/^--/,ut={position:"absolute",visibility:"hidden",display:"block"},ct={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","Moz","ms"],ht=ne.createElement("div").style;fe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=I(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,s,r,o=fe.camelCase(t),l=lt.test(t),u=e.style;if(l||(t=A(o)),r=fe.cssHooks[t]||fe.cssHooks[o],void 0===n)return r&&"get"in r&&void 0!==(a=r.get(e,!1,i))?a:u[t];"string"===(s=typeof n)&&(a=Ne.exec(n))&&a[1]&&(n=m(e,t,a),s="number"),null!=n&&n===n&&("number"===s&&(n+=a&&a[3]||(fe.cssNumber[o]?"":"px")),pe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),r&&"set"in r&&void 0===(n=r.set(e,n,i))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,i){var a,s,r,o=fe.camelCase(t);return lt.test(t)||(t=A(o)),(r=fe.cssHooks[t]||fe.cssHooks[o])&&"get"in r&&(a=r.get(e,!0,n)),void 0===a&&(a=I(e,t,i)),"normal"===a&&t in ct&&(a=ct[t]),""===n||n?(s=parseFloat(a),!0===n||isFinite(s)?s||0:a):a}}),fe.each(["height","width"],function(e,t){fe.cssHooks[t]={get:function(e,n,i){if(n)return!ot.test(fe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?j(e,t,i):We(e,ut,function(){return j(e,t,i)})},set:function(e,n,i){var a,s=i&&rt(e),r=i&&R(e,t,i,"border-box"===fe.css(e,"boxSizing",!1,s),s);return r&&(a=Ne.exec(n))&&"px"!==(a[3]||"px")&&(e.style[t]=n,n=fe.css(e,t)),O(e,n,r)}}}),fe.cssHooks.marginLeft=F(pe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(I(e,"marginLeft"))||e.getBoundingClientRect().left-We(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),fe.each({margin:"",padding:"",border:"Width"},function(e,t){fe.cssHooks[e+t]={expand:function(n){for(var i=0,a={},s="string"==typeof n?n.split(" "):[n];i<4;i++)a[e+Ye[i]+t]=s[i]||s[i-2]||s[0];return a}},at.test(e)||(fe.cssHooks[e+t].set=O)}),fe.fn.extend({css:function(e,t){return Ie(this,function(e,t,n){var i,a,s={},r=0;if(Array.isArray(t)){for(i=rt(e),a=t.length;r<a;r++)s[t[r]]=fe.css(e,t[r],!1,i);return s}return void 0!==n?fe.style(e,t,n):fe.css(e,t)},e,t,arguments.length>1)}}),fe.Tween=N,N.prototype={constructor:N,init:function(e,t,n,i,a,s){this.elem=e,this.prop=n,this.easing=a||fe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=s||(fe.cssNumber[n]?"":"px")},cur:function(){var e=N.propHooks[this.prop];return e&&e.get?e.get(this):N.propHooks._default.get(this)},run:function(e){var t,n=N.propHooks[this.prop];return this.options.duration?this.pos=t=fe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):N.propHooks._default.set(this),this}},N.prototype.init.prototype=N.prototype,N.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=fe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){fe.fx.step[e.prop]?fe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[fe.cssProps[e.prop]]&&!fe.cssHooks[e.prop]?e.elem[e.prop]=e.now:fe.style(e.elem,e.prop,e.now+e.unit)}}},N.propHooks.scrollTop=N.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},fe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},fe.fx=N.prototype.init,fe.fx.step={};var pt,ft,mt=/^(?:toggle|show|hide)$/,gt=/queueHooks$/;fe.Animation=fe.extend($,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return m(n.elem,e,Ne.exec(t),n),n}]},tweener:function(e,t){fe.isFunction(e)?(t=e,e=["*"]):e=e.match(Ee);for(var n,i=0,a=e.length;i<a;i++)n=e[i],$.tweeners[n]=$.tweeners[n]||[],$.tweeners[n].unshift(t)},prefilters:[q],prefilter:function(e,t){t?$.prefilters.unshift(e):$.prefilters.push(e)}}),fe.speed=function(e,t,n){var i=e&&"object"==typeof e?fe.extend({},e):{complete:n||!n&&t||fe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!fe.isFunction(t)&&t};return fe.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in fe.fx.speeds?i.duration=fe.fx.speeds[i.duration]:i.duration=fe.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){fe.isFunction(i.old)&&i.old.call(this),i.queue&&fe.dequeue(this,i.queue)},i},fe.fn.extend({fadeTo:function(e,t,n,i){return this.filter(He).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var a=fe.isEmptyObject(e),s=fe.speed(t,n,i),r=function(){var t=$(this,fe.extend({},e),s);(a||ze.get(this,"finish"))&&t.stop(!0)};return r.finish=r,a||!1===s.queue?this.each(r):this.queue(s.queue,r)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,a=null!=e&&e+"queueHooks",s=fe.timers,r=ze.get(this);if(a)r[a]&&r[a].stop&&i(r[a]);else for(a in r)r[a]&&r[a].stop&&gt.test(a)&&i(r[a]);for(a=s.length;a--;)s[a].elem!==this||null!=e&&s[a].queue!==e||(s[a].anim.stop(n),t=!1,s.splice(a,1));!t&&n||fe.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=ze.get(this),i=n[e+"queue"],a=n[e+"queueHooks"],s=fe.timers,r=i?i.length:0;for(n.finish=!0,fe.queue(this,e,[]),a&&a.stop&&a.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===e&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;t<r;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),fe.each(["toggle","show","hide"],function(e,t){var n=fe.fn[t];fe.fn[t]=function(e,i,a){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(W(t,!0),e,i,a)}}),fe.each({slideDown:W("show"),slideUp:W("hide"),slideToggle:W("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){fe.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),fe.timers=[],fe.fx.tick=function(){var e,t=0,n=fe.timers;for(pt=fe.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||fe.fx.stop(),pt=void 0},fe.fx.timer=function(e){fe.timers.push(e),fe.fx.start()},fe.fx.interval=13,fe.fx.start=function(){ft||(ft=!0,Y())},fe.fx.stop=function(){ft=null},fe.fx.speeds={slow:600,fast:200,_default:400},fe.fn.delay=function(t,n){return t=fe.fx?fe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var a=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(a)}})},function(){var e=ne.createElement("input"),t=ne.createElement("select").appendChild(ne.createElement("option"));e.type="checkbox",pe.checkOn=""!==e.value,pe.optSelected=t.selected,(e=ne.createElement("input")).value="t",e.type="radio",pe.radioValue="t"===e.value}();var vt,yt=fe.expr.attrHandle;fe.fn.extend({attr:function(e,t){return Ie(this,fe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){fe.removeAttr(this,e)})}}),fe.extend({attr:function(e,t,n){var i,a,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?fe.prop(e,t,n):(1===s&&fe.isXMLDoc(e)||(a=fe.attrHooks[t.toLowerCase()]||(fe.expr.match.bool.test(t)?vt:void 0)),void 0!==n?null===n?void fe.removeAttr(e,t):a&&"set"in a&&void 0!==(i=a.set(e,n,t))?i:(e.setAttribute(t,n+""),n):a&&"get"in a&&null!==(i=a.get(e,t))?i:(i=fe.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!pe.radioValue&&"radio"===t&&a(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,a=t&&t.match(Ee);if(a&&1===e.nodeType)for(;n=a[i++];)e.removeAttribute(n)}}),vt={set:function(e,t,n){return!1===t?fe.removeAttr(e,n):e.setAttribute(n,n),n}},fe.each(fe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=yt[t]||fe.find.attr;yt[t]=function(e,t,i){var a,s,r=t.toLowerCase();return i||(s=yt[r],yt[r]=a,a=null!=n(e,t,i)?r:null,yt[r]=s),a}});var wt=/^(?:input|select|textarea|button)$/i,bt=/^(?:a|area)$/i;fe.fn.extend({prop:function(e,t){return Ie(this,fe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[fe.propFix[e]||e]})}}),fe.extend({prop:function(e,t,n){var i,a,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&fe.isXMLDoc(e)||(t=fe.propFix[t]||t,a=fe.propHooks[t]),void 0!==n?a&&"set"in a&&void 0!==(i=a.set(e,n,t))?i:e[t]=n:a&&"get"in a&&null!==(i=a.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=fe.find.attr(e,"tabindex");return t?parseInt(t,10):wt.test(e.nodeName)||bt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),pe.optSelected||(fe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),fe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){fe.propFix[this.toLowerCase()]=this}),fe.fn.extend({addClass:function(e){var t,n,i,a,s,r,o,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).addClass(e.call(this,t,X(this)))});if("string"==typeof e&&e)for(t=e.match(Ee)||[];n=this[l++];)if(a=X(n),i=1===n.nodeType&&" "+V(a)+" "){for(r=0;s=t[r++];)i.indexOf(" "+s+" ")<0&&(i+=s+" ");a!==(o=V(i))&&n.setAttribute("class",o)}return this},removeClass:function(e){var t,n,i,a,s,r,o,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).removeClass(e.call(this,t,X(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Ee)||[];n=this[l++];)if(a=X(n),i=1===n.nodeType&&" "+V(a)+" "){for(r=0;s=t[r++];)for(;i.indexOf(" "+s+" ")>-1;)i=i.replace(" "+s+" "," ");a!==(o=V(i))&&n.setAttribute("class",o)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):fe.isFunction(e)?this.each(function(n){fe(this).toggleClass(e.call(this,n,X(this),t),t)}):this.each(function(){var t,i,a,s;if("string"===n)for(i=0,a=fe(this),s=e.match(Ee)||[];t=s[i++];)a.hasClass(t)?a.removeClass(t):a.addClass(t);else void 0!==e&&"boolean"!==n||((t=X(this))&&ze.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":ze.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+V(X(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;fe.fn.extend({val:function(e){var t,n,i,a=this[0];{if(arguments.length)return i=fe.isFunction(e),this.each(function(n){var a;1===this.nodeType&&(null==(a=i?e.call(this,n,fe(this).val()):e)?a="":"number"==typeof a?a+="":Array.isArray(a)&&(a=fe.map(a,function(e){return null==e?"":e+""})),(t=fe.valHooks[this.type]||fe.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,a,"value")||(this.value=a))});if(a)return(t=fe.valHooks[a.type]||fe.valHooks[a.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(a,"value"))?n:(n=a.value,"string"==typeof n?n.replace(xt,""):null==n?"":n)}}}),fe.extend({valHooks:{option:{get:function(e){var t=fe.find.attr(e,"value");return null!=t?t:V(fe.text(e))}},select:{get:function(e){var t,n,i,s=e.options,r=e.selectedIndex,o="select-one"===e.type,l=o?null:[],u=o?r+1:s.length;for(i=r<0?u:o?r:0;i<u;i++)if(((n=s[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!a(n.parentNode,"optgroup"))){if(t=fe(n).val(),o)return t;l.push(t)}return l},set:function(e,t){for(var n,i,a=e.options,s=fe.makeArray(t),r=a.length;r--;)((i=a[r]).selected=fe.inArray(fe.valHooks.option.get(i),s)>-1)&&(n=!0);return n||(e.selectedIndex=-1),s}}}}),fe.each(["radio","checkbox"],function(){fe.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=fe.inArray(fe(e).val(),t)>-1}},pe.checkOn||(fe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Ct=/^(?:focusinfocus|focusoutblur)$/;fe.extend(fe.event,{trigger:function(t,n,i,a){var s,r,o,l,u,c,d,h=[i||ne],p=ce.call(t,"type")?t.type:t,f=ce.call(t,"namespace")?t.namespace.split("."):[];if(r=o=i=i||ne,3!==i.nodeType&&8!==i.nodeType&&!Ct.test(p+fe.event.triggered)&&(p.indexOf(".")>-1&&(p=(f=p.split(".")).shift(),f.sort()),u=p.indexOf(":")<0&&"on"+p,t=t[fe.expando]?t:new fe.Event(p,"object"==typeof t&&t),t.isTrigger=a?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:fe.makeArray(n,[t]),d=fe.event.special[p]||{},a||!d.trigger||!1!==d.trigger.apply(i,n))){if(!a&&!d.noBubble&&!fe.isWindow(i)){for(l=d.delegateType||p,Ct.test(l+p)||(r=r.parentNode);r;r=r.parentNode)h.push(r),o=r;o===(i.ownerDocument||ne)&&h.push(o.defaultView||o.parentWindow||e)}for(s=0;(r=h[s++])&&!t.isPropagationStopped();)t.type=s>1?l:d.bindType||p,(c=(ze.get(r,"events")||{})[t.type]&&ze.get(r,"handle"))&&c.apply(r,n),(c=u&&r[u])&&c.apply&&Fe(r)&&(t.result=c.apply(r,n),!1===t.result&&t.preventDefault());return t.type=p,a||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),n)||!Fe(i)||u&&fe.isFunction(i[p])&&!fe.isWindow(i)&&((o=i[u])&&(i[u]=null),fe.event.triggered=p,i[p](),fe.event.triggered=void 0,o&&(i[u]=o)),t.result}},simulate:function(e,t,n){var i=fe.extend(new fe.Event,n,{type:e,isSimulated:!0});fe.event.trigger(i,null,t)}}),fe.fn.extend({trigger:function(e,t){return this.each(function(){fe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return fe.event.trigger(e,t,n,!0)}}),fe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){fe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),fe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),pe.focusin="onfocusin"in e,pe.focusin||fe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){fe.event.simulate(t,e.target,fe.event.fix(e))};fe.event.special[t]={setup:function(){var i=this.ownerDocument||this,a=ze.access(i,t);a||i.addEventListener(e,n,!0),ze.access(i,t,(a||0)+1)},teardown:function(){var i=this.ownerDocument||this,a=ze.access(i,t)-1;a?ze.access(i,t,a):(i.removeEventListener(e,n,!0),ze.remove(i,t))}}});var Tt=e.location,St=fe.now(),kt=/\?/;fe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||fe.error("Invalid XML: "+t),n};var Mt=/\[\]$/,Dt=/\r?\n/g,_t=/^(?:submit|button|image|reset|file)$/i,Et=/^(?:input|select|textarea|keygen)/i;fe.param=function(e,t){var n,i=[],a=function(e,t){var n=fe.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!fe.isPlainObject(e))fe.each(e,function(){a(this.name,this.value)});else for(n in e)U(n,e[n],t,a);return i.join("&")},fe.fn.extend({serialize:function(){return fe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=fe.prop(this,"elements");return e?fe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!fe(this).is(":disabled")&&Et.test(this.nodeName)&&!_t.test(e)&&(this.checked||!qe.test(e))}).map(function(e,t){var n=fe(this).val();return null==n?null:Array.isArray(n)?fe.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\r\n")}}):{name:t.name,value:n.replace(Dt,"\r\n")}}).get()}});var Lt=/%20/g,Pt=/#.*$/,It=/([?&])_=[^&]*/,Ft=/^(.*?):[ \t]*([^\r\n]*)$/gm,zt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,At=/^(?:GET|HEAD)$/,Ot=/^\/\//,Rt={},jt={},Nt="*/".concat("*"),Yt=ne.createElement("a");Yt.href=Tt.href,fe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Tt.href,type:"GET",isLocal:zt.test(Tt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Nt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":fe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?K(K(e,fe.ajaxSettings),t):K(fe.ajaxSettings,e)},ajaxPrefilter:Z(Rt),ajaxTransport:Z(jt),ajax:function(t,n){function i(t,n,i,o){var u,h,p,b,x,C=n;c||(c=!0,l&&e.clearTimeout(l),a=void 0,r=o||"",T.readyState=t>0?4:0,u=t>=200&&t<300||304===t,i&&(b=J(f,T,i)),b=ee(f,b,T,u),u?(f.ifModified&&((x=T.getResponseHeader("Last-Modified"))&&(fe.lastModified[s]=x),(x=T.getResponseHeader("etag"))&&(fe.etag[s]=x)),204===t||"HEAD"===f.type?C="nocontent":304===t?C="notmodified":(C=b.state,h=b.data,u=!(p=b.error))):(p=C,!t&&C||(C="error",t<0&&(t=0))),T.status=t,T.statusText=(n||C)+"",u?v.resolveWith(m,[h,C,T]):v.rejectWith(m,[T,C,p]),T.statusCode(w),w=void 0,d&&g.trigger(u?"ajaxSuccess":"ajaxError",[T,f,u?h:p]),y.fireWith(m,[T,C]),d&&(g.trigger("ajaxComplete",[T,f]),--fe.active||fe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var a,s,r,o,l,u,c,d,h,p,f=fe.ajaxSetup({},n),m=f.context||f,g=f.context&&(m.nodeType||m.jquery)?fe(m):fe.event,v=fe.Deferred(),y=fe.Callbacks("once memory"),w=f.statusCode||{},b={},x={},C="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(c){if(!o)for(o={};t=Ft.exec(r);)o[t[1].toLowerCase()]=t[2];t=o[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?r:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||C;return a&&a.abort(t),i(0,t),this}};if(v.promise(T),f.url=((t||f.url||Tt.href)+"").replace(Ot,Tt.protocol+"//"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(Ee)||[""],null==f.crossDomain){u=ne.createElement("a");try{u.href=f.url,u.href=u.href,f.crossDomain=Yt.protocol+"//"+Yt.host!=u.protocol+"//"+u.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=fe.param(f.data,f.traditional)),Q(Rt,f,n,T),c)return T;(d=fe.event&&f.global)&&0==fe.active++&&fe.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!At.test(f.type),s=f.url.replace(Pt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Lt,"+")):(p=f.url.slice(s.length),f.data&&(s+=(kt.test(s)?"&":"?")+f.data,delete f.data),!1===f.cache&&(s=s.replace(It,"$1"),p=(kt.test(s)?"&":"?")+"_="+St+++p),f.url=s+p),f.ifModified&&(fe.lastModified[s]&&T.setRequestHeader("If-Modified-Since",fe.lastModified[s]),fe.etag[s]&&T.setRequestHeader("If-None-Match",fe.etag[s])),(f.data&&f.hasContent&&!1!==f.contentType||n.contentType)&&T.setRequestHeader("Content-Type",f.contentType),T.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Nt+"; q=0.01":""):f.accepts["*"]);for(h in f.headers)T.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(!1===f.beforeSend.call(m,T,f)||c))return T.abort();if(C="abort",y.add(f.complete),T.done(f.success),T.fail(f.error),a=Q(jt,f,n,T)){if(T.readyState=1,d&&g.trigger("ajaxSend",[T,f]),c)return T;f.async&&f.timeout>0&&(l=e.setTimeout(function(){T.abort("timeout")},f.timeout));try{c=!1,a.send(b,i)}catch(e){if(c)throw e;i(-1,e)}}else i(-1,"No Transport");return T},getJSON:function(e,t,n){return fe.get(e,t,n,"json")},getScript:function(e,t){return fe.get(e,void 0,t,"script")}}),fe.each(["get","post"],function(e,t){fe[t]=function(e,n,i,a){return fe.isFunction(n)&&(a=a||i,i=n,n=void 0),fe.ajax(fe.extend({url:e,type:t,dataType:a,data:n,success:i},fe.isPlainObject(e)&&e))}}),fe._evalUrl=function(e){return fe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},fe.fn.extend({wrapAll:function(e){var t;return this[0]&&(fe.isFunction(e)&&(e=e.call(this[0])),t=fe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return fe.isFunction(e)?this.each(function(t){fe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=fe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=fe.isFunction(e);return this.each(function(n){fe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){fe(this).replaceWith(this.childNodes)}),this}}),fe.expr.pseudos.hidden=function(e){return!fe.expr.pseudos.visible(e)},fe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},fe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Ht={0:200,1223:204},Wt=fe.ajaxSettings.xhr();pe.cors=!!Wt&&"withCredentials"in Wt,pe.ajax=Wt=!!Wt,fe.ajaxTransport(function(t){var n,i;if(pe.cors||Wt&&!t.crossDomain)return{send:function(a,s){var r,o=t.xhr();if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)o[r]=t.xhrFields[r];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||a["X-Requested-With"]||(a["X-Requested-With"]="XMLHttpRequest");for(r in a)o.setRequestHeader(r,a[r]);n=function(e){return function(){n&&(n=i=o.onload=o.onerror=o.onabort=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?s(0,"error"):s(o.status,o.statusText):s(Ht[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=n(),i=o.onerror=n("error"),void 0!==o.onabort?o.onabort=i:o.onreadystatechange=function(){4===o.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{o.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),fe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),fe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return fe.globalEval(e),e}}}),fe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),fe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,a){t=fe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&a("error"===e.type?404:200,e.type)}),ne.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Bt=[],qt=/(=)\?(?=&|$)|\?\?/;fe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Bt.pop()||fe.expando+"_"+St++;return this[e]=!0,e}}),fe.ajaxPrefilter("json jsonp",function(t,n,i){var a,s,r,o=!1!==t.jsonp&&(qt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&qt.test(t.data)&&"data");if(o||"jsonp"===t.dataTypes[0])return a=t.jsonpCallback=fe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,o?t[o]=t[o].replace(qt,"$1"+a):!1!==t.jsonp&&(t.url+=(kt.test(t.url)?"&":"?")+t.jsonp+"="+a),t.converters["script json"]=function(){return r||fe.error(a+" was not called"),r[0]},t.dataTypes[0]="json",s=e[a],e[a]=function(){r=arguments},i.always(function(){void 0===s?fe(e).removeProp(a):e[a]=s,t[a]&&(t.jsonpCallback=n.jsonpCallback,Bt.push(a)),r&&fe.isFunction(s)&&s(r[0]),r=s=void 0}),"script"}),pe.createHTMLDocument=function(){var e=ne.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),fe.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,a,s;return t||(pe.createHTMLDocument?((i=(t=ne.implementation.createHTMLDocument("")).createElement("base")).href=ne.location.href,t.head.appendChild(i)):t=ne),a=Te.exec(e),s=!n&&[],a?[t.createElement(a[1])]:(a=b([e],t,s),s&&s.length&&fe(s).remove(),fe.merge([],a.childNodes))},fe.fn.load=function(e,t,n){var i,a,s,r=this,o=e.indexOf(" ");return o>-1&&(i=V(e.slice(o)),e=e.slice(0,o)),fe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(a="POST"),r.length>0&&fe.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done(function(e){s=arguments,r.html(i?fe("<div>").append(fe.parseHTML(e)).find(i):e)}).always(n&&function(e,t){r.each(function(){n.apply(this,s||[e.responseText,t,e])})}),this},fe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){fe.fn[t]=function(e){return this.on(t,e)}}),fe.expr.pseudos.animated=function(e){return fe.grep(fe.timers,function(t){return e===t.elem}).length},fe.offset={setOffset:function(e,t,n){var i,a,s,r,o,l,u=fe.css(e,"position"),c=fe(e),d={};"static"===u&&(e.style.position="relative"),o=c.offset(),s=fe.css(e,"top"),l=fe.css(e,"left"),("absolute"===u||"fixed"===u)&&(s+l).indexOf("auto")>-1?(r=(i=c.position()).top,a=i.left):(r=parseFloat(s)||0,a=parseFloat(l)||0),fe.isFunction(t)&&(t=t.call(e,n,fe.extend({},o))),null!=t.top&&(d.top=t.top-o.top+r),null!=t.left&&(d.left=t.left-o.left+a),"using"in t?t.using.call(e,d):c.css(d)}},fe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){fe.offset.setOffset(this,e,t)});var t,n,i,a,s=this[0];if(s)return s.getClientRects().length?(i=s.getBoundingClientRect(),t=s.ownerDocument,n=t.documentElement,a=t.defaultView,{top:i.top+a.pageYOffset-n.clientTop,left:i.left+a.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===fe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),a(e[0],"html")||(i=e.offset()),i={top:i.top+fe.css(e[0],"borderTopWidth",!0),left:i.left+fe.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-fe.css(n,"marginTop",!0),left:t.left-i.left-fe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===fe.css(e,"position");)e=e.offsetParent;return e||Ue})}}),fe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;fe.fn[e]=function(i){return Ie(this,function(e,i,a){var s;if(fe.isWindow(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===a)return s?s[t]:e[i];s?s.scrollTo(n?s.pageXOffset:a,n?a:s.pageYOffset):e[i]=a},e,i,arguments.length)}}),fe.each(["top","left"],function(e,t){fe.cssHooks[t]=F(pe.pixelPosition,function(e,n){if(n)return n=I(e,t),st.test(n)?fe(e).position()[t]+"px":n})}),fe.each({Height:"height",Width:"width"},function(e,t){fe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){fe.fn[i]=function(a,s){var r=arguments.length&&(n||"boolean"!=typeof a),o=n||(!0===a||!0===s?"margin":"border");return Ie(this,function(t,n,a){var s;return fe.isWindow(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(s=t.documentElement,Math.max(t.body["scroll"+e],s["scroll"+e],t.body["offset"+e],s["offset"+e],s["client"+e])):void 0===a?fe.css(t,n,o):fe.style(t,n,a,o)},t,r?a:void 0,r)}})}),fe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),fe.holdReady=function(e){e?fe.readyWait++:fe.ready(!0)},fe.isArray=Array.isArray,fe.parseJSON=JSON.parse,fe.nodeName=a,"function"==typeof define&&define.amd&&define("jquery",[],function(){return fe});var Gt=e.jQuery,$t=e.$;return fe.noConflict=function(t){return e.$===fe&&(e.$=$t),t&&e.jQuery===fe&&(e.jQuery=Gt),fe},t||(e.jQuery=e.$=fe),fe}),function(e,t){"object"==typeof module&&module.exports?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Spinner=t()}(this,function(){"use strict";function e(e,t){var n,i=document.createElement(e||"div");for(n in t)i[n]=t[n];return i}function t(e){for(var t=1,n=arguments.length;t<n;t++)e.appendChild(arguments[t]);return e}function n(e,t,n,i){var a=["opacity",t,~~(100*e),n,i].join("-"),s=.01+n/i*100,r=Math.max(1-(1-e)/t*(100-s),e),o=l.substring(0,l.indexOf("Animation")).toLowerCase(),c=o&&"-"+o+"-"||"";return d[a]||(u.insertRule("@"+c+"keyframes "+a+"{0%{opacity:"+r+"}"+s+"%{opacity:"+e+"}"+(s+.01)+"%{opacity:1}"+(s+t)%100+"%{opacity:"+e+"}100%{opacity:"+r+"}}",u.cssRules.length),d[a]=1),a}function i(e,t){var n,i,a=e.style;if(t=t.charAt(0).toUpperCase()+t.slice(1),void 0!==a[t])return t;for(i=0;i<c.length;i++)if(n=c[i]+t,void 0!==a[n])return n}function a(e,t){for(var n in t)e.style[i(e,n)||n]=t[n];return e}function s(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)void 0===e[i]&&(e[i]=n[i])}return e}function r(e,t){return"string"==typeof e?e:e[t%e.length]}function o(e){this.opts=s(e||{},o.defaults,h)}var l,u,c=["webkit","Moz","ms","O"],d={},h={lines:12,length:7,width:5,radius:10,scale:1,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:100,fps:20,zIndex:2e9,className:"spinner",top:"50%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};if(o.defaults={},s(o.prototype,{spin:function(t){this.stop();var n=this,i=n.opts,s=n.el=e(null,{className:i.className});if(a(s,{position:i.position,width:0,zIndex:i.zIndex,left:i.left,top:i.top}),t&&t.insertBefore(s,t.firstChild||null),s.setAttribute("role","progressbar"),n.lines(s,n.opts),!l){var r,o=0,u=(i.lines-1)*(1-i.direction)/2,c=i.fps,d=c/i.speed,h=(1-i.opacity)/(d*i.trail/100),p=d/i.lines;!function e(){o++;for(var t=0;t<i.lines;t++)r=Math.max(1-(o+(i.lines-t)*p)%d*h,i.opacity),n.opacity(s,t*i.direction+u,r,i);n.timeout=n.el&&setTimeout(e,~~(1e3/c))}()}return n},stop:function(){var e=this.el;return e&&(clearTimeout(this.timeout),e.parentNode&&e.parentNode.removeChild(e),this.el=void 0),this},lines:function(i,s){function o(t,n){return a(e(),{position:"absolute",width:s.scale*(s.length+s.width)+"px",height:s.scale*s.width+"px",background:t,boxShadow:n,transformOrigin:"left",transform:"rotate("+~~(360/s.lines*c+s.rotate)+"deg) translate("+s.scale*s.radius+"px,0)",borderRadius:(s.corners*s.scale*s.width>>1)+"px"})}for(var u,c=0,d=(s.lines-1)*(1-s.direction)/2;c<s.lines;c++)u=a(e(),{position:"absolute",top:1+~(s.scale*s.width/2)+"px",transform:s.hwaccel?"translate3d(0,0,0)":"",opacity:s.opacity,animation:l&&n(s.opacity,s.trail,d+c*s.direction,s.lines)+" "+1/s.speed+"s linear infinite"}),s.shadow&&t(u,a(o("#000","0 0 4px #000"),{top:"2px"})),t(i,t(u,o(r(s.color,c),"0 0 1px rgba(0,0,0,.1)")));return i},opacity:function(e,t,n){t<e.childNodes.length&&(e.childNodes[t].style.opacity=n)}}),"undefined"!=typeof document){u=function(){var n=e("style",{type:"text/css"});return t(document.getElementsByTagName("head")[0],n),n.sheet||n.styleSheet}();var p=a(e("group"),{behavior:"url(#default#VML)"});!i(p,"transform")&&p.adj?function(){function n(t,n){return e("<"+t+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',n)}u.addRule(".spin-vml","behavior:url(#default#VML)"),o.prototype.lines=function(e,i){function s(){return a(n("group",{coordsize:c+" "+c,coordorigin:-u+" "+-u}),{width:c,height:c})}function o(e,o,l){t(h,t(a(s(),{rotation:360/i.lines*e+"deg",left:~~o}),t(a(n("roundrect",{arcsize:i.corners}),{width:u,height:i.scale*i.width,left:i.scale*i.radius,top:-i.scale*i.width>>1,filter:l}),n("fill",{color:r(i.color,e),opacity:i.opacity}),n("stroke",{opacity:0}))))}var l,u=i.scale*(i.length+i.width),c=2*i.scale*u,d=-(i.width+i.length)*i.scale*2+"px",h=a(s(),{position:"absolute",top:d,left:d});if(i.shadow)for(l=1;l<=i.lines;l++)o(l,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(l=1;l<=i.lines;l++)o(l);return t(e,h)},o.prototype.opacity=function(e,t,n,i){var a=e.firstChild;i=i.shadow&&i.lines||0,a&&t+i<a.childNodes.length&&(a=(a=(a=a.childNodes[t+i])&&a.firstChild)&&a.firstChild)&&(a.opacity=n)}}():l=i(p,"animation")}return o}),function(e){if("object"==typeof exports)e(require("jquery"),require("spin.js"));else if("function"==typeof define&&define.amd)define(["jquery","spin"],e);else{if(!window.Spinner)throw new Error("Spin.js not present");e(window.jQuery,window.Spinner)}}(function(e,t){e.fn.spin=function(n,i){return this.each(function(){var a=e(this),s=a.data();s.spinner&&(s.spinner.stop(),delete s.spinner),!1!==n&&(n=e.extend({color:i||a.css("color")},e.fn.spin.presets[n]||n),s.spinner=new t(n).spin(this))})},e.fn.spin.presets={tiny:{lines:8,length:2,width:2,radius:3},small:{lines:8,length:4,width:3,radius:5},large:{lines:10,length:8,width:4,radius:8}}}),function(){"use strict";var e,t=function(n,i){function a(e){return Math.floor(e)}function s(){var e=b.params.autoplay,t=b.slides.eq(b.activeIndex);t.attr("data-swiper-autoplay")&&(e=t.attr("data-swiper-autoplay")||b.params.autoplay),b.autoplayTimeoutId=setTimeout(function(){b.params.loop?(b.fixLoop(),b._slideNext(),b.emit("onAutoplay",b)):b.isEnd?i.autoplayStopOnLast?b.stopAutoplay():(b._slideTo(0),b.emit("onAutoplay",b)):(b._slideNext(),b.emit("onAutoplay",b))},e)}function r(t,n){var i=e(t.target);if(!i.is(n))if("string"==typeof n)i=i.parents(n);else if(n.nodeType){var a;return i.parents().each(function(e,t){t===n&&(a=n)}),a?n:void 0}if(0!==i.length)return i[0]}function o(e,t){t=t||{};var n=new(window.MutationObserver||window.WebkitMutationObserver)(function(e){e.forEach(function(e){b.onResize(!0),b.emit("onObserverUpdate",b,e)})});n.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),b.observers.push(n)}function l(e){e.originalEvent&&(e=e.originalEvent);var t=e.keyCode||e.charCode;if(!b.params.allowSwipeToNext&&(b.isHorizontal()&&39===t||!b.isHorizontal()&&40===t))return!1;if(!b.params.allowSwipeToPrev&&(b.isHorizontal()&&37===t||!b.isHorizontal()&&38===t))return!1;if(!(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey||document.activeElement&&document.activeElement.nodeName&&("input"===document.activeElement.nodeName.toLowerCase()||"textarea"===document.activeElement.nodeName.toLowerCase()))){if(37===t||39===t||38===t||40===t){var n=!1;if(b.container.parents("."+b.params.slideClass).length>0&&0===b.container.parents("."+b.params.slideActiveClass).length)return;var i={left:window.pageXOffset,top:window.pageYOffset},a=window.innerWidth,s=window.innerHeight,r=b.container.offset();b.rtl&&(r.left=r.left-b.container[0].scrollLeft);for(var o=[[r.left,r.top],[r.left+b.width,r.top],[r.left,r.top+b.height],[r.left+b.width,r.top+b.height]],l=0;l<o.length;l++){var u=o[l];u[0]>=i.left&&u[0]<=i.left+a&&u[1]>=i.top&&u[1]<=i.top+s&&(n=!0)}if(!n)return}b.isHorizontal()?(37!==t&&39!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),(39===t&&!b.rtl||37===t&&b.rtl)&&b.slideNext(),(37===t&&!b.rtl||39===t&&b.rtl)&&b.slidePrev()):(38!==t&&40!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),40===t&&b.slideNext(),38===t&&b.slidePrev()),b.emit("onKeyPress",b,t)}}function u(e){var t=0,n=0,i=0,a=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),i=10*t,a=10*n,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(i=e.deltaX),(i||a)&&e.deltaMode&&(1===e.deltaMode?(i*=40,a*=40):(i*=800,a*=800)),i&&!t&&(t=i<1?-1:1),a&&!n&&(n=a<1?-1:1),{spinX:t,spinY:n,pixelX:i,pixelY:a}}function c(e){e.originalEvent&&(e=e.originalEvent);var t=0,n=b.rtl?-1:1,i=u(e);if(b.params.mousewheelForceToAxis)if(b.isHorizontal()){if(!(Math.abs(i.pixelX)>Math.abs(i.pixelY)))return;t=i.pixelX*n}else{if(!(Math.abs(i.pixelY)>Math.abs(i.pixelX)))return;t=i.pixelY}else t=Math.abs(i.pixelX)>Math.abs(i.pixelY)?-i.pixelX*n:-i.pixelY;if(0!==t){if(b.params.mousewheelInvert&&(t=-t),b.params.freeMode){var a=b.getWrapperTranslate()+t*b.params.mousewheelSensitivity,s=b.isBeginning,r=b.isEnd;if(a>=b.minTranslate()&&(a=b.minTranslate()),a<=b.maxTranslate()&&(a=b.maxTranslate()),b.setWrapperTransition(0),b.setWrapperTranslate(a),b.updateProgress(),b.updateActiveIndex(),(!s&&b.isBeginning||!r&&b.isEnd)&&b.updateClasses(),b.params.freeModeSticky?(clearTimeout(b.mousewheel.timeout),b.mousewheel.timeout=setTimeout(function(){b.slideReset()},300)):b.params.lazyLoading&&b.lazy&&b.lazy.load(),b.emit("onScroll",b,e),b.params.autoplay&&b.params.autoplayDisableOnInteraction&&b.stopAutoplay(),0===a||a===b.maxTranslate())return}else{if((new window.Date).getTime()-b.mousewheel.lastScrollTime>60)if(t<0)if(b.isEnd&&!b.params.loop||b.animating){if(b.params.mousewheelReleaseOnEdges)return!0}else b.slideNext(),b.emit("onScroll",b,e);else if(b.isBeginning&&!b.params.loop||b.animating){if(b.params.mousewheelReleaseOnEdges)return!0}else b.slidePrev(),b.emit("onScroll",b,e);b.mousewheel.lastScrollTime=(new window.Date).getTime()}return e.preventDefault?e.preventDefault():e.returnValue=!1,!1}}function d(t,n){t=e(t);var i,a,s,r=b.rtl?-1:1;i=t.attr("data-swiper-parallax")||"0",a=t.attr("data-swiper-parallax-x"),s=t.attr("data-swiper-parallax-y"),a||s?(a=a||"0",s=s||"0"):b.isHorizontal()?(a=i,s="0"):(s=i,a="0"),a=a.indexOf("%")>=0?parseInt(a,10)*n*r+"%":a*n*r+"px",s=s.indexOf("%")>=0?parseInt(s,10)*n+"%":s*n+"px",t.transform("translate3d("+a+", "+s+",0px)")}function h(e){return 0!==e.indexOf("on")&&(e=e[0]!==e[0].toUpperCase()?"on"+e[0].toUpperCase()+e.substring(1):"on"+e),e}if(!(this instanceof t))return new t(n,i);var p={direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,autoplay:!1,autoplayDisableOnInteraction:!0,autoplayStopOnLast:!1,iOSEdgeSwipeDetection:!1,iOSEdgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",coverflow:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0},flip:{slideShadows:!0,limitRotation:!0},cube:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94},fade:{crossFade:!1},parallax:!1,zoom:!1,zoomMax:3,zoomMin:1,zoomToggle:!0,scrollbar:null,scrollbarHide:!0,scrollbarDraggable:!1,scrollbarSnapOnRelease:!1,keyboardControl:!1,mousewheelControl:!1,mousewheelReleaseOnEdges:!1,mousewheelInvert:!1,mousewheelForceToAxis:!1,mousewheelSensitivity:1,mousewheelEventsTarged:"container",hashnav:!1,hashnavWatchState:!1,history:!1,replaceState:!1,breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,onlyExternal:!1,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,pagination:null,paginationElement:"span",paginationClickable:!1,paginationHide:!1,paginationBulletRender:null,paginationProgressRender:null,paginationFractionRender:null,paginationCustomRender:null,paginationType:"bullets",resistance:!0,resistanceRatio:.85,nextButton:null,prevButton:null,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,lazyLoading:!1,lazyLoadingInPrevNext:!1,lazyLoadingInPrevNextAmount:1,lazyLoadingOnTransitionStart:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,control:void 0,controlInverse:!1,controlBy:"slide",normalizeSlideIndex:!0,allowSwipeToPrev:!0,allowSwipeToNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",buttonDisabledClass:"swiper-button-disabled",paginationCurrentClass:"swiper-pagination-current",paginationTotalClass:"swiper-pagination-total",paginationHiddenClass:"swiper-pagination-hidden",paginationProgressbarClass:"swiper-pagination-progressbar",paginationClickableClass:"swiper-pagination-clickable",paginationModifierClass:"swiper-pagination-",lazyLoadingClass:"swiper-lazy",lazyStatusLoadingClass:"swiper-lazy-loading",lazyStatusLoadedClass:"swiper-lazy-loaded",lazyPreloaderClass:"swiper-lazy-preloader",notificationClass:"swiper-notification",preloaderClass:"preloader",zoomContainerClass:"swiper-zoom-container",observer:!1,observeParents:!1,a11y:!1,prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",runCallbacksOnInit:!0},f=i&&i.virtualTranslate;i=i||{};var m={};for(var g in i)if("object"!=typeof i[g]||null===i[g]||(i[g].nodeType||i[g]===window||i[g]===document||"undefined"!=typeof Dom7&&i[g]instanceof Dom7||"undefined"!=typeof jQuery&&i[g]instanceof jQuery))m[g]=i[g];else{m[g]={};for(var v in i[g])m[g][v]=i[g][v]}for(var y in p)if(void 0===i[y])i[y]=p[y];else if("object"==typeof i[y])for(var w in p[y])void 0===i[y][w]&&(i[y][w]=p[y][w]);var b=this;if(b.params=i,b.originalParams=m,b.classNames=[],void 0!==e&&"undefined"!=typeof Dom7&&(e=Dom7),(void 0!==e||(e="undefined"==typeof Dom7?window.Dom7||window.Zepto||window.jQuery:Dom7))&&(b.$=e,b.currentBreakpoint=void 0,b.getActiveBreakpoint=function(){if(!b.params.breakpoints)return!1;var e,t=!1,n=[];for(e in b.params.breakpoints)b.params.breakpoints.hasOwnProperty(e)&&n.push(e);n.sort(function(e,t){return parseInt(e,10)>parseInt(t,10)});for(var i=0;i<n.length;i++)(e=n[i])>=window.innerWidth&&!t&&(t=e);return t||"max"},b.setBreakpoint=function(){var e=b.getActiveBreakpoint();if(e&&b.currentBreakpoint!==e){var t=e in b.params.breakpoints?b.params.breakpoints[e]:b.originalParams,n=b.params.loop&&t.slidesPerView!==b.params.slidesPerView;for(var i in t)b.params[i]=t[i];b.currentBreakpoint=e,n&&b.destroyLoop&&b.reLoop(!0)}},b.params.breakpoints&&b.setBreakpoint(),b.container=e(n),0!==b.container.length)){if(b.container.length>1){var x=[];return b.container.each(function(){x.push(new t(this,i))}),x}b.container[0].swiper=b,b.container.data("swiper",b),b.classNames.push(b.params.containerModifierClass+b.params.direction),b.params.freeMode&&b.classNames.push(b.params.containerModifierClass+"free-mode"),b.support.flexbox||(b.classNames.push(b.params.containerModifierClass+"no-flexbox"),b.params.slidesPerColumn=1),b.params.autoHeight&&b.classNames.push(b.params.containerModifierClass+"autoheight"),(b.params.parallax||b.params.watchSlidesVisibility)&&(b.params.watchSlidesProgress=!0),b.params.touchReleaseOnEdges&&(b.params.resistanceRatio=0),["cube","coverflow","flip"].indexOf(b.params.effect)>=0&&(b.support.transforms3d?(b.params.watchSlidesProgress=!0,b.classNames.push(b.params.containerModifierClass+"3d")):b.params.effect="slide"),"slide"!==b.params.effect&&b.classNames.push(b.params.containerModifierClass+b.params.effect),"cube"===b.params.effect&&(b.params.resistanceRatio=0,b.params.slidesPerView=1,b.params.slidesPerColumn=1,b.params.slidesPerGroup=1,b.params.centeredSlides=!1,b.params.spaceBetween=0,b.params.virtualTranslate=!0),"fade"!==b.params.effect&&"flip"!==b.params.effect||(b.params.slidesPerView=1,b.params.slidesPerColumn=1,b.params.slidesPerGroup=1,b.params.watchSlidesProgress=!0,b.params.spaceBetween=0,void 0===f&&(b.params.virtualTranslate=!0)),b.params.grabCursor&&b.support.touch&&(b.params.grabCursor=!1),b.wrapper=b.container.children("."+b.params.wrapperClass),b.params.pagination&&(b.paginationContainer=e(b.params.pagination),b.params.uniqueNavElements&&"string"==typeof b.params.pagination&&b.paginationContainer.length>1&&1===b.container.find(b.params.pagination).length&&(b.paginationContainer=b.container.find(b.params.pagination)),"bullets"===b.params.paginationType&&b.params.paginationClickable?b.paginationContainer.addClass(b.params.paginationModifierClass+"clickable"):b.params.paginationClickable=!1,b.paginationContainer.addClass(b.params.paginationModifierClass+b.params.paginationType)),(b.params.nextButton||b.params.prevButton)&&(b.params.nextButton&&(b.nextButton=e(b.params.nextButton),b.params.uniqueNavElements&&"string"==typeof b.params.nextButton&&b.nextButton.length>1&&1===b.container.find(b.params.nextButton).length&&(b.nextButton=b.container.find(b.params.nextButton))),b.params.prevButton&&(b.prevButton=e(b.params.prevButton),b.params.uniqueNavElements&&"string"==typeof b.params.prevButton&&b.prevButton.length>1&&1===b.container.find(b.params.prevButton).length&&(b.prevButton=b.container.find(b.params.prevButton)))),b.isHorizontal=function(){return"horizontal"===b.params.direction},b.rtl=b.isHorizontal()&&("rtl"===b.container[0].dir.toLowerCase()||"rtl"===b.container.css("direction")),b.rtl&&b.classNames.push(b.params.containerModifierClass+"rtl"),b.rtl&&(b.wrongRTL="-webkit-box"===b.wrapper.css("display")),b.params.slidesPerColumn>1&&b.classNames.push(b.params.containerModifierClass+"multirow"),b.device.android&&b.classNames.push(b.params.containerModifierClass+"android"),b.container.addClass(b.classNames.join(" ")),b.translate=0,b.progress=0,b.velocity=0,b.lockSwipeToNext=function(){b.params.allowSwipeToNext=!1,!1===b.params.allowSwipeToPrev&&b.params.grabCursor&&b.unsetGrabCursor()},b.lockSwipeToPrev=function(){b.params.allowSwipeToPrev=!1,!1===b.params.allowSwipeToNext&&b.params.grabCursor&&b.unsetGrabCursor()},b.lockSwipes=function(){b.params.allowSwipeToNext=b.params.allowSwipeToPrev=!1,b.params.grabCursor&&b.unsetGrabCursor()},b.unlockSwipeToNext=function(){b.params.allowSwipeToNext=!0,!0===b.params.allowSwipeToPrev&&b.params.grabCursor&&b.setGrabCursor()},b.unlockSwipeToPrev=function(){b.params.allowSwipeToPrev=!0,!0===b.params.allowSwipeToNext&&b.params.grabCursor&&b.setGrabCursor()},b.unlockSwipes=function(){b.params.allowSwipeToNext=b.params.allowSwipeToPrev=!0,b.params.grabCursor&&b.setGrabCursor()},b.setGrabCursor=function(e){b.container[0].style.cursor="move",b.container[0].style.cursor=e?"-webkit-grabbing":"-webkit-grab",b.container[0].style.cursor=e?"-moz-grabbin":"-moz-grab",b.container[0].style.cursor=e?"grabbing":"grab"},b.unsetGrabCursor=function(){b.container[0].style.cursor=""},b.params.grabCursor&&b.setGrabCursor(),b.imagesToLoad=[],b.imagesLoaded=0,b.loadImage=function(e,t,n,i,a,s){function r(){s&&s()}var o;e.complete&&a?r():t?((o=new window.Image).onload=r,o.onerror=r,i&&(o.sizes=i),n&&(o.srcset=n),t&&(o.src=t)):r()},b.preloadImages=function(){function e(){void 0!==b&&null!==b&&b&&(void 0!==b.imagesLoaded&&b.imagesLoaded++,b.imagesLoaded===b.imagesToLoad.length&&(b.params.updateOnImagesReady&&b.update(),b.emit("onImagesReady",b)))}b.imagesToLoad=b.container.find("img");for(var t=0;t<b.imagesToLoad.length;t++)b.loadImage(b.imagesToLoad[t],b.imagesToLoad[t].currentSrc||b.imagesToLoad[t].getAttribute("src"),b.imagesToLoad[t].srcset||b.imagesToLoad[t].getAttribute("srcset"),b.imagesToLoad[t].sizes||b.imagesToLoad[t].getAttribute("sizes"),!0,e)},b.autoplayTimeoutId=void 0,b.autoplaying=!1,b.autoplayPaused=!1,b.startAutoplay=function(){return void 0===b.autoplayTimeoutId&&(!!b.params.autoplay&&(!b.autoplaying&&(b.autoplaying=!0,b.emit("onAutoplayStart",b),void s())))},b.stopAutoplay=function(e){b.autoplayTimeoutId&&(b.autoplayTimeoutId&&clearTimeout(b.autoplayTimeoutId),b.autoplaying=!1,b.autoplayTimeoutId=void 0,b.emit("onAutoplayStop",b))},b.pauseAutoplay=function(e){b.autoplayPaused||(b.autoplayTimeoutId&&clearTimeout(b.autoplayTimeoutId),b.autoplayPaused=!0,0===e?(b.autoplayPaused=!1,s()):b.wrapper.transitionEnd(function(){b&&(b.autoplayPaused=!1,b.autoplaying?s():b.stopAutoplay())}))},b.minTranslate=function(){return-b.snapGrid[0]},b.maxTranslate=function(){return-b.snapGrid[b.snapGrid.length-1]},b.updateAutoHeight=function(){var e,t=[],n=0;if("auto"!==b.params.slidesPerView&&b.params.slidesPerView>1)for(e=0;e<Math.ceil(b.params.slidesPerView);e++){var i=b.activeIndex+e;if(i>b.slides.length)break;t.push(b.slides.eq(i)[0])}else t.push(b.slides.eq(b.activeIndex)[0]);for(e=0;e<t.length;e++)if(void 0!==t[e]){var a=t[e].offsetHeight;n=a>n?a:n}n&&b.wrapper.css("height",n+"px")},b.updateContainerSize=function(){var e,t;e=void 0!==b.params.width?b.params.width:b.container[0].clientWidth,t=void 0!==b.params.height?b.params.height:b.container[0].clientHeight,0===e&&b.isHorizontal()||0===t&&!b.isHorizontal()||(e=e-parseInt(b.container.css("padding-left"),10)-parseInt(b.container.css("padding-right"),10),t=t-parseInt(b.container.css("padding-top"),10)-parseInt(b.container.css("padding-bottom"),10),b.width=e,b.height=t,b.size=b.isHorizontal()?b.width:b.height)},b.updateSlidesSize=function(){b.slides=b.wrapper.children("."+b.params.slideClass),b.snapGrid=[],b.slidesGrid=[],b.slidesSizesGrid=[];var e,t=b.params.spaceBetween,n=-b.params.slidesOffsetBefore,i=0,s=0;if(void 0!==b.size){"string"==typeof t&&t.indexOf("%")>=0&&(t=parseFloat(t.replace("%",""))/100*b.size),b.virtualSize=-t,b.rtl?b.slides.css({marginLeft:"",marginTop:""}):b.slides.css({marginRight:"",marginBottom:""});var r;b.params.slidesPerColumn>1&&(r=Math.floor(b.slides.length/b.params.slidesPerColumn)===b.slides.length/b.params.slidesPerColumn?b.slides.length:Math.ceil(b.slides.length/b.params.slidesPerColumn)*b.params.slidesPerColumn,"auto"!==b.params.slidesPerView&&"row"===b.params.slidesPerColumnFill&&(r=Math.max(r,b.params.slidesPerView*b.params.slidesPerColumn)));var o,l=b.params.slidesPerColumn,u=r/l,c=u-(b.params.slidesPerColumn*u-b.slides.length);for(e=0;e<b.slides.length;e++){o=0;var d=b.slides.eq(e);if(b.params.slidesPerColumn>1){var h,p,f;"column"===b.params.slidesPerColumnFill?(f=e-(p=Math.floor(e/l))*l,(p>c||p===c&&f===l-1)&&++f>=l&&(f=0,p++),h=p+f*r/l,d.css({"-webkit-box-ordinal-group":h,"-moz-box-ordinal-group":h,"-ms-flex-order":h,"-webkit-order":h,order:h})):p=e-(f=Math.floor(e/u))*u,d.css("margin-"+(b.isHorizontal()?"top":"left"),0!==f&&b.params.spaceBetween&&b.params.spaceBetween+"px").attr("data-swiper-column",p).attr("data-swiper-row",f)}"none"!==d.css("display")&&("auto"===b.params.slidesPerView?(o=b.isHorizontal()?d.outerWidth(!0):d.outerHeight(!0),b.params.roundLengths&&(o=a(o))):(o=(b.size-(b.params.slidesPerView-1)*t)/b.params.slidesPerView,b.params.roundLengths&&(o=a(o)),b.isHorizontal()?b.slides[e].style.width=o+"px":b.slides[e].style.height=o+"px"),b.slides[e].swiperSlideSize=o,b.slidesSizesGrid.push(o),b.params.centeredSlides?(n=n+o/2+i/2+t,0===i&&0!==e&&(n=n-b.size/2-t),0===e&&(n=n-b.size/2-t),Math.abs(n)<.001&&(n=0),s%b.params.slidesPerGroup==0&&b.snapGrid.push(n),b.slidesGrid.push(n)):(s%b.params.slidesPerGroup==0&&b.snapGrid.push(n),b.slidesGrid.push(n),n=n+o+t),b.virtualSize+=o+t,i=o,s++)}b.virtualSize=Math.max(b.virtualSize,b.size)+b.params.slidesOffsetAfter;var m;if(b.rtl&&b.wrongRTL&&("slide"===b.params.effect||"coverflow"===b.params.effect)&&b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}),b.support.flexbox&&!b.params.setWrapperSize||(b.isHorizontal()?b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}):b.wrapper.css({height:b.virtualSize+b.params.spaceBetween+"px"})),b.params.slidesPerColumn>1&&(b.virtualSize=(o+b.params.spaceBetween)*r,b.virtualSize=Math.ceil(b.virtualSize/b.params.slidesPerColumn)-b.params.spaceBetween,b.isHorizontal()?b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}):b.wrapper.css({height:b.virtualSize+b.params.spaceBetween+"px"}),b.params.centeredSlides)){for(m=[],e=0;e<b.snapGrid.length;e++)b.snapGrid[e]<b.virtualSize+b.snapGrid[0]&&m.push(b.snapGrid[e]);b.snapGrid=m}if(!b.params.centeredSlides){for(m=[],e=0;e<b.snapGrid.length;e++)b.snapGrid[e]<=b.virtualSize-b.size&&m.push(b.snapGrid[e]);b.snapGrid=m,Math.floor(b.virtualSize-b.size)-Math.floor(b.snapGrid[b.snapGrid.length-1])>1&&b.snapGrid.push(b.virtualSize-b.size)}0===b.snapGrid.length&&(b.snapGrid=[0]),0!==b.params.spaceBetween&&(b.isHorizontal()?b.rtl?b.slides.css({marginLeft:t+"px"}):b.slides.css({marginRight:t+"px"}):b.slides.css({marginBottom:t+"px"})),b.params.watchSlidesProgress&&b.updateSlidesOffset()}},b.updateSlidesOffset=function(){for(var e=0;e<b.slides.length;e++)b.slides[e].swiperSlideOffset=b.isHorizontal()?b.slides[e].offsetLeft:b.slides[e].offsetTop},b.currentSlidesPerView=function(){var e,t,n=1;if(b.params.centeredSlides){var i,a=b.slides[b.activeIndex].swiperSlideSize;for(e=b.activeIndex+1;e<b.slides.length;e++)b.slides[e]&&!i&&(n++,(a+=b.slides[e].swiperSlideSize)>b.size&&(i=!0));for(t=b.activeIndex-1;t>=0;t--)b.slides[t]&&!i&&(n++,(a+=b.slides[t].swiperSlideSize)>b.size&&(i=!0))}else for(e=b.activeIndex+1;e<b.slides.length;e++)b.slidesGrid[e]-b.slidesGrid[b.activeIndex]<b.size&&n++;return n},b.updateSlidesProgress=function(e){if(void 0===e&&(e=b.translate||0),0!==b.slides.length){void 0===b.slides[0].swiperSlideOffset&&b.updateSlidesOffset();var t=-e;b.rtl&&(t=e),b.slides.removeClass(b.params.slideVisibleClass);for(var n=0;n<b.slides.length;n++){var i=b.slides[n],a=(t+(b.params.centeredSlides?b.minTranslate():0)-i.swiperSlideOffset)/(i.swiperSlideSize+b.params.spaceBetween);if(b.params.watchSlidesVisibility){var s=-(t-i.swiperSlideOffset),r=s+b.slidesSizesGrid[n];(s>=0&&s<b.size||r>0&&r<=b.size||s<=0&&r>=b.size)&&b.slides.eq(n).addClass(b.params.slideVisibleClass)}i.progress=b.rtl?-a:a}}},b.updateProgress=function(e){void 0===e&&(e=b.translate||0);var t=b.maxTranslate()-b.minTranslate(),n=b.isBeginning,i=b.isEnd;0===t?(b.progress=0,b.isBeginning=b.isEnd=!0):(b.progress=(e-b.minTranslate())/t,b.isBeginning=b.progress<=0,b.isEnd=b.progress>=1),b.isBeginning&&!n&&b.emit("onReachBeginning",b),b.isEnd&&!i&&b.emit("onReachEnd",b),b.params.watchSlidesProgress&&b.updateSlidesProgress(e),b.emit("onProgress",b,b.progress)},b.updateActiveIndex=function(){var e,t,n,i=b.rtl?b.translate:-b.translate;for(t=0;t<b.slidesGrid.length;t++)void 0!==b.slidesGrid[t+1]?i>=b.slidesGrid[t]&&i<b.slidesGrid[t+1]-(b.slidesGrid[t+1]-b.slidesGrid[t])/2?e=t:i>=b.slidesGrid[t]&&i<b.slidesGrid[t+1]&&(e=t+1):i>=b.slidesGrid[t]&&(e=t);b.params.normalizeSlideIndex&&(e<0||void 0===e)&&(e=0),(n=Math.floor(e/b.params.slidesPerGroup))>=b.snapGrid.length&&(n=b.snapGrid.length-1),e!==b.activeIndex&&(b.snapIndex=n,b.previousIndex=b.activeIndex,b.activeIndex=e,b.updateClasses(),b.updateRealIndex())},b.updateRealIndex=function(){b.realIndex=parseInt(b.slides.eq(b.activeIndex).attr("data-swiper-slide-index")||b.activeIndex,10)},b.updateClasses=function(){b.slides.removeClass(b.params.slideActiveClass+" "+b.params.slideNextClass+" "+b.params.slidePrevClass+" "+b.params.slideDuplicateActiveClass+" "+b.params.slideDuplicateNextClass+" "+b.params.slideDuplicatePrevClass);var t=b.slides.eq(b.activeIndex);t.addClass(b.params.slideActiveClass),i.loop&&(t.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+b.realIndex+'"]').addClass(b.params.slideDuplicateActiveClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+b.realIndex+'"]').addClass(b.params.slideDuplicateActiveClass));var n=t.next("."+b.params.slideClass).addClass(b.params.slideNextClass);b.params.loop&&0===n.length&&(n=b.slides.eq(0)).addClass(b.params.slideNextClass);var a=t.prev("."+b.params.slideClass).addClass(b.params.slidePrevClass);if(b.params.loop&&0===a.length&&(a=b.slides.eq(-1)).addClass(b.params.slidePrevClass),i.loop&&(n.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicateNextClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicateNextClass),a.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+a.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicatePrevClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+a.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicatePrevClass)),b.paginationContainer&&b.paginationContainer.length>0){var s,r=b.params.loop?Math.ceil((b.slides.length-2*b.loopedSlides)/b.params.slidesPerGroup):b.snapGrid.length;if(b.params.loop?((s=Math.ceil((b.activeIndex-b.loopedSlides)/b.params.slidesPerGroup))>b.slides.length-1-2*b.loopedSlides&&(s-=b.slides.length-2*b.loopedSlides),s>r-1&&(s-=r),s<0&&"bullets"!==b.params.paginationType&&(s=r+s)):s=void 0!==b.snapIndex?b.snapIndex:b.activeIndex||0,"bullets"===b.params.paginationType&&b.bullets&&b.bullets.length>0&&(b.bullets.removeClass(b.params.bulletActiveClass),b.paginationContainer.length>1?b.bullets.each(function(){e(this).index()===s&&e(this).addClass(b.params.bulletActiveClass)}):b.bullets.eq(s).addClass(b.params.bulletActiveClass)),"fraction"===b.params.paginationType&&(b.paginationContainer.find("."+b.params.paginationCurrentClass).text(s+1),b.paginationContainer.find("."+b.params.paginationTotalClass).text(r)),"progress"===b.params.paginationType){var o=(s+1)/r,l=o,u=1;b.isHorizontal()||(u=o,l=1),b.paginationContainer.find("."+b.params.paginationProgressbarClass).transform("translate3d(0,0,0) scaleX("+l+") scaleY("+u+")").transition(b.params.speed)}"custom"===b.params.paginationType&&b.params.paginationCustomRender&&(b.paginationContainer.html(b.params.paginationCustomRender(b,s+1,r)),b.emit("onPaginationRendered",b,b.paginationContainer[0]))}b.params.loop||(b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.isBeginning?(b.prevButton.addClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.disable(b.prevButton)):(b.prevButton.removeClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.enable(b.prevButton))),b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.isEnd?(b.nextButton.addClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.disable(b.nextButton)):(b.nextButton.removeClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.enable(b.nextButton))))},b.updatePagination=function(){if(b.params.pagination&&b.paginationContainer&&b.paginationContainer.length>0){var e="";if("bullets"===b.params.paginationType){for(var t=b.params.loop?Math.ceil((b.slides.length-2*b.loopedSlides)/b.params.slidesPerGroup):b.snapGrid.length,n=0;n<t;n++)b.params.paginationBulletRender?e+=b.params.paginationBulletRender(b,n,b.params.bulletClass):e+="<"+b.params.paginationElement+' class="'+b.params.bulletClass+'"></'+b.params.paginationElement+">";b.paginationContainer.html(e),b.bullets=b.paginationContainer.find("."+b.params.bulletClass),b.params.paginationClickable&&b.params.a11y&&b.a11y&&b.a11y.initPagination()}"fraction"===b.params.paginationType&&(e=b.params.paginationFractionRender?b.params.paginationFractionRender(b,b.params.paginationCurrentClass,b.params.paginationTotalClass):'<span class="'+b.params.paginationCurrentClass+'"></span> / <span class="'+b.params.paginationTotalClass+'"></span>',b.paginationContainer.html(e)),"progress"===b.params.paginationType&&(e=b.params.paginationProgressRender?b.params.paginationProgressRender(b,b.params.paginationProgressbarClass):'<span class="'+b.params.paginationProgressbarClass+'"></span>',b.paginationContainer.html(e)),"custom"!==b.params.paginationType&&b.emit("onPaginationRendered",b,b.paginationContainer[0])}},b.update=function(e){function t(){b.rtl,b.translate;n=Math.min(Math.max(b.translate,b.maxTranslate()),b.minTranslate()),b.setWrapperTranslate(n),b.updateActiveIndex(),b.updateClasses()}if(b){b.updateContainerSize(),b.updateSlidesSize(),b.updateProgress(),b.updatePagination(),b.updateClasses(),b.params.scrollbar&&b.scrollbar&&b.scrollbar.set();var n;if(e){b.controller&&b.controller.spline&&(b.controller.spline=void 0),b.params.freeMode?(t(),b.params.autoHeight&&b.updateAutoHeight()):(("auto"===b.params.slidesPerView||b.params.slidesPerView>1)&&b.isEnd&&!b.params.centeredSlides?b.slideTo(b.slides.length-1,0,!1,!0):b.slideTo(b.activeIndex,0,!1,!0))||t()}else b.params.autoHeight&&b.updateAutoHeight()}},b.onResize=function(e){b.params.onBeforeResize&&b.params.onBeforeResize(b),b.params.breakpoints&&b.setBreakpoint();var t=b.params.allowSwipeToPrev,n=b.params.allowSwipeToNext;b.params.allowSwipeToPrev=b.params.allowSwipeToNext=!0,b.updateContainerSize(),b.updateSlidesSize(),("auto"===b.params.slidesPerView||b.params.freeMode||e)&&b.updatePagination(),b.params.scrollbar&&b.scrollbar&&b.scrollbar.set(),b.controller&&b.controller.spline&&(b.controller.spline=void 0);var i=!1;if(b.params.freeMode){var a=Math.min(Math.max(b.translate,b.maxTranslate()),b.minTranslate());b.setWrapperTranslate(a),b.updateActiveIndex(),b.updateClasses(),b.params.autoHeight&&b.updateAutoHeight()}else b.updateClasses(),i=("auto"===b.params.slidesPerView||b.params.slidesPerView>1)&&b.isEnd&&!b.params.centeredSlides?b.slideTo(b.slides.length-1,0,!1,!0):b.slideTo(b.activeIndex,0,!1,!0);b.params.lazyLoading&&!i&&b.lazy&&b.lazy.load(),b.params.allowSwipeToPrev=t,b.params.allowSwipeToNext=n,b.params.onAfterResize&&b.params.onAfterResize(b)},b.touchEventsDesktop={start:"mousedown",move:"mousemove",end:"mouseup"},window.navigator.pointerEnabled?b.touchEventsDesktop={start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled&&(b.touchEventsDesktop={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}),b.touchEvents={start:b.support.touch||!b.params.simulateTouch?"touchstart":b.touchEventsDesktop.start,move:b.support.touch||!b.params.simulateTouch?"touchmove":b.touchEventsDesktop.move,end:b.support.touch||!b.params.simulateTouch?"touchend":b.touchEventsDesktop.end},(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&("container"===b.params.touchEventsTarget?b.container:b.wrapper).addClass("swiper-wp8-"+b.params.direction),b.initEvents=function(e){var t=e?"off":"on",n=e?"removeEventListener":"addEventListener",a="container"===b.params.touchEventsTarget?b.container[0]:b.wrapper[0],s=b.support.touch?a:document,r=!!b.params.nested;if(b.browser.ie)a[n](b.touchEvents.start,b.onTouchStart,!1),s[n](b.touchEvents.move,b.onTouchMove,r),s[n](b.touchEvents.end,b.onTouchEnd,!1);else{if(b.support.touch){var o=!("touchstart"!==b.touchEvents.start||!b.support.passiveListener||!b.params.passiveListeners)&&{passive:!0,capture:!1};a[n](b.touchEvents.start,b.onTouchStart,o),a[n](b.touchEvents.move,b.onTouchMove,r),a[n](b.touchEvents.end,b.onTouchEnd,o)}(i.simulateTouch&&!b.device.ios&&!b.device.android||i.simulateTouch&&!b.support.touch&&b.device.ios)&&(a[n]("mousedown",b.onTouchStart,!1),document[n]("mousemove",b.onTouchMove,r),document[n]("mouseup",b.onTouchEnd,!1))}window[n]("resize",b.onResize),b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.nextButton[t]("click",b.onClickNext),b.params.a11y&&b.a11y&&b.nextButton[t]("keydown",b.a11y.onEnterKey)),b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.prevButton[t]("click",b.onClickPrev),b.params.a11y&&b.a11y&&b.prevButton[t]("keydown",b.a11y.onEnterKey)),b.params.pagination&&b.params.paginationClickable&&(b.paginationContainer[t]("click","."+b.params.bulletClass,b.onClickIndex),b.params.a11y&&b.a11y&&b.paginationContainer[t]("keydown","."+b.params.bulletClass,b.a11y.onEnterKey)),(b.params.preventClicks||b.params.preventClicksPropagation)&&a[n]("click",b.preventClicks,!0)},b.attachEvents=function(){b.initEvents()},b.detachEvents=function(){b.initEvents(!0)},b.allowClick=!0,b.preventClicks=function(e){b.allowClick||(b.params.preventClicks&&e.preventDefault(),b.params.preventClicksPropagation&&b.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))},b.onClickNext=function(e){e.preventDefault(),b.isEnd&&!b.params.loop||b.slideNext()},b.onClickPrev=function(e){e.preventDefault(),b.isBeginning&&!b.params.loop||b.slidePrev()},b.onClickIndex=function(t){t.preventDefault();var n=e(this).index()*b.params.slidesPerGroup;b.params.loop&&(n+=b.loopedSlides),b.slideTo(n)},b.updateClickedSlide=function(t){var n=r(t,"."+b.params.slideClass),i=!1;if(n)for(var a=0;a<b.slides.length;a++)b.slides[a]===n&&(i=!0);if(!n||!i)return b.clickedSlide=void 0,void(b.clickedIndex=void 0);if(b.clickedSlide=n,b.clickedIndex=e(n).index(),b.params.slideToClickedSlide&&void 0!==b.clickedIndex&&b.clickedIndex!==b.activeIndex){var s,o=b.clickedIndex,l="auto"===b.params.slidesPerView?b.currentSlidesPerView():b.params.slidesPerView;if(b.params.loop){if(b.animating)return;s=parseInt(e(b.clickedSlide).attr("data-swiper-slide-index"),10),b.params.centeredSlides?o<b.loopedSlides-l/2||o>b.slides.length-b.loopedSlides+l/2?(b.fixLoop(),o=b.wrapper.children("."+b.params.slideClass+'[data-swiper-slide-index="'+s+'"]:not(.'+b.params.slideDuplicateClass+")").eq(0).index(),setTimeout(function(){b.slideTo(o)},0)):b.slideTo(o):o>b.slides.length-l?(b.fixLoop(),o=b.wrapper.children("."+b.params.slideClass+'[data-swiper-slide-index="'+s+'"]:not(.'+b.params.slideDuplicateClass+")").eq(0).index(),setTimeout(function(){b.slideTo(o)},0)):b.slideTo(o)}else b.slideTo(o)}};var C,T,S,k,M,D,_,E,L,P,I="input, select, textarea, button, video",F=Date.now(),z=[];b.animating=!1,b.touches={startX:0,startY:0,currentX:0,currentY:0,diff:0};var A,O;b.onTouchStart=function(t){if(t.originalEvent&&(t=t.originalEvent),(A="touchstart"===t.type)||!("which"in t)||3!==t.which)if(b.params.noSwiping&&r(t,"."+b.params.noSwipingClass))b.allowClick=!0;else if(!b.params.swipeHandler||r(t,b.params.swipeHandler)){var n=b.touches.currentX="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,i=b.touches.currentY="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY;if(!(b.device.ios&&b.params.iOSEdgeSwipeDetection&&n<=b.params.iOSEdgeSwipeThreshold)){if(C=!0,T=!1,S=!0,M=void 0,O=void 0,b.touches.startX=n,b.touches.startY=i,k=Date.now(),b.allowClick=!0,b.updateContainerSize(),b.swipeDirection=void 0,b.params.threshold>0&&(E=!1),"touchstart"!==t.type){var a=!0;e(t.target).is(I)&&(a=!1),document.activeElement&&e(document.activeElement).is(I)&&document.activeElement.blur(),a&&t.preventDefault()}b.emit("onTouchStart",b,t)}}},b.onTouchMove=function(t){if(t.originalEvent&&(t=t.originalEvent),!A||"mousemove"!==t.type){if(t.preventedByNestedSwiper)return b.touches.startX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,void(b.touches.startY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY);if(b.params.onlyExternal)return b.allowClick=!1,void(C&&(b.touches.startX=b.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,b.touches.startY=b.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,k=Date.now()));if(A&&b.params.touchReleaseOnEdges&&!b.params.loop)if(b.isHorizontal()){if(b.touches.currentX<b.touches.startX&&b.translate<=b.maxTranslate()||b.touches.currentX>b.touches.startX&&b.translate>=b.minTranslate())return}else if(b.touches.currentY<b.touches.startY&&b.translate<=b.maxTranslate()||b.touches.currentY>b.touches.startY&&b.translate>=b.minTranslate())return;if(A&&document.activeElement&&t.target===document.activeElement&&e(t.target).is(I))return T=!0,void(b.allowClick=!1);if(S&&b.emit("onTouchMove",b,t),!(t.targetTouches&&t.targetTouches.length>1)){if(b.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,b.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,void 0===M){var n;b.isHorizontal()&&b.touches.currentY===b.touches.startY||!b.isHorizontal()&&b.touches.currentX===b.touches.startX?M=!1:(n=180*Math.atan2(Math.abs(b.touches.currentY-b.touches.startY),Math.abs(b.touches.currentX-b.touches.startX))/Math.PI,M=b.isHorizontal()?n>b.params.touchAngle:90-n>b.params.touchAngle)}if(M&&b.emit("onTouchMoveOpposite",b,t),void 0===O&&(b.touches.currentX===b.touches.startX&&b.touches.currentY===b.touches.startY||(O=!0)),C)if(M)C=!1;else if(O){b.allowClick=!1,b.emit("onSliderMove",b,t),t.preventDefault(),b.params.touchMoveStopPropagation&&!b.params.nested&&t.stopPropagation(),T||(i.loop&&b.fixLoop(),_=b.getWrapperTranslate(),b.setWrapperTransition(0),b.animating&&b.wrapper.trigger("webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd"),b.params.autoplay&&b.autoplaying&&(b.params.autoplayDisableOnInteraction?b.stopAutoplay():b.pauseAutoplay()),P=!1,!b.params.grabCursor||!0!==b.params.allowSwipeToNext&&!0!==b.params.allowSwipeToPrev||b.setGrabCursor(!0)),T=!0;var a=b.touches.diff=b.isHorizontal()?b.touches.currentX-b.touches.startX:b.touches.currentY-b.touches.startY;a*=b.params.touchRatio,b.rtl&&(a=-a),b.swipeDirection=a>0?"prev":"next",D=a+_;var s=!0;if(a>0&&D>b.minTranslate()?(s=!1,b.params.resistance&&(D=b.minTranslate()-1+Math.pow(-b.minTranslate()+_+a,b.params.resistanceRatio))):a<0&&D<b.maxTranslate()&&(s=!1,b.params.resistance&&(D=b.maxTranslate()+1-Math.pow(b.maxTranslate()-_-a,b.params.resistanceRatio))),s&&(t.preventedByNestedSwiper=!0),!b.params.allowSwipeToNext&&"next"===b.swipeDirection&&D<_&&(D=_),!b.params.allowSwipeToPrev&&"prev"===b.swipeDirection&&D>_&&(D=_),b.params.threshold>0){if(!(Math.abs(a)>b.params.threshold||E))return void(D=_);if(!E)return E=!0,b.touches.startX=b.touches.currentX,b.touches.startY=b.touches.currentY,D=_,void(b.touches.diff=b.isHorizontal()?b.touches.currentX-b.touches.startX:b.touches.currentY-b.touches.startY)}b.params.followFinger&&((b.params.freeMode||b.params.watchSlidesProgress)&&b.updateActiveIndex(),b.params.freeMode&&(0===z.length&&z.push({position:b.touches[b.isHorizontal()?"startX":"startY"],time:k}),z.push({position:b.touches[b.isHorizontal()?"currentX":"currentY"],time:(new window.Date).getTime()})),b.updateProgress(D),b.setWrapperTranslate(D))}}}},b.onTouchEnd=function(t){if(t.originalEvent&&(t=t.originalEvent),S&&b.emit("onTouchEnd",b,t),S=!1,C){b.params.grabCursor&&T&&C&&(!0===b.params.allowSwipeToNext||!0===b.params.allowSwipeToPrev)&&b.setGrabCursor(!1);var n=Date.now(),i=n-k;if(b.allowClick&&(b.updateClickedSlide(t),b.emit("onTap",b,t),i<300&&n-F>300&&(L&&clearTimeout(L),L=setTimeout(function(){b&&(b.params.paginationHide&&b.paginationContainer.length>0&&!e(t.target).hasClass(b.params.bulletClass)&&b.paginationContainer.toggleClass(b.params.paginationHiddenClass),b.emit("onClick",b,t))},300)),i<300&&n-F<300&&(L&&clearTimeout(L),b.emit("onDoubleTap",b,t))),F=Date.now(),setTimeout(function(){b&&(b.allowClick=!0)},0),C&&T&&b.swipeDirection&&0!==b.touches.diff&&D!==_){C=T=!1;var a;if(a=b.params.followFinger?b.rtl?b.translate:-b.translate:-D,b.params.freeMode){if(a<-b.minTranslate())return void b.slideTo(b.activeIndex);if(a>-b.maxTranslate())return void(b.slides.length<b.snapGrid.length?b.slideTo(b.snapGrid.length-1):b.slideTo(b.slides.length-1));if(b.params.freeModeMomentum){if(z.length>1){var s=z.pop(),r=z.pop(),o=s.position-r.position,l=s.time-r.time;b.velocity=o/l,b.velocity=b.velocity/2,Math.abs(b.velocity)<b.params.freeModeMinimumVelocity&&(b.velocity=0),(l>150||(new window.Date).getTime()-s.time>300)&&(b.velocity=0)}else b.velocity=0;b.velocity=b.velocity*b.params.freeModeMomentumVelocityRatio,z.length=0;var u=1e3*b.params.freeModeMomentumRatio,c=b.velocity*u,d=b.translate+c;b.rtl&&(d=-d);var h,p=!1,f=20*Math.abs(b.velocity)*b.params.freeModeMomentumBounceRatio;if(d<b.maxTranslate())b.params.freeModeMomentumBounce?(d+b.maxTranslate()<-f&&(d=b.maxTranslate()-f),h=b.maxTranslate(),p=!0,P=!0):d=b.maxTranslate();else if(d>b.minTranslate())b.params.freeModeMomentumBounce?(d-b.minTranslate()>f&&(d=b.minTranslate()+f),h=b.minTranslate(),p=!0,P=!0):d=b.minTranslate();else if(b.params.freeModeSticky){var m,g=0;for(g=0;g<b.snapGrid.length;g+=1)if(b.snapGrid[g]>-d){m=g;break}d=Math.abs(b.snapGrid[m]-d)<Math.abs(b.snapGrid[m-1]-d)||"next"===b.swipeDirection?b.snapGrid[m]:b.snapGrid[m-1],b.rtl||(d=-d)}if(0!==b.velocity)u=b.rtl?Math.abs((-d-b.translate)/b.velocity):Math.abs((d-b.translate)/b.velocity);else if(b.params.freeModeSticky)return void b.slideReset();b.params.freeModeMomentumBounce&&p?(b.updateProgress(h),b.setWrapperTransition(u),b.setWrapperTranslate(d),b.onTransitionStart(),b.animating=!0,b.wrapper.transitionEnd(function(){b&&P&&(b.emit("onMomentumBounce",b),b.setWrapperTransition(b.params.speed),b.setWrapperTranslate(h),b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd()}))})):b.velocity?(b.updateProgress(d),b.setWrapperTransition(u),b.setWrapperTranslate(d),b.onTransitionStart(),b.animating||(b.animating=!0,b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd()}))):b.updateProgress(d),b.updateActiveIndex()}(!b.params.freeModeMomentum||i>=b.params.longSwipesMs)&&(b.updateProgress(),b.updateActiveIndex())}else{var v,y=0,w=b.slidesSizesGrid[0];for(v=0;v<b.slidesGrid.length;v+=b.params.slidesPerGroup)void 0!==b.slidesGrid[v+b.params.slidesPerGroup]?a>=b.slidesGrid[v]&&a<b.slidesGrid[v+b.params.slidesPerGroup]&&(y=v,w=b.slidesGrid[v+b.params.slidesPerGroup]-b.slidesGrid[v]):a>=b.slidesGrid[v]&&(y=v,w=b.slidesGrid[b.slidesGrid.length-1]-b.slidesGrid[b.slidesGrid.length-2]);var x=(a-b.slidesGrid[y])/w;if(i>b.params.longSwipesMs){if(!b.params.longSwipes)return void b.slideTo(b.activeIndex);"next"===b.swipeDirection&&(x>=b.params.longSwipesRatio?b.slideTo(y+b.params.slidesPerGroup):b.slideTo(y)),"prev"===b.swipeDirection&&(x>1-b.params.longSwipesRatio?b.slideTo(y+b.params.slidesPerGroup):b.slideTo(y))}else{if(!b.params.shortSwipes)return void b.slideTo(b.activeIndex);"next"===b.swipeDirection&&b.slideTo(y+b.params.slidesPerGroup),"prev"===b.swipeDirection&&b.slideTo(y)}}}else C=T=!1}},b._slideTo=function(e,t){return b.slideTo(e,t,!0,!0)},b.slideTo=function(e,t,n,i){void 0===n&&(n=!0),void 0===e&&(e=0),e<0&&(e=0),b.snapIndex=Math.floor(e/b.params.slidesPerGroup),b.snapIndex>=b.snapGrid.length&&(b.snapIndex=b.snapGrid.length-1);var a=-b.snapGrid[b.snapIndex];if(b.params.autoplay&&b.autoplaying&&(i||!b.params.autoplayDisableOnInteraction?b.pauseAutoplay(t):b.stopAutoplay()),b.updateProgress(a),b.params.normalizeSlideIndex)for(var s=0;s<b.slidesGrid.length;s++)-Math.floor(100*a)>=Math.floor(100*b.slidesGrid[s])&&(e=s);return!(!b.params.allowSwipeToNext&&a<b.translate&&a<b.minTranslate())&&(!(!b.params.allowSwipeToPrev&&a>b.translate&&a>b.maxTranslate()&&(b.activeIndex||0)!==e)&&(void 0===t&&(t=b.params.speed),b.previousIndex=b.activeIndex||0,b.activeIndex=e,b.updateRealIndex(),b.rtl&&-a===b.translate||!b.rtl&&a===b.translate?(b.params.autoHeight&&b.updateAutoHeight(),b.updateClasses(),"slide"!==b.params.effect&&b.setWrapperTranslate(a),!1):(b.updateClasses(),b.onTransitionStart(n),0===t||b.browser.lteIE9?(b.setWrapperTranslate(a),b.setWrapperTransition(0),b.onTransitionEnd(n)):(b.setWrapperTranslate(a),b.setWrapperTransition(t),b.animating||(b.animating=!0,b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd(n)}))),!0)))},b.onTransitionStart=function(e){void 0===e&&(e=!0),b.params.autoHeight&&b.updateAutoHeight(),b.lazy&&b.lazy.onTransitionStart(),e&&(b.emit("onTransitionStart",b),b.activeIndex!==b.previousIndex&&(b.emit("onSlideChangeStart",b),b.activeIndex>b.previousIndex?b.emit("onSlideNextStart",b):b.emit("onSlidePrevStart",b)))},b.onTransitionEnd=function(e){b.animating=!1,b.setWrapperTransition(0),void 0===e&&(e=!0),b.lazy&&b.lazy.onTransitionEnd(),e&&(b.emit("onTransitionEnd",b),b.activeIndex!==b.previousIndex&&(b.emit("onSlideChangeEnd",b),b.activeIndex>b.previousIndex?b.emit("onSlideNextEnd",b):b.emit("onSlidePrevEnd",b))),b.params.history&&b.history&&b.history.setHistory(b.params.history,b.activeIndex),b.params.hashnav&&b.hashnav&&b.hashnav.setHash()},b.slideNext=function(e,t,n){if(b.params.loop){if(b.animating)return!1;b.fixLoop();b.container[0].clientLeft;return b.slideTo(b.activeIndex+b.params.slidesPerGroup,t,e,n)}return b.slideTo(b.activeIndex+b.params.slidesPerGroup,t,e,n)},b._slideNext=function(e){return b.slideNext(!0,e,!0)},b.slidePrev=function(e,t,n){if(b.params.loop){if(b.animating)return!1;b.fixLoop();b.container[0].clientLeft;return b.slideTo(b.activeIndex-1,t,e,n)}return b.slideTo(b.activeIndex-1,t,e,n)},b._slidePrev=function(e){return b.slidePrev(!0,e,!0)},b.slideReset=function(e,t,n){return b.slideTo(b.activeIndex,t,e)},b.disableTouchControl=function(){return b.params.onlyExternal=!0,!0},b.enableTouchControl=function(){return b.params.onlyExternal=!1,!0},b.setWrapperTransition=function(e,t){b.wrapper.transition(e),"slide"!==b.params.effect&&b.effects[b.params.effect]&&b.effects[b.params.effect].setTransition(e),b.params.parallax&&b.parallax&&b.parallax.setTransition(e),b.params.scrollbar&&b.scrollbar&&b.scrollbar.setTransition(e),b.params.control&&b.controller&&b.controller.setTransition(e,t),b.emit("onSetTransition",b,e)},b.setWrapperTranslate=function(e,t,n){var i=0,s=0;b.isHorizontal()?i=b.rtl?-e:e:s=e,b.params.roundLengths&&(i=a(i),s=a(s)),b.params.virtualTranslate||(b.support.transforms3d?b.wrapper.transform("translate3d("+i+"px, "+s+"px, 0px)"):b.wrapper.transform("translate("+i+"px, "+s+"px)")),b.translate=b.isHorizontal()?i:s;var r=b.maxTranslate()-b.minTranslate();(0===r?0:(e-b.minTranslate())/r)!==b.progress&&b.updateProgress(e),t&&b.updateActiveIndex(),"slide"!==b.params.effect&&b.effects[b.params.effect]&&b.effects[b.params.effect].setTranslate(b.translate),b.params.parallax&&b.parallax&&b.parallax.setTranslate(b.translate),b.params.scrollbar&&b.scrollbar&&b.scrollbar.setTranslate(b.translate),b.params.control&&b.controller&&b.controller.setTranslate(b.translate,n),b.emit("onSetTranslate",b,b.translate)},b.getTranslate=function(e,t){var n,i,a,s;return void 0===t&&(t="x"),b.params.virtualTranslate?b.rtl?-b.translate:b.translate:(a=window.getComputedStyle(e,null),window.WebKitCSSMatrix?((i=a.transform||a.webkitTransform).split(",").length>6&&(i=i.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),s=new window.WebKitCSSMatrix("none"===i?"":i)):n=(s=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(i=window.WebKitCSSMatrix?s.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(i=window.WebKitCSSMatrix?s.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),b.rtl&&i&&(i=-i),i||0)},b.getWrapperTranslate=function(e){return void 0===e&&(e=b.isHorizontal()?"x":"y"),b.getTranslate(b.wrapper[0],e)},b.observers=[],b.initObservers=function(){if(b.params.observeParents)for(var e=b.container.parents(),t=0;t<e.length;t++)o(e[t]);o(b.container[0],{childList:!1}),o(b.wrapper[0],{attributes:!1})},b.disconnectObservers=function(){for(var e=0;e<b.observers.length;e++)b.observers[e].disconnect();b.observers=[]},b.createLoop=function(){b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass).remove();var t=b.wrapper.children("."+b.params.slideClass);"auto"!==b.params.slidesPerView||b.params.loopedSlides||(b.params.loopedSlides=t.length),b.loopedSlides=parseInt(b.params.loopedSlides||b.params.slidesPerView,10),b.loopedSlides=b.loopedSlides+b.params.loopAdditionalSlides,b.loopedSlides>t.length&&(b.loopedSlides=t.length);var n,i=[],a=[];for(t.each(function(n,s){var r=e(this);n<b.loopedSlides&&a.push(s),n<t.length&&n>=t.length-b.loopedSlides&&i.push(s),r.attr("data-swiper-slide-index",n)}),n=0;n<a.length;n++)b.wrapper.append(e(a[n].cloneNode(!0)).addClass(b.params.slideDuplicateClass));for(n=i.length-1;n>=0;n--)b.wrapper.prepend(e(i[n].cloneNode(!0)).addClass(b.params.slideDuplicateClass))},b.destroyLoop=function(){b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass).remove(),b.slides.removeAttr("data-swiper-slide-index")},b.reLoop=function(e){var t=b.activeIndex-b.loopedSlides;b.destroyLoop(),b.createLoop(),b.updateSlidesSize(),e&&b.slideTo(t+b.loopedSlides,0,!1)},b.fixLoop=function(){var e;b.activeIndex<b.loopedSlides?(e=b.slides.length-3*b.loopedSlides+b.activeIndex,e+=b.loopedSlides,b.slideTo(e,0,!1,!0)):("auto"===b.params.slidesPerView&&b.activeIndex>=2*b.loopedSlides||b.activeIndex>b.slides.length-2*b.params.slidesPerView)&&(e=-b.slides.length+b.activeIndex+b.loopedSlides,e+=b.loopedSlides,b.slideTo(e,0,!1,!0))},b.appendSlide=function(e){if(b.params.loop&&b.destroyLoop(),"object"==typeof e&&e.length)for(var t=0;t<e.length;t++)e[t]&&b.wrapper.append(e[t]);else b.wrapper.append(e);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0)},b.prependSlide=function(e){b.params.loop&&b.destroyLoop();var t=b.activeIndex+1;if("object"==typeof e&&e.length){for(var n=0;n<e.length;n++)e[n]&&b.wrapper.prepend(e[n]);t=b.activeIndex+e.length}else b.wrapper.prepend(e);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0),b.slideTo(t,0,!1)},b.removeSlide=function(e){b.params.loop&&(b.destroyLoop(),b.slides=b.wrapper.children("."+b.params.slideClass));var t,n=b.activeIndex;if("object"==typeof e&&e.length){for(var i=0;i<e.length;i++)t=e[i],b.slides[t]&&b.slides.eq(t).remove(),t<n&&n--;n=Math.max(n,0)}else t=e,b.slides[t]&&b.slides.eq(t).remove(),t<n&&n--,n=Math.max(n,0);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0),b.params.loop?b.slideTo(n+b.loopedSlides,0,!1):b.slideTo(n,0,!1)},b.removeAllSlides=function(){for(var e=[],t=0;t<b.slides.length;t++)e.push(t);b.removeSlide(e)},b.effects={fade:{setTranslate:function(){for(var e=0;e<b.slides.length;e++){var t=b.slides.eq(e),n=-t[0].swiperSlideOffset;b.params.virtualTranslate||(n-=b.translate);var i=0;b.isHorizontal()||(i=n,n=0);var a=b.params.fade.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:a}).transform("translate3d("+n+"px, "+i+"px, 0px)")}},setTransition:function(e){if(b.slides.transition(e),b.params.virtualTranslate&&0!==e){var t=!1;b.slides.transitionEnd(function(){if(!t&&b){t=!0,b.animating=!1;for(var e=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],n=0;n<e.length;n++)b.wrapper.trigger(e[n])}})}}},flip:{setTranslate:function(){for(var t=0;t<b.slides.length;t++){var n=b.slides.eq(t),i=n[0].progress;b.params.flip.limitRotation&&(i=Math.max(Math.min(n[0].progress,1),-1));var a=-180*i,s=0,r=-n[0].swiperSlideOffset,o=0;if(b.isHorizontal()?b.rtl&&(a=-a):(o=r,r=0,s=-a,a=0),n[0].style.zIndex=-Math.abs(Math.round(i))+b.slides.length,b.params.flip.slideShadows){var l=b.isHorizontal()?n.find(".swiper-slide-shadow-left"):n.find(".swiper-slide-shadow-top"),u=b.isHorizontal()?n.find(".swiper-slide-shadow-right"):n.find(".swiper-slide-shadow-bottom");0===l.length&&(l=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),n.append(l)),0===u.length&&(u=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),n.append(u)),l.length&&(l[0].style.opacity=Math.max(-i,0)),u.length&&(u[0].style.opacity=Math.max(i,0))}n.transform("translate3d("+r+"px, "+o+"px, 0px) rotateX("+s+"deg) rotateY("+a+"deg)")}},setTransition:function(t){if(b.slides.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t),b.params.virtualTranslate&&0!==t){var n=!1;b.slides.eq(b.activeIndex).transitionEnd(function(){if(!n&&b&&e(this).hasClass(b.params.slideActiveClass)){n=!0,b.animating=!1;for(var t=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],i=0;i<t.length;i++)b.wrapper.trigger(t[i])}})}}},cube:{setTranslate:function(){var t,n=0;b.params.cube.shadow&&(b.isHorizontal()?(0===(t=b.wrapper.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),b.wrapper.append(t)),t.css({height:b.width+"px"})):0===(t=b.container.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),b.container.append(t)));for(var i=0;i<b.slides.length;i++){var a=b.slides.eq(i),s=90*i,r=Math.floor(s/360);b.rtl&&(s=-s,r=Math.floor(-s/360));var o=Math.max(Math.min(a[0].progress,1),-1),l=0,u=0,c=0;i%4==0?(l=4*-r*b.size,c=0):(i-1)%4==0?(l=0,c=4*-r*b.size):(i-2)%4==0?(l=b.size+4*r*b.size,c=b.size):(i-3)%4==0&&(l=-b.size,c=3*b.size+4*b.size*r),b.rtl&&(l=-l),b.isHorizontal()||(u=l,l=0);var d="rotateX("+(b.isHorizontal()?0:-s)+"deg) rotateY("+(b.isHorizontal()?s:0)+"deg) translate3d("+l+"px, "+u+"px, "+c+"px)";if(o<=1&&o>-1&&(n=90*i+90*o,b.rtl&&(n=90*-i-90*o)),a.transform(d),b.params.cube.slideShadows){var h=b.isHorizontal()?a.find(".swiper-slide-shadow-left"):a.find(".swiper-slide-shadow-top"),p=b.isHorizontal()?a.find(".swiper-slide-shadow-right"):a.find(".swiper-slide-shadow-bottom");0===h.length&&(h=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),a.append(h)),0===p.length&&(p=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),a.append(p)),h.length&&(h[0].style.opacity=Math.max(-o,0)),p.length&&(p[0].style.opacity=Math.max(o,0))}}if(b.wrapper.css({"-webkit-transform-origin":"50% 50% -"+b.size/2+"px","-moz-transform-origin":"50% 50% -"+b.size/2+"px","-ms-transform-origin":"50% 50% -"+b.size/2+"px","transform-origin":"50% 50% -"+b.size/2+"px"}),b.params.cube.shadow)if(b.isHorizontal())t.transform("translate3d(0px, "+(b.width/2+b.params.cube.shadowOffset)+"px, "+-b.width/2+"px) rotateX(90deg) rotateZ(0deg) scale("+b.params.cube.shadowScale+")");else{var f=Math.abs(n)-90*Math.floor(Math.abs(n)/90),m=1.5-(Math.sin(2*f*Math.PI/360)/2+Math.cos(2*f*Math.PI/360)/2),g=b.params.cube.shadowScale,v=b.params.cube.shadowScale/m,y=b.params.cube.shadowOffset;t.transform("scale3d("+g+", 1, "+v+") translate3d(0px, "+(b.height/2+y)+"px, "+-b.height/2/v+"px) rotateX(-90deg)")}var w=b.isSafari||b.isUiWebView?-b.size/2:0;b.wrapper.transform("translate3d(0px,0,"+w+"px) rotateX("+(b.isHorizontal()?0:n)+"deg) rotateY("+(b.isHorizontal()?-n:0)+"deg)")},setTransition:function(e){b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),b.params.cube.shadow&&!b.isHorizontal()&&b.container.find(".swiper-cube-shadow").transition(e)}},coverflow:{setTranslate:function(){for(var t=b.translate,n=b.isHorizontal()?-t+b.width/2:-t+b.height/2,i=b.isHorizontal()?b.params.coverflow.rotate:-b.params.coverflow.rotate,a=b.params.coverflow.depth,s=0,r=b.slides.length;s<r;s++){var o=b.slides.eq(s),l=b.slidesSizesGrid[s],u=(n-o[0].swiperSlideOffset-l/2)/l*b.params.coverflow.modifier,c=b.isHorizontal()?i*u:0,d=b.isHorizontal()?0:i*u,h=-a*Math.abs(u),p=b.isHorizontal()?0:b.params.coverflow.stretch*u,f=b.isHorizontal()?b.params.coverflow.stretch*u:0;Math.abs(f)<.001&&(f=0),Math.abs(p)<.001&&(p=0),Math.abs(h)<.001&&(h=0),Math.abs(c)<.001&&(c=0),Math.abs(d)<.001&&(d=0);var m="translate3d("+f+"px,"+p+"px,"+h+"px)  rotateX("+d+"deg) rotateY("+c+"deg)";if(o.transform(m),o[0].style.zIndex=1-Math.abs(Math.round(u)),b.params.coverflow.slideShadows){var g=b.isHorizontal()?o.find(".swiper-slide-shadow-left"):o.find(".swiper-slide-shadow-top"),v=b.isHorizontal()?o.find(".swiper-slide-shadow-right"):o.find(".swiper-slide-shadow-bottom");0===g.length&&(g=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),o.append(g)),0===v.length&&(v=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),o.append(v)),g.length&&(g[0].style.opacity=u>0?u:0),v.length&&(v[0].style.opacity=-u>0?-u:0)}}b.browser.ie&&(b.wrapper[0].style.perspectiveOrigin=n+"px 50%")},setTransition:function(e){b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}}},b.lazy={initialImageLoaded:!1,loadImageInSlide:function(t,n){if(void 0!==t&&(void 0===n&&(n=!0),0!==b.slides.length)){var i=b.slides.eq(t),a=i.find("."+b.params.lazyLoadingClass+":not(."+b.params.lazyStatusLoadedClass+"):not(."+b.params.lazyStatusLoadingClass+")");!i.hasClass(b.params.lazyLoadingClass)||i.hasClass(b.params.lazyStatusLoadedClass)||i.hasClass(b.params.lazyStatusLoadingClass)||(a=a.add(i[0])),0!==a.length&&a.each(function(){var t=e(this);t.addClass(b.params.lazyStatusLoadingClass);var a=t.attr("data-background"),s=t.attr("data-src"),r=t.attr("data-srcset"),o=t.attr("data-sizes");b.loadImage(t[0],s||a,r,o,!1,function(){if(void 0!==b&&null!==b&&b){if(a?(t.css("background-image",'url("'+a+'")'),t.removeAttr("data-background")):(r&&(t.attr("srcset",r),t.removeAttr("data-srcset")),o&&(t.attr("sizes",o),t.removeAttr("data-sizes")),s&&(t.attr("src",s),t.removeAttr("data-src"))),t.addClass(b.params.lazyStatusLoadedClass).removeClass(b.params.lazyStatusLoadingClass),i.find("."+b.params.lazyPreloaderClass+", ."+b.params.preloaderClass).remove(),b.params.loop&&n){var e=i.attr("data-swiper-slide-index");if(i.hasClass(b.params.slideDuplicateClass)){var l=b.wrapper.children('[data-swiper-slide-index="'+e+'"]:not(.'+b.params.slideDuplicateClass+")");b.lazy.loadImageInSlide(l.index(),!1)}else{var u=b.wrapper.children("."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');b.lazy.loadImageInSlide(u.index(),!1)}}b.emit("onLazyImageReady",b,i[0],t[0])}}),b.emit("onLazyImageLoad",b,i[0],t[0])})}},load:function(){var t,n=b.params.slidesPerView;if("auto"===n&&(n=0),b.lazy.initialImageLoaded||(b.lazy.initialImageLoaded=!0),b.params.watchSlidesVisibility)b.wrapper.children("."+b.params.slideVisibleClass).each(function(){b.lazy.loadImageInSlide(e(this).index())});else if(n>1)for(t=b.activeIndex;t<b.activeIndex+n;t++)b.slides[t]&&b.lazy.loadImageInSlide(t);else b.lazy.loadImageInSlide(b.activeIndex);if(b.params.lazyLoadingInPrevNext)if(n>1||b.params.lazyLoadingInPrevNextAmount&&b.params.lazyLoadingInPrevNextAmount>1){var i=b.params.lazyLoadingInPrevNextAmount,a=n,s=Math.min(b.activeIndex+a+Math.max(i,a),b.slides.length),r=Math.max(b.activeIndex-Math.max(a,i),0);for(t=b.activeIndex+n;t<s;t++)b.slides[t]&&b.lazy.loadImageInSlide(t);for(t=r;t<b.activeIndex;t++)b.slides[t]&&b.lazy.loadImageInSlide(t)}else{var o=b.wrapper.children("."+b.params.slideNextClass);o.length>0&&b.lazy.loadImageInSlide(o.index());var l=b.wrapper.children("."+b.params.slidePrevClass);l.length>0&&b.lazy.loadImageInSlide(l.index())}},onTransitionStart:function(){b.params.lazyLoading&&(b.params.lazyLoadingOnTransitionStart||!b.params.lazyLoadingOnTransitionStart&&!b.lazy.initialImageLoaded)&&b.lazy.load()},onTransitionEnd:function(){b.params.lazyLoading&&!b.params.lazyLoadingOnTransitionStart&&b.lazy.load()}},b.scrollbar={isTouched:!1,setDragPosition:function(e){var t=b.scrollbar,n=(b.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY)-t.track.offset()[b.isHorizontal()?"left":"top"]-t.dragSize/2,i=-b.minTranslate()*t.moveDivider,a=-b.maxTranslate()*t.moveDivider;n<i?n=i:n>a&&(n=a),n=-n/t.moveDivider,b.updateProgress(n),b.setWrapperTranslate(n,!0)},dragStart:function(e){var t=b.scrollbar;t.isTouched=!0,e.preventDefault(),e.stopPropagation(),t.setDragPosition(e),clearTimeout(t.dragTimeout),t.track.transition(0),b.params.scrollbarHide&&t.track.css("opacity",1),b.wrapper.transition(100),t.drag.transition(100),b.emit("onScrollbarDragStart",b)},dragMove:function(e){var t=b.scrollbar;t.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),b.wrapper.transition(0),t.track.transition(0),t.drag.transition(0),b.emit("onScrollbarDragMove",b))},dragEnd:function(e){var t=b.scrollbar;t.isTouched&&(t.isTouched=!1,b.params.scrollbarHide&&(clearTimeout(t.dragTimeout),t.dragTimeout=setTimeout(function(){t.track.css("opacity",0),t.track.transition(400)},1e3)),b.emit("onScrollbarDragEnd",b),b.params.scrollbarSnapOnRelease&&b.slideReset())},draggableEvents:function(){return!1!==b.params.simulateTouch||b.support.touch?b.touchEvents:b.touchEventsDesktop}(),enableDraggable:function(){var t=b.scrollbar,n=b.support.touch?t.track:document;e(t.track).on(t.draggableEvents.start,t.dragStart),e(n).on(t.draggableEvents.move,t.dragMove),e(n).on(t.draggableEvents.end,t.dragEnd)},disableDraggable:function(){var t=b.scrollbar,n=b.support.touch?t.track:document;e(t.track).off(t.draggableEvents.start,t.dragStart),e(n).off(t.draggableEvents.move,t.dragMove),e(n).off(t.draggableEvents.end,t.dragEnd)},set:function(){if(b.params.scrollbar){var t=b.scrollbar;t.track=e(b.params.scrollbar),b.params.uniqueNavElements&&"string"==typeof b.params.scrollbar&&t.track.length>1&&1===b.container.find(b.params.scrollbar).length&&(t.track=b.container.find(b.params.scrollbar)),t.drag=t.track.find(".swiper-scrollbar-drag"),0===t.drag.length&&(t.drag=e('<div class="swiper-scrollbar-drag"></div>'),t.track.append(t.drag)),t.drag[0].style.width="",t.drag[0].style.height="",t.trackSize=b.isHorizontal()?t.track[0].offsetWidth:t.track[0].offsetHeight,t.divider=b.size/b.virtualSize,t.moveDivider=t.divider*(t.trackSize/b.size),t.dragSize=t.trackSize*t.divider,b.isHorizontal()?t.drag[0].style.width=t.dragSize+"px":t.drag[0].style.height=t.dragSize+"px",t.divider>=1?t.track[0].style.display="none":t.track[0].style.display="",b.params.scrollbarHide&&(t.track[0].style.opacity=0)}},setTranslate:function(){if(b.params.scrollbar){var e,t=b.scrollbar,n=(b.translate,t.dragSize);e=(t.trackSize-t.dragSize)*b.progress,b.rtl&&b.isHorizontal()?(e=-e)>0?(n=t.dragSize-e,e=0):-e+t.dragSize>t.trackSize&&(n=t.trackSize+e):e<0?(n=t.dragSize+e,e=0):e+t.dragSize>t.trackSize&&(n=t.trackSize-e),b.isHorizontal()?(b.support.transforms3d?t.drag.transform("translate3d("+e+"px, 0, 0)"):t.drag.transform("translateX("+e+"px)"),t.drag[0].style.width=n+"px"):(b.support.transforms3d?t.drag.transform("translate3d(0px, "+e+"px, 0)"):t.drag.transform("translateY("+e+"px)"),t.drag[0].style.height=n+"px"),b.params.scrollbarHide&&(clearTimeout(t.timeout),t.track[0].style.opacity=1,t.timeout=setTimeout(function(){t.track[0].style.opacity=0,t.track.transition(400)},1e3))}},setTransition:function(e){b.params.scrollbar&&b.scrollbar.drag.transition(e)}},b.controller={LinearSpline:function(e,t){var n=function(){var e,t,n;return function(i,a){for(t=-1,e=i.length;e-t>1;)i[n=e+t>>1]<=a?t=n:e=n;return e}}();this.x=e,this.y=t,this.lastIndex=e.length-1;var i,a;this.x.length;this.interpolate=function(e){return e?(a=n(this.x,e),i=a-1,(e-this.x[i])*(this.y[a]-this.y[i])/(this.x[a]-this.x[i])+this.y[i]):0}},getInterpolateFunction:function(e){b.controller.spline||(b.controller.spline=b.params.loop?new b.controller.LinearSpline(b.slidesGrid,e.slidesGrid):new b.controller.LinearSpline(b.snapGrid,e.snapGrid))},setTranslate:function(e,n){function i(t){e=t.rtl&&"horizontal"===t.params.direction?-b.translate:b.translate,"slide"===b.params.controlBy&&(b.controller.getInterpolateFunction(t),s=-b.controller.spline.interpolate(-e)),s&&"container"!==b.params.controlBy||(a=(t.maxTranslate()-t.minTranslate())/(b.maxTranslate()-b.minTranslate()),s=(e-b.minTranslate())*a+t.minTranslate()),b.params.controlInverse&&(s=t.maxTranslate()-s),t.updateProgress(s),t.setWrapperTranslate(s,!1,b),t.updateActiveIndex()}var a,s,r=b.params.control;if(Array.isArray(r))for(var o=0;o<r.length;o++)r[o]!==n&&r[o]instanceof t&&i(r[o]);else r instanceof t&&n!==r&&i(r)},setTransition:function(e,n){function i(t){t.setWrapperTransition(e,b),0!==e&&(t.onTransitionStart(),t.wrapper.transitionEnd(function(){s&&(t.params.loop&&"slide"===b.params.controlBy&&t.fixLoop(),t.onTransitionEnd())}))}var a,s=b.params.control;if(Array.isArray(s))for(a=0;a<s.length;a++)s[a]!==n&&s[a]instanceof t&&i(s[a]);else s instanceof t&&n!==s&&i(s)}},b.hashnav={onHashCange:function(e,t){var n=document.location.hash.replace("#","");n!==b.slides.eq(b.activeIndex).attr("data-hash")&&b.slideTo(b.wrapper.children("."+b.params.slideClass+'[data-hash="'+n+'"]').index())},attachEvents:function(t){var n=t?"off":"on";e(window)[n]("hashchange",b.hashnav.onHashCange)},setHash:function(){if(b.hashnav.initialized&&b.params.hashnav)if(b.params.replaceState&&window.history&&window.history.replaceState)window.history.replaceState(null,null,"#"+b.slides.eq(b.activeIndex).attr("data-hash")||"");else{var e=b.slides.eq(b.activeIndex),t=e.attr("data-hash")||e.attr("data-history");document.location.hash=t||""}},init:function(){if(b.params.hashnav&&!b.params.history){b.hashnav.initialized=!0;var e=document.location.hash.replace("#","");if(e)for(var t=0,n=b.slides.length;t<n;t++){var i=b.slides.eq(t);if((i.attr("data-hash")||i.attr("data-history"))===e&&!i.hasClass(b.params.slideDuplicateClass)){var a=i.index();b.slideTo(a,0,b.params.runCallbacksOnInit,!0)}}b.params.hashnavWatchState&&b.hashnav.attachEvents()}},destroy:function(){b.params.hashnavWatchState&&b.hashnav.attachEvents(!0)}},b.history={init:function(){if(b.params.history){if(!window.history||!window.history.pushState)return b.params.history=!1,void(b.params.hashnav=!0);b.history.initialized=!0,this.paths=this.getPathValues(),(this.paths.key||this.paths.value)&&(this.scrollToSlide(0,this.paths.value,b.params.runCallbacksOnInit),b.params.replaceState||window.addEventListener("popstate",this.setHistoryPopState))}},setHistoryPopState:function(){b.history.paths=b.history.getPathValues(),b.history.scrollToSlide(b.params.speed,b.history.paths.value,!1)},getPathValues:function(){var e=window.location.pathname.slice(1).split("/"),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){if(b.history.initialized&&b.params.history){var n=b.slides.eq(t),i=this.slugify(n.attr("data-history"));window.location.pathname.includes(e)||(i=e+"/"+i),b.params.replaceState?window.history.replaceState(null,null,i):window.history.pushState(null,null,i)}},slugify:function(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,n){if(t)for(var i=0,a=b.slides.length;i<a;i++){var s=b.slides.eq(i);if(this.slugify(s.attr("data-history"))===t&&!s.hasClass(b.params.slideDuplicateClass)){var r=s.index();b.slideTo(r,e,n)}}else b.slideTo(0,e,n)}},b.disableKeyboardControl=function(){b.params.keyboardControl=!1,e(document).off("keydown",l)},b.enableKeyboardControl=function(){b.params.keyboardControl=!0,e(document).on("keydown",l)},b.mousewheel={event:!1,lastScrollTime:(new window.Date).getTime()},b.params.mousewheelControl&&(b.mousewheel.event=navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e="onwheel"in document;if(!e){var t=document.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")&&(e=document.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel"),b.disableMousewheelControl=function(){if(!b.mousewheel.event)return!1;var t=b.container;return"container"!==b.params.mousewheelEventsTarged&&(t=e(b.params.mousewheelEventsTarged)),t.off(b.mousewheel.event,c),b.params.mousewheelControl=!1,!0},b.enableMousewheelControl=function(){if(!b.mousewheel.event)return!1;var t=b.container;return"container"!==b.params.mousewheelEventsTarged&&(t=e(b.params.mousewheelEventsTarged)),t.on(b.mousewheel.event,c),b.params.mousewheelControl=!0,!0},b.parallax={setTranslate:function(){b.container.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){d(this,b.progress)}),b.slides.each(function(){var t=e(this);t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){d(this,Math.min(Math.max(t[0].progress,-1),1))})})},setTransition:function(t){void 0===t&&(t=b.params.speed),b.container.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){var n=e(this),i=parseInt(n.attr("data-swiper-parallax-duration"),10)||t;0===t&&(i=0),n.transition(i)})}},b.zoom={scale:1,currentScale:1,isScaling:!1,gesture:{slide:void 0,slideWidth:void 0,slideHeight:void 0,image:void 0,imageWrap:void 0,zoomMax:b.params.zoomMax},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0},getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,n=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,a=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(i-t,2)+Math.pow(a-n,2))},onGestureStart:function(t){var n=b.zoom;if(!b.support.gestures){if("touchstart"!==t.type||"touchstart"===t.type&&t.targetTouches.length<2)return;n.gesture.scaleStart=n.getDistanceBetweenTouches(t)}n.gesture.slide&&n.gesture.slide.length||(n.gesture.slide=e(this),0===n.gesture.slide.length&&(n.gesture.slide=b.slides.eq(b.activeIndex)),n.gesture.image=n.gesture.slide.find("img, svg, canvas"),n.gesture.imageWrap=n.gesture.image.parent("."+b.params.zoomContainerClass),n.gesture.zoomMax=n.gesture.imageWrap.attr("data-swiper-zoom")||b.params.zoomMax,0!==n.gesture.imageWrap.length)?(n.gesture.image.transition(0),n.isScaling=!0):n.gesture.image=void 0},onGestureChange:function(e){var t=b.zoom;if(!b.support.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;t.gesture.scaleMove=t.getDistanceBetweenTouches(e)}t.gesture.image&&0!==t.gesture.image.length&&(b.support.gestures?t.scale=e.scale*t.currentScale:t.scale=t.gesture.scaleMove/t.gesture.scaleStart*t.currentScale,t.scale>t.gesture.zoomMax&&(t.scale=t.gesture.zoomMax-1+Math.pow(t.scale-t.gesture.zoomMax+1,.5)),t.scale<b.params.zoomMin&&(t.scale=b.params.zoomMin+1-Math.pow(b.params.zoomMin-t.scale+1,.5)),t.gesture.image.transform("translate3d(0,0,0) scale("+t.scale+")"))},onGestureEnd:function(e){var t=b.zoom;!b.support.gestures&&("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2)||t.gesture.image&&0!==t.gesture.image.length&&(t.scale=Math.max(Math.min(t.scale,t.gesture.zoomMax),b.params.zoomMin),t.gesture.image.transition(b.params.speed).transform("translate3d(0,0,0) scale("+t.scale+")"),t.currentScale=t.scale,t.isScaling=!1,1===t.scale&&(t.gesture.slide=void 0))},onTouchStart:function(e,t){var n=e.zoom;n.gesture.image&&0!==n.gesture.image.length&&(n.image.isTouched||("android"===e.device.os&&t.preventDefault(),n.image.isTouched=!0,n.image.touchesStart.x="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,n.image.touchesStart.y="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY))},onTouchMove:function(e){var t=b.zoom;if(t.gesture.image&&0!==t.gesture.image.length&&(b.allowClick=!1,t.image.isTouched&&t.gesture.slide)){t.image.isMoved||(t.image.width=t.gesture.image[0].offsetWidth,t.image.height=t.gesture.image[0].offsetHeight,t.image.startX=b.getTranslate(t.gesture.imageWrap[0],"x")||0,t.image.startY=b.getTranslate(t.gesture.imageWrap[0],"y")||0,t.gesture.slideWidth=t.gesture.slide[0].offsetWidth,t.gesture.slideHeight=t.gesture.slide[0].offsetHeight,t.gesture.imageWrap.transition(0),b.rtl&&(t.image.startX=-t.image.startX),b.rtl&&(t.image.startY=-t.image.startY));var n=t.image.width*t.scale,i=t.image.height*t.scale;if(!(n<t.gesture.slideWidth&&i<t.gesture.slideHeight)){if(t.image.minX=Math.min(t.gesture.slideWidth/2-n/2,0),t.image.maxX=-t.image.minX,t.image.minY=Math.min(t.gesture.slideHeight/2-i/2,0),t.image.maxY=-t.image.minY,t.image.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,t.image.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!t.image.isMoved&&!t.isScaling){if(b.isHorizontal()&&Math.floor(t.image.minX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x<t.image.touchesStart.x||Math.floor(t.image.maxX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x>t.image.touchesStart.x)return void(t.image.isTouched=!1);if(!b.isHorizontal()&&Math.floor(t.image.minY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y<t.image.touchesStart.y||Math.floor(t.image.maxY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y>t.image.touchesStart.y)return void(t.image.isTouched=!1)}e.preventDefault(),e.stopPropagation(),t.image.isMoved=!0,t.image.currentX=t.image.touchesCurrent.x-t.image.touchesStart.x+t.image.startX,t.image.currentY=t.image.touchesCurrent.y-t.image.touchesStart.y+t.image.startY,t.image.currentX<t.image.minX&&(t.image.currentX=t.image.minX+1-Math.pow(t.image.minX-t.image.currentX+1,.8)),t.image.currentX>t.image.maxX&&(t.image.currentX=t.image.maxX-1+Math.pow(t.image.currentX-t.image.maxX+1,.8)),t.image.currentY<t.image.minY&&(t.image.currentY=t.image.minY+1-Math.pow(t.image.minY-t.image.currentY+1,.8)),t.image.currentY>t.image.maxY&&(t.image.currentY=t.image.maxY-1+Math.pow(t.image.currentY-t.image.maxY+1,.8)),t.velocity.prevPositionX||(t.velocity.prevPositionX=t.image.touchesCurrent.x),t.velocity.prevPositionY||(t.velocity.prevPositionY=t.image.touchesCurrent.y),t.velocity.prevTime||(t.velocity.prevTime=Date.now()),t.velocity.x=(t.image.touchesCurrent.x-t.velocity.prevPositionX)/(Date.now()-t.velocity.prevTime)/2,t.velocity.y=(t.image.touchesCurrent.y-t.velocity.prevPositionY)/(Date.now()-t.velocity.prevTime)/2,Math.abs(t.image.touchesCurrent.x-t.velocity.prevPositionX)<2&&(t.velocity.x=0),Math.abs(t.image.touchesCurrent.y-t.velocity.prevPositionY)<2&&(t.velocity.y=0),t.velocity.prevPositionX=t.image.touchesCurrent.x,t.velocity.prevPositionY=t.image.touchesCurrent.y,t.velocity.prevTime=Date.now(),t.gesture.imageWrap.transform("translate3d("+t.image.currentX+"px, "+t.image.currentY+"px,0)")}}},onTouchEnd:function(e,t){var n=e.zoom;if(n.gesture.image&&0!==n.gesture.image.length){if(!n.image.isTouched||!n.image.isMoved)return n.image.isTouched=!1,void(n.image.isMoved=!1);n.image.isTouched=!1,n.image.isMoved=!1;var i=300,a=300,s=n.velocity.x*i,r=n.image.currentX+s,o=n.velocity.y*a,l=n.image.currentY+o;0!==n.velocity.x&&(i=Math.abs((r-n.image.currentX)/n.velocity.x)),0!==n.velocity.y&&(a=Math.abs((l-n.image.currentY)/n.velocity.y));var u=Math.max(i,a);n.image.currentX=r,n.image.currentY=l;var c=n.image.width*n.scale,d=n.image.height*n.scale;n.image.minX=Math.min(n.gesture.slideWidth/2-c/2,0),n.image.maxX=-n.image.minX,n.image.minY=Math.min(n.gesture.slideHeight/2-d/2,0),n.image.maxY=-n.image.minY,n.image.currentX=Math.max(Math.min(n.image.currentX,n.image.maxX),n.image.minX),n.image.currentY=Math.max(Math.min(n.image.currentY,n.image.maxY),n.image.minY),n.gesture.imageWrap.transition(u).transform("translate3d("+n.image.currentX+"px, "+n.image.currentY+"px,0)")}},onTransitionEnd:function(e){var t=e.zoom;t.gesture.slide&&e.previousIndex!==e.activeIndex&&(t.gesture.image.transform("translate3d(0,0,0) scale(1)"),t.gesture.imageWrap.transform("translate3d(0,0,0)"),t.gesture.slide=t.gesture.image=t.gesture.imageWrap=void 0,t.scale=t.currentScale=1)},toggleZoom:function(t,n){var i=t.zoom;if(i.gesture.slide||(i.gesture.slide=t.clickedSlide?e(t.clickedSlide):t.slides.eq(t.activeIndex),i.gesture.image=i.gesture.slide.find("img, svg, canvas"),i.gesture.imageWrap=i.gesture.image.parent("."+t.params.zoomContainerClass)),i.gesture.image&&0!==i.gesture.image.length){var a,s,r,o,l,u,c,d,h,p,f,m,g,v,y,w;void 0===i.image.touchesStart.x&&n?(a="touchend"===n.type?n.changedTouches[0].pageX:n.pageX,s="touchend"===n.type?n.changedTouches[0].pageY:n.pageY):(a=i.image.touchesStart.x,s=i.image.touchesStart.y),i.scale&&1!==i.scale?(i.scale=i.currentScale=1,i.gesture.imageWrap.transition(300).transform("translate3d(0,0,0)"),i.gesture.image.transition(300).transform("translate3d(0,0,0) scale(1)"),i.gesture.slide=void 0):(i.scale=i.currentScale=i.gesture.imageWrap.attr("data-swiper-zoom")||t.params.zoomMax,n?(y=i.gesture.slide[0].offsetWidth,w=i.gesture.slide[0].offsetHeight,r=i.gesture.slide.offset().left+y/2-a,o=i.gesture.slide.offset().top+w/2-s,c=i.gesture.image[0].offsetWidth,d=i.gesture.image[0].offsetHeight,h=c*i.scale,p=d*i.scale,g=-(f=Math.min(y/2-h/2,0)),v=-(m=Math.min(w/2-p/2,0)),l=r*i.scale,u=o*i.scale,l<f&&(l=f),l>g&&(l=g),u<m&&(u=m),u>v&&(u=v)):(l=0,u=0),i.gesture.imageWrap.transition(300).transform("translate3d("+l+"px, "+u+"px,0)"),i.gesture.image.transition(300).transform("translate3d(0,0,0) scale("+i.scale+")"))}},attachEvents:function(t){var n=t?"off":"on";if(b.params.zoom){b.slides;var i=!("touchstart"!==b.touchEvents.start||!b.support.passiveListener||!b.params.passiveListeners)&&{passive:!0,capture:!1};b.support.gestures?(b.slides[n]("gesturestart",b.zoom.onGestureStart,i),b.slides[n]("gesturechange",b.zoom.onGestureChange,i),b.slides[n]("gestureend",b.zoom.onGestureEnd,i)):"touchstart"===b.touchEvents.start&&(b.slides[n](b.touchEvents.start,b.zoom.onGestureStart,i),b.slides[n](b.touchEvents.move,b.zoom.onGestureChange,i),b.slides[n](b.touchEvents.end,b.zoom.onGestureEnd,i)),b[n]("touchStart",b.zoom.onTouchStart),b.slides.each(function(t,i){e(i).find("."+b.params.zoomContainerClass).length>0&&e(i)[n](b.touchEvents.move,b.zoom.onTouchMove)}),b[n]("touchEnd",b.zoom.onTouchEnd),b[n]("transitionEnd",b.zoom.onTransitionEnd),b.params.zoomToggle&&b.on("doubleTap",b.zoom.toggleZoom)}},init:function(){b.zoom.attachEvents()},destroy:function(){b.zoom.attachEvents(!0)}},b._plugins=[];for(var R in b.plugins){var j=b.plugins[R](b,b.params[R]);j&&b._plugins.push(j)}return b.callPlugins=function(e){for(var t=0;t<b._plugins.length;t++)e in b._plugins[t]&&b._plugins[t][e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},b.emitterEventListeners={},b.emit=function(e){b.params[e]&&b.params[e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);var t;if(b.emitterEventListeners[e])for(t=0;t<b.emitterEventListeners[e].length;t++)b.emitterEventListeners[e][t](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);b.callPlugins&&b.callPlugins(e,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},b.on=function(e,t){return e=h(e),b.emitterEventListeners[e]||(b.emitterEventListeners[e]=[]),b.emitterEventListeners[e].push(t),b},b.off=function(e,t){var n;if(e=h(e),void 0===t)return b.emitterEventListeners[e]=[],b;if(b.emitterEventListeners[e]&&0!==b.emitterEventListeners[e].length){for(n=0;n<b.emitterEventListeners[e].length;n++)b.emitterEventListeners[e][n]===t&&b.emitterEventListeners[e].splice(n,1);return b}},b.once=function(e,t){e=h(e);var n=function(){t(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]),b.off(e,n)};return b.on(e,n),b},b.a11y={makeFocusable:function(e){return e.attr("tabIndex","0"),e},addRole:function(e,t){return e.attr("role",t),e},addLabel:function(e,t){return e.attr("aria-label",t),e},disable:function(e){return e.attr("aria-disabled",!0),e},enable:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(t){13===t.keyCode&&(e(t.target).is(b.params.nextButton)?(b.onClickNext(t),b.isEnd?b.a11y.notify(b.params.lastSlideMessage):b.a11y.notify(b.params.nextSlideMessage)):e(t.target).is(b.params.prevButton)&&(b.onClickPrev(t),b.isBeginning?b.a11y.notify(b.params.firstSlideMessage):b.a11y.notify(b.params.prevSlideMessage)),e(t.target).is("."+b.params.bulletClass)&&e(t.target)[0].click())},liveRegion:e('<span class="'+b.params.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>'),notify:function(e){var t=b.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},init:function(){b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.a11y.makeFocusable(b.nextButton),b.a11y.addRole(b.nextButton,"button"),b.a11y.addLabel(b.nextButton,b.params.nextSlideMessage)),b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.a11y.makeFocusable(b.prevButton),b.a11y.addRole(b.prevButton,"button"),b.a11y.addLabel(b.prevButton,b.params.prevSlideMessage)),e(b.container).append(b.a11y.liveRegion)},initPagination:function(){b.params.pagination&&b.params.paginationClickable&&b.bullets&&b.bullets.length&&b.bullets.each(function(){var t=e(this);b.a11y.makeFocusable(t),b.a11y.addRole(t,"button"),b.a11y.addLabel(t,b.params.paginationBulletMessage.replace(/{{index}}/,t.index()+1))})},destroy:function(){b.a11y.liveRegion&&b.a11y.liveRegion.length>0&&b.a11y.liveRegion.remove()}},b.init=function(){b.params.loop&&b.createLoop(),b.updateContainerSize(),b.updateSlidesSize(),b.updatePagination(),b.params.scrollbar&&b.scrollbar&&(b.scrollbar.set(),b.params.scrollbarDraggable&&b.scrollbar.enableDraggable()),"slide"!==b.params.effect&&b.effects[b.params.effect]&&(b.params.loop||b.updateProgress(),b.effects[b.params.effect].setTranslate()),b.params.loop?b.slideTo(b.params.initialSlide+b.loopedSlides,0,b.params.runCallbacksOnInit):(b.slideTo(b.params.initialSlide,0,b.params.runCallbacksOnInit),0===b.params.initialSlide&&(b.parallax&&b.params.parallax&&b.parallax.setTranslate(),b.lazy&&b.params.lazyLoading&&(b.lazy.load(),b.lazy.initialImageLoaded=!0))),b.attachEvents(),b.params.observer&&b.support.observer&&b.initObservers(),b.params.preloadImages&&!b.params.lazyLoading&&b.preloadImages(),b.params.zoom&&b.zoom&&b.zoom.init(),b.params.autoplay&&b.startAutoplay(),b.params.keyboardControl&&b.enableKeyboardControl&&b.enableKeyboardControl(),b.params.mousewheelControl&&b.enableMousewheelControl&&b.enableMousewheelControl(),b.params.hashnavReplaceState&&(b.params.replaceState=b.params.hashnavReplaceState),b.params.history&&b.history&&b.history.init(),b.params.hashnav&&b.hashnav&&b.hashnav.init(),b.params.a11y&&b.a11y&&b.a11y.init(),b.emit("onInit",b)},b.cleanupStyles=function(){b.container.removeClass(b.classNames.join(" ")).removeAttr("style"),b.wrapper.removeAttr("style"),b.slides&&b.slides.length&&b.slides.removeClass([b.params.slideVisibleClass,b.params.slideActiveClass,b.params.slideNextClass,b.params.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-column").removeAttr("data-swiper-row"),b.paginationContainer&&b.paginationContainer.length&&b.paginationContainer.removeClass(b.params.paginationHiddenClass),b.bullets&&b.bullets.length&&b.bullets.removeClass(b.params.bulletActiveClass),b.params.prevButton&&e(b.params.prevButton).removeClass(b.params.buttonDisabledClass),b.params.nextButton&&e(b.params.nextButton).removeClass(b.params.buttonDisabledClass),b.params.scrollbar&&b.scrollbar&&(b.scrollbar.track&&b.scrollbar.track.length&&b.scrollbar.track.removeAttr("style"),b.scrollbar.drag&&b.scrollbar.drag.length&&b.scrollbar.drag.removeAttr("style"))},b.destroy=function(e,t){b.detachEvents(),b.stopAutoplay(),b.params.scrollbar&&b.scrollbar&&b.params.scrollbarDraggable&&b.scrollbar.disableDraggable(),b.params.loop&&b.destroyLoop(),t&&b.cleanupStyles(),b.disconnectObservers(),b.params.zoom&&b.zoom&&b.zoom.destroy(),b.params.keyboardControl&&b.disableKeyboardControl&&b.disableKeyboardControl(),b.params.mousewheelControl&&b.disableMousewheelControl&&b.disableMousewheelControl(),b.params.a11y&&b.a11y&&b.a11y.destroy(),b.params.history&&!b.params.replaceState&&window.removeEventListener("popstate",b.history.setHistoryPopState),b.params.hashnav&&b.hashnav&&b.hashnav.destroy(),b.emit("onDestroy"),!1!==e&&(b=null)},b.init(),b}};t.prototype={isSafari:function(){var e=window.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent),isArray:function(e){return"[object Array]"===Object.prototype.toString.apply(e)},browser:{ie:window.navigator.pointerEnabled||window.navigator.msPointerEnabled,ieTouch:window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>1||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>1,lteIE9:function(){var e=document.createElement("div");return e.innerHTML="\x3c!--[if lte IE 9]><i></i><![endif]--\x3e",1===e.getElementsByTagName("i").length}()},device:function(){var e=window.navigator.userAgent,t=e.match(/(Android);?[\s\/]+([\d.]+)?/),n=e.match(/(iPad).*OS\s([\d_]+)/),i=e.match(/(iPod)(.*OS\s([\d_]+))?/),a=!n&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);return{ios:n||a||i,android:t}}(),support:{touch:window.Modernizr&&!0===Modernizr.touch||function(){return!!("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch)}(),transforms3d:window.Modernizr&&!0===Modernizr.csstransforms3d||function(){var e=document.createElement("div").style;return"webkitPerspective"in e||"MozPerspective"in e||"OPerspective"in e||"MsPerspective"in e||"perspective"in e}(),flexbox:function(){for(var e=document.createElement("div").style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),n=0;n<t.length;n++)if(t[n]in e)return!0}(),observer:function(){return"MutationObserver"in window||"WebkitMutationObserver"in window}(),passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:function(){return"ongesturestart"in window}()},plugins:{}};for(var n=["jQuery","Zepto","Dom7"],i=0;i<n.length;i++)window[n[i]]&&function(e){e.fn.swiper=function(n){var i;return e(this).each(function(){var e=new t(this,n);i||(i=e)}),i}}(window[n[i]]);var a;(a="undefined"==typeof Dom7?window.Dom7||window.Zepto||window.jQuery:Dom7)&&("transitionEnd"in a.fn||(a.fn.transitionEnd=function(e){function t(s){if(s.target===this)for(e.call(this,s),n=0;n<i.length;n++)a.off(i[n],t)}var n,i=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],a=this;if(e)for(n=0;n<i.length;n++)a.on(i[n],t);return this}),"transform"in a.fn||(a.fn.transform=function(e){for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransform=n.MsTransform=n.msTransform=n.MozTransform=n.OTransform=n.transform=e}return this}),"transition"in a.fn||(a.fn.transition=function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransitionDuration=n.MsTransitionDuration=n.msTransitionDuration=n.MozTransitionDuration=n.OTransitionDuration=n.transitionDuration=e}return this}),"outerWidth"in a.fn||(a.fn.outerWidth=function(e){return this.length>0?e?this[0].offsetWidth+parseFloat(this.css("margin-right"))+parseFloat(this.css("margin-left")):this[0].offsetWidth:null})),window.Swiper=t}(),"undefined"!=typeof module?module.exports=window.Swiper:"function"==typeof define&&define.amd&&define([],function(){"use strict";return window.Swiper}),function(e,t,n,i){"use strict";function a(e,t,n){return setTimeout(u(e,n),t)}function s(e,t,n){return!!Array.isArray(e)&&(r(e,n[t],n),!0)}function r(e,t,n){var a;if(e)if(e.forEach)e.forEach(t,n);else if(e.length!==i)for(a=0;a<e.length;)t.call(n,e[a],a,e),a++;else for(a in e)e.hasOwnProperty(a)&&t.call(n,e[a],a,e)}function o(t,n,i){var a="DEPRECATED METHOD: "+n+"\n"+i+" AT \n";return function(){var n=new Error("get-stack-trace"),i=n&&n.stack?n.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",s=e.console&&(e.console.warn||e.console.log);return s&&s.call(e.console,a,i),t.apply(this,arguments)}}function l(e,t,n){var i,a=t.prototype;(i=e.prototype=Object.create(a)).constructor=e,i._super=a,n&&ce(i,n)}function u(e,t){return function(){return e.apply(t,arguments)}}function c(e,t){return typeof e==pe?e.apply(t?t[0]||i:i,t):e}function d(e,t){return e===i?t:e}function h(e,t,n){r(g(t),function(t){e.addEventListener(t,n,!1)})}function p(e,t,n){r(g(t),function(t){e.removeEventListener(t,n,!1)})}function f(e,t){for(;e;){if(e==t)return!0;e=e.parentNode}return!1}function m(e,t){return e.indexOf(t)>-1}function g(e){return e.trim().split(/\s+/g)}function v(e,t,n){if(e.indexOf&&!n)return e.indexOf(t);for(var i=0;i<e.length;){if(n&&e[i][n]==t||!n&&e[i]===t)return i;i++}return-1}function y(e){return Array.prototype.slice.call(e,0)}function w(e,t,n){for(var i=[],a=[],s=0;s<e.length;){var r=t?e[s][t]:e[s];v(a,r)<0&&i.push(e[s]),a[s]=r,s++}return n&&(i=t?i.sort(function(e,n){return e[t]>n[t]}):i.sort()),i}function b(e,t){for(var n,a,s=t[0].toUpperCase()+t.slice(1),r=0;r<de.length;){if(n=de[r],(a=n?n+s:t)in e)return a;r++}return i}function x(){return we++}function C(t){var n=t.ownerDocument||t;return n.defaultView||n.parentWindow||e}function T(e,t){var n=this;this.manager=e,this.callback=t,this.element=e.element,this.target=e.options.inputTarget,this.domHandler=function(t){c(e.options.enable,[e])&&n.handler(t)},this.init()}function S(e){var t=e.options.inputClass;return new(t||(Ce?j:Te?H:xe?B:R))(e,k)}function k(e,t,n){var i=n.pointers.length,a=n.changedPointers.length,s=t&ke&&i-a==0,r=t&(De|_e)&&i-a==0;n.isFirst=!!s,n.isFinal=!!r,s&&(e.session={}),n.eventType=t,M(e,n),e.emit("hammer.input",n),e.recognize(n),e.session.prevInput=n}function M(e,t){var n=e.session,i=t.pointers,a=i.length;n.firstInput||(n.firstInput=E(t)),a>1&&!n.firstMultiple?n.firstMultiple=E(t):1===a&&(n.firstMultiple=!1);var s=n.firstInput,r=n.firstMultiple,o=r?r.center:s.center,l=t.center=L(i);t.timeStamp=ge(),t.deltaTime=t.timeStamp-s.timeStamp,t.angle=z(o,l),t.distance=F(o,l),D(n,t),t.offsetDirection=I(t.deltaX,t.deltaY);var u=P(t.deltaTime,t.deltaX,t.deltaY);t.overallVelocityX=u.x,t.overallVelocityY=u.y,t.overallVelocity=me(u.x)>me(u.y)?u.x:u.y,t.scale=r?O(r.pointers,i):1,t.rotation=r?A(r.pointers,i):0,t.maxPointers=n.prevInput?t.pointers.length>n.prevInput.maxPointers?t.pointers.length:n.prevInput.maxPointers:t.pointers.length,_(n,t);var c=e.element;f(t.srcEvent.target,c)&&(c=t.srcEvent.target),t.target=c}function D(e,t){var n=t.center,i=e.offsetDelta||{},a=e.prevDelta||{},s=e.prevInput||{};t.eventType!==ke&&s.eventType!==De||(a=e.prevDelta={x:s.deltaX||0,y:s.deltaY||0},i=e.offsetDelta={x:n.x,y:n.y}),t.deltaX=a.x+(n.x-i.x),t.deltaY=a.y+(n.y-i.y)}function _(e,t){var n,a,s,r,o=e.lastInterval||t,l=t.timeStamp-o.timeStamp;if(t.eventType!=_e&&(l>Se||o.velocity===i)){var u=t.deltaX-o.deltaX,c=t.deltaY-o.deltaY,d=P(l,u,c);a=d.x,s=d.y,n=me(d.x)>me(d.y)?d.x:d.y,r=I(u,c),e.lastInterval=t}else n=o.velocity,a=o.velocityX,s=o.velocityY,r=o.direction;t.velocity=n,t.velocityX=a,t.velocityY=s,t.direction=r}function E(e){for(var t=[],n=0;n<e.pointers.length;)t[n]={clientX:fe(e.pointers[n].clientX),clientY:fe(e.pointers[n].clientY)},n++;return{timeStamp:ge(),pointers:t,center:L(t),deltaX:e.deltaX,deltaY:e.deltaY}}function L(e){var t=e.length;if(1===t)return{x:fe(e[0].clientX),y:fe(e[0].clientY)};for(var n=0,i=0,a=0;a<t;)n+=e[a].clientX,i+=e[a].clientY,a++;return{x:fe(n/t),y:fe(i/t)}}function P(e,t,n){return{x:t/e||0,y:n/e||0}}function I(e,t){return e===t?Ee:me(e)>=me(t)?e<0?Le:Pe:t<0?Ie:Fe}function F(e,t,n){n||(n=Re);var i=t[n[0]]-e[n[0]],a=t[n[1]]-e[n[1]];return Math.sqrt(i*i+a*a)}function z(e,t,n){n||(n=Re);var i=t[n[0]]-e[n[0]],a=t[n[1]]-e[n[1]];return 180*Math.atan2(a,i)/Math.PI}function A(e,t){return z(t[1],t[0],je)+z(e[1],e[0],je)}function O(e,t){return F(t[0],t[1],je)/F(e[0],e[1],je)}function R(){this.evEl=Ye,this.evWin=He,this.pressed=!1,T.apply(this,arguments)}function j(){this.evEl=qe,this.evWin=Ge,T.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function N(){this.evTarget=Ve,this.evWin=Xe,this.started=!1,T.apply(this,arguments)}function Y(e,t){var n=y(e.touches),i=y(e.changedTouches);return t&(De|_e)&&(n=w(n.concat(i),"identifier",!0)),[n,i]}function H(){this.evTarget=Ze,this.targetIds={},T.apply(this,arguments)}function W(e,t){var n=y(e.touches),i=this.targetIds;if(t&(ke|Me)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var a,s,r=y(e.changedTouches),o=[],l=this.target;if(s=n.filter(function(e){return f(e.target,l)}),t===ke)for(a=0;a<s.length;)i[s[a].identifier]=!0,a++;for(a=0;a<r.length;)i[r[a].identifier]&&o.push(r[a]),t&(De|_e)&&delete i[r[a].identifier],a++;return o.length?[w(s.concat(o),"identifier",!0),o]:void 0}function B(){T.apply(this,arguments);var e=u(this.handler,this);this.touch=new H(this.manager,e),this.mouse=new R(this.manager,e),this.primaryTouch=null,this.lastTouches=[]}function q(e,t){e&ke?(this.primaryTouch=t.changedPointers[0].identifier,G.call(this,t)):e&(De|_e)&&G.call(this,t)}function G(e){var t=e.changedPointers[0];if(t.identifier===this.primaryTouch){var n={x:t.clientX,y:t.clientY};this.lastTouches.push(n);var i=this.lastTouches,a=function(){var e=i.indexOf(n);e>-1&&i.splice(e,1)};setTimeout(a,Qe)}}function $(e){for(var t=e.srcEvent.clientX,n=e.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var a=this.lastTouches[i],s=Math.abs(t-a.x),r=Math.abs(n-a.y);if(s<=Ke&&r<=Ke)return!0}return!1}function V(e,t){this.manager=e,this.set(t)}function X(e){if(m(e,it))return it;var t=m(e,at),n=m(e,st);return t&&n?it:t||n?t?at:st:m(e,nt)?nt:tt}function U(e){this.options=ce({},this.defaults,e||{}),this.id=x(),this.manager=null,this.options.enable=d(this.options.enable,!0),this.state=ot,this.simultaneous={},this.requireFail=[]}function Z(e){return e&ht?"cancel":e&ct?"end":e&ut?"move":e&lt?"start":""}function Q(e){return e==Fe?"down":e==Ie?"up":e==Le?"left":e==Pe?"right":""}function K(e,t){var n=t.manager;return n?n.get(e):e}function J(){U.apply(this,arguments)}function ee(){J.apply(this,arguments),this.pX=null,this.pY=null}function te(){J.apply(this,arguments)}function ne(){U.apply(this,arguments),this._timer=null,this._input=null}function ie(){J.apply(this,arguments)}function ae(){J.apply(this,arguments)}function se(){U.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function re(e,t){return t=t||{},t.recognizers=d(t.recognizers,re.defaults.preset),new oe(e,t)}function oe(e,t){this.options=ce({},re.defaults,t||{}),this.options.inputTarget=this.options.inputTarget||e,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=e,this.input=S(this),this.touchAction=new V(this,this.options.touchAction),le(this,!0),r(this.options.recognizers,function(e){var t=this.add(new e[0](e[1]));e[2]&&t.recognizeWith(e[2]),e[3]&&t.requireFailure(e[3])},this)}function le(e,t){var n=e.element;if(n.style){var i;r(e.options.cssProps,function(a,s){i=b(n.style,s),t?(e.oldCssProps[i]=n.style[i],n.style[i]=a):n.style[i]=e.oldCssProps[i]||""}),t||(e.oldCssProps={})}}function ue(e,n){var i=t.createEvent("Event");i.initEvent(e,!0,!0),i.gesture=n,n.target.dispatchEvent(i)}var ce,de=["","webkit","Moz","MS","ms","o"],he=t.createElement("div"),pe="function",fe=Math.round,me=Math.abs,ge=Date.now;ce="function"!=typeof Object.assign?function(e){if(e===i||null===e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var a=arguments[n];if(a!==i&&null!==a)for(var s in a)a.hasOwnProperty(s)&&(t[s]=a[s])}return t}:Object.assign;var ve=o(function(e,t,n){for(var a=Object.keys(t),s=0;s<a.length;)(!n||n&&e[a[s]]===i)&&(e[a[s]]=t[a[s]]),s++;return e},"extend","Use `assign`."),ye=o(function(e,t){return ve(e,t,!0)},"merge","Use `assign`."),we=1,be=/mobile|tablet|ip(ad|hone|od)|android/i,xe="ontouchstart"in e,Ce=b(e,"PointerEvent")!==i,Te=xe&&be.test(navigator.userAgent),Se=25,ke=1,Me=2,De=4,_e=8,Ee=1,Le=2,Pe=4,Ie=8,Fe=16,ze=Le|Pe,Ae=Ie|Fe,Oe=ze|Ae,Re=["x","y"],je=["clientX","clientY"];T.prototype={handler:function(){},init:function(){this.evEl&&h(this.element,this.evEl,this.domHandler),this.evTarget&&h(this.target,this.evTarget,this.domHandler),this.evWin&&h(C(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&p(this.element,this.evEl,this.domHandler),this.evTarget&&p(this.target,this.evTarget,this.domHandler),this.evWin&&p(C(this.element),this.evWin,this.domHandler)}};var Ne={mousedown:ke,mousemove:Me,mouseup:De},Ye="mousedown",He="mousemove mouseup";l(R,T,{handler:function(e){var t=Ne[e.type];t&ke&&0===e.button&&(this.pressed=!0),t&Me&&1!==e.which&&(t=De),this.pressed&&(t&De&&(this.pressed=!1),this.callback(this.manager,t,{pointers:[e],changedPointers:[e],pointerType:"mouse",srcEvent:e}))}});var We={pointerdown:ke,pointermove:Me,pointerup:De,pointercancel:_e,pointerout:_e},Be={2:"touch",3:"pen",4:"mouse",5:"kinect"},qe="pointerdown",Ge="pointermove pointerup pointercancel";e.MSPointerEvent&&!e.PointerEvent&&(qe="MSPointerDown",Ge="MSPointerMove MSPointerUp MSPointerCancel"),l(j,T,{handler:function(e){var t=this.store,n=!1,i=e.type.toLowerCase().replace("ms",""),a=We[i],s=Be[e.pointerType]||e.pointerType,r="touch"==s,o=v(t,e.pointerId,"pointerId");a&ke&&(0===e.button||r)?o<0&&(t.push(e),o=t.length-1):a&(De|_e)&&(n=!0),o<0||(t[o]=e,this.callback(this.manager,a,{pointers:t,changedPointers:[e],pointerType:s,srcEvent:e}),n&&t.splice(o,1))}});var $e={touchstart:ke,touchmove:Me,touchend:De,touchcancel:_e},Ve="touchstart",Xe="touchstart touchmove touchend touchcancel";l(N,T,{handler:function(e){var t=$e[e.type];if(t===ke&&(this.started=!0),this.started){var n=Y.call(this,e,t);t&(De|_e)&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:e})}}});var Ue={touchstart:ke,touchmove:Me,touchend:De,touchcancel:_e},Ze="touchstart touchmove touchend touchcancel";l(H,T,{handler:function(e){var t=Ue[e.type],n=W.call(this,e,t);n&&this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:e})}});var Qe=2500,Ke=25;l(B,T,{handler:function(e,t,n){var i="touch"==n.pointerType,a="mouse"==n.pointerType;if(!(a&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(i)q.call(this,t,n);else if(a&&$.call(this,n))return;this.callback(e,t,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Je=b(he.style,"touchAction"),et=Je!==i,tt="auto",nt="manipulation",it="none",at="pan-x",st="pan-y",rt=function(){if(!et)return!1;var t={},n=e.CSS&&e.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(i){t[i]=!n||e.CSS.supports("touch-action",i)}),t}();V.prototype={set:function(e){"compute"==e&&(e=this.compute()),et&&this.manager.element.style&&rt[e]&&(this.manager.element.style[Je]=e),this.actions=e.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var e=[];return r(this.manager.recognizers,function(t){c(t.options.enable,[t])&&(e=e.concat(t.getTouchAction()))}),X(e.join(" "))},preventDefaults:function(e){var t=e.srcEvent,n=e.offsetDirection;if(this.manager.session.prevented)t.preventDefault();else{var i=this.actions,a=m(i,it)&&!rt[it],s=m(i,st)&&!rt[st],r=m(i,at)&&!rt[at];if(a){var o=1===e.pointers.length,l=e.distance<2,u=e.deltaTime<250;if(o&&l&&u)return}if(!r||!s)return a||s&&n&ze||r&&n&Ae?this.preventSrc(t):void 0}},preventSrc:function(e){this.manager.session.prevented=!0,e.preventDefault()}};var ot=1,lt=2,ut=4,ct=8,dt=ct,ht=16;U.prototype={defaults:{},set:function(e){return ce(this.options,e),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(e){if(s(e,"recognizeWith",this))return this;var t=this.simultaneous;return e=K(e,this),t[e.id]||(t[e.id]=e,e.recognizeWith(this)),this},dropRecognizeWith:function(e){return s(e,"dropRecognizeWith",this)?this:(e=K(e,this),delete this.simultaneous[e.id],this)},requireFailure:function(e){if(s(e,"requireFailure",this))return this;var t=this.requireFail;return e=K(e,this),-1===v(t,e)&&(t.push(e),e.requireFailure(this)),this},dropRequireFailure:function(e){if(s(e,"dropRequireFailure",this))return this;e=K(e,this);var t=v(this.requireFail,e);return t>-1&&this.requireFail.splice(t,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(e){return!!this.simultaneous[e.id]},emit:function(e){function t(t){n.manager.emit(t,e)}var n=this,i=this.state;i<ct&&t(n.options.event+Z(i)),t(n.options.event),e.additionalEvent&&t(e.additionalEvent),i>=ct&&t(n.options.event+Z(i))},tryEmit:function(e){if(this.canEmit())return this.emit(e);this.state=32},canEmit:function(){for(var e=0;e<this.requireFail.length;){if(!(this.requireFail[e].state&(32|ot)))return!1;e++}return!0},recognize:function(e){var t=ce({},e);if(!c(this.options.enable,[this,t]))return this.reset(),void(this.state=32);this.state&(dt|ht|32)&&(this.state=ot),this.state=this.process(t),this.state&(lt|ut|ct|ht)&&this.tryEmit(t)},process:function(e){},getTouchAction:function(){},reset:function(){}},l(J,U,{defaults:{pointers:1},attrTest:function(e){var t=this.options.pointers;return 0===t||e.pointers.length===t},process:function(e){var t=this.state,n=e.eventType,i=t&(lt|ut),a=this.attrTest(e);return i&&(n&_e||!a)?t|ht:i||a?n&De?t|ct:t&lt?t|ut:lt:32}}),l(ee,J,{defaults:{event:"pan",threshold:10,pointers:1,direction:Oe},getTouchAction:function(){var e=this.options.direction,t=[];return e&ze&&t.push(st),e&Ae&&t.push(at),t},directionTest:function(e){var t=this.options,n=!0,i=e.distance,a=e.direction,s=e.deltaX,r=e.deltaY;return a&t.direction||(t.direction&ze?(a=0===s?Ee:s<0?Le:Pe,n=s!=this.pX,i=Math.abs(e.deltaX)):(a=0===r?Ee:r<0?Ie:Fe,n=r!=this.pY,i=Math.abs(e.deltaY))),e.direction=a,n&&i>t.threshold&&a&t.direction},attrTest:function(e){return J.prototype.attrTest.call(this,e)&&(this.state&lt||!(this.state&lt)&&this.directionTest(e))},emit:function(e){this.pX=e.deltaX,this.pY=e.deltaY;var t=Q(e.direction);t&&(e.additionalEvent=this.options.event+t),this._super.emit.call(this,e)}}),l(te,J,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[it]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.scale-1)>this.options.threshold||this.state&lt)},emit:function(e){if(1!==e.scale){var t=e.scale<1?"in":"out";e.additionalEvent=this.options.event+t}this._super.emit.call(this,e)}}),l(ne,U,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[tt]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,s=e.deltaTime>t.time;if(this._input=e,!i||!n||e.eventType&(De|_e)&&!s)this.reset();else if(e.eventType&ke)this.reset(),this._timer=a(function(){this.state=dt,this.tryEmit()},t.time,this);else if(e.eventType&De)return dt;return 32},reset:function(){clearTimeout(this._timer)},emit:function(e){this.state===dt&&(e&&e.eventType&De?this.manager.emit(this.options.event+"up",e):(this._input.timeStamp=ge(),this.manager.emit(this.options.event,this._input)))}}),l(ie,J,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[it]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.rotation)>this.options.threshold||this.state&lt)}}),l(ae,J,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:ze|Ae,pointers:1},getTouchAction:function(){return ee.prototype.getTouchAction.call(this)},attrTest:function(e){var t,n=this.options.direction;return n&(ze|Ae)?t=e.overallVelocity:n&ze?t=e.overallVelocityX:n&Ae&&(t=e.overallVelocityY),this._super.attrTest.call(this,e)&&n&e.offsetDirection&&e.distance>this.options.threshold&&e.maxPointers==this.options.pointers&&me(t)>this.options.velocity&&e.eventType&De},emit:function(e){var t=Q(e.offsetDirection);t&&this.manager.emit(this.options.event+t,e),this.manager.emit(this.options.event,e)}}),l(se,U,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[nt]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,s=e.deltaTime<t.time;if(this.reset(),e.eventType&ke&&0===this.count)return this.failTimeout();if(i&&s&&n){if(e.eventType!=De)return this.failTimeout();var r=!this.pTime||e.timeStamp-this.pTime<t.interval,o=!this.pCenter||F(this.pCenter,e.center)<t.posThreshold;if(this.pTime=e.timeStamp,this.pCenter=e.center,o&&r?this.count+=1:this.count=1,this._input=e,0===this.count%t.taps)return this.hasRequireFailures()?(this._timer=a(function(){this.state=dt,this.tryEmit()},t.interval,this),lt):dt}return 32},failTimeout:function(){return this._timer=a(function(){this.state=32},this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==dt&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),re.VERSION="2.0.7",re.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[ie,{enable:!1}],[te,{enable:!1},["rotate"]],[ae,{direction:ze}],[ee,{direction:ze},["swipe"]],[se],[se,{event:"doubletap",taps:2},["tap"]],[ne]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};oe.prototype={set:function(e){return ce(this.options,e),e.touchAction&&this.touchAction.update(),e.inputTarget&&(this.input.destroy(),this.input.target=e.inputTarget,this.input.init()),this},stop:function(e){this.session.stopped=e?2:1},recognize:function(e){var t=this.session;if(!t.stopped){this.touchAction.preventDefaults(e);var n,i=this.recognizers,a=t.curRecognizer;(!a||a&&a.state&dt)&&(a=t.curRecognizer=null);for(var s=0;s<i.length;)n=i[s],2===t.stopped||a&&n!=a&&!n.canRecognizeWith(a)?n.reset():n.recognize(e),!a&&n.state&(lt|ut|ct)&&(a=t.curRecognizer=n),s++}},get:function(e){if(e instanceof U)return e;for(var t=this.recognizers,n=0;n<t.length;n++)if(t[n].options.event==e)return t[n];return null},add:function(e){if(s(e,"add",this))return this;var t=this.get(e.options.event);return t&&this.remove(t),this.recognizers.push(e),e.manager=this,this.touchAction.update(),e},remove:function(e){if(s(e,"remove",this))return this;if(e=this.get(e)){var t=this.recognizers,n=v(t,e);-1!==n&&(t.splice(n,1),this.touchAction.update())}return this},on:function(e,t){if(e!==i&&t!==i){var n=this.handlers;return r(g(e),function(e){n[e]=n[e]||[],n[e].push(t)}),this}},off:function(e,t){if(e!==i){var n=this.handlers;return r(g(e),function(e){t?n[e]&&n[e].splice(v(n[e],t),1):delete n[e]}),this}},emit:function(e,t){this.options.domEvents&&ue(e,t);var n=this.handlers[e]&&this.handlers[e].slice();if(n&&n.length){t.type=e,t.preventDefault=function(){t.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](t),i++}},destroy:function(){this.element&&le(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},ce(re,{INPUT_START:ke,INPUT_MOVE:Me,INPUT_END:De,INPUT_CANCEL:_e,STATE_POSSIBLE:ot,STATE_BEGAN:lt,STATE_CHANGED:ut,STATE_ENDED:ct,STATE_RECOGNIZED:dt,STATE_CANCELLED:ht,STATE_FAILED:32,DIRECTION_NONE:Ee,DIRECTION_LEFT:Le,DIRECTION_RIGHT:Pe,DIRECTION_UP:Ie,DIRECTION_DOWN:Fe,DIRECTION_HORIZONTAL:ze,DIRECTION_VERTICAL:Ae,DIRECTION_ALL:Oe,Manager:oe,Input:T,TouchAction:V,TouchInput:H,MouseInput:R,PointerEventInput:j,TouchMouseInput:B,SingleTouchInput:N,Recognizer:U,AttrRecognizer:J,Tap:se,Pan:ee,Swipe:ae,Pinch:te,Rotate:ie,Press:ne,on:h,off:p,each:r,merge:ye,extend:ve,assign:ce,inherit:l,bindFn:u,prefixed:b}),(void 0!==e?e:"undefined"!=typeof self?self:{}).Hammer=re,"function"==typeof define&&define.amd?define(function(){return re}):"undefined"!=typeof module&&module.exports?module.exports=re:e.Hammer=re}(window,document);var Base=function(){};Base.extend=function(e,t){"use strict";var n=Base.prototype.extend;Base._prototyping=!0;var i=new this;n.call(i,e),i.base=function(){},delete Base._prototyping;var a=i.constructor,s=i.constructor=function(){if(!Base._prototyping)if(this._constructing||this.constructor==s)this._constructing=!0,a.apply(this,arguments),delete this._constructing;else if(null!==arguments[0])return(arguments[0].extend||n).call(arguments[0],i)};return s.ancestor=this,s.extend=this.extend,s.forEach=this.forEach,s.implement=this.implement,s.prototype=i,s.toString=this.toString,s.valueOf=function(e){return"object"==e?s:a.valueOf()},n.call(s,t),"function"==typeof s.init&&s.init(),s},Base.prototype={extend:function(e,t){if(arguments.length>1){var n=this[e];if(n&&"function"==typeof t&&(!n.valueOf||n.valueOf()!=t.valueOf())&&/\bbase\b/.test(t)){var i=t.valueOf();(t=function(){var e=this.base||Base.prototype.base;this.base=n;var t=i.apply(this,arguments);return this.base=e,t}).valueOf=function(e){return"object"==e?t:i},t.toString=Base.toString}this[e]=t}else if(e){var a=Base.prototype.extend;Base._prototyping||"function"==typeof this||(a=this.extend||a);for(var s={toSource:null},r=["constructor","toString","valueOf"],o=Base._prototyping?0:1;l=r[o++];)e[l]!=s[l]&&a.call(this,l,e[l]);for(var l in e)s[l]||a.call(this,l,e[l])}return this}},Base=Base.extend({constructor:function(){this.extend(arguments[0])}},{ancestor:Object,version:"1.1",forEach:function(e,t,n){for(var i in e)void 0===this.prototype[i]&&t.call(n,e[i],i,e)},implement:function(){for(var e=0;e<arguments.length;e++)"function"==typeof arguments[e]?arguments[e](this.prototype):this.prototype.extend(arguments[e]);return this},toString:function(){return String(this.valueOf())}});var FlipClock;!function(e){"use strict";(FlipClock=function(e,t,n){return t instanceof Object&&t instanceof Date==!1&&(n=t,t=0),new FlipClock.Factory(e,t,n)}).Lang={},FlipClock.Base=Base.extend({buildDate:"2014-12-12",version:"0.7.7",constructor:function(t,n){"object"!=typeof t&&(t={}),"object"!=typeof n&&(n={}),this.setOptions(e.extend(!0,{},t,n))},callback:function(e){if("function"==typeof e){for(var t=[],n=1;n<=arguments.length;n++)arguments[n]&&t.push(arguments[n]);e.apply(this,t)}},log:function(e){window.console&&console.log&&console.log(e)},getOption:function(e){return!!this[e]&&this[e]},getOptions:function(){return this},setOption:function(e,t){this[e]=t},setOptions:function(e){for(var t in e)void 0!==e[t]&&this.setOption(t,e[t])}})}(jQuery),function(e){"use strict";FlipClock.Face=FlipClock.Base.extend({autoStart:!0,dividers:[],factory:!1,lists:[],constructor:function(e,t){this.dividers=[],this.lists=[],this.base(t),this.factory=e},build:function(){this.autoStart&&this.start()},createDivider:function(t,n,i){"boolean"!=typeof n&&n||(i=n,n=t);var a=['<span class="'+this.factory.classes.dot+' top"></span>','<span class="'+this.factory.classes.dot+' bottom"></span>'].join("");i&&(a=""),t=this.factory.localize(t);var s=['<span class="'+this.factory.classes.divider+" "+(n||"").toLowerCase()+'">','<span class="'+this.factory.classes.label+'">'+(t||"")+"</span>",a,"</span>"],r=e(s.join(""));return this.dividers.push(r),r},createList:function(e,t){"object"==typeof e&&(t=e,e=0);var n=new FlipClock.List(this.factory,e,t);return this.lists.push(n),n},reset:function(){this.factory.time=new FlipClock.Time(this.factory,this.factory.original?Math.round(this.factory.original):0,{minimumDigits:this.factory.minimumDigits}),this.flip(this.factory.original,!1)},appendDigitToClock:function(e){e.$el.append(!1)},addDigit:function(e){var t=this.createList(e,{classes:{active:this.factory.classes.active,before:this.factory.classes.before,flip:this.factory.classes.flip}});this.appendDigitToClock(t)},start:function(){},stop:function(){},autoIncrement:function(){this.factory.countdown?this.decrement():this.increment()},increment:function(){this.factory.time.addSecond()},decrement:function(){0==this.factory.time.getTimeSeconds()?this.factory.stop():this.factory.time.subSecond()},flip:function(t,n){var i=this;e.each(t,function(e,t){var a=i.lists[e];a?(n||t==a.digit||a.play(),a.select(t)):i.addDigit(t)})}})}(jQuery),function(e){"use strict";FlipClock.Factory=FlipClock.Base.extend({animationRate:1e3,autoStart:!0,callbacks:{destroy:!1,create:!1,init:!1,interval:!1,start:!1,stop:!1,reset:!1},classes:{active:"flip-clock-active",before:"flip-clock-before",divider:"flip-clock-divider",dot:"flip-clock-dot",label:"flip-clock-label",flip:"flip",play:"play",wrapper:"flip-clock-wrapper"},clockFace:"HourlyCounter",countdown:!1,defaultClockFace:"HourlyCounter",defaultLanguage:"english",$el:!1,face:!0,lang:!1,language:"english",minimumDigits:0,original:!1,running:!1,time:!1,timer:!1,$wrapper:!1,constructor:function(t,n,i){i||(i={}),this.lists=[],this.running=!1,this.base(i),this.$el=e(t).addClass(this.classes.wrapper),this.$wrapper=this.$el,this.original=n instanceof Date?n:n?Math.round(n):0,this.time=new FlipClock.Time(this,this.original,{minimumDigits:this.minimumDigits,animationRate:this.animationRate}),this.timer=new FlipClock.Timer(this,i),this.loadLanguage(this.language),this.loadClockFace(this.clockFace,i),this.autoStart&&this.start()},loadClockFace:function(e,t){var n,i=!1;return e=e.ucfirst()+"Face",this.face.stop&&(this.stop(),i=!0),this.$el.html(""),this.time.minimumDigits=this.minimumDigits,(n=FlipClock[e]?new FlipClock[e](this,t):new FlipClock[this.defaultClockFace+"Face"](this,t)).build(),this.face=n,i&&this.start(),this.face},loadLanguage:function(e){var t;return t=FlipClock.Lang[e.ucfirst()]?FlipClock.Lang[e.ucfirst()]:FlipClock.Lang[e]?FlipClock.Lang[e]:FlipClock.Lang[this.defaultLanguage],this.lang=t},localize:function(e,t){var n=this.lang;if(!e)return null;var i=e.toLowerCase();return"object"==typeof t&&(n=t),n&&n[i]?n[i]:e},start:function(e){var t=this;t.running||t.countdown&&!(t.countdown&&t.time.time>0)?t.log("Trying to start timer when countdown already at 0"):(t.face.start(t.time),t.timer.start(function(){t.flip(),"function"==typeof e&&e()}))},stop:function(e){this.face.stop(),this.timer.stop(e);for(var t in this.lists)this.lists.hasOwnProperty(t)&&this.lists[t].stop()},reset:function(e){this.timer.reset(e),this.face.reset()},setTime:function(e){this.time.time=e,this.flip(!0)},getTime:function(e){return this.time},setCountdown:function(e){var t=this.running;this.countdown=!!e,t&&(this.stop(),this.start())},flip:function(e){this.face.flip(!1,e)}})}(jQuery),function(e){"use strict";FlipClock.List=FlipClock.Base.extend({digit:0,classes:{active:"flip-clock-active",before:"flip-clock-before",flip:"flip"},factory:!1,$el:!1,$obj:!1,items:[],lastDigit:0,constructor:function(e,t,n){this.factory=e,this.digit=t,this.lastDigit=t,this.$el=this.createList(),this.$obj=this.$el,t>0&&this.select(t),this.factory.$el.append(this.$el)},select:function(e){if(void 0===e?e=this.digit:this.digit=e,this.digit!=this.lastDigit){var t=this.$el.find("."+this.classes.before).removeClass(this.classes.before);this.$el.find("."+this.classes.active).removeClass(this.classes.active).addClass(this.classes.before),this.appendListItem(this.classes.active,this.digit),t.remove(),this.lastDigit=this.digit}},play:function(){this.$el.addClass(this.factory.classes.play)},stop:function(){var e=this;setTimeout(function(){e.$el.removeClass(e.factory.classes.play)},this.factory.timer.interval)},createListItem:function(e,t){return['<li class="'+(e||"")+'">','<a href="#">','<div class="up">','<div class="shadow"></div>','<div class="inn">'+(t||"")+"</div>","</div>",'<div class="down">','<div class="shadow"></div>','<div class="inn">'+(t||"")+"</div>","</div>","</a>","</li>"].join("")},appendListItem:function(e,t){var n=this.createListItem(e,t);this.$el.append(n)},createList:function(){var t=this.getPrevDigit()?this.getPrevDigit():this.digit;return e(['<ul class="'+this.classes.flip+" "+(this.factory.running?this.factory.classes.play:"")+'">',this.createListItem(this.classes.before,t),this.createListItem(this.classes.active,this.digit),"</ul>"].join(""))},getNextDigit:function(){return 9==this.digit?0:this.digit+1},getPrevDigit:function(){return 0==this.digit?9:this.digit-1}})}(jQuery),function(e){"use strict";String.prototype.ucfirst=function(){return this.substr(0,1).toUpperCase()+this.substr(1)},e.fn.FlipClock=function(t,n){return new FlipClock(e(this),t,n)},e.fn.flipClock=function(t,n){return e.fn.FlipClock(t,n)}}(jQuery),function(e){"use strict";FlipClock.Time=FlipClock.Base.extend({time:0,factory:!1,minimumDigits:0,constructor:function(e,t,n){"object"!=typeof n&&(n={}),n.minimumDigits||(n.minimumDigits=e.minimumDigits),this.base(n),this.factory=e,t&&(this.time=t)},convertDigitsToArray:function(e){var t=[];e=e.toString();for(var n=0;n<e.length;n++)e[n].match(/^\d*$/g)&&t.push(e[n]);return t},digit:function(e){var t=this.toString(),n=t.length;return!!t[n-e]&&t[n-e]},digitize:function(t){var n=[];if(e.each(t,function(e,t){1==(t=t.toString()).length&&(t="0"+t);for(var i=0;i<t.length;i++)n.push(t.charAt(i))}),n.length>this.minimumDigits&&(this.minimumDigits=n.length),this.minimumDigits>n.length)for(var i=n.length;i<this.minimumDigits;i++)n.unshift("0");return n},getDateObject:function(){return this.time instanceof Date?this.time:new Date((new Date).getTime()+1e3*this.getTimeSeconds())},getDayCounter:function(e){var t=[this.getDays(),this.getHours(!0),this.getMinutes(!0)];return e&&t.push(this.getSeconds(!0)),this.digitize(t)},getDays:function(e){var t=this.getTimeSeconds()/60/60/24;return e&&(t%=7),Math.floor(t)},getHourCounter:function(){return this.digitize([this.getHours(),this.getMinutes(!0),this.getSeconds(!0)])},getHourly:function(){return this.getHourCounter()},getHours:function(e){var t=this.getTimeSeconds()/60/60;return e&&(t%=24),Math.floor(t)},getMilitaryTime:function(e,t){void 0===t&&(t=!0),e||(e=this.getDateObject());var n=[e.getHours(),e.getMinutes()];return!0===t&&n.push(e.getSeconds()),this.digitize(n)},getMinutes:function(e){var t=this.getTimeSeconds()/60;return e&&(t%=60),Math.floor(t)},getMinuteCounter:function(){return this.digitize([this.getMinutes(),this.getSeconds(!0)])},getTimeSeconds:function(e){return e||(e=new Date),this.time instanceof Date?this.factory.countdown?Math.max(this.time.getTime()/1e3-e.getTime()/1e3,0):e.getTime()/1e3-this.time.getTime()/1e3:this.time},getTime:function(e,t){void 0===t&&(t=!0),e||(e=this.getDateObject()),console.log(e);var n=e.getHours(),i=[n>12?n-12:0===n?12:n,e.getMinutes()];return!0===t&&i.push(e.getSeconds()),this.digitize(i)},getSeconds:function(e){var t=this.getTimeSeconds();return e&&(60==t?t=0:t%=60),Math.ceil(t)},getWeeks:function(e){var t=this.getTimeSeconds()/60/60/24/7;return e&&(t%=52),Math.floor(t)},removeLeadingZeros:function(t,n){var i=0,a=[];return e.each(n,function(e,s){e<t?i+=parseInt(n[e],10):a.push(n[e])}),0===i?a:n},addSeconds:function(e){this.time instanceof Date?this.time.setSeconds(this.time.getSeconds()+e):this.time+=e},addSecond:function(){this.addSeconds(1)},subSeconds:function(e){this.time instanceof Date?this.time.setSeconds(this.time.getSeconds()-e):this.time-=e},subSecond:function(){this.subSeconds(1)},toString:function(){return this.getTimeSeconds().toString()}})}(jQuery),function(e){"use strict";FlipClock.Timer=FlipClock.Base.extend({callbacks:{destroy:!1,create:!1,init:!1,interval:!1,start:!1,stop:!1,reset:!1},count:0,factory:!1,interval:1e3,animationRate:1e3,constructor:function(e,t){this.base(t),this.factory=e,this.callback(this.callbacks.init),this.callback(this.callbacks.create)},getElapsed:function(){return this.count*this.interval},getElapsedTime:function(){return new Date(this.time+this.getElapsed())},reset:function(e){clearInterval(this.timer),this.count=0,this._setInterval(e),this.callback(this.callbacks.reset)},start:function(e){this.factory.running=!0,this._createTimer(e),this.callback(this.callbacks.start)},stop:function(e){this.factory.running=!1,this._clearInterval(e),this.callback(this.callbacks.stop),this.callback(e)},_clearInterval:function(){clearInterval(this.timer)},_createTimer:function(e){this._setInterval(e)},_destroyTimer:function(e){this._clearInterval(),this.timer=!1,this.callback(e),this.callback(this.callbacks.destroy)},_interval:function(e){this.callback(this.callbacks.interval),this.callback(e),this.count++},_setInterval:function(e){var t=this;t._interval(e),t.timer=setInterval(function(){t._interval(e)},this.interval)}})}(jQuery),function(e){FlipClock.TwentyFourHourClockFace=FlipClock.Face.extend({constructor:function(e,t){this.base(e,t)},build:function(t){var n=this,i=this.factory.$el.find("ul");this.factory.time.time||(this.factory.original=new Date,this.factory.time=new FlipClock.Time(this.factory,this.factory.original)),(t=t||this.factory.time.getMilitaryTime(!1,this.showSeconds)).length>i.length&&e.each(t,function(e,t){n.createList(t)}),this.createDivider(),this.createDivider(),e(this.dividers[0]).insertBefore(this.lists[this.lists.length-2].$el),e(this.dividers[1]).insertBefore(this.lists[this.lists.length-4].$el),this.base()},flip:function(e,t){this.autoIncrement(),e=e||this.factory.time.getMilitaryTime(!1,this.showSeconds),this.base(e,t)}})}(jQuery),function(e){FlipClock.CounterFace=FlipClock.Face.extend({shouldAutoIncrement:!1,constructor:function(e,t){"object"!=typeof t&&(t={}),e.autoStart=!!t.autoStart,t.autoStart&&(this.shouldAutoIncrement=!0),e.increment=function(){e.countdown=!1,e.setTime(e.getTime().getTimeSeconds()+1)},e.decrement=function(){e.countdown=!0;var t=e.getTime().getTimeSeconds();t>0&&e.setTime(t-1)},e.setValue=function(t){e.setTime(t)},e.setCounter=function(t){e.setTime(t)},this.base(e,t)},build:function(){var t=this,n=this.factory.$el.find("ul"),i=this.factory.getTime().digitize([this.factory.getTime().time]);i.length>n.length&&e.each(i,function(e,n){t.createList(n).select(n)}),e.each(this.lists,function(e,t){t.play()}),this.base()},flip:function(e,t){this.shouldAutoIncrement&&this.autoIncrement(),e||(e=this.factory.getTime().digitize([this.factory.getTime().time])),this.base(e,t)},reset:function(){this.factory.time=new FlipClock.Time(this.factory,this.factory.original?Math.round(this.factory.original):0),this.flip()}})}(jQuery),function(e){FlipClock.DailyCounterFace=FlipClock.Face.extend({showSeconds:!0,constructor:function(e,t){this.base(e,t)},build:function(t){var n=this,i=this.factory.$el.find("ul"),a=0;(t=t||this.factory.time.getDayCounter(this.showSeconds)).length>i.length&&e.each(t,function(e,t){n.createList(t)}),this.showSeconds?e(this.createDivider("Seconds")).insertBefore(this.lists[this.lists.length-2].$el):a=2,e(this.createDivider("Minutes")).insertBefore(this.lists[this.lists.length-4+a].$el),e(this.createDivider("Hours")).insertBefore(this.lists[this.lists.length-6+a].$el),e(this.createDivider("Days",!0)).insertBefore(this.lists[0].$el),this.base()},flip:function(e,t){e||(e=this.factory.time.getDayCounter(this.showSeconds)),this.autoIncrement(),this.base(e,t)}})}(jQuery),function(e){FlipClock.HourlyCounterFace=FlipClock.Face.extend({constructor:function(e,t){this.base(e,t)},build:function(t,n){var i=this,a=this.factory.$el.find("ul");(n=n||this.factory.time.getHourCounter()).length>a.length&&e.each(n,function(e,t){i.createList(t)}),e(this.createDivider("Seconds")).insertBefore(this.lists[this.lists.length-2].$el),e(this.createDivider("Minutes")).insertBefore(this.lists[this.lists.length-4].$el),t||e(this.createDivider("Hours",!0)).insertBefore(this.lists[0].$el),this.base()},flip:function(e,t){e||(e=this.factory.time.getHourCounter()),this.autoIncrement(),this.base(e,t)},appendDigitToClock:function(e){this.base(e),this.dividers[0].insertAfter(this.dividers[0].next())}})}(jQuery),function(e){FlipClock.MinuteCounterFace=FlipClock.HourlyCounterFace.extend({clearExcessDigits:!1,constructor:function(e,t){this.base(e,t)},build:function(){this.base(!0,this.factory.time.getMinuteCounter())},flip:function(e,t){e||(e=this.factory.time.getMinuteCounter()),this.base(e,t)}})}(jQuery),function(e){FlipClock.TwelveHourClockFace=FlipClock.TwentyFourHourClockFace.extend({meridium:!1,meridiumText:"AM",build:function(){var t=this.factory.time.getTime(!1,this.showSeconds);this.base(t),this.meridiumText=this.getMeridium(),this.meridium=e(['<ul class="flip-clock-meridium">',"<li>",'<a href="#">'+this.meridiumText+"</a>","</li>","</ul>"].join("")),this.meridium.insertAfter(this.lists[this.lists.length-1].$el)},flip:function(e,t){this.meridiumText!=this.getMeridium()&&(this.meridiumText=this.getMeridium(),this.meridium.find("a").html(this.meridiumText)),this.base(this.factory.time.getTime(!1,this.showSeconds),t)},getMeridium:function(){return(new Date).getHours()>=12?"PM":"AM"},isPM:function(){return"PM"==this.getMeridium()},isAM:function(){return"AM"==this.getMeridium()}})}(jQuery),function(e){FlipClock.Lang.Arabic={years:"سنوات",months:"شهور",days:"أيام",hours:"ساعات",minutes:"دقائق",seconds:"ثواني"},FlipClock.Lang.ar=FlipClock.Lang.Arabic,FlipClock.Lang["ar-ar"]=FlipClock.Lang.Arabic,FlipClock.Lang.arabic=FlipClock.Lang.Arabic}(jQuery),function(e){FlipClock.Lang.Danish={years:"År",months:"Måneder",days:"Dage",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},FlipClock.Lang.da=FlipClock.Lang.Danish,FlipClock.Lang["da-dk"]=FlipClock.Lang.Danish,FlipClock.Lang.danish=FlipClock.Lang.Danish}(jQuery),function(e){FlipClock.Lang.German={years:"Jahre",months:"Monate",days:"Tage",hours:"Stunden",minutes:"Minuten",seconds:"Sekunden"},FlipClock.Lang.de=FlipClock.Lang.German,FlipClock.Lang["de-de"]=FlipClock.Lang.German,FlipClock.Lang.german=FlipClock.Lang.German}(jQuery),function(e){FlipClock.Lang.English={years:"Years",months:"Months",days:"Days",hours:"Hours",minutes:"Minutes",seconds:"Seconds"},FlipClock.Lang.en=FlipClock.Lang.English,FlipClock.Lang["en-us"]=FlipClock.Lang.English,FlipClock.Lang.english=FlipClock.Lang.English}(jQuery),function(e){FlipClock.Lang.Spanish={years:"A&#241;os",months:"Meses",days:"D&#205;as",hours:"Horas",minutes:"Minutos",seconds:"Segundo"},FlipClock.Lang.es=FlipClock.Lang.Spanish,FlipClock.Lang["es-es"]=FlipClock.Lang.Spanish,FlipClock.Lang.spanish=FlipClock.Lang.Spanish}(jQuery),function(e){FlipClock.Lang.Finnish={years:"Vuotta",months:"Kuukautta",days:"Päivää",hours:"Tuntia",minutes:"Minuuttia",seconds:"Sekuntia"},FlipClock.Lang.fi=FlipClock.Lang.Finnish,FlipClock.Lang["fi-fi"]=FlipClock.Lang.Finnish,FlipClock.Lang.finnish=FlipClock.Lang.Finnish}(jQuery),function(e){FlipClock.Lang.French={years:"Ans",months:"Mois",days:"Jours",hours:"Heures",minutes:"Minutes",seconds:"Secondes"},FlipClock.Lang.fr=FlipClock.Lang.French,FlipClock.Lang["fr-ca"]=FlipClock.Lang.French,FlipClock.Lang.french=FlipClock.Lang.French}(jQuery),function(e){FlipClock.Lang.Italian={years:"Anni",months:"Mesi",days:"Giorni",hours:"Ore",minutes:"Minuti",seconds:"Secondi"},FlipClock.Lang.it=FlipClock.Lang.Italian,FlipClock.Lang["it-it"]=FlipClock.Lang.Italian,FlipClock.Lang.italian=FlipClock.Lang.Italian}(jQuery),function(e){FlipClock.Lang.Latvian={years:"Gadi",months:"Mēneši",days:"Dienas",hours:"Stundas",minutes:"Minūtes",seconds:"Sekundes"},FlipClock.Lang.lv=FlipClock.Lang.Latvian,FlipClock.Lang["lv-lv"]=FlipClock.Lang.Latvian,FlipClock.Lang.latvian=FlipClock.Lang.Latvian}(jQuery),function(e){FlipClock.Lang.Dutch={years:"Jaren",months:"Maanden",days:"Dagen",hours:"Uren",minutes:"Minuten",seconds:"Seconden"},FlipClock.Lang.nl=FlipClock.Lang.Dutch,FlipClock.Lang["nl-be"]=FlipClock.Lang.Dutch,FlipClock.Lang.dutch=FlipClock.Lang.Dutch}(jQuery),function(e){FlipClock.Lang.Norwegian={years:"År",months:"Måneder",days:"Dager",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},FlipClock.Lang.no=FlipClock.Lang.Norwegian,FlipClock.Lang.nb=FlipClock.Lang.Norwegian,FlipClock.Lang["no-nb"]=FlipClock.Lang.Norwegian,FlipClock.Lang.norwegian=FlipClock.Lang.Norwegian}(jQuery),function(e){FlipClock.Lang.Portuguese={years:"Anos",months:"Meses",days:"Dias",hours:"Horas",minutes:"Minutos",seconds:"Segundos"},FlipClock.Lang.pt=FlipClock.Lang.Portuguese,FlipClock.Lang["pt-br"]=FlipClock.Lang.Portuguese,FlipClock.Lang.portuguese=FlipClock.Lang.Portuguese}(jQuery),function(e){FlipClock.Lang.Russian={years:"лет",months:"месяцев",days:"дней",hours:"часов",minutes:"минут",seconds:"секунд"},FlipClock.Lang.ru=FlipClock.Lang.Russian,FlipClock.Lang["ru-ru"]=FlipClock.Lang.Russian,FlipClock.Lang.russian=FlipClock.Lang.Russian}(jQuery),function(e){FlipClock.Lang.Swedish={years:"År",months:"Månader",days:"Dagar",hours:"Timmar",minutes:"Minuter",seconds:"Sekunder"},FlipClock.Lang.sv=FlipClock.Lang.Swedish,FlipClock.Lang["sv-se"]=FlipClock.Lang.Swedish,FlipClock.Lang.swedish=FlipClock.Lang.Swedish}(jQuery),function(e,t,n){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e(require("jquery")):e(t||n)}(function(e){var t=function(t,n,i){var a={invalid:[],getCaret:function(){try{var e,n=0,i=t.get(0),s=document.selection,r=i.selectionStart;return s&&-1===navigator.appVersion.indexOf("MSIE 10")?((e=s.createRange()).moveStart("character",-a.val().length),n=e.text.length):(r||"0"===r)&&(n=r),n}catch(e){}},setCaret:function(e){try{if(t.is(":focus")){var n,i=t.get(0);i.setSelectionRange?i.setSelectionRange(e,e):((n=i.createTextRange()).collapse(!0),n.moveEnd("character",e),n.moveStart("character",e),n.select())}}catch(e){}},events:function(){t.on("keydown.mask",function(e){t.data("mask-keycode",e.keyCode||e.which),t.data("mask-previus-value",t.val()),t.data("mask-previus-caret-pos",a.getCaret()),a.maskDigitPosMapOld=a.maskDigitPosMap}).on(e.jMaskGlobals.useInput?"input.mask":"keyup.mask",a.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){t.keydown().keyup()},100)}).on("change.mask",function(){t.data("changed",!0)}).on("blur.mask",function(){o===a.val()||t.data("changed")||t.trigger("change"),t.data("changed",!1)}).on("blur.mask",function(){o=a.val()}).on("focus.mask",function(t){!0===i.selectOnFocus&&e(t.target).select()}).on("focusout.mask",function(){i.clearIfNotMatch&&!s.test(a.val())&&a.val("")})},getRegexMask:function(){for(var e,t,i,a,s,o,l=[],u=0;u<n.length;u++)(e=r.translation[n.charAt(u)])?(t=e.pattern.toString().replace(/.{1}$|^.{1}/g,""),i=e.optional,(a=e.recursive)?(l.push(n.charAt(u)),s={digit:n.charAt(u),pattern:t}):l.push(i||a?t+"?":t)):l.push(n.charAt(u).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return o=l.join(""),s&&(o=o.replace(new RegExp("("+s.digit+"(.*"+s.digit+")?)"),"($1)?").replace(new RegExp(s.digit,"g"),s.pattern)),new RegExp(o)},destroyEvents:function(){t.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(e){var n,i=t.is("input")?"val":"text";return arguments.length>0?(t[i]()!==e&&t[i](e),n=t):n=t[i](),n},calculateCaretPosition:function(){var e=t.data("mask-previus-value")||"",n=a.getMasked(),i=a.getCaret();if(e!==n){var s=t.data("mask-previus-caret-pos")||0,r=n.length,o=e.length,l=0,u=0,c=0,d=0,h=0;for(h=i;h<r&&a.maskDigitPosMap[h];h++)u++;for(h=i-1;h>=0&&a.maskDigitPosMap[h];h--)l++;for(h=i-1;h>=0;h--)a.maskDigitPosMap[h]&&c++;for(h=s-1;h>=0;h--)a.maskDigitPosMapOld[h]&&d++;if(i>o)i=r;else if(s>=i&&s!==o){if(!a.maskDigitPosMapOld[i]){var p=i;i-=d-c,i-=l,a.maskDigitPosMap[i]&&(i=p)}}else i>s&&(i+=c-d,i+=u)}return i},behaviour:function(n){n=n||window.event,a.invalid=[];var i=t.data("mask-keycode");if(-1===e.inArray(i,r.byPassKeys)){var s=a.getMasked(),o=a.getCaret();return setTimeout(function(){a.setCaret(a.calculateCaretPosition())},10),a.val(s),a.setCaret(o),a.callbacks(n)}},getMasked:function(e,t){var s,o,l=[],u=void 0===t?a.val():t+"",c=0,d=n.length,h=0,p=u.length,f=1,m="push",g=-1,v=0,y=[];i.reverse?(m="unshift",f=-1,s=0,c=d-1,h=p-1,o=function(){return c>-1&&h>-1}):(s=d-1,o=function(){return c<d&&h<p});for(var w;o();){var b=n.charAt(c),x=u.charAt(h),C=r.translation[b];C?(x.match(C.pattern)?(l[m](x),C.recursive&&(-1===g?g=c:c===s&&(c=g-f),s===g&&(c-=f)),c+=f):x===w?(v--,w=void 0):C.optional?(c+=f,h-=f):C.fallback?(l[m](C.fallback),c+=f,h-=f):a.invalid.push({p:h,v:x,e:C.pattern}),h+=f):(e||l[m](b),x===b?(y.push(h),h+=f):(w=b,y.push(h+v),v++),c+=f)}var T=n.charAt(s);d!==p+1||r.translation[T]||l.push(T);var S=l.join("");return a.mapMaskdigitPositions(S,y,p),S},mapMaskdigitPositions:function(e,t,n){var s=i.reverse?e.length-n:0;a.maskDigitPosMap={};for(var r=0;r<t.length;r++)a.maskDigitPosMap[t[r]+s]=1},callbacks:function(e){var s=a.val(),r=s!==o,l=[s,e,t,i],u=function(e,t,n){"function"==typeof i[e]&&t&&i[e].apply(this,n)};u("onChange",!0===r,l),u("onKeyPress",!0===r,l),u("onComplete",s.length===n.length,l),u("onInvalid",a.invalid.length>0,[s,e,t,a.invalid,i])}};t=e(t);var s,r=this,o=a.val();n="function"==typeof n?n(a.val(),void 0,t,i):n,r.mask=n,r.options=i,r.remove=function(){var e=a.getCaret();return a.destroyEvents(),a.val(r.getCleanVal()),a.setCaret(e),t},r.getCleanVal=function(){return a.getMasked(!0)},r.getMaskedVal=function(e){return a.getMasked(!1,e)},r.init=function(o){if(o=o||!1,i=i||{},r.clearIfNotMatch=e.jMaskGlobals.clearIfNotMatch,r.byPassKeys=e.jMaskGlobals.byPassKeys,r.translation=e.extend({},e.jMaskGlobals.translation,i.translation),r=e.extend(!0,{},r,i),s=a.getRegexMask(),o)a.events(),a.val(a.getMasked());else{i.placeholder&&t.attr("placeholder",i.placeholder),t.data("mask")&&t.attr("autocomplete","off");for(var l=0,u=!0;l<n.length;l++){var c=r.translation[n.charAt(l)];if(c&&c.recursive){u=!1;break}}u&&t.attr("maxlength",n.length),a.destroyEvents(),a.events();var d=a.getCaret();a.val(a.getMasked()),a.setCaret(d)}},r.init(!t.is("input"))};e.maskWatchers={};var n=function(){var n=e(this),a={},s=n.attr("data-mask");if(n.attr("data-mask-reverse")&&(a.reverse=!0),n.attr("data-mask-clearifnotmatch")&&(a.clearIfNotMatch=!0),"true"===n.attr("data-mask-selectonfocus")&&(a.selectOnFocus=!0),i(n,s,a))return n.data("mask",new t(this,s,a))},i=function(t,n,i){i=i||{};var a=e(t).data("mask"),s=JSON.stringify,r=e(t).val()||e(t).text();try{return"function"==typeof n&&(n=n(r)),"object"!=typeof a||s(a.options)!==s(i)||a.mask!==n}catch(e){}};e.fn.mask=function(n,a){a=a||{};var s=this.selector,r=e.jMaskGlobals,o=r.watchInterval,l=a.watchInputs||r.watchInputs,u=function(){if(i(this,n,a))return e(this).data("mask",new t(this,n,a))};return e(this).each(u),s&&""!==s&&l&&(clearInterval(e.maskWatchers[s]),e.maskWatchers[s]=setInterval(function(){e(document).find(s).each(u)},o)),this},e.fn.masked=function(e){return this.data("mask").getMaskedVal(e)},e.fn.unmask=function(){return clearInterval(e.maskWatchers[this.selector]),delete e.maskWatchers[this.selector],this.each(function(){var t=e(this).data("mask");t&&t.remove().removeData("mask")})},e.fn.cleanVal=function(){return this.data("mask").getCleanVal()},e.applyDataMask=function(t){((t=t||e.jMaskGlobals.maskElements)instanceof e?t:e(t)).filter(e.jMaskGlobals.dataMaskAttr).each(n)};var a={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&function(e){var t,n=document.createElement("div");return e="on"+e,(t=e in n)||(n.setAttribute(e,"return;"),t="function"==typeof n[e]),n=null,t}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};e.jMaskGlobals=e.jMaskGlobals||{},(a=e.jMaskGlobals=e.extend(!0,{},a,e.jMaskGlobals)).dataMask&&e.applyDataMask(),setInterval(function(){e.jMaskGlobals.watchDataMask&&e.applyDataMask()},a.watchInterval)},window.jQuery,window.Zepto),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&module.exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){e.extend(e.fn,{validate:function(t){if(this.length){var n=e.data(this[0],"validator");return n||(this.attr("novalidate","novalidate"),n=new e.validator(t,this[0]),e.data(this[0],"validator",n),n.settings.onsubmit&&(this.on("click.validate",":submit",function(t){n.settings.submitHandler&&(n.submitButton=t.target),e(this).hasClass("cancel")&&(n.cancelSubmit=!0),void 0!==e(this).attr("formnovalidate")&&(n.cancelSubmit=!0)}),this.on("submit.validate",function(t){function i(){var i,a;return!n.settings.submitHandler||(n.submitButton&&(i=e("<input type='hidden'/>").attr("name",n.submitButton.name).val(e(n.submitButton).val()).appendTo(n.currentForm)),a=n.settings.submitHandler.call(n,n.currentForm,t),n.submitButton&&i.remove(),void 0!==a&&a)}return n.settings.debug&&t.preventDefault(),n.cancelSubmit?(n.cancelSubmit=!1,i()):n.form()?n.pendingRequest?(n.formSubmitted=!0,!1):i():(n.focusInvalid(),!1)})),n)}t&&t.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing.")},valid:function(){var t,n,i;return e(this[0]).is("form")?t=this.validate().form():(i=[],t=!0,n=e(this[0].form).validate(),this.each(function(){(t=n.element(this)&&t)||(i=i.concat(n.errorList))}),n.errorList=i),t},rules:function(t,n){var i,a,s,r,o,l,u=this[0];if(null!=u&&null!=u.form){if(t)switch(i=e.data(u.form,"validator").settings,a=i.rules,s=e.validator.staticRules(u),t){case"add":e.extend(s,e.validator.normalizeRule(n)),delete s.messages,a[u.name]=s,n.messages&&(i.messages[u.name]=e.extend(i.messages[u.name],n.messages));break;case"remove":return n?(l={},e.each(n.split(/\s/),function(t,n){l[n]=s[n],delete s[n],"required"===n&&e(u).removeAttr("aria-required")}),l):(delete a[u.name],s)}return(r=e.validator.normalizeRules(e.extend({},e.validator.classRules(u),e.validator.attributeRules(u),e.validator.dataRules(u),e.validator.staticRules(u)),u)).required&&(o=r.required,delete r.required,r=e.extend({required:o},r),e(u).attr("aria-required","true")),r.remote&&(o=r.remote,delete r.remote,r=e.extend(r,{remote:o})),r}}}),e.extend(e.expr.pseudos||e.expr[":"],{blank:function(t){return!e.trim(""+e(t).val())},filled:function(t){var n=e(t).val();return null!==n&&!!e.trim(""+n)},unchecked:function(t){return!e(t).prop("checked")}}),e.validator=function(t,n){this.settings=e.extend(!0,{},e.validator.defaults,t),this.currentForm=n,this.init()},e.validator.format=function(t,n){return 1===arguments.length?function(){var n=e.makeArray(arguments);return n.unshift(t),e.validator.format.apply(this,n)}:void 0===n?t:(arguments.length>2&&n.constructor!==Array&&(n=e.makeArray(arguments).slice(1)),n.constructor!==Array&&(n=[n]),e.each(n,function(e,n){t=t.replace(new RegExp("\\{"+e+"\\}","g"),function(){return n})}),t)},e.extend(e.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:e([]),errorLabelContainer:e([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(e){this.lastActive=e,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,e,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(e)))},onfocusout:function(e){this.checkable(e)||!(e.name in this.submitted)&&this.optional(e)||this.element(e)},onkeyup:function(t,n){var i=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===n.which&&""===this.elementValue(t)||-1!==e.inArray(n.keyCode,i)||(t.name in this.submitted||t.name in this.invalid)&&this.element(t)},onclick:function(e){e.name in this.submitted?this.element(e):e.parentNode.name in this.submitted&&this.element(e.parentNode)},highlight:function(t,n,i){"radio"===t.type?this.findByName(t.name).addClass(n).removeClass(i):e(t).addClass(n).removeClass(i)},unhighlight:function(t,n,i){"radio"===t.type?this.findByName(t.name).removeClass(n).addClass(i):e(t).removeClass(n).addClass(i)}},setDefaults:function(t){e.extend(e.validator.defaults,t)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:e.validator.format("Please enter no more than {0} characters."),minlength:e.validator.format("Please enter at least {0} characters."),rangelength:e.validator.format("Please enter a value between {0} and {1} characters long."),range:e.validator.format("Please enter a value between {0} and {1}."),max:e.validator.format("Please enter a value less than or equal to {0}."),min:e.validator.format("Please enter a value greater than or equal to {0}."),step:e.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){function t(t){!this.form&&this.hasAttribute("contenteditable")&&(this.form=e(this).closest("form")[0]);var n=e.data(this.form,"validator"),i="on"+t.type.replace(/^validate/,""),a=n.settings;a[i]&&!e(this).is(a.ignore)&&a[i].call(n,this,t)}this.labelContainer=e(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||e(this.currentForm),this.containers=e(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var n,i=this.groups={};e.each(this.settings.groups,function(t,n){"string"==typeof n&&(n=n.split(/\s/)),e.each(n,function(e,n){i[n]=t})}),n=this.settings.rules,e.each(n,function(t,i){n[t]=e.validator.normalizeRule(i)}),e(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",t).on("click.validate","select, option, [type='radio'], [type='checkbox']",t),this.settings.invalidHandler&&e(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler),e(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required","true")},form:function(){return this.checkForm(),e.extend(this.submitted,this.errorMap),this.invalid=e.extend({},this.errorMap),this.valid()||e(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var e=0,t=this.currentElements=this.elements();t[e];e++)this.check(t[e]);return this.valid()},element:function(t){var n,i,a=this.clean(t),s=this.validationTargetFor(a),r=this,o=!0;return void 0===s?delete this.invalid[a.name]:(this.prepareElement(s),this.currentElements=e(s),(i=this.groups[s.name])&&e.each(this.groups,function(e,t){t===i&&e!==s.name&&(a=r.validationTargetFor(r.clean(r.findByName(e))))&&a.name in r.invalid&&(r.currentElements.push(a),o=r.check(a)&&o)}),n=!1!==this.check(s),o=o&&n,this.invalid[s.name]=!n,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),e(t).attr("aria-invalid",!n)),o},showErrors:function(t){if(t){var n=this;e.extend(this.errorMap,t),this.errorList=e.map(this.errorMap,function(e,t){return{message:e,element:n.findByName(t)[0]}}),this.successList=e.grep(this.successList,function(e){return!(e.name in t)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){e.fn.resetForm&&e(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var t=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(t)},resetElements:function(e){var t;if(this.settings.unhighlight)for(t=0;e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,""),this.findByName(e[t].name).removeClass(this.settings.validClass);else e.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(e){var t,n=0;for(t in e)e[t]&&n++;return n},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(e){e.not(this.containers).text(""),this.addWrapper(e).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{e(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(e){}},findLastActive:function(){var t=this.lastActive;return t&&1===e.grep(this.errorList,function(e){return e.element.name===t.name}).length&&t},elements:function(){var t=this,n={};return e(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){var i=this.name||e(this).attr("name");return!i&&t.settings.debug&&window.console&&console.error("%o has no name assigned",this),this.hasAttribute("contenteditable")&&(this.form=e(this).closest("form")[0]),!(i in n||!t.objectLength(e(this).rules()))&&(n[i]=!0,!0)})},clean:function(t){return e(t)[0]},errors:function(){var t=this.settings.errorClass.split(" ").join(".");return e(this.settings.errorElement+"."+t,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=e([]),this.toHide=e([])},reset:function(){this.resetInternals(),this.currentElements=e([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(e){this.reset(),this.toHide=this.errorsFor(e)},elementValue:function(t){var n,i,a=e(t),s=t.type;return"radio"===s||"checkbox"===s?this.findByName(t.name).filter(":checked").val():"number"===s&&void 0!==t.validity?t.validity.badInput?"NaN":a.val():(n=t.hasAttribute("contenteditable")?a.text():a.val(),"file"===s?"C:\\fakepath\\"===n.substr(0,12)?n.substr(12):(i=n.lastIndexOf("/"))>=0?n.substr(i+1):(i=n.lastIndexOf("\\"),i>=0?n.substr(i+1):n):"string"==typeof n?n.replace(/\r/g,""):n)},check:function(t){t=this.validationTargetFor(this.clean(t));var n,i,a,s=e(t).rules(),r=e.map(s,function(e,t){return t}).length,o=!1,l=this.elementValue(t);if("function"==typeof s.normalizer){if("string"!=typeof(l=s.normalizer.call(t,l)))throw new TypeError("The normalizer should return a string value.");delete s.normalizer}for(i in s){a={method:i,parameters:s[i]};try{if("dependency-mismatch"===(n=e.validator.methods[i].call(this,l,t,a.parameters))&&1===r){o=!0;continue}if(o=!1,"pending"===n)return void(this.toHide=this.toHide.not(this.errorsFor(t)));if(!n)return this.formatAndAdd(t,a),!1}catch(e){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+t.id+", check the '"+a.method+"' method.",e),e instanceof TypeError&&(e.message+=".  Exception occurred when checking element "+t.id+", check the '"+a.method+"' method."),e}}if(!o)return this.objectLength(s)&&this.successList.push(t),!0},customDataMessage:function(t,n){return e(t).data("msg"+n.charAt(0).toUpperCase()+n.substring(1).toLowerCase())||e(t).data("msg")},customMessage:function(e,t){var n=this.settings.messages[e];return n&&(n.constructor===String?n:n[t])},findDefined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},defaultMessage:function(t,n){"string"==typeof n&&(n={method:n});var i=this.findDefined(this.customMessage(t.name,n.method),this.customDataMessage(t,n.method),!this.settings.ignoreTitle&&t.title||void 0,e.validator.messages[n.method],"<strong>Warning: No message defined for "+t.name+"</strong>"),a=/\$?\{(\d+)\}/g;return"function"==typeof i?i=i.call(this,n.parameters,t):a.test(i)&&(i=e.validator.format(i.replace(a,"{$1}"),n.parameters)),i},formatAndAdd:function(e,t){var n=this.defaultMessage(e,t);this.errorList.push({message:n,element:e,method:t.method}),this.errorMap[e.name]=n,this.submitted[e.name]=n},addWrapper:function(e){return this.settings.wrapper&&(e=e.add(e.parent(this.settings.wrapper))),e},defaultShowErrors:function(){var e,t,n;for(e=0;this.errorList[e];e++)n=this.errorList[e],this.settings.highlight&&this.settings.highlight.call(this,n.element,this.settings.errorClass,this.settings.validClass),this.showLabel(n.element,n.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(e=0;this.successList[e];e++)this.showLabel(this.successList[e]);if(this.settings.unhighlight)for(e=0,t=this.validElements();t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return e(this.errorList).map(function(){return this.element})},showLabel:function(t,n){var i,a,s,r,o=this.errorsFor(t),l=this.idOrName(t),u=e(t).attr("aria-describedby");o.length?(o.removeClass(this.settings.validClass).addClass(this.settings.errorClass),o.html(n)):(i=o=e("<"+this.settings.errorElement+">").attr("id",l+"-error").addClass(this.settings.errorClass).html(n||""),this.settings.wrapper&&(i=o.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(i):this.settings.errorPlacement?this.settings.errorPlacement.call(this,i,e(t)):i.insertAfter(t),o.is("label")?o.attr("for",l):0===o.parents("label[for='"+this.escapeCssMeta(l)+"']").length&&(s=o.attr("id"),u?u.match(new RegExp("\\b"+this.escapeCssMeta(s)+"\\b"))||(u+=" "+s):u=s,e(t).attr("aria-describedby",u),(a=this.groups[t.name])&&(r=this,e.each(r.groups,function(t,n){n===a&&e("[name='"+r.escapeCssMeta(t)+"']",r.currentForm).attr("aria-describedby",o.attr("id"))})))),!n&&this.settings.success&&(o.text(""),"string"==typeof this.settings.success?o.addClass(this.settings.success):this.settings.success(o,t)),this.toShow=this.toShow.add(o)},errorsFor:function(t){var n=this.escapeCssMeta(this.idOrName(t)),i=e(t).attr("aria-describedby"),a="label[for='"+n+"'], label[for='"+n+"'] *";return i&&(a=a+", #"+this.escapeCssMeta(i).replace(/\s+/g,", #")),this.errors().filter(a)},escapeCssMeta:function(e){return e.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(e){return this.groups[e.name]||(this.checkable(e)?e.name:e.id||e.name)},validationTargetFor:function(t){return this.checkable(t)&&(t=this.findByName(t.name)),e(t).not(this.settings.ignore)[0]},checkable:function(e){return/radio|checkbox/i.test(e.type)},findByName:function(t){return e(this.currentForm).find("[name='"+this.escapeCssMeta(t)+"']")},getLength:function(t,n){switch(n.nodeName.toLowerCase()){case"select":return e("option:selected",n).length;case"input":if(this.checkable(n))return this.findByName(n.name).filter(":checked").length}return t.length},depend:function(e,t){return!this.dependTypes[typeof e]||this.dependTypes[typeof e](e,t)},dependTypes:{boolean:function(e){return e},string:function(t,n){return!!e(t,n.form).length},function:function(e,t){return e(t)}},optional:function(t){var n=this.elementValue(t);return!e.validator.methods.required.call(this,n,t)&&"dependency-mismatch"},startRequest:function(t){this.pending[t.name]||(this.pendingRequest++,e(t).addClass(this.settings.pendingClass),this.pending[t.name]=!0)},stopRequest:function(t,n){--this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[t.name],e(t).removeClass(this.settings.pendingClass),n&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(e(this.currentForm).submit(),this.formSubmitted=!1):!n&&0===this.pendingRequest&&this.formSubmitted&&(e(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(t,n){return n="string"==typeof n&&n||"remote",e.data(t,"previousValue")||e.data(t,"previousValue",{old:null,valid:!0,message:this.defaultMessage(t,{method:n})})},destroy:function(){this.resetForm(),e(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(t,n){t.constructor===String?this.classRuleSettings[t]=n:e.extend(this.classRuleSettings,t)},classRules:function(t){var n={},i=e(t).attr("class");return i&&e.each(i.split(" "),function(){this in e.validator.classRuleSettings&&e.extend(n,e.validator.classRuleSettings[this])}),n},normalizeAttributeRule:function(e,t,n,i){/min|max|step/.test(n)&&(null===t||/number|range|text/.test(t))&&(i=Number(i),isNaN(i)&&(i=void 0)),i||0===i?e[n]=i:t===n&&"range"!==t&&(e[n]=!0)},attributeRules:function(t){var n,i,a={},s=e(t),r=t.getAttribute("type");for(n in e.validator.methods)"required"===n?(""===(i=t.getAttribute(n))&&(i=!0),i=!!i):i=s.attr(n),this.normalizeAttributeRule(a,r,n,i);return a.maxlength&&/-1|2147483647|524288/.test(a.maxlength)&&delete a.maxlength,a},dataRules:function(t){var n,i,a={},s=e(t),r=t.getAttribute("type");for(n in e.validator.methods)i=s.data("rule"+n.charAt(0).toUpperCase()+n.substring(1).toLowerCase()),this.normalizeAttributeRule(a,r,n,i);return a},staticRules:function(t){var n={},i=e.data(t.form,"validator");return i.settings.rules&&(n=e.validator.normalizeRule(i.settings.rules[t.name])||{}),n},normalizeRules:function(t,n){return e.each(t,function(i,a){if(!1!==a){if(a.param||a.depends){var s=!0;switch(typeof a.depends){case"string":s=!!e(a.depends,n.form).length;break;case"function":s=a.depends.call(n,n)}s?t[i]=void 0===a.param||a.param:(e.data(n.form,"validator").resetElements(e(n)),delete t[i])}}else delete t[i]}),e.each(t,function(i,a){t[i]=e.isFunction(a)&&"normalizer"!==i?a(n):a}),e.each(["minlength","maxlength"],function(){t[this]&&(t[this]=Number(t[this]))}),e.each(["rangelength","range"],function(){var n;t[this]&&(e.isArray(t[this])?t[this]=[Number(t[this][0]),Number(t[this][1])]:"string"==typeof t[this]&&(n=t[this].replace(/[\[\]]/g,"").split(/[\s,]+/),t[this]=[Number(n[0]),Number(n[1])]))}),e.validator.autoCreateRanges&&(null!=t.min&&null!=t.max&&(t.range=[t.min,t.max],delete t.min,delete t.max),null!=t.minlength&&null!=t.maxlength&&(t.rangelength=[t.minlength,t.maxlength],delete t.minlength,delete t.maxlength)),t},normalizeRule:function(t){if("string"==typeof t){var n={};e.each(t.split(/\s/),function(){n[this]=!0}),t=n}return t},addMethod:function(t,n,i){e.validator.methods[t]=n,e.validator.messages[t]=void 0!==i?i:e.validator.messages[t],n.length<3&&e.validator.addClassRules(t,e.validator.normalizeRule(t))},methods:{required:function(t,n,i){if(!this.depend(i,n))return"dependency-mismatch";if("select"===n.nodeName.toLowerCase()){var a=e(n).val();return a&&a.length>0}return this.checkable(n)?this.getLength(t,n)>0:t.length>0},email:function(e,t){return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)},url:function(e,t){return this.optional(t)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(e)},date:function(e,t){return this.optional(t)||!/Invalid|NaN/.test(new Date(e).toString())},dateISO:function(e,t){return this.optional(t)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(e)},number:function(e,t){return this.optional(t)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(e)},digits:function(e,t){return this.optional(t)||/^\d+$/.test(e)},minlength:function(t,n,i){var a=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||a>=i},maxlength:function(t,n,i){var a=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||a<=i},rangelength:function(t,n,i){var a=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||a>=i[0]&&a<=i[1]},min:function(e,t,n){return this.optional(t)||e>=n},max:function(e,t,n){return this.optional(t)||e<=n},range:function(e,t,n){return this.optional(t)||e>=n[0]&&e<=n[1]},step:function(t,n,i){var a,s=e(n).attr("type"),r="Step attribute on input type "+s+" is not supported.",o=["text","number","range"],l=new RegExp("\\b"+s+"\\b"),u=function(e){var t=(""+e).match(/(?:\.(\d+))?$/);return t&&t[1]?t[1].length:0},c=function(e){return Math.round(e*Math.pow(10,a))},d=!0;if(s&&!l.test(o.join()))throw new Error(r);return a=u(i),(u(t)>a||c(t)%c(i)!=0)&&(d=!1),this.optional(n)||d},equalTo:function(t,n,i){var a=e(i);return this.settings.onfocusout&&a.not(".validate-equalTo-blur").length&&a.addClass("validate-equalTo-blur").on("blur.validate-equalTo",function(){e(n).valid()}),t===a.val()},remote:function(t,n,i,a){if(this.optional(n))return"dependency-mismatch";a="string"==typeof a&&a||"remote";var s,r,o,l=this.previousValue(n,a);return this.settings.messages[n.name]||(this.settings.messages[n.name]={}),l.originalMessage=l.originalMessage||this.settings.messages[n.name][a],this.settings.messages[n.name][a]=l.message,i="string"==typeof i&&{url:i}||i,o=e.param(e.extend({data:t},i.data)),l.old===o?l.valid:(l.old=o,s=this,this.startRequest(n),r={},r[n.name]=t,e.ajax(e.extend(!0,{mode:"abort",port:"validate"+n.name,dataType:"json",data:r,context:s.currentForm,success:function(e){var i,r,o,u=!0===e||"true"===e;s.settings.messages[n.name][a]=l.originalMessage,u?(o=s.formSubmitted,s.resetInternals(),s.toHide=s.errorsFor(n),s.formSubmitted=o,s.successList.push(n),s.invalid[n.name]=!1,s.showErrors()):(i={},r=e||s.defaultMessage(n,{method:a,parameters:t}),i[n.name]=l.message=r,s.invalid[n.name]=!0,s.showErrors(i)),l.valid=u,s.stopRequest(n,u)}},i)),"pending")}}});var t,n={};return e.ajaxPrefilter?e.ajaxPrefilter(function(e,t,i){var a=e.port;"abort"===e.mode&&(n[a]&&n[a].abort(),n[a]=i)}):(t=e.ajax,e.ajax=function(i){var a=("mode"in i?i:e.ajaxSettings).mode,s=("port"in i?i:e.ajaxSettings).port;return"abort"===a?(n[s]&&n[s].abort(),n[s]=t.apply(this,arguments),n[s]):t.apply(this,arguments)}),e}),function(e,t){"function"==typeof define&&define.amd?define(["exports"],t):t("object"==typeof exports&&"string"!=typeof exports.nodeName?exports:e.commonJsStrict={})}(this,function(e){function t(e){if(e in W)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=H.length;n--;)if((e=H[n]+t)in W)return e}function n(e,t){e=e||{};for(var i in t)t[i]&&t[i].constructor&&t[i].constructor===Object?(e[i]=e[i]||{},n(e[i],t[i])):e[i]=t[i];return e}function i(e){if("createEvent"in document){var t=document.createEvent("HTMLEvents");t.initEvent("change",!1,!0),e.dispatchEvent(t)}else e.fireEvent("onchange")}function a(e,t,n){if("string"==typeof t){var i=t;(t={})[i]=n}for(var a in t)e.style[a]=t[a]}function s(e,t){e.classList?e.classList.add(t):e.className+=" "+t}function r(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(t,"")}function o(e){return parseInt(e,10)}function l(e,t){var n=t||new Image;return n.style.opacity=0,new Promise(function(t){n.src===e?t(n):(n.removeAttribute("crossOrigin"),e.match(/^https?:\/\/|^\/\//)&&n.setAttribute("crossOrigin","anonymous"),n.onload=function(){setTimeout(function(){t(n)},1)},n.src=e)})}function u(e,t){window.EXIF||t(0),EXIF.getData(e,function(){var e=EXIF.getTag(this,"Orientation");t(e)})}function c(e,t,n){var i=t.width,a=t.height,s=e.getContext("2d");switch(e.width=t.width,e.height=t.height,s.save(),n){case 2:s.translate(i,0),s.scale(-1,1);break;case 3:s.translate(i,a),s.rotate(180*Math.PI/180);break;case 4:s.translate(0,a),s.scale(1,-1);break;case 5:e.width=a,e.height=i,s.rotate(90*Math.PI/180),s.scale(1,-1);break;case 6:e.width=a,e.height=i,s.rotate(90*Math.PI/180),s.translate(0,-a);break;case 7:e.width=a,e.height=i,s.rotate(-90*Math.PI/180),s.translate(-i,a),s.scale(1,-1);break;case 8:e.width=a,e.height=i,s.translate(0,i),s.rotate(-90*Math.PI/180)}s.drawImage(t,0,0,i,a),s.restore()}function d(){var e,t,n,i,r,o=this,l=o.options.viewport.type?"cr-vp-"+o.options.viewport.type:null;o.options.useCanvas=o.options.enableOrientation||h.call(o),o.data={},o.elements={},e=o.elements.boundary=document.createElement("div"),t=o.elements.viewport=document.createElement("div"),o.elements.img=document.createElement("img"),n=o.elements.overlay=document.createElement("div"),o.options.useCanvas?(o.elements.canvas=document.createElement("canvas"),o.elements.preview=o.elements.canvas):o.elements.preview=o.elements.img,s(e,"cr-boundary"),i=o.options.boundary.width,r=o.options.boundary.height,a(e,{width:i+(isNaN(i)?"":"px"),height:r+(isNaN(r)?"":"px")}),s(t,"cr-viewport"),l&&s(t,l),a(t,{width:o.options.viewport.width+"px",height:o.options.viewport.height+"px"}),t.setAttribute("tabindex",0),s(o.elements.preview,"cr-image"),s(n,"cr-overlay"),o.element.appendChild(e),e.appendChild(o.elements.preview),e.appendChild(t),e.appendChild(n),s(o.element,"croppie-container"),o.options.customClass&&s(o.element,o.options.customClass),y.call(this),o.options.enableZoom&&f.call(o)}function h(){return this.options.enableExif&&window.EXIF}function p(e){if(this.options.enableZoom){var t=this.elements.zoomer,n=P(e,4);t.value=Math.max(t.min,Math.min(t.max,n))}}function f(){function e(){m.call(n,{value:parseFloat(a.value),origin:new G(n.elements.preview),viewportRect:n.elements.viewport.getBoundingClientRect(),transform:q.parse(n.elements.preview)})}function t(t){var i,a;i=t.wheelDelta?t.wheelDelta/1200:t.deltaY?t.deltaY/1060:t.detail?t.detail/-60:0,a=n._currentZoom+i*n._currentZoom,t.preventDefault(),p.call(n,a),e.call(n)}var n=this,i=n.elements.zoomerWrap=document.createElement("div"),a=n.elements.zoomer=document.createElement("input");s(i,"cr-slider-wrap"),s(a,"cr-slider"),a.type="range",a.step="0.0001",a.value=1,a.style.display=n.options.showZoomer?"":"none",n.element.appendChild(i),i.appendChild(a),n._currentZoom=1,n.elements.zoomer.addEventListener("input",e),n.elements.zoomer.addEventListener("change",e),n.options.mouseWheelZoom&&(n.elements.boundary.addEventListener("mousewheel",t),n.elements.boundary.addEventListener("DOMMouseScroll",t))}function m(e){function t(){var e={};e[N]=i.toString(),e[j]=r.toString(),a(n.elements.preview,e)}var n=this,i=e?e.transform:q.parse(n.elements.preview),s=e?e.viewportRect:n.elements.viewport.getBoundingClientRect(),r=e?e.origin:new G(n.elements.preview);if(n._currentZoom=e?e.value:n._currentZoom,i.scale=n._currentZoom,t(),n.options.enforceBoundary){var o=g.call(n,s),l=o.translate,u=o.origin;i.x>=l.maxX&&(r.x=u.minX,i.x=l.maxX),i.x<=l.minX&&(r.x=u.maxX,i.x=l.minX),i.y>=l.maxY&&(r.y=u.minY,i.y=l.maxY),i.y<=l.minY&&(r.y=u.maxY,i.y=l.minY)}t(),$.call(n),b.call(n)}function g(e){var t=this,n=t._currentZoom,i=e.width,a=e.height,s=t.elements.boundary.clientWidth/2,r=t.elements.boundary.clientHeight/2,o=t.elements.preview.getBoundingClientRect(),l=o.width,u=o.height,c=i/2,d=a/2,h=-1*(c/n-s),p=-1*(d/n-r),f=1/n*c,m=1/n*d;return{translate:{maxX:h,minX:h-(l*(1/n)-i*(1/n)),maxY:p,minY:p-(u*(1/n)-a*(1/n))},origin:{maxX:l*(1/n)-f,minX:f,maxY:u*(1/n)-m,minY:m}}}function v(){var e=this,t=e._currentZoom,n=e.elements.preview.getBoundingClientRect(),i=e.elements.viewport.getBoundingClientRect(),s=q.parse(e.elements.preview.style[N]),r=new G(e.elements.preview),o=i.top-n.top+i.height/2,l=i.left-n.left+i.width/2,u={},c={};u.y=o/t,u.x=l/t,c.y=(u.y-r.y)*(1-t),c.x=(u.x-r.x)*(1-t),s.x-=c.x,s.y-=c.y;var d={};d[j]=u.x+"px "+u.y+"px",d[N]=s.toString(),a(e.elements.preview,d)}function y(){function e(e,t){var n=f.elements.preview.getBoundingClientRect(),i=h.y+t,a=h.x+e;f.options.enforceBoundary?(d.top>n.top+t&&d.bottom<n.bottom+t&&(h.y=i),d.left>n.left+e&&d.right<n.right+e&&(h.x=a)):(h.y=i,h.x=a)}function t(e){var t=37,i=38,a=39,s=40;if(!e.shiftKey||e.keyCode!=i&&e.keyCode!=s){if(e.keyCode>=37&&e.keyCode<=40){e.preventDefault();var r=function(e){switch(e){case t:return[1,0];case i:return[0,1];case a:return[-1,0];case s:return[0,-1]}}(e.keyCode);h=q.parse(f.elements.preview),document.body.style[Y]="none",d=f.elements.viewport.getBoundingClientRect(),n(r)}}else{var o=0;o=e.keyCode==i?parseFloat(f.elements.zoomer.value,10)+parseFloat(f.elements.zoomer.step,10):parseFloat(f.elements.zoomer.value,10)-parseFloat(f.elements.zoomer.step,10),f.setZoom(o)}}function n(t){var n={};e(t[0],t[1]),n[N]=h.toString(),a(f.elements.preview,n),w.call(f),document.body.style[Y]="",v.call(f),b.call(f),c=0}function s(e){if(e.preventDefault(),!m){if(m=!0,l=e.pageX,u=e.pageY,e.touches){var t=e.touches[0];l=t.pageX,u=t.pageY}h=q.parse(f.elements.preview),window.addEventListener("mousemove",r),window.addEventListener("touchmove",r),window.addEventListener("mouseup",o),window.addEventListener("touchend",o),document.body.style[Y]="none",d=f.elements.viewport.getBoundingClientRect()}}function r(t){t.preventDefault();var n=t.pageX,s=t.pageY;if(t.touches){var r=t.touches[0];n=r.pageX,s=r.pageY}var o=n-l,d=s-u,m={};if("touchmove"==t.type&&t.touches.length>1){var g=t.touches[0],v=t.touches[1],y=Math.sqrt((g.pageX-v.pageX)*(g.pageX-v.pageX)+(g.pageY-v.pageY)*(g.pageY-v.pageY));c||(c=y/f._currentZoom);var b=y/c;return p.call(f,b),void i(f.elements.zoomer)}e(o,d),m[N]=h.toString(),a(f.elements.preview,m),w.call(f),u=s,l=n}function o(){m=!1,window.removeEventListener("mousemove",r),window.removeEventListener("touchmove",r),window.removeEventListener("mouseup",o),window.removeEventListener("touchend",o),document.body.style[Y]="",v.call(f),b.call(f),c=0}var l,u,c,d,h,f=this,m=!1;f.elements.overlay.addEventListener("mousedown",s),f.elements.viewport.addEventListener("keydown",t),f.elements.overlay.addEventListener("touchstart",s)}function w(){var e=this,t=e.elements.boundary.getBoundingClientRect(),n=e.elements.preview.getBoundingClientRect();a(e.elements.overlay,{width:n.width+"px",height:n.height+"px",top:n.top-t.top+"px",left:n.left-t.left+"px"})}function b(){var e=this,t=e.get();if(x.call(e))if(e.options.update.call(e,t),e.$&&"undefined"==typeof Prototype)e.$(e.element).trigger("update",t);else{var n;window.CustomEvent?n=new CustomEvent("update",{detail:t}):(n=document.createEvent("CustomEvent")).initCustomEvent("update",!0,!0,t),e.element.dispatchEvent(n)}}function x(){return this.elements.preview.offsetHeight>0&&this.elements.preview.offsetWidth>0}function C(){var e,t,n,s,r,o=this,l=0,u=1.5,c=1,d={},h=o.elements.preview,f=o.elements.zoomer,m=new q(0,0,c),g=new G;if(x.call(o)&&!o.data.bound){if(o.data.bound=!0,d[N]=m.toString(),d[j]=g.toString(),d.opacity=1,a(h,d),e=h.getBoundingClientRect(),t=o.elements.viewport.getBoundingClientRect(),n=o.elements.boundary.getBoundingClientRect(),o._originalImageWidth=e.width,o._originalImageHeight=e.height,o.options.enableZoom){o.options.enforceBoundary&&(s=t.width/e.width,r=t.height/e.height,l=Math.max(s,r)),l>=u&&(u=l+1),f.min=P(l,4),f.max=P(u,4);var y=Math.max(n.width/e.width,n.height/e.height);c=null!==o.data.boundZoom?o.data.boundZoom:y,p.call(o,c),i(f)}else o._currentZoom=c;m.scale=o._currentZoom,d[N]=m.toString(),a(h,d),o.data.points.length?T.call(o,o.data.points):S.call(o),v.call(o),w.call(o)}}function T(e){if(4!=e.length)throw"Croppie - Invalid number of points supplied: "+e;var t=this,n=e[2]-e[0],i=t.elements.viewport.getBoundingClientRect(),s=t.elements.boundary.getBoundingClientRect(),r={left:i.left-s.left,top:i.top-s.top},o=i.width/n,l=e[1],u=e[0],c=-1*e[1]+r.top,d=-1*e[0]+r.left,h={};h[j]=u+"px "+l+"px",h[N]=new q(d,c,o).toString(),a(t.elements.preview,h),p.call(t,o),t._currentZoom=o}function S(){var e=this,t=e.elements.preview.getBoundingClientRect(),n=e.elements.viewport.getBoundingClientRect(),i=e.elements.boundary.getBoundingClientRect(),s=n.left-i.left,r=n.top-i.top,o=s-(t.width-n.width)/2,l=r-(t.height-n.height)/2,u=new q(o,l,e._currentZoom);a(e.elements.preview,N,u.toString())}function k(e){var t=this,n=t.elements.canvas,i=t.elements.img,a=n.getContext("2d"),s=h.call(t),e=t.options.enableOrientation&&e;a.clearRect(0,0,n.width,n.height),n.width=i.width,n.height=i.height,s?u(i,function(t){c(n,i,o(t,10)),e&&c(n,i,e)}):e&&c(n,i,e)}function M(e){var t=this,n=e.points,i=o(n[0]),a=o(n[1]),s=o(n[2]),r=o(n[3]),l=s-i,u=r-a,c=e.circle,d=document.createElement("canvas"),h=d.getContext("2d"),p=l,f=u,m=0,g=0,v=p,y=f,w=1;return e.outputWidth&&e.outputHeight&&(v=e.outputWidth,y=e.outputHeight,w=v/p),d.width=v,d.height=y,e.backgroundColor&&(h.fillStyle=e.backgroundColor,h.fillRect(0,0,p,f)),i<0&&(m=Math.abs(i),i=0),a<0&&(g=Math.abs(a),a=0),s>t._originalImageWidth&&(p=l=t._originalImageWidth-i),r>t._originalImageHeight&&(f=u=t._originalImageHeight-a),1!==w&&(m*=w,g*=w,p*=w,f*=w),h.drawImage(this.elements.preview,i,a,l,u,m,g,p,f),c&&(h.fillStyle="#fff",h.globalCompositeOperation="destination-in",h.beginPath(),h.arc(p/2,f/2,p/2,0,2*Math.PI,!0),h.closePath(),h.fill()),d}function D(e){var t=e.points,n=document.createElement("div"),i=document.createElement("img"),r=t[2]-t[0],o=t[3]-t[1];return s(n,"croppie-result"),n.appendChild(i),a(i,{left:-1*t[0]+"px",top:-1*t[1]+"px"}),i.src=e.url,a(n,{width:r+"px",height:o+"px"}),n}function _(e){return M.call(this,e).toDataURL(e.format,e.quality)}function E(e){var t=this;return new Promise(function(n,i){M.call(t,e).toBlob(function(e){n(e)},e.format,e.quality)})}function L(e,t){var n,i=this,a=[],s=null;if("string"==typeof e)n=e,e={};else if(Array.isArray(e))a=e.slice();else{if(void 0===e&&i.data.url)return C.call(i),b.call(i),null;n=e.url,a=e.points||[],s=void 0===e.zoom?null:e.zoom}return i.data.bound=!1,i.data.url=n||i.data.url,i.data.boundZoom=s,l(n,i.elements.img).then(function(n){if(a.length)i.options.relative&&(a=[a[0]*n.naturalWidth/100,a[1]*n.naturalHeight/100,a[2]*n.naturalWidth/100,a[3]*n.naturalHeight/100]),i.data.points=a.map(function(e){return parseFloat(e)});else{var s,r,o=n.naturalWidth,l=n.naturalHeight,u=i.elements.viewport.getBoundingClientRect(),c=u.width/u.height;o/l>c?s=(r=l)*c:r=(s=o)/c;var d=(o-s)/2,h=(l-r)/2,p=d+s,f=h+r;i.data.points=[d,h,p,f]}i.options.useCanvas&&(i.elements.img.exifdata=null,k.call(i,e.orientation||1)),C.call(i),b.call(i),t&&t()})}function P(e,t){return parseFloat(e).toFixed(t||0)}function I(){var e=this,t=e.elements.preview.getBoundingClientRect(),n=e.elements.viewport.getBoundingClientRect(),i=n.left-t.left,a=n.top-t.top,s=(n.width-e.elements.viewport.offsetWidth)/2,r=(n.height-e.elements.viewport.offsetHeight)/2,o=i+e.elements.viewport.offsetWidth+s,l=a+e.elements.viewport.offsetHeight+r,u=e._currentZoom;(u===1/0||isNaN(u))&&(u=1);var c=e.options.enforceBoundary?0:Number.NEGATIVE_INFINITY;return i=Math.max(c,i/u),a=Math.max(c,a/u),o=Math.max(c,o/u),l=Math.max(c,l/u),{points:[P(i),P(a),P(o),P(l)],zoom:u}}function F(e){var t=this,i=I.call(t),a=n(V,n({},e)),s="string"==typeof e?e:a.type||"base64",r=a.size,o=a.format,l=a.quality,u=a.backgroundColor,c="boolean"==typeof a.circle?a.circle:"circle"===t.options.viewport.type,d=t.elements.viewport.getBoundingClientRect(),h=d.width/d.height;return"viewport"===r?(i.outputWidth=d.width,i.outputHeight=d.height):"object"==typeof r&&(r.width&&r.height?(i.outputWidth=r.width,i.outputHeight=r.height):r.width?(i.outputWidth=r.width,i.outputHeight=r.width/h):r.height&&(i.outputWidth=r.height*h,i.outputHeight=r.height)),X.indexOf(o)>-1&&(i.format="image/"+o,i.quality=l),i.circle=c,i.url=t.data.url,i.backgroundColor=u,new Promise(function(e,n){switch(s.toLowerCase()){case"rawcanvas":e(M.call(t,i));break;case"canvas":case"base64":e(_.call(t,i));break;case"blob":E.call(t,i).then(e);break;default:e(D.call(t,i))}})}function z(){C.call(this)}function A(e){if(!this.options.useCanvas)throw"Croppie: Cannot rotate without enableOrientation";var t=this,n=t.elements.canvas,i=(t.elements.img,document.createElement("canvas")),a=1;i.width=n.width,i.height=n.height,i.getContext("2d").drawImage(n,0,0),90!==e&&-270!==e||(a=6),-90!==e&&270!==e||(a=8),180!==e&&-180!==e||(a=3),c(n,i,a),m.call(t)}function O(){var e=this;e.element.removeChild(e.elements.boundary),r(e.element,"croppie-container"),e.options.enableZoom&&e.element.removeChild(e.elements.zoomerWrap),delete e.elements}function R(e,t){if(this.element=e,this.options=n(n({},R.defaults),t),"img"===this.element.tagName.toLowerCase()){var i=this.element;s(i,"cr-original-image");var a=document.createElement("div");this.element.parentNode.appendChild(a),a.appendChild(i),this.element=a,this.options.url=this.options.url||i.src}if(d.call(this),this.options.url){var r={url:this.options.url,points:this.options.points};delete this.options.url,delete this.options.points,L.call(this,r)}}"function"!=typeof Promise&&function(e){function t(e,t){return function(){e.apply(t,arguments)}}function n(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=null,this._value=null,this._deferreds=[],l(e,t(a,this),t(s,this))}function i(e){var t=this;return null===this._state?void this._deferreds.push(e):void c(function(){var n=t._state?e.onFulfilled:e.onRejected;if(null!==n){var i;try{i=n(t._value)}catch(t){return void e.reject(t)}e.resolve(i)}else(t._state?e.resolve:e.reject)(t._value)})}function a(e){try{if(e===this)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if("function"==typeof n)return void l(t(n,e),t(a,this),t(s,this))}this._state=!0,this._value=e,r.call(this)}catch(e){s.call(this,e)}}function s(e){this._state=!1,this._value=e,r.call(this)}function r(){for(var e=0,t=this._deferreds.length;t>e;e++)i.call(this,this._deferreds[e]);this._deferreds=null}function o(e,t,n,i){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.resolve=n,this.reject=i}function l(e,t,n){var i=!1;try{e(function(e){i||(i=!0,t(e))},function(e){i||(i=!0,n(e))})}catch(e){if(i)return;i=!0,n(e)}}var u=setTimeout,c="function"==typeof setImmediate&&setImmediate||function(e){u(e,1)},d=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};n.prototype.catch=function(e){return this.then(null,e)},n.prototype.then=function(e,t){var a=this;return new n(function(n,s){i.call(a,new o(e,t,n,s))})},n.all=function(){var e=Array.prototype.slice.call(1===arguments.length&&d(arguments[0])?arguments[0]:arguments);return new n(function(t,n){function i(s,r){try{if(r&&("object"==typeof r||"function"==typeof r)){var o=r.then;if("function"==typeof o)return void o.call(r,function(e){i(s,e)},n)}e[s]=r,0==--a&&t(e)}catch(e){n(e)}}if(0===e.length)return t([]);for(var a=e.length,s=0;s<e.length;s++)i(s,e[s])})},n.resolve=function(e){return e&&"object"==typeof e&&e.constructor===n?e:new n(function(t){t(e)})},n.reject=function(e){return new n(function(t,n){n(e)})},n.race=function(e){return new n(function(t,n){for(var i=0,a=e.length;a>i;i++)e[i].then(t,n)})},n._setImmediateFn=function(e){c=e},"undefined"!=typeof module&&module.exports?module.exports=n:e.Promise||(e.Promise=n)}(this),"function"!=typeof window.CustomEvent&&function(){function e(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n}e.prototype=window.Event.prototype,window.CustomEvent=e}(),HTMLCanvasElement.prototype.toBlob||Object.defineProperty(HTMLCanvasElement.prototype,"toBlob",{value:function(e,t,n){for(var i=atob(this.toDataURL(t,n).split(",")[1]),a=i.length,s=new Uint8Array(a),r=0;r<a;r++)s[r]=i.charCodeAt(r);e(new Blob([s],{type:t||"image/png"}))}});var j,N,Y,H=["Webkit","Moz","ms"],W=document.createElement("div").style;N=t("transform"),j=t("transformOrigin"),Y=t("userSelect");var B={translate3d:{suffix:", 0px"},translate:{suffix:""}},q=function(e,t,n){this.x=parseFloat(e),this.y=parseFloat(t),this.scale=parseFloat(n)};q.parse=function(e){return e.style?q.parse(e.style[N]):e.indexOf("matrix")>-1||e.indexOf("none")>-1?q.fromMatrix(e):q.fromString(e)},q.fromMatrix=function(e){var t=e.substring(7).split(",");return t.length&&"none"!==e||(t=[1,0,0,1,0,0]),new q(o(t[4]),o(t[5]),parseFloat(t[0]))},q.fromString=function(e){var t=e.split(") "),n=t[0].substring(R.globals.translate.length+1).split(","),i=t.length>1?t[1].substring(6):1,a=n.length>1?n[0]:0,s=n.length>1?n[1]:0;return new q(a,s,i)},q.prototype.toString=function(){var e=B[R.globals.translate].suffix||"";return R.globals.translate+"("+this.x+"px, "+this.y+"px"+e+") scale("+this.scale+")"};var G=function(e){if(!e||!e.style[j])return this.x=0,void(this.y=0);var t=e.style[j].split(" ");this.x=parseFloat(t[0]),this.y=parseFloat(t[1])};G.prototype.toString=function(){return this.x+"px "+this.y+"px"};var $=function(e,t,n){var i;return function(){var a=this,s=arguments,r=function(){i=null,n||e.apply(a,s)},o=n&&!i;clearTimeout(i),i=setTimeout(r,t),o&&e.apply(a,s)}}(w,500),V={type:"canvas",format:"png",quality:1},X=["jpeg","webp","png"];if(window.jQuery){var U=window.jQuery;U.fn.croppie=function(e){if("string"===typeof e){var t=Array.prototype.slice.call(arguments,1),n=U(this).data("croppie");return"get"===e?n.get():"result"===e?n.result.apply(n,t):"bind"===e?n.bind.apply(n,t):this.each(function(){var n=U(this).data("croppie");if(n){var i=n[e];if(!U.isFunction(i))throw"Croppie "+e+" method not found";i.apply(n,t),"destroy"===e&&U(this).removeData("croppie")}})}return this.each(function(){var t=new R(this,e);t.$=U,U(this).data("croppie",t)})}}R.defaults={viewport:{width:100,height:100,type:"square"},boundary:{},orientationControls:{enabled:!0,leftClass:"",rightClass:""},customClass:"",showZoomer:!0,enableZoom:!0,mouseWheelZoom:!0,enableExif:!1,enforceBoundary:!0,enableOrientation:!1,update:function(){}},R.globals={translate:"translate3d"},n(R.prototype,{bind:function(e,t){return L.call(this,e,t)},get:function(){var e=I.call(this),t=e.points;return this.options.relative&&(t[0]/=this.elements.img.naturalWidth/100,t[1]/=this.elements.img.naturalHeight/100,t[2]/=this.elements.img.naturalWidth/100,t[3]/=this.elements.img.naturalHeight/100),e},result:function(e){return F.call(this,e)},refresh:function(){return z.call(this)},setZoom:function(e){p.call(this,e),i(this.elements.zoomer)},rotate:function(e){A.call(this,e)},destroy:function(){return O.call(this)}}),e.Croppie=window.Croppie=R,"object"==typeof module&&module.exports&&(module.exports=R)}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.moment=t()}(this,function(){"use strict";function e(){return yi.apply(null,arguments)}function t(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function n(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function i(e){var t;for(t in e)return!1;return!0}function a(e){return void 0===e}function s(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function r(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function o(e,t){var n,i=[];for(n=0;n<e.length;++n)i.push(t(e[n],n));return i}function l(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function u(e,t){for(var n in t)l(t,n)&&(e[n]=t[n]);return l(t,"toString")&&(e.toString=t.toString),l(t,"valueOf")&&(e.valueOf=t.valueOf),e}function c(e,t,n,i){return vt(e,t,n,i,!0).utc()}function d(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}}function h(e){return null==e._pf&&(e._pf=d()),e._pf}function p(e){if(null==e._isValid){var t=h(e),n=bi.call(t.parsedDateParts,function(e){return null!=e}),i=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(i=i&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return i;e._isValid=i}return e._isValid}function f(e){var t=c(NaN);return null!=e?u(h(t),e):h(t).userInvalidated=!0,t}function m(e,t){var n,i,s;if(a(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),a(t._i)||(e._i=t._i),a(t._f)||(e._f=t._f),a(t._l)||(e._l=t._l),a(t._strict)||(e._strict=t._strict),a(t._tzm)||(e._tzm=t._tzm),a(t._isUTC)||(e._isUTC=t._isUTC),a(t._offset)||(e._offset=t._offset),a(t._pf)||(e._pf=h(t)),a(t._locale)||(e._locale=t._locale),xi.length>0)for(n=0;n<xi.length;n++)a(s=t[i=xi[n]])||(e[i]=s);return e}function g(t){m(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===Ci&&(Ci=!0,e.updateOffset(this),Ci=!1)}function v(e){return e instanceof g||null!=e&&null!=e._isAMomentObject}function y(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function w(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=y(t)),n}function b(e,t,n){var i,a=Math.min(e.length,t.length),s=Math.abs(e.length-t.length),r=0;for(i=0;i<a;i++)(n&&e[i]!==t[i]||!n&&w(e[i])!==w(t[i]))&&r++;return r+s}function x(t){!1===e.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function C(t,n){var i=!0;return u(function(){if(null!=e.deprecationHandler&&e.deprecationHandler(null,t),i){for(var a,s=[],r=0;r<arguments.length;r++){if(a="","object"==typeof arguments[r]){a+="\n["+r+"] ";for(var o in arguments[0])a+=o+": "+arguments[0][o]+", ";a=a.slice(0,-2)}else a=arguments[r];s.push(a)}x(t+"\nArguments: "+Array.prototype.slice.call(s).join("")+"\n"+(new Error).stack),i=!1}return n.apply(this,arguments)},n)}function T(t,n){null!=e.deprecationHandler&&e.deprecationHandler(t,n),Ti[t]||(x(n),Ti[t]=!0)}function S(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function k(e){var t,n;for(n in e)S(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)}function M(e,t){var i,a=u({},e);for(i in t)l(t,i)&&(n(e[i])&&n(t[i])?(a[i]={},u(a[i],e[i]),u(a[i],t[i])):null!=t[i]?a[i]=t[i]:delete a[i]);for(i in e)l(e,i)&&!l(t,i)&&n(e[i])&&(a[i]=u({},a[i]));return a}function D(e){null!=e&&this.set(e)}function _(e,t,n){var i=this._calendar[e]||this._calendar.sameElse;return S(i)?i.call(t,n):i}function E(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function L(){return this._invalidDate}function P(e){return this._ordinal.replace("%d",e)}function I(e,t,n,i){var a=this._relativeTime[n];return S(a)?a(e,t,n,i):a.replace(/%d/i,e)}function F(e,t){var n=this._relativeTime[e>0?"future":"past"];return S(n)?n(t):n.replace(/%s/i,t)}function z(e,t){var n=e.toLowerCase();Pi[n]=Pi[n+"s"]=Pi[t]=e}function A(e){return"string"==typeof e?Pi[e]||Pi[e.toLowerCase()]:void 0}function O(e){var t,n,i={};for(n in e)l(e,n)&&(t=A(n))&&(i[t]=e[n]);return i}function R(e,t){Ii[e]=t}function j(e){var t=[];for(var n in e)t.push({unit:n,priority:Ii[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}function N(t,n){return function(i){return null!=i?(H(this,t,i),e.updateOffset(this,n),this):Y(this,t)}}function Y(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function H(e,t,n){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+t](n)}function W(e){return e=A(e),S(this[e])?this[e]():this}function B(e,t){if("object"==typeof e)for(var n=j(e=O(e)),i=0;i<n.length;i++)this[n[i].unit](e[n[i].unit]);else if(e=A(e),S(this[e]))return this[e](t);return this}function q(e,t,n){var i=""+Math.abs(e),a=t-i.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+i}function G(e,t,n,i){var a=i;"string"==typeof i&&(a=function(){return this[i]()}),e&&(Oi[e]=a),t&&(Oi[t[0]]=function(){return q(a.apply(this,arguments),t[1],t[2])}),n&&(Oi[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function $(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function V(e){var t,n,i=e.match(Fi);for(t=0,n=i.length;t<n;t++)Oi[i[t]]?i[t]=Oi[i[t]]:i[t]=$(i[t]);return function(t){var a,s="";for(a=0;a<n;a++)s+=S(i[a])?i[a].call(t,e):i[a];return s}}function X(e,t){return e.isValid()?(t=U(t,e.localeData()),Ai[t]=Ai[t]||V(t),Ai[t](e)):e.localeData().invalidDate()}function U(e,t){function n(e){return t.longDateFormat(e)||e}var i=5;for(zi.lastIndex=0;i>=0&&zi.test(e);)e=e.replace(zi,n),zi.lastIndex=0,i-=1;return e}function Z(e,t,n){ea[e]=S(t)?t:function(e,i){return e&&n?n:t}}function Q(e,t){return l(ea,e)?ea[e](t._strict,t._locale):new RegExp(K(e))}function K(e){return J(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,i,a){return t||n||i||a}))}function J(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ee(e,t){var n,i=t;for("string"==typeof e&&(e=[e]),s(t)&&(i=function(e,n){n[t]=w(e)}),n=0;n<e.length;n++)ta[e[n]]=i}function te(e,t){ee(e,function(e,n,i,a){i._w=i._w||{},t(e,i._w,i,a)})}function ne(e,t,n){null!=t&&l(ta,e)&&ta[e](t,n._a,n,e)}function ie(e,t){return new Date(Date.UTC(e,t+1,0)).getUTCDate()}function ae(e,n){return e?t(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||ha).test(n)?"format":"standalone"][e.month()]:t(this._months)?this._months:this._months.standalone}function se(e,n){return e?t(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[ha.test(n)?"format":"standalone"][e.month()]:t(this._monthsShort)?this._monthsShort:this._monthsShort.standalone}function re(e,t,n){var i,a,s,r=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],i=0;i<12;++i)s=c([2e3,i]),this._shortMonthsParse[i]=this.monthsShort(s,"").toLocaleLowerCase(),this._longMonthsParse[i]=this.months(s,"").toLocaleLowerCase();return n?"MMM"===t?(a=da.call(this._shortMonthsParse,r),-1!==a?a:null):(a=da.call(this._longMonthsParse,r),-1!==a?a:null):"MMM"===t?-1!==(a=da.call(this._shortMonthsParse,r))?a:(a=da.call(this._longMonthsParse,r),-1!==a?a:null):-1!==(a=da.call(this._longMonthsParse,r))?a:(a=da.call(this._shortMonthsParse,r),-1!==a?a:null)}function oe(e,t,n){var i,a,s;if(this._monthsParseExact)return re.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;i<12;i++){if(a=c([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(s="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[i]=new RegExp(s.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[i].test(e))return i;if(n&&"MMM"===t&&this._shortMonthsParse[i].test(e))return i;if(!n&&this._monthsParse[i].test(e))return i}}function le(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=w(t);else if(t=e.localeData().monthsParse(t),!s(t))return e;return n=Math.min(e.date(),ie(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function ue(t){return null!=t?(le(this,t),e.updateOffset(this,!0),this):Y(this,"Month")}function ce(){return ie(this.year(),this.month())}function de(e){return this._monthsParseExact?(l(this,"_monthsRegex")||pe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(l(this,"_monthsShortRegex")||(this._monthsShortRegex=ma),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)}function he(e){return this._monthsParseExact?(l(this,"_monthsRegex")||pe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(l(this,"_monthsRegex")||(this._monthsRegex=ga),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)}function pe(){function e(e,t){return t.length-e.length}var t,n,i=[],a=[],s=[];for(t=0;t<12;t++)n=c([2e3,t]),i.push(this.monthsShort(n,"")),a.push(this.months(n,"")),s.push(this.months(n,"")),s.push(this.monthsShort(n,""));for(i.sort(e),a.sort(e),s.sort(e),t=0;t<12;t++)i[t]=J(i[t]),a[t]=J(a[t]);for(t=0;t<24;t++)s[t]=J(s[t]);this._monthsRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")","i")}function fe(e){return me(e)?366:365}function me(e){return e%4==0&&e%100!=0||e%400==0}function ge(){return me(this.year())}function ve(e,t,n,i,a,s,r){var o=new Date(e,t,n,i,a,s,r);return e<100&&e>=0&&isFinite(o.getFullYear())&&o.setFullYear(e),o}function ye(e){var t=new Date(Date.UTC.apply(null,arguments));return e<100&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function we(e,t,n){var i=7+t-n;return-((7+ye(e,0,i).getUTCDay()-t)%7)+i-1}function be(e,t,n,i,a){var s,r,o=1+7*(t-1)+(7+n-i)%7+we(e,i,a);return o<=0?r=fe(s=e-1)+o:o>fe(e)?(s=e+1,r=o-fe(e)):(s=e,r=o),{year:s,dayOfYear:r}}function xe(e,t,n){var i,a,s=we(e.year(),t,n),r=Math.floor((e.dayOfYear()-s-1)/7)+1;return r<1?i=r+Ce(a=e.year()-1,t,n):r>Ce(e.year(),t,n)?(i=r-Ce(e.year(),t,n),a=e.year()+1):(a=e.year(),i=r),{week:i,year:a}}function Ce(e,t,n){var i=we(e,t,n),a=we(e+1,t,n);return(fe(e)-i+a)/7}function Te(e){return xe(e,this._week.dow,this._week.doy).week}function Se(){return this._week.dow}function ke(){return this._week.doy}function Me(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")}function De(e){var t=xe(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")}function _e(e,t){return"string"!=typeof e?e:isNaN(e)?(e=t.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function Ee(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}function Le(e,n){return e?t(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(n)?"format":"standalone"][e.day()]:t(this._weekdays)?this._weekdays:this._weekdays.standalone}function Pe(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort}function Ie(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin}function Fe(e,t,n){var i,a,s,r=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],i=0;i<7;++i)s=c([2e3,1]).day(i),this._minWeekdaysParse[i]=this.weekdaysMin(s,"").toLocaleLowerCase(),this._shortWeekdaysParse[i]=this.weekdaysShort(s,"").toLocaleLowerCase(),this._weekdaysParse[i]=this.weekdays(s,"").toLocaleLowerCase();return n?"dddd"===t?(a=da.call(this._weekdaysParse,r),-1!==a?a:null):"ddd"===t?(a=da.call(this._shortWeekdaysParse,r),-1!==a?a:null):(a=da.call(this._minWeekdaysParse,r),-1!==a?a:null):"dddd"===t?-1!==(a=da.call(this._weekdaysParse,r))?a:-1!==(a=da.call(this._shortWeekdaysParse,r))?a:(a=da.call(this._minWeekdaysParse,r),-1!==a?a:null):"ddd"===t?-1!==(a=da.call(this._shortWeekdaysParse,r))?a:-1!==(a=da.call(this._weekdaysParse,r))?a:(a=da.call(this._minWeekdaysParse,r),-1!==a?a:null):-1!==(a=da.call(this._minWeekdaysParse,r))?a:-1!==(a=da.call(this._weekdaysParse,r))?a:(a=da.call(this._shortWeekdaysParse,r),-1!==a?a:null)}function ze(e,t,n){var i,a,s;if(this._weekdaysParseExact)return Fe.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),i=0;i<7;i++){if(a=c([2e3,1]).day(i),n&&!this._fullWeekdaysParse[i]&&(this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(a,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(a,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(a,"").replace(".",".?")+"$","i")),this._weekdaysParse[i]||(s="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[i]=new RegExp(s.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[i].test(e))return i;if(n&&"ddd"===t&&this._shortWeekdaysParse[i].test(e))return i;if(n&&"dd"===t&&this._minWeekdaysParse[i].test(e))return i;if(!n&&this._weekdaysParse[i].test(e))return i}}function Ae(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=_e(e,this.localeData()),this.add(e-t,"d")):t}function Oe(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")}function Re(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=Ee(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7}function je(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||He.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(l(this,"_weekdaysRegex")||(this._weekdaysRegex=Ca),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)}function Ne(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||He.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(l(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ta),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function Ye(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||He.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(l(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Sa),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function He(){function e(e,t){return t.length-e.length}var t,n,i,a,s,r=[],o=[],l=[],u=[];for(t=0;t<7;t++)n=c([2e3,1]).day(t),i=this.weekdaysMin(n,""),a=this.weekdaysShort(n,""),s=this.weekdays(n,""),r.push(i),o.push(a),l.push(s),u.push(i),u.push(a),u.push(s);for(r.sort(e),o.sort(e),l.sort(e),u.sort(e),t=0;t<7;t++)o[t]=J(o[t]),l[t]=J(l[t]),u[t]=J(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+r.join("|")+")","i")}function We(){return this.hours()%12||12}function Be(){return this.hours()||24}function qe(e,t){G(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function Ge(e,t){return t._meridiemParse}function $e(e){return"p"===(e+"").toLowerCase().charAt(0)}function Ve(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"}function Xe(e){return e?e.toLowerCase().replace("_","-"):e}function Ue(e){for(var t,n,i,a,s=0;s<e.length;){for(t=(a=Xe(e[s]).split("-")).length,n=(n=Xe(e[s+1]))?n.split("-"):null;t>0;){if(i=Ze(a.slice(0,t).join("-")))return i;if(n&&n.length>=t&&b(a,n,!0)>=t-1)break;t--}s++}return null}function Ze(e){var t=null;if(!Ea[e]&&"undefined"!=typeof module&&module&&module.exports)try{t=ka._abbr,require("./locale/"+e),Qe(t)}catch(e){}return Ea[e]}function Qe(e,t){var n;return e&&(n=a(t)?et(e):Ke(e,t))&&(ka=n),ka._abbr}function Ke(e,t){if(null!==t){var n=_a;if(t.abbr=e,null!=Ea[e])T("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=Ea[e]._config;else if(null!=t.parentLocale){if(null==Ea[t.parentLocale])return La[t.parentLocale]||(La[t.parentLocale]=[]),La[t.parentLocale].push({name:e,config:t}),null;n=Ea[t.parentLocale]._config}return Ea[e]=new D(M(n,t)),La[e]&&La[e].forEach(function(e){Ke(e.name,e.config)}),Qe(e),Ea[e]}return delete Ea[e],null}function Je(e,t){if(null!=t){var n,i=_a;null!=Ea[e]&&(i=Ea[e]._config),(n=new D(t=M(i,t))).parentLocale=Ea[e],Ea[e]=n,Qe(e)}else null!=Ea[e]&&(null!=Ea[e].parentLocale?Ea[e]=Ea[e].parentLocale:null!=Ea[e]&&delete Ea[e]);return Ea[e]}function et(e){var n;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return ka;if(!t(e)){if(n=Ze(e))return n;e=[e]}return Ue(e)}function tt(){return Mi(Ea)}function nt(e){var t,n=e._a;return n&&-2===h(e).overflow&&(t=n[ia]<0||n[ia]>11?ia:n[aa]<1||n[aa]>ie(n[na],n[ia])?aa:n[sa]<0||n[sa]>24||24===n[sa]&&(0!==n[ra]||0!==n[oa]||0!==n[la])?sa:n[ra]<0||n[ra]>59?ra:n[oa]<0||n[oa]>59?oa:n[la]<0||n[la]>999?la:-1,h(e)._overflowDayOfYear&&(t<na||t>aa)&&(t=aa),h(e)._overflowWeeks&&-1===t&&(t=ua),h(e)._overflowWeekday&&-1===t&&(t=ca),h(e).overflow=t),e}function it(e){var t,n,i,a,s,r,o=e._i,l=Pa.exec(o)||Ia.exec(o);if(l){for(h(e).iso=!0,t=0,n=za.length;t<n;t++)if(za[t][1].exec(l[1])){a=za[t][0],i=!1!==za[t][2];break}if(null==a)return void(e._isValid=!1);if(l[3]){for(t=0,n=Aa.length;t<n;t++)if(Aa[t][1].exec(l[3])){s=(l[2]||" ")+Aa[t][0];break}if(null==s)return void(e._isValid=!1)}if(!i&&null!=s)return void(e._isValid=!1);if(l[4]){if(!Fa.exec(l[4]))return void(e._isValid=!1);r="Z"}e._f=a+(s||"")+(r||""),ct(e)}else e._isValid=!1}function at(e){var t,n,i,a,s,r,o,l,u={" GMT":" +0000"," EDT":" -0400"," EST":" -0500"," CDT":" -0500"," CST":" -0600"," MDT":" -0600"," MST":" -0700"," PDT":" -0700"," PST":" -0800"};if(t=e._i.replace(/\([^\)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s|\s$/g,""),n=Ra.exec(t)){if(i=n[1]?"ddd"+(5===n[1].length?", ":" "):"",a="D MMM "+(n[2].length>10?"YYYY ":"YY "),s="HH:mm"+(n[4]?":ss":""),n[1]){var c=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"][new Date(n[2]).getDay()];if(n[1].substr(0,3)!==c)return h(e).weekdayMismatch=!0,void(e._isValid=!1)}switch(n[5].length){case 2:o=0===l?" +0000":((l="YXWVUTSRQPONZABCDEFGHIKLM".indexOf(n[5][1].toUpperCase())-12)<0?" -":" +")+(""+l).replace(/^-?/,"0").match(/..$/)[0]+"00";break;case 4:o=u[n[5]];break;default:o=u[" GMT"]}n[5]=o,e._i=n.splice(1).join(""),r=" ZZ",e._f=i+a+s+r,ct(e),h(e).rfc2822=!0}else e._isValid=!1}function st(t){var n=Oa.exec(t._i);null===n?(it(t),!1===t._isValid&&(delete t._isValid,at(t),!1===t._isValid&&(delete t._isValid,e.createFromInputFallback(t)))):t._d=new Date(+n[1])}function rt(e,t,n){return null!=e?e:null!=t?t:n}function ot(t){var n=new Date(e.now());return t._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function lt(e){var t,n,i,a,s=[];if(!e._d){for(i=ot(e),e._w&&null==e._a[aa]&&null==e._a[ia]&&ut(e),null!=e._dayOfYear&&(a=rt(e._a[na],i[na]),(e._dayOfYear>fe(a)||0===e._dayOfYear)&&(h(e)._overflowDayOfYear=!0),n=ye(a,0,e._dayOfYear),e._a[ia]=n.getUTCMonth(),e._a[aa]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=i[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[sa]&&0===e._a[ra]&&0===e._a[oa]&&0===e._a[la]&&(e._nextDay=!0,e._a[sa]=0),e._d=(e._useUTC?ye:ve).apply(null,s),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[sa]=24)}}function ut(e){var t,n,i,a,s,r,o,l;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)s=1,r=4,n=rt(t.GG,e._a[na],xe(yt(),1,4).year),i=rt(t.W,1),((a=rt(t.E,1))<1||a>7)&&(l=!0);else{s=e._locale._week.dow,r=e._locale._week.doy;var u=xe(yt(),s,r);n=rt(t.gg,e._a[na],u.year),i=rt(t.w,u.week),null!=t.d?((a=t.d)<0||a>6)&&(l=!0):null!=t.e?(a=t.e+s,(t.e<0||t.e>6)&&(l=!0)):a=s}i<1||i>Ce(n,s,r)?h(e)._overflowWeeks=!0:null!=l?h(e)._overflowWeekday=!0:(o=be(n,i,a,s,r),e._a[na]=o.year,e._dayOfYear=o.dayOfYear)}function ct(t){if(t._f!==e.ISO_8601)if(t._f!==e.RFC_2822){t._a=[],h(t).empty=!0;var n,i,a,s,r,o=""+t._i,l=o.length,u=0;for(a=U(t._f,t._locale).match(Fi)||[],n=0;n<a.length;n++)s=a[n],(i=(o.match(Q(s,t))||[])[0])&&((r=o.substr(0,o.indexOf(i))).length>0&&h(t).unusedInput.push(r),o=o.slice(o.indexOf(i)+i.length),u+=i.length),Oi[s]?(i?h(t).empty=!1:h(t).unusedTokens.push(s),ne(s,i,t)):t._strict&&!i&&h(t).unusedTokens.push(s);h(t).charsLeftOver=l-u,o.length>0&&h(t).unusedInput.push(o),t._a[sa]<=12&&!0===h(t).bigHour&&t._a[sa]>0&&(h(t).bigHour=void 0),h(t).parsedDateParts=t._a.slice(0),h(t).meridiem=t._meridiem,t._a[sa]=dt(t._locale,t._a[sa],t._meridiem),lt(t),nt(t)}else at(t);else it(t)}function dt(e,t,n){var i;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((i=e.isPM(n))&&t<12&&(t+=12),i||12!==t||(t=0),t):t}function ht(e){var t,n,i,a,s;if(0===e._f.length)return h(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)s=0,t=m({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],ct(t),p(t)&&(s+=h(t).charsLeftOver,s+=10*h(t).unusedTokens.length,h(t).score=s,(null==i||s<i)&&(i=s,n=t));u(e,n||t)}function pt(e){if(!e._d){var t=O(e._i);e._a=o([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),lt(e)}}function ft(e){var t=new g(nt(mt(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function mt(e){var n=e._i,i=e._f;return e._locale=e._locale||et(e._l),null===n||void 0===i&&""===n?f({nullInput:!0}):("string"==typeof n&&(e._i=n=e._locale.preparse(n)),v(n)?new g(nt(n)):(r(n)?e._d=n:t(i)?ht(e):i?ct(e):gt(e),p(e)||(e._d=null),e))}function gt(i){var l=i._i;a(l)?i._d=new Date(e.now()):r(l)?i._d=new Date(l.valueOf()):"string"==typeof l?st(i):t(l)?(i._a=o(l.slice(0),function(e){return parseInt(e,10)}),lt(i)):n(l)?pt(i):s(l)?i._d=new Date(l):e.createFromInputFallback(i)}function vt(e,a,s,r,o){var l={};return!0!==s&&!1!==s||(r=s,s=void 0),(n(e)&&i(e)||t(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=o,l._l=s,l._i=e,l._f=a,l._strict=r,ft(l)}function yt(e,t,n,i){return vt(e,t,n,i,!1)}function wt(e,n){var i,a;if(1===n.length&&t(n[0])&&(n=n[0]),!n.length)return yt();for(i=n[0],a=1;a<n.length;++a)n[a].isValid()&&!n[a][e](i)||(i=n[a]);return i}function bt(){return wt("isBefore",[].slice.call(arguments,0))}function xt(){return wt("isAfter",[].slice.call(arguments,0))}function Ct(e){for(var t in e)if(-1===Ha.indexOf(t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,i=0;i<Ha.length;++i)if(e[Ha[i]]){if(n)return!1;parseFloat(e[Ha[i]])!==w(e[Ha[i]])&&(n=!0)}return!0}function Tt(){return this._isValid}function St(){return Bt(NaN)}function kt(e){var t=O(e),n=t.year||0,i=t.quarter||0,a=t.month||0,s=t.week||0,r=t.day||0,o=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=Ct(t),this._milliseconds=+c+1e3*u+6e4*l+1e3*o*60*60,this._days=+r+7*s,this._months=+a+3*i+12*n,this._data={},this._locale=et(),this._bubble()}function Mt(e){return e instanceof kt}function Dt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function _t(e,t){G(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+q(~~(e/60),2)+t+q(~~e%60,2)})}function Et(e,t){var n=(t||"").match(e);if(null===n)return null;var i=((n[n.length-1]||[])+"").match(Wa)||["-",0,0],a=60*i[1]+w(i[2]);return 0===a?0:"+"===i[0]?a:-a}function Lt(t,n){var i,a;return n._isUTC?(i=n.clone(),a=(v(t)||r(t)?t.valueOf():yt(t).valueOf())-i.valueOf(),i._d.setTime(i._d.valueOf()+a),e.updateOffset(i,!1),i):yt(t).local()}function Pt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function It(t,n,i){var a,s=this._offset||0;if(!this.isValid())return null!=t?this:NaN;if(null!=t){if("string"==typeof t){if(null===(t=Et(Qi,t)))return this}else Math.abs(t)<16&&!i&&(t*=60);return!this._isUTC&&n&&(a=Pt(this)),this._offset=t,this._isUTC=!0,null!=a&&this.add(a,"m"),s!==t&&(!n||this._changeInProgress?Xt(this,Bt(t-s,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,e.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?s:Pt(this)}function Ft(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function zt(e){return this.utcOffset(0,e)}function At(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Pt(this),"m")),this}function Ot(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Et(Zi,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this}function Rt(e){return!!this.isValid()&&(e=e?yt(e).utcOffset():0,(this.utcOffset()-e)%60==0)}function jt(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Nt(){if(!a(this._isDSTShifted))return this._isDSTShifted;var e={};if(m(e,this),(e=mt(e))._a){var t=e._isUTC?c(e._a):yt(e._a);this._isDSTShifted=this.isValid()&&b(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Yt(){return!!this.isValid()&&!this._isUTC}function Ht(){return!!this.isValid()&&this._isUTC}function Wt(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}function Bt(e,t){var n,i,a,r=e,o=null;return Mt(e)?r={ms:e._milliseconds,d:e._days,M:e._months}:s(e)?(r={},t?r[t]=e:r.milliseconds=e):(o=Ba.exec(e))?(n="-"===o[1]?-1:1,r={y:0,d:w(o[aa])*n,h:w(o[sa])*n,m:w(o[ra])*n,s:w(o[oa])*n,ms:w(Dt(1e3*o[la]))*n}):(o=qa.exec(e))?(n="-"===o[1]?-1:1,r={y:qt(o[2],n),M:qt(o[3],n),w:qt(o[4],n),d:qt(o[5],n),h:qt(o[6],n),m:qt(o[7],n),s:qt(o[8],n)}):null==r?r={}:"object"==typeof r&&("from"in r||"to"in r)&&(a=$t(yt(r.from),yt(r.to)),(r={}).ms=a.milliseconds,r.M=a.months),i=new kt(r),Mt(e)&&l(e,"_locale")&&(i._locale=e._locale),i}function qt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Gt(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function $t(e,t){var n;return e.isValid()&&t.isValid()?(t=Lt(t,e),e.isBefore(t)?n=Gt(e,t):((n=Gt(t,e)).milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function Vt(e,t){return function(n,i){var a,s;return null===i||isNaN(+i)||(T(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),s=n,n=i,i=s),n="string"==typeof n?+n:n,a=Bt(n,i),Xt(this,a,e),this}}function Xt(t,n,i,a){var s=n._milliseconds,r=Dt(n._days),o=Dt(n._months);t.isValid()&&(a=null==a||a,s&&t._d.setTime(t._d.valueOf()+s*i),r&&H(t,"Date",Y(t,"Date")+r*i),o&&le(t,Y(t,"Month")+o*i),a&&e.updateOffset(t,r||o))}function Ut(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"}function Zt(t,n){var i=t||yt(),a=Lt(i,this).startOf("day"),s=e.calendarFormat(this,a)||"sameElse",r=n&&(S(n[s])?n[s].call(this,i):n[s]);return this.format(r||this.localeData().calendar(s,this,yt(i)))}function Qt(){return new g(this)}function Kt(e,t){var n=v(e)?e:yt(e);return!(!this.isValid()||!n.isValid())&&(t=A(a(t)?"millisecond":t),"millisecond"===t?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())}function Jt(e,t){var n=v(e)?e:yt(e);return!(!this.isValid()||!n.isValid())&&(t=A(a(t)?"millisecond":t),"millisecond"===t?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())}function en(e,t,n,i){return i=i||"()",("("===i[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===i[1]?this.isBefore(t,n):!this.isAfter(t,n))}function tn(e,t){var n,i=v(e)?e:yt(e);return!(!this.isValid()||!i.isValid())&&(t=A(t||"millisecond"),"millisecond"===t?this.valueOf()===i.valueOf():(n=i.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))}function nn(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function an(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function sn(e,t,n){var i,a,s,r;return this.isValid()&&(i=Lt(e,this)).isValid()?(a=6e4*(i.utcOffset()-this.utcOffset()),t=A(t),"year"===t||"month"===t||"quarter"===t?(r=rn(this,i),"quarter"===t?r/=3:"year"===t&&(r/=12)):(s=this-i,r="second"===t?s/1e3:"minute"===t?s/6e4:"hour"===t?s/36e5:"day"===t?(s-a)/864e5:"week"===t?(s-a)/6048e5:s),n?r:y(r)):NaN}function rn(e,t){var n,i=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(i,"months");return n=t-a<0?(t-a)/(a-e.clone().add(i-1,"months")):(t-a)/(e.clone().add(i+1,"months")-a),-(i+n)||0}function on(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function ln(){if(!this.isValid())return null;var e=this.clone().utc();return e.year()<0||e.year()>9999?X(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):S(Date.prototype.toISOString)?this.toDate().toISOString():X(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function un(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',i=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a=t+'[")]';return this.format(n+i+"-MM-DD[T]HH:mm:ss.SSS"+a)}function cn(t){t||(t=this.isUtc()?e.defaultFormatUtc:e.defaultFormat);var n=X(this,t);return this.localeData().postformat(n)}function dn(e,t){return this.isValid()&&(v(e)&&e.isValid()||yt(e).isValid())?Bt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function hn(e){return this.from(yt(),e)}function pn(e,t){return this.isValid()&&(v(e)&&e.isValid()||yt(e).isValid())?Bt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function fn(e){return this.to(yt(),e)}function mn(e){var t;return void 0===e?this._locale._abbr:(null!=(t=et(e))&&(this._locale=t),this)}function gn(){return this._locale}function vn(e){switch(e=A(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function yn(e){return void 0===(e=A(e))||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))}function wn(){return this._d.valueOf()-6e4*(this._offset||0)}function bn(){return Math.floor(this.valueOf()/1e3)}function xn(){return new Date(this.valueOf())}function Cn(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function Tn(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function Sn(){return this.isValid()?this.toISOString():null}function kn(){return p(this)}function Mn(){return u({},h(this))}function Dn(){return h(this).overflow}function _n(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function En(e,t){G(0,[e,e.length],0,t)}function Ln(e){return zn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Pn(e){return zn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function In(){return Ce(this.year(),1,4)}function Fn(){var e=this.localeData()._week;return Ce(this.year(),e.dow,e.doy)}function zn(e,t,n,i,a){var s;return null==e?xe(this,i,a).year:(s=Ce(e,i,a),t>s&&(t=s),An.call(this,e,t,n,i,a))}function An(e,t,n,i,a){var s=be(e,t,n,i,a),r=ye(s.year,0,s.dayOfYear);return this.year(r.getUTCFullYear()),this.month(r.getUTCMonth()),this.date(r.getUTCDate()),this}function On(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function Rn(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")}function jn(e,t){t[la]=w(1e3*("0."+e))}function Nn(){return this._isUTC?"UTC":""}function Yn(){return this._isUTC?"Coordinated Universal Time":""}function Hn(e){return yt(1e3*e)}function Wn(){return yt.apply(null,arguments).parseZone()}function Bn(e){return e}function qn(e,t,n,i){var a=et(),s=c().set(i,t);return a[n](s,e)}function Gn(e,t,n){if(s(e)&&(t=e,e=void 0),e=e||"",null!=t)return qn(e,t,n,"month");var i,a=[];for(i=0;i<12;i++)a[i]=qn(e,i,n,"month");return a}function $n(e,t,n,i){"boolean"==typeof e?(s(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,s(t)&&(n=t,t=void 0),t=t||"");var a=et(),r=e?a._week.dow:0;if(null!=n)return qn(t,(n+r)%7,i,"day");var o,l=[];for(o=0;o<7;o++)l[o]=qn(t,(o+r)%7,i,"day");return l}function Vn(e,t){return Gn(e,t,"months")}function Xn(e,t){return Gn(e,t,"monthsShort")}function Un(e,t,n){return $n(e,t,n,"weekdays")}function Zn(e,t,n){return $n(e,t,n,"weekdaysShort")}function Qn(e,t,n){return $n(e,t,n,"weekdaysMin")}function Kn(){var e=this._data;return this._milliseconds=ts(this._milliseconds),this._days=ts(this._days),this._months=ts(this._months),e.milliseconds=ts(e.milliseconds),e.seconds=ts(e.seconds),e.minutes=ts(e.minutes),e.hours=ts(e.hours),e.months=ts(e.months),e.years=ts(e.years),this}function Jn(e,t,n,i){var a=Bt(t,n);return e._milliseconds+=i*a._milliseconds,e._days+=i*a._days,e._months+=i*a._months,e._bubble()}function ei(e,t){return Jn(this,e,t,1)}function ti(e,t){return Jn(this,e,t,-1)}function ni(e){return e<0?Math.floor(e):Math.ceil(e)}function ii(){var e,t,n,i,a,s=this._milliseconds,r=this._days,o=this._months,l=this._data;return s>=0&&r>=0&&o>=0||s<=0&&r<=0&&o<=0||(s+=864e5*ni(si(o)+r),r=0,o=0),l.milliseconds=s%1e3,e=y(s/1e3),l.seconds=e%60,t=y(e/60),l.minutes=t%60,n=y(t/60),l.hours=n%24,r+=y(n/24),a=y(ai(r)),o+=a,r-=ni(si(a)),i=y(o/12),o%=12,l.days=r,l.months=o,l.years=i,this}function ai(e){return 4800*e/146097}function si(e){return 146097*e/4800}function ri(e){if(!this.isValid())return NaN;var t,n,i=this._milliseconds;if("month"===(e=A(e))||"year"===e)return t=this._days+i/864e5,n=this._months+ai(t),"month"===e?n:n/12;switch(t=this._days+Math.round(si(this._months)),e){case"week":return t/7+i/6048e5;case"day":return t+i/864e5;case"hour":return 24*t+i/36e5;case"minute":return 1440*t+i/6e4;case"second":return 86400*t+i/1e3;case"millisecond":return Math.floor(864e5*t)+i;default:throw new Error("Unknown unit "+e)}}function oi(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*w(this._months/12):NaN}function li(e){return function(){return this.as(e)}}function ui(e){return e=A(e),this.isValid()?this[e+"s"]():NaN}function ci(e){return function(){return this.isValid()?this._data[e]:NaN}}function di(){return y(this.days()/7)}function hi(e,t,n,i,a){return a.relativeTime(t||1,!!n,e,i)}function pi(e,t,n){var i=Bt(e).abs(),a=vs(i.as("s")),s=vs(i.as("m")),r=vs(i.as("h")),o=vs(i.as("d")),l=vs(i.as("M")),u=vs(i.as("y")),c=a<=ys.ss&&["s",a]||a<ys.s&&["ss",a]||s<=1&&["m"]||s<ys.m&&["mm",s]||r<=1&&["h"]||r<ys.h&&["hh",r]||o<=1&&["d"]||o<ys.d&&["dd",o]||l<=1&&["M"]||l<ys.M&&["MM",l]||u<=1&&["y"]||["yy",u];return c[2]=t,c[3]=+e>0,c[4]=n,hi.apply(null,c)}function fi(e){return void 0===e?vs:"function"==typeof e&&(vs=e,!0)}function mi(e,t){return void 0!==ys[e]&&(void 0===t?ys[e]:(ys[e]=t,"s"===e&&(ys.ss=t-1),!0))}function gi(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=pi(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)}function vi(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,i=ws(this._milliseconds)/1e3,a=ws(this._days),s=ws(this._months);t=y((e=y(i/60))/60),i%=60,e%=60;var r=n=y(s/12),o=s%=12,l=a,u=t,c=e,d=i,h=this.asSeconds();return h?(h<0?"-":"")+"P"+(r?r+"Y":"")+(o?o+"M":"")+(l?l+"D":"")+(u||c||d?"T":"")+(u?u+"H":"")+(c?c+"M":"")+(d?d+"S":""):"P0D"}var yi,wi,bi=wi=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,i=0;i<n;i++)if(i in t&&e.call(this,t[i],i,t))return!0;return!1},xi=e.momentProperties=[],Ci=!1,Ti={};e.suppressDeprecationWarnings=!1,e.deprecationHandler=null;var Si,ki,Mi=Si=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)l(e,t)&&n.push(t);return n},Di={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},_i={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},Ei=/\d{1,2}/,Li={future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Pi={},Ii={},Fi=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,zi=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Ai={},Oi={},Ri=/\d/,ji=/\d\d/,Ni=/\d{3}/,Yi=/\d{4}/,Hi=/[+-]?\d{6}/,Wi=/\d\d?/,Bi=/\d\d\d\d?/,qi=/\d\d\d\d\d\d?/,Gi=/\d{1,3}/,$i=/\d{1,4}/,Vi=/[+-]?\d{1,6}/,Xi=/\d+/,Ui=/[+-]?\d+/,Zi=/Z|[+-]\d\d:?\d\d/gi,Qi=/Z|[+-]\d\d(?::?\d\d)?/gi,Ki=/[+-]?\d+(\.\d{1,3})?/,Ji=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,ea={},ta={},na=0,ia=1,aa=2,sa=3,ra=4,oa=5,la=6,ua=7,ca=8,da=ki=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1};G("M",["MM",2],"Mo",function(){return this.month()+1}),G("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),G("MMMM",0,0,function(e){return this.localeData().months(this,e)}),z("month","M"),R("month",8),Z("M",Wi),Z("MM",Wi,ji),Z("MMM",function(e,t){return t.monthsShortRegex(e)}),Z("MMMM",function(e,t){return t.monthsRegex(e)}),ee(["M","MM"],function(e,t){t[ia]=w(e)-1}),ee(["MMM","MMMM"],function(e,t,n,i){var a=n._locale.monthsParse(e,i,n._strict);null!=a?t[ia]=a:h(n).invalidMonth=e});var ha=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,pa="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),fa="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),ma=Ji,ga=Ji;G("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),G(0,["YY",2],0,function(){return this.year()%100}),G(0,["YYYY",4],0,"year"),G(0,["YYYYY",5],0,"year"),G(0,["YYYYYY",6,!0],0,"year"),z("year","y"),R("year",1),Z("Y",Ui),Z("YY",Wi,ji),Z("YYYY",$i,Yi),Z("YYYYY",Vi,Hi),Z("YYYYYY",Vi,Hi),ee(["YYYYY","YYYYYY"],na),ee("YYYY",function(t,n){n[na]=2===t.length?e.parseTwoDigitYear(t):w(t)}),ee("YY",function(t,n){n[na]=e.parseTwoDigitYear(t)}),ee("Y",function(e,t){t[na]=parseInt(e,10)}),e.parseTwoDigitYear=function(e){return w(e)+(w(e)>68?1900:2e3)};var va=N("FullYear",!0);G("w",["ww",2],"wo","week"),G("W",["WW",2],"Wo","isoWeek"),z("week","w"),z("isoWeek","W"),R("week",5),R("isoWeek",5),Z("w",Wi),Z("ww",Wi,ji),Z("W",Wi),Z("WW",Wi,ji),te(["w","ww","W","WW"],function(e,t,n,i){t[i.substr(0,1)]=w(e)});var ya={dow:0,doy:6};G("d",0,"do","day"),G("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),G("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),G("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),G("e",0,0,"weekday"),G("E",0,0,"isoWeekday"),z("day","d"),z("weekday","e"),z("isoWeekday","E"),R("day",11),R("weekday",11),R("isoWeekday",11),Z("d",Wi),Z("e",Wi),Z("E",Wi),Z("dd",function(e,t){return t.weekdaysMinRegex(e)}),Z("ddd",function(e,t){return t.weekdaysShortRegex(e)}),Z("dddd",function(e,t){return t.weekdaysRegex(e)}),te(["dd","ddd","dddd"],function(e,t,n,i){var a=n._locale.weekdaysParse(e,i,n._strict);null!=a?t.d=a:h(n).invalidWeekday=e}),te(["d","e","E"],function(e,t,n,i){t[i]=w(e)});var wa="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ba="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),xa="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ca=Ji,Ta=Ji,Sa=Ji;G("H",["HH",2],0,"hour"),G("h",["hh",2],0,We),G("k",["kk",2],0,Be),G("hmm",0,0,function(){return""+We.apply(this)+q(this.minutes(),2)}),G("hmmss",0,0,function(){return""+We.apply(this)+q(this.minutes(),2)+q(this.seconds(),2)}),G("Hmm",0,0,function(){return""+this.hours()+q(this.minutes(),2)}),G("Hmmss",0,0,function(){return""+this.hours()+q(this.minutes(),2)+q(this.seconds(),2)}),qe("a",!0),qe("A",!1),z("hour","h"),R("hour",13),Z("a",Ge),Z("A",Ge),Z("H",Wi),Z("h",Wi),Z("k",Wi),Z("HH",Wi,ji),Z("hh",Wi,ji),Z("kk",Wi,ji),Z("hmm",Bi),Z("hmmss",qi),Z("Hmm",Bi),Z("Hmmss",qi),ee(["H","HH"],sa),ee(["k","kk"],function(e,t,n){var i=w(e);t[sa]=24===i?0:i}),ee(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),ee(["h","hh"],function(e,t,n){t[sa]=w(e),h(n).bigHour=!0}),ee("hmm",function(e,t,n){var i=e.length-2;t[sa]=w(e.substr(0,i)),t[ra]=w(e.substr(i)),h(n).bigHour=!0}),ee("hmmss",function(e,t,n){var i=e.length-4,a=e.length-2;t[sa]=w(e.substr(0,i)),t[ra]=w(e.substr(i,2)),t[oa]=w(e.substr(a)),h(n).bigHour=!0}),ee("Hmm",function(e,t,n){var i=e.length-2;t[sa]=w(e.substr(0,i)),t[ra]=w(e.substr(i))}),ee("Hmmss",function(e,t,n){var i=e.length-4,a=e.length-2;t[sa]=w(e.substr(0,i)),t[ra]=w(e.substr(i,2)),t[oa]=w(e.substr(a))});var ka,Ma=/[ap]\.?m?\.?/i,Da=N("Hours",!0),_a={calendar:Di,longDateFormat:_i,invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:Ei,relativeTime:Li,months:pa,monthsShort:fa,week:ya,weekdays:wa,weekdaysMin:xa,weekdaysShort:ba,meridiemParse:Ma},Ea={},La={},Pa=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Ia=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Fa=/Z|[+-]\d\d(?::?\d\d)?/,za=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Aa=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Oa=/^\/?Date\((\-?\d+)/i,Ra=/^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;e.createFromInputFallback=C("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),e.ISO_8601=function(){},e.RFC_2822=function(){};var ja=C("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=yt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:f()}),Na=C("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=yt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:f()}),Ya=function(){return Date.now?Date.now():+new Date},Ha=["year","quarter","month","week","day","hour","minute","second","millisecond"];_t("Z",":"),_t("ZZ",""),Z("Z",Qi),Z("ZZ",Qi),ee(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Et(Qi,e)});var Wa=/([\+\-]|\d\d)/gi;e.updateOffset=function(){};var Ba=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,qa=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;Bt.fn=kt.prototype,Bt.invalid=St;var Ga=Vt(1,"add"),$a=Vt(-1,"subtract");e.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",e.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Va=C("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});G(0,["gg",2],0,function(){return this.weekYear()%100}),G(0,["GG",2],0,function(){return this.isoWeekYear()%100}),En("gggg","weekYear"),En("ggggg","weekYear"),En("GGGG","isoWeekYear"),En("GGGGG","isoWeekYear"),z("weekYear","gg"),z("isoWeekYear","GG"),R("weekYear",1),R("isoWeekYear",1),Z("G",Ui),Z("g",Ui),Z("GG",Wi,ji),Z("gg",Wi,ji),Z("GGGG",$i,Yi),Z("gggg",$i,Yi),Z("GGGGG",Vi,Hi),Z("ggggg",Vi,Hi),te(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,i){t[i.substr(0,2)]=w(e)}),te(["gg","GG"],function(t,n,i,a){n[a]=e.parseTwoDigitYear(t)}),G("Q",0,"Qo","quarter"),z("quarter","Q"),R("quarter",7),Z("Q",Ri),ee("Q",function(e,t){t[ia]=3*(w(e)-1)}),G("D",["DD",2],"Do","date"),z("date","D"),R("date",9),Z("D",Wi),Z("DD",Wi,ji),Z("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),ee(["D","DD"],aa),ee("Do",function(e,t){t[aa]=w(e.match(Wi)[0],10)});var Xa=N("Date",!0);G("DDD",["DDDD",3],"DDDo","dayOfYear"),z("dayOfYear","DDD"),R("dayOfYear",4),Z("DDD",Gi),Z("DDDD",Ni),ee(["DDD","DDDD"],function(e,t,n){n._dayOfYear=w(e)}),G("m",["mm",2],0,"minute"),z("minute","m"),R("minute",14),Z("m",Wi),Z("mm",Wi,ji),ee(["m","mm"],ra);var Ua=N("Minutes",!1);G("s",["ss",2],0,"second"),z("second","s"),R("second",15),Z("s",Wi),Z("ss",Wi,ji),ee(["s","ss"],oa);var Za=N("Seconds",!1);G("S",0,0,function(){return~~(this.millisecond()/100)}),G(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),G(0,["SSS",3],0,"millisecond"),G(0,["SSSS",4],0,function(){return 10*this.millisecond()}),G(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),G(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),G(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),G(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),G(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),z("millisecond","ms"),R("millisecond",16),Z("S",Gi,Ri),Z("SS",Gi,ji),Z("SSS",Gi,Ni);var Qa;for(Qa="SSSS";Qa.length<=9;Qa+="S")Z(Qa,Xi);for(Qa="S";Qa.length<=9;Qa+="S")ee(Qa,jn);var Ka=N("Milliseconds",!1);G("z",0,0,"zoneAbbr"),G("zz",0,0,"zoneName");var Ja=g.prototype;Ja.add=Ga,Ja.calendar=Zt,Ja.clone=Qt,Ja.diff=sn,Ja.endOf=yn,Ja.format=cn,Ja.from=dn,Ja.fromNow=hn,Ja.to=pn,Ja.toNow=fn,Ja.get=W,Ja.invalidAt=Dn,Ja.isAfter=Kt,Ja.isBefore=Jt,Ja.isBetween=en,Ja.isSame=tn,Ja.isSameOrAfter=nn,Ja.isSameOrBefore=an,Ja.isValid=kn,Ja.lang=Va,Ja.locale=mn,Ja.localeData=gn,Ja.max=Na,Ja.min=ja,Ja.parsingFlags=Mn,Ja.set=B,Ja.startOf=vn,Ja.subtract=$a,Ja.toArray=Cn,Ja.toObject=Tn,Ja.toDate=xn,Ja.toISOString=ln,Ja.inspect=un,Ja.toJSON=Sn,Ja.toString=on,Ja.unix=bn,Ja.valueOf=wn,Ja.creationData=_n,Ja.year=va,Ja.isLeapYear=ge,Ja.weekYear=Ln,Ja.isoWeekYear=Pn,Ja.quarter=Ja.quarters=On,Ja.month=ue,Ja.daysInMonth=ce,Ja.week=Ja.weeks=Me,Ja.isoWeek=Ja.isoWeeks=De,Ja.weeksInYear=Fn,Ja.isoWeeksInYear=In,Ja.date=Xa,Ja.day=Ja.days=Ae,Ja.weekday=Oe,Ja.isoWeekday=Re,Ja.dayOfYear=Rn,Ja.hour=Ja.hours=Da,Ja.minute=Ja.minutes=Ua,Ja.second=Ja.seconds=Za,Ja.millisecond=Ja.milliseconds=Ka,Ja.utcOffset=It,Ja.utc=zt,Ja.local=At,Ja.parseZone=Ot,Ja.hasAlignedHourOffset=Rt,Ja.isDST=jt,Ja.isLocal=Yt,Ja.isUtcOffset=Ht,Ja.isUtc=Wt,Ja.isUTC=Wt,Ja.zoneAbbr=Nn,Ja.zoneName=Yn,Ja.dates=C("dates accessor is deprecated. Use date instead.",Xa),Ja.months=C("months accessor is deprecated. Use month instead",ue),Ja.years=C("years accessor is deprecated. Use year instead",va),Ja.zone=C("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",Ft),Ja.isDSTShifted=C("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",Nt);var es=D.prototype;es.calendar=_,es.longDateFormat=E,es.invalidDate=L,es.ordinal=P,es.preparse=Bn,es.postformat=Bn,es.relativeTime=I,es.pastFuture=F,es.set=k,es.months=ae,es.monthsShort=se,es.monthsParse=oe,es.monthsRegex=he,es.monthsShortRegex=de,es.week=Te,es.firstDayOfYear=ke,es.firstDayOfWeek=Se,es.weekdays=Le,es.weekdaysMin=Ie,es.weekdaysShort=Pe,es.weekdaysParse=ze,es.weekdaysRegex=je,es.weekdaysShortRegex=Ne,es.weekdaysMinRegex=Ye,es.isPM=$e,es.meridiem=Ve,Qe("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===w(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),e.lang=C("moment.lang is deprecated. Use moment.locale instead.",Qe),e.langData=C("moment.langData is deprecated. Use moment.localeData instead.",et);var ts=Math.abs,ns=li("ms"),is=li("s"),as=li("m"),ss=li("h"),rs=li("d"),os=li("w"),ls=li("M"),us=li("y"),cs=ci("milliseconds"),ds=ci("seconds"),hs=ci("minutes"),ps=ci("hours"),fs=ci("days"),ms=ci("months"),gs=ci("years"),vs=Math.round,ys={ss:44,s:45,m:45,h:22,d:26,M:11},ws=Math.abs,bs=kt.prototype;return bs.isValid=Tt,bs.abs=Kn,bs.add=ei,bs.subtract=ti,bs.as=ri,bs.asMilliseconds=ns,bs.asSeconds=is,bs.asMinutes=as,bs.asHours=ss,bs.asDays=rs,bs.asWeeks=os,bs.asMonths=ls,bs.asYears=us,bs.valueOf=oi,bs._bubble=ii,bs.get=ui,bs.milliseconds=cs,bs.seconds=ds,bs.minutes=hs,bs.hours=ps,bs.days=fs,bs.weeks=di,bs.months=ms,bs.years=gs,bs.humanize=gi,bs.toISOString=vi,bs.toString=vi,bs.toJSON=vi,bs.locale=mn,bs.localeData=gn,bs.toIsoString=C("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",vi),bs.lang=Va,G("X",0,0,"unix"),G("x",0,0,"valueOf"),Z("x",Ui),Z("X",Ki),ee("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),ee("x",function(e,t,n){n._d=new Date(w(e))}),e.version="2.18.1",function(e){yi=e}(yt),e.fn=Ja,e.min=bt,e.max=xt,e.now=Ya,e.utc=c,e.unix=Hn,e.months=Vn,e.isDate=r,e.locale=Qe,e.invalid=f,e.duration=Bt,e.isMoment=v,e.weekdays=Un,e.parseZone=Wn,e.localeData=et,e.isDuration=Mt,e.monthsShort=Xn,e.weekdaysMin=Qn,e.defineLocale=Ke,e.updateLocale=Je,e.locales=tt,e.weekdaysShort=Zn,e.normalizeUnits=A,e.relativeTimeRounding=fi,e.relativeTimeThreshold=mi,e.calendarFormat=Ut,e.prototype=Ja,e}),function(e,t){"use strict";var n;if("object"==typeof exports){try{n=require("moment")}catch(e){}module.exports=t(n)}else"function"==typeof define&&define.amd?define(function(e){try{n=e("moment")}catch(e){}return t(n)}):e.Pikaday=t(e.moment)}(this,function(e){"use strict";var t="function"==typeof e,n=!!window.addEventListener,i=window.document,a=window.setTimeout,s=function(e,t,i,a){n?e.addEventListener(t,i,!!a):e.attachEvent("on"+t,i)},r=function(e,t,i,a){n?e.removeEventListener(t,i,!!a):e.detachEvent("on"+t,i)},o=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},l=function(e,t){return-1!==(" "+e.className+" ").indexOf(" "+t+" ")},u=function(e,t){l(e,t)||(e.className=""===e.className?t:e.className+" "+t)},c=function(e,t){e.className=o((" "+e.className+" ").replace(" "+t+" "," "))},d=function(e){return/Array/.test(Object.prototype.toString.call(e))},h=function(e){return/Date/.test(Object.prototype.toString.call(e))&&!isNaN(e.getTime())},p=function(e){var t=e.getDay();return 0===t||6===t},f=function(e){return e%4==0&&e%100!=0||e%400==0},m=function(e,t){return[31,f(e)?29:28,31,30,31,30,31,31,30,31,30,31][t]},g=function(e){h(e)&&e.setHours(0,0,0,0)},v=function(e,t){return e.getTime()===t.getTime()},y=function(e,t,n){var i,a;for(i in t)(a=void 0!==e[i])&&"object"==typeof t[i]&&null!==t[i]&&void 0===t[i].nodeName?h(t[i])?n&&(e[i]=new Date(t[i].getTime())):d(t[i])?n&&(e[i]=t[i].slice(0)):e[i]=y({},t[i],n):!n&&a||(e[i]=t[i]);return e},w=function(e,t,n){var a;i.createEvent?((a=i.createEvent("HTMLEvents")).initEvent(t,!0,!1),a=y(a,n),e.dispatchEvent(a)):i.createEventObject&&(a=i.createEventObject(),a=y(a,n),e.fireEvent("on"+t,a))},b=function(e){return e.month<0&&(e.year-=Math.ceil(Math.abs(e.month)/12),e.month+=12),e.month>11&&(e.year+=Math.floor(Math.abs(e.month)/12),e.month-=12),e},x={field:null,bound:void 0,position:"bottom left",reposition:!0,format:"YYYY-MM-DD",toString:null,parse:null,defaultDate:null,setDefaultDate:!1,firstDay:0,formatStrict:!1,minDate:null,maxDate:null,yearRange:10,showWeekNumber:!1,pickWholeWeek:!1,minYear:0,maxYear:9999,minMonth:void 0,maxMonth:void 0,startRange:null,endRange:null,isRTL:!1,yearSuffix:"",showMonthAfterYear:!1,showDaysInNextAndPreviousMonths:!1,enableSelectionDaysInNextAndPreviousMonths:!1,numberOfMonths:1,mainCalendar:"left",container:void 0,blurFieldOnSelect:!0,i18n:{previousMonth:"Previous Month",nextMonth:"Next Month",months:["January","February","March","April","May","June","July","August","September","October","November","December"],weekdays:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],weekdaysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"]},theme:null,events:[],onSelect:null,onOpen:null,onClose:null,onDraw:null},C=function(e,t,n){for(t+=e.firstDay;t>=7;)t-=7;return n?e.i18n.weekdaysShort[t]:e.i18n.weekdays[t]},T=function(e){var t=[],n="false";if(e.isEmpty){if(!e.showDaysInNextAndPreviousMonths)return'<td class="is-empty"></td>';t.push("is-outside-current-month"),e.enableSelectionDaysInNextAndPreviousMonths||t.push("is-selection-disabled")}return e.isDisabled&&t.push("is-disabled"),e.isToday&&t.push("is-today"),e.isSelected&&(t.push("is-selected"),n="true"),e.hasEvent&&t.push("has-event"),e.isInRange&&t.push("is-inrange"),e.isStartRange&&t.push("is-startrange"),e.isEndRange&&t.push("is-endrange"),'<td data-day="'+e.day+'" class="'+t.join(" ")+'" aria-selected="'+n+'"><button class="pika-button pika-day" type="button" data-pika-year="'+e.year+'" data-pika-month="'+e.month+'" data-pika-day="'+e.day+'">'+e.day+"</button></td>"},S=function(e,t,n){var i=new Date(n,0,1);return'<td class="pika-week">'+Math.ceil(((new Date(n,t,e)-i)/864e5+i.getDay()+1)/7)+"</td>"},k=function(e,t,n,i){return'<tr class="pika-row'+(n?" pick-whole-week":"")+(i?" is-selected":"")+'">'+(t?e.reverse():e).join("")+"</tr>"},M=function(e){return"<tbody>"+e.join("")+"</tbody>"},D=function(e){var t,n=[];for(e.showWeekNumber&&n.push("<th></th>"),t=0;t<7;t++)n.push('<th scope="col"><abbr title="'+C(e,t)+'">'+C(e,t,!0)+"</abbr></th>");return"<thead><tr>"+(e.isRTL?n.reverse():n).join("")+"</tr></thead>"},_=function(e,t,n,i,a,s){var r,o,l,u,c,h=e._o,p=n===h.minYear,f=n===h.maxYear,m='<div id="'+s+'" class="pika-title" role="heading" aria-live="assertive">',g=!0,v=!0;for(l=[],r=0;r<12;r++)l.push('<option value="'+(n===a?r-t:12+r-t)+'"'+(r===i?' selected="selected"':"")+(p&&r<h.minMonth||f&&r>h.maxMonth?'disabled="disabled"':"")+">"+h.i18n.months[r]+"</option>");for(u='<div class="pika-label">'+h.i18n.months[i]+'<select class="pika-select pika-select-month" tabindex="-1">'+l.join("")+"</select></div>",d(h.yearRange)?(r=h.yearRange[0],o=h.yearRange[1]+1):(r=n-h.yearRange,o=1+n+h.yearRange),l=[];r<o&&r<=h.maxYear;r++)r>=h.minYear&&l.push('<option value="'+r+'"'+(r===n?' selected="selected"':"")+">"+r+"</option>");return c='<div class="pika-label">'+n+h.yearSuffix+'<select class="pika-select pika-select-year" tabindex="-1">'+l.join("")+"</select></div>",h.showMonthAfterYear?m+=c+u:m+=u+c,p&&(0===i||h.minMonth>=i)&&(g=!1),f&&(11===i||h.maxMonth<=i)&&(v=!1),0===t&&(m+='<button class="pika-prev'+(g?"":" is-disabled")+'" type="button">'+h.i18n.previousMonth+"</button>"),t===e._o.numberOfMonths-1&&(m+='<button class="pika-next'+(v?"":" is-disabled")+'" type="button">'+h.i18n.nextMonth+"</button>"),m+="</div>"},E=function(e,t,n){return'<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="'+n+'">'+D(e)+M(t)+"</table>"},L=function(r){var o=this,u=o.config(r);o._onMouseDown=function(e){if(o._v){var t=(e=e||window.event).target||e.srcElement;if(t)if(l(t,"is-disabled")||(!l(t,"pika-button")||l(t,"is-empty")||l(t.parentNode,"is-disabled")?l(t,"pika-prev")?o.prevMonth():l(t,"pika-next")&&o.nextMonth():(o.setDate(new Date(t.getAttribute("data-pika-year"),t.getAttribute("data-pika-month"),t.getAttribute("data-pika-day"))),u.bound&&a(function(){o.hide(),u.blurFieldOnSelect&&u.field&&u.field.blur()},100))),l(t,"pika-select"))o._c=!0;else{if(!e.preventDefault)return e.returnValue=!1,!1;e.preventDefault()}}},o._onChange=function(e){var t=(e=e||window.event).target||e.srcElement;t&&(l(t,"pika-select-month")?o.gotoMonth(t.value):l(t,"pika-select-year")&&o.gotoYear(t.value))},o._onKeyChange=function(e){if(e=e||window.event,o.isVisible())switch(e.keyCode){case 13:case 27:u.field&&u.field.blur();break;case 37:e.preventDefault(),o.adjustDate("subtract",1);break;case 38:o.adjustDate("subtract",7);break;case 39:o.adjustDate("add",1);break;case 40:o.adjustDate("add",7)}},o._onInputChange=function(n){var i;n.firedBy!==o&&(i=u.parse?u.parse(u.field.value,u.format):t?(i=e(u.field.value,u.format,u.formatStrict))&&i.isValid()?i.toDate():null:new Date(Date.parse(u.field.value)),h(i)&&o.setDate(i),o._v||o.show())},o._onInputFocus=function(){o.show()},o._onInputClick=function(){o.show()},o._onInputBlur=function(){var e=i.activeElement;do{if(l(e,"pika-single"))return}while(e=e.parentNode);o._c||(o._b=a(function(){o.hide()},50)),o._c=!1},o._onClick=function(e){var t=(e=e||window.event).target||e.srcElement,i=t;if(t){!n&&l(t,"pika-select")&&(t.onchange||(t.setAttribute("onchange","return;"),s(t,"change",o._onChange)));do{if(l(i,"pika-single")||i===u.trigger)return}while(i=i.parentNode);o._v&&t!==u.trigger&&i!==u.trigger&&o.hide()}},o.el=i.createElement("div"),o.el.className="pika-single"+(u.isRTL?" is-rtl":"")+(u.theme?" "+u.theme:""),s(o.el,"mousedown",o._onMouseDown,!0),s(o.el,"touchend",o._onMouseDown,!0),s(o.el,"change",o._onChange),s(i,"keydown",o._onKeyChange),u.field&&(u.container?u.container.appendChild(o.el):u.bound?i.body.appendChild(o.el):u.field.parentNode.insertBefore(o.el,u.field.nextSibling),s(u.field,"change",o._onInputChange),u.defaultDate||(t&&u.field.value?u.defaultDate=e(u.field.value,u.format).toDate():u.defaultDate=new Date(Date.parse(u.field.value)),u.setDefaultDate=!0));var c=u.defaultDate;h(c)?u.setDefaultDate?o.setDate(c,!0):o.gotoDate(c):o.gotoDate(new Date),u.bound?(this.hide(),o.el.className+=" is-bound",s(u.trigger,"click",o._onInputClick),s(u.trigger,"focus",o._onInputFocus),s(u.trigger,"blur",o._onInputBlur)):this.show()};return L.prototype={config:function(e){this._o||(this._o=y({},x,!0));var t=y(this._o,e,!0);t.isRTL=!!t.isRTL,t.field=t.field&&t.field.nodeName?t.field:null,t.theme="string"==typeof t.theme&&t.theme?t.theme:null,t.bound=!!(void 0!==t.bound?t.field&&t.bound:t.field),t.trigger=t.trigger&&t.trigger.nodeName?t.trigger:t.field,t.disableWeekends=!!t.disableWeekends,t.disableDayFn="function"==typeof t.disableDayFn?t.disableDayFn:null;var n=parseInt(t.numberOfMonths,10)||1;if(t.numberOfMonths=n>4?4:n,h(t.minDate)||(t.minDate=!1),h(t.maxDate)||(t.maxDate=!1),t.minDate&&t.maxDate&&t.maxDate<t.minDate&&(t.maxDate=t.minDate=!1),t.minDate&&this.setMinDate(t.minDate),t.maxDate&&this.setMaxDate(t.maxDate),d(t.yearRange)){var i=(new Date).getFullYear()-10;t.yearRange[0]=parseInt(t.yearRange[0],10)||i,t.yearRange[1]=parseInt(t.yearRange[1],10)||i}else t.yearRange=Math.abs(parseInt(t.yearRange,10))||x.yearRange,t.yearRange>100&&(t.yearRange=100);return t},toString:function(n){return n=n||this._o.format,h(this._d)?this._o.toString?this._o.toString(this._d,n):t?e(this._d).format(n):this._d.toDateString():""},getMoment:function(){return t?e(this._d):null},setMoment:function(n,i){t&&e.isMoment(n)&&this.setDate(n.toDate(),i)},getDate:function(){return h(this._d)?new Date(this._d.getTime()):null},setDate:function(e,t){if(!e)return this._d=null,this._o.field&&(this._o.field.value="",w(this._o.field,"change",{firedBy:this})),this.draw();if("string"==typeof e&&(e=new Date(Date.parse(e))),h(e)){var n=this._o.minDate,i=this._o.maxDate;h(n)&&e<n?e=n:h(i)&&e>i&&(e=i),this._d=new Date(e.getTime()),g(this._d),this.gotoDate(this._d),this._o.field&&(this._o.field.value=this.toString(),w(this._o.field,"change",{firedBy:this})),t||"function"!=typeof this._o.onSelect||this._o.onSelect.call(this,this.getDate())}},gotoDate:function(e){var t=!0;if(h(e)){if(this.calendars){var n=new Date(this.calendars[0].year,this.calendars[0].month,1),i=new Date(this.calendars[this.calendars.length-1].year,this.calendars[this.calendars.length-1].month,1),a=e.getTime();i.setMonth(i.getMonth()+1),i.setDate(i.getDate()-1),t=a<n.getTime()||i.getTime()<a}t&&(this.calendars=[{month:e.getMonth(),year:e.getFullYear()}],"right"===this._o.mainCalendar&&(this.calendars[0].month+=1-this._o.numberOfMonths)),this.adjustCalendars()}},adjustDate:function(e,t){var n,i=this.getDate()||new Date,a=24*parseInt(t)*60*60*1e3;"add"===e?n=new Date(i.valueOf()+a):"subtract"===e&&(n=new Date(i.valueOf()-a)),this.setDate(n)},adjustCalendars:function(){this.calendars[0]=b(this.calendars[0]);for(var e=1;e<this._o.numberOfMonths;e++)this.calendars[e]=b({month:this.calendars[0].month+e,year:this.calendars[0].year});this.draw()},gotoToday:function(){this.gotoDate(new Date)},gotoMonth:function(e){isNaN(e)||(this.calendars[0].month=parseInt(e,10),this.adjustCalendars())},nextMonth:function(){this.calendars[0].month++,this.adjustCalendars()},prevMonth:function(){this.calendars[0].month--,this.adjustCalendars()},gotoYear:function(e){isNaN(e)||(this.calendars[0].year=parseInt(e,10),this.adjustCalendars())},setMinDate:function(e){e instanceof Date?(g(e),this._o.minDate=e,this._o.minYear=e.getFullYear(),this._o.minMonth=e.getMonth()):(this._o.minDate=x.minDate,this._o.minYear=x.minYear,this._o.minMonth=x.minMonth,this._o.startRange=x.startRange),this.draw()},setMaxDate:function(e){e instanceof Date?(g(e),this._o.maxDate=e,this._o.maxYear=e.getFullYear(),this._o.maxMonth=e.getMonth()):(this._o.maxDate=x.maxDate,this._o.maxYear=x.maxYear,this._o.maxMonth=x.maxMonth,this._o.endRange=x.endRange),this.draw()},setStartRange:function(e){this._o.startRange=e},setEndRange:function(e){this._o.endRange=e},draw:function(e){if(this._v||e){var t,n=this._o,i=n.minYear,s=n.maxYear,r=n.minMonth,o=n.maxMonth,l="";this._y<=i&&(this._y=i,!isNaN(r)&&this._m<r&&(this._m=r)),this._y>=s&&(this._y=s,!isNaN(o)&&this._m>o&&(this._m=o)),t="pika-title-"+Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,2);for(var u=0;u<n.numberOfMonths;u++)l+='<div class="pika-lendar">'+_(this,u,this.calendars[u].year,this.calendars[u].month,this.calendars[0].year,t)+this.render(this.calendars[u].year,this.calendars[u].month,t)+"</div>";this.el.innerHTML=l,n.bound&&"hidden"!==n.field.type&&a(function(){n.trigger.focus()},1),"function"==typeof this._o.onDraw&&this._o.onDraw(this),n.bound&&n.field.setAttribute("aria-label","Use the arrow keys to pick a date")}},adjustPosition:function(){var e,t,n,a,s,r,o,l,u,c;if(!this._o.container){if(this.el.style.position="absolute",e=this._o.trigger,t=e,n=this.el.offsetWidth,a=this.el.offsetHeight,s=window.innerWidth||i.documentElement.clientWidth,r=window.innerHeight||i.documentElement.clientHeight,o=window.pageYOffset||i.body.scrollTop||i.documentElement.scrollTop,"function"==typeof e.getBoundingClientRect)l=(c=e.getBoundingClientRect()).left+window.pageXOffset,u=c.bottom+window.pageYOffset;else for(l=t.offsetLeft,u=t.offsetTop+t.offsetHeight;t=t.offsetParent;)l+=t.offsetLeft,u+=t.offsetTop;(this._o.reposition&&l+n>s||this._o.position.indexOf("right")>-1&&l-n+e.offsetWidth>0)&&(l=l-n+e.offsetWidth),(this._o.reposition&&u+a>r+o||this._o.position.indexOf("top")>-1&&u-a-e.offsetHeight>0)&&(u=u-a-e.offsetHeight),this.el.style.left=l+"px",this.el.style.top=u+"px"}},render:function(e,t,n){var i=this._o,a=new Date,s=m(e,t),r=new Date(e,t,1).getDay(),o=[],l=[];g(a),i.firstDay>0&&(r-=i.firstDay)<0&&(r+=7);for(var u=0===t?11:t-1,c=11===t?0:t+1,d=0===t?e-1:e,f=11===t?e+1:e,y=m(d,u),w=s+r,b=w;b>7;)b-=7;w+=7-b;for(var x=!1,C=0,M=0;C<w;C++){var D=new Date(e,t,C-r+1),_=!!h(this._d)&&v(D,this._d),L=v(D,a),P=-1!==i.events.indexOf(D.toDateString()),I=C<r||C>=s+r,F=C-r+1,z=t,A=e,O=i.startRange&&v(i.startRange,D),R=i.endRange&&v(i.endRange,D),j=i.startRange&&i.endRange&&i.startRange<D&&D<i.endRange,N=i.minDate&&D<i.minDate||i.maxDate&&D>i.maxDate||i.disableWeekends&&p(D)||i.disableDayFn&&i.disableDayFn(D);I&&(C<r?(F=y+F,z=u,A=d):(F-=s,z=c,A=f));var Y={day:F,month:z,year:A,hasEvent:P,isSelected:_,isToday:L,isDisabled:N,isEmpty:I,isStartRange:O,isEndRange:R,isInRange:j,showDaysInNextAndPreviousMonths:i.showDaysInNextAndPreviousMonths,enableSelectionDaysInNextAndPreviousMonths:i.enableSelectionDaysInNextAndPreviousMonths};i.pickWholeWeek&&_&&(x=!0),l.push(T(Y)),7==++M&&(i.showWeekNumber&&l.unshift(S(C-r,t,e)),o.push(k(l,i.isRTL,i.pickWholeWeek,x)),l=[],M=0,x=!1)}return E(i,o,n)},isVisible:function(){return this._v},show:function(){this.isVisible()||(this._v=!0,this.draw(),c(this.el,"is-hidden"),this._o.bound&&(s(i,"click",this._onClick),this.adjustPosition()),"function"==typeof this._o.onOpen&&this._o.onOpen.call(this))},hide:function(){var e=this._v;!1!==e&&(this._o.bound&&r(i,"click",this._onClick),this.el.style.position="static",this.el.style.left="auto",this.el.style.top="auto",u(this.el,"is-hidden"),this._v=!1,void 0!==e&&"function"==typeof this._o.onClose&&this._o.onClose.call(this))},destroy:function(){this.hide(),r(this.el,"mousedown",this._onMouseDown,!0),r(this.el,"touchend",this._onMouseDown,!0),r(this.el,"change",this._onChange),r(i,"keydown",this._onKeyChange),this._o.field&&(r(this._o.field,"change",this._onInputChange),this._o.bound&&(r(this._o.trigger,"click",this._onInputClick),r(this._o.trigger,"focus",this._onInputFocus),r(this._o.trigger,"blur",this._onInputBlur))),this.el.parentNode&&this.el.parentNode.removeChild(this.el)}},L}),function(e,t){"use strict";"object"==typeof exports?t(require("jquery"),require("pikaday")):"function"==typeof define&&define.amd?define(["jquery","pikaday"],t):t(e.jQuery,e.Pikaday)}(this,function(e,t){"use strict";e.fn.pikaday=function(){var n=arguments;return n&&n.length||(n=[{}]),this.each(function(){var i=e(this),a=i.data("pikaday");if(a instanceof t)"string"==typeof n[0]&&"function"==typeof a[n[0]]&&(a[n[0]].apply(a,Array.prototype.slice.call(n,1)),"destroy"===n[0]&&i.removeData("pikaday"));else if("object"==typeof n[0]){var s=e.extend({},n[0]);s.field=i[0],i.data("pikaday",new t(s))}})}}),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports&&"function"==typeof require?require("jquery"):jQuery)}(function(e){"use strict";function t(n,i){var a=this;a.element=n,a.el=e(n),a.suggestions=[],a.badQueries=[],a.selectedIndex=-1,a.currentValue=a.element.value,a.timeoutId=null,a.cachedResponse={},a.onChangeTimeout=null,a.onChange=null,a.isLocal=!1,a.suggestionsContainer=null,a.noSuggestionsContainer=null,a.options=e.extend({},t.defaults,i),a.classes={selected:"autocomplete-selected",suggestion:"autocomplete-suggestion"},a.hint=null,a.hintValue="",a.selection=null,a.initialize(),a.setOptions(i)}function n(e,t,n){return-1!==e.value.toLowerCase().indexOf(n)}function i(t){return"string"==typeof t?e.parseJSON(t):t}function a(e,t){if(!t)return e.value;var n="("+r.escapeRegExChars(t)+")";return e.value.replace(new RegExp(n,"gi"),"<strong>$1</strong>").replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/&lt;(\/?strong)&gt;/g,"<$1>")}function s(e,t){return'<div class="autocomplete-group">'+t+"</div>"}var r=function(){return{escapeRegExChars:function(e){return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&")},createNode:function(e){var t=document.createElement("div");return t.className=e,t.style.position="absolute",t.style.display="none",t}}}(),o={ESC:27,TAB:9,RETURN:13,LEFT:37,UP:38,RIGHT:39,DOWN:40},l=e.noop;t.utils=r,e.Autocomplete=t,t.defaults={ajaxSettings:{},autoSelectFirst:!1,appendTo:"body",serviceUrl:null,lookup:null,onSelect:null,width:"auto",minChars:1,maxHeight:300,deferRequestBy:0,params:{},formatResult:a,formatGroup:s,delimiter:null,zIndex:9999,type:"GET",noCache:!1,onSearchStart:l,onSearchComplete:l,onSearchError:l,preserveInput:!1,containerClass:"autocomplete-suggestions",tabDisabled:!1,dataType:"text",currentRequest:null,triggerSelectOnValidInput:!0,preventBadQueries:!0,lookupFilter:n,paramName:"query",transformResult:i,showNoSuggestionNotice:!1,noSuggestionNotice:"No results",orientation:"bottom",forceFixPosition:!1},t.prototype={initialize:function(){var n,i=this,a="."+i.classes.suggestion,s=i.classes.selected,r=i.options;i.element.setAttribute("autocomplete","off"),i.noSuggestionsContainer=e('<div class="autocomplete-no-suggestion"></div>').html(this.options.noSuggestionNotice).get(0),i.suggestionsContainer=t.utils.createNode(r.containerClass),(n=e(i.suggestionsContainer)).appendTo(r.appendTo||"body"),"auto"!==r.width&&n.css("width",r.width),n.on("mouseover.autocomplete",a,function(){i.activate(e(this).data("index"))}),n.on("mouseout.autocomplete",function(){i.selectedIndex=-1,n.children("."+s).removeClass(s)}),n.on("click.autocomplete",a,function(){i.select(e(this).data("index"))}),n.on("click.autocomplete",function(){clearTimeout(i.blurTimeoutId)}),i.fixPositionCapture=function(){i.visible&&i.fixPosition()},e(window).on("resize.autocomplete",i.fixPositionCapture),i.el.on("keydown.autocomplete",function(e){i.onKeyPress(e)}),i.el.on("keyup.autocomplete",function(e){i.onKeyUp(e)}),i.el.on("blur.autocomplete",function(){i.onBlur()}),i.el.on("focus.autocomplete",function(){i.onFocus()}),i.el.on("change.autocomplete",function(e){i.onKeyUp(e)}),i.el.on("input.autocomplete",function(e){i.onKeyUp(e)})},onFocus:function(){var e=this;e.fixPosition(),e.el.val().length>=e.options.minChars&&e.onValueChange()},onBlur:function(){var e=this;e.blurTimeoutId=setTimeout(function(){e.hide()},200)},abortAjax:function(){var e=this;e.currentRequest&&(e.currentRequest.abort(),e.currentRequest=null)},setOptions:function(t){var n=this,i=n.options;this.options=e.extend({},i,t),n.isLocal=e.isArray(i.lookup),n.isLocal&&(i.lookup=n.verifySuggestionsFormat(i.lookup)),i.orientation=n.validateOrientation(i.orientation,"bottom"),e(n.suggestionsContainer).css({"max-height":i.maxHeight+"px",width:i.width+"px","z-index":i.zIndex})},clearCache:function(){this.cachedResponse={},this.badQueries=[]},clear:function(){this.clearCache(),this.currentValue="",this.suggestions=[]},disable:function(){var e=this;e.disabled=!0,clearTimeout(e.onChangeTimeout),e.abortAjax()},enable:function(){this.disabled=!1},fixPosition:function(){var t=this,n=e(t.suggestionsContainer),i=n.parent().get(0);if(i===document.body||t.options.forceFixPosition){var a=t.options.orientation,s=n.outerHeight(),r=t.el.outerHeight(),o=t.el.offset(),l={top:o.top,left:o.left};if("auto"===a){var u=e(window).height(),c=e(window).scrollTop(),d=-c+o.top-s,h=c+u-(o.top+r+s);a=Math.max(d,h)===d?"top":"bottom"}if(l.top+="top"===a?-s:r,i!==document.body){var p,f=n.css("opacity");t.visible||n.css("opacity",0).show(),p=n.offsetParent().offset(),l.top-=p.top,l.left-=p.left,t.visible||n.css("opacity",f).hide()}"auto"===t.options.width&&(l.width=t.el.outerWidth()+"px"),n.css(l)}},isCursorAtEnd:function(){var e,t=this,n=t.el.val().length,i=t.element.selectionStart;return"number"==typeof i?i===n:!document.selection||((e=document.selection.createRange()).moveStart("character",-n),n===e.text.length)},onKeyPress:function(e){var t=this;if(t.disabled||t.visible||e.which!==o.DOWN||!t.currentValue){if(!t.disabled&&t.visible){switch(e.which){case o.ESC:t.el.val(t.currentValue),t.hide();break;case o.RIGHT:if(t.hint&&t.options.onHint&&t.isCursorAtEnd()){t.selectHint();break}return;case o.TAB:if(t.hint&&t.options.onHint)return void t.selectHint();if(-1===t.selectedIndex)return void t.hide();if(t.select(t.selectedIndex),!1===t.options.tabDisabled)return;break;case o.RETURN:if(-1===t.selectedIndex)return void t.hide();t.select(t.selectedIndex);break;case o.UP:t.moveUp();break;case o.DOWN:t.moveDown();break;default:return}e.stopImmediatePropagation(),e.preventDefault()}}else t.suggest()},onKeyUp:function(e){var t=this;if(!t.disabled){switch(e.which){case o.UP:case o.DOWN:return}clearTimeout(t.onChangeTimeout),t.currentValue!==t.el.val()&&(t.findBestHint(),t.options.deferRequestBy>0?t.onChangeTimeout=setTimeout(function(){t.onValueChange()},t.options.deferRequestBy):t.onValueChange())}},onValueChange:function(){var t=this,n=t.options,i=t.el.val(),a=t.getQuery(i);t.selection&&t.currentValue!==a&&(t.selection=null,(n.onInvalidateSelection||e.noop).call(t.element)),clearTimeout(t.onChangeTimeout),t.currentValue=i,t.selectedIndex=-1,n.triggerSelectOnValidInput&&t.isExactMatch(a)?t.select(0):a.length<n.minChars?t.hide():t.getSuggestions(a)},isExactMatch:function(e){var t=this.suggestions;return 1===t.length&&t[0].value.toLowerCase()===e.toLowerCase()},getQuery:function(t){var n,i=this.options.delimiter;return i?(n=t.split(i),e.trim(n[n.length-1])):t},getSuggestionsLocal:function(t){var n,i=this.options,a=t.toLowerCase(),s=i.lookupFilter,r=parseInt(i.lookupLimit,10);return n={suggestions:e.grep(i.lookup,function(e){return s(e,t,a)})},r&&n.suggestions.length>r&&(n.suggestions=n.suggestions.slice(0,r)),n},getSuggestions:function(t){var n,i,a,s,r=this,o=r.options,l=o.serviceUrl;o.params[o.paramName]=t,!1!==o.onSearchStart.call(r.element,o.params)&&(i=o.ignoreParams?null:o.params,e.isFunction(o.lookup)?o.lookup(t,function(e){r.suggestions=e.suggestions,r.suggest(),o.onSearchComplete.call(r.element,t,e.suggestions)}):(r.isLocal?n=r.getSuggestionsLocal(t):(e.isFunction(l)&&(l=l.call(r.element,t)),a=l+"?"+e.param(i||{}),n=r.cachedResponse[a]),n&&e.isArray(n.suggestions)?(r.suggestions=n.suggestions,r.suggest(),o.onSearchComplete.call(r.element,t,n.suggestions)):r.isBadQuery(t)?o.onSearchComplete.call(r.element,t,[]):(r.abortAjax(),s={url:l,data:i,type:o.type,dataType:o.dataType},e.extend(s,o.ajaxSettings),r.currentRequest=e.ajax(s).done(function(e){var n;r.currentRequest=null,n=o.transformResult(e,t),r.processResponse(n,t,a),o.onSearchComplete.call(r.element,t,n.suggestions)}).fail(function(e,n,i){o.onSearchError.call(r.element,t,e,n,i)}))))},isBadQuery:function(e){if(!this.options.preventBadQueries)return!1;for(var t=this.badQueries,n=t.length;n--;)if(0===e.indexOf(t[n]))return!0;return!1},hide:function(){var t=this,n=e(t.suggestionsContainer);e.isFunction(t.options.onHide)&&t.visible&&t.options.onHide.call(t.element,n),t.visible=!1,t.selectedIndex=-1,clearTimeout(t.onChangeTimeout),e(t.suggestionsContainer).hide(),t.signalHint(null)},suggest:function(){if(this.suggestions.length){var t,n=this,i=n.options,a=i.groupBy,s=i.formatResult,r=n.getQuery(n.currentValue),o=n.classes.suggestion,l=n.classes.selected,u=e(n.suggestionsContainer),c=e(n.noSuggestionsContainer),d=i.beforeRender,h="",p=function(e,n){var s=e.data[a];return t===s?"":(t=s,i.formatGroup(e,t))};i.triggerSelectOnValidInput&&n.isExactMatch(r)?n.select(0):(e.each(n.suggestions,function(e,t){a&&(h+=p(t,0)),h+='<div class="'+o+'" data-index="'+e+'">'+s(t,r,e)+"</div>"}),this.adjustContainerWidth(),c.detach(),u.html(h),e.isFunction(d)&&d.call(n.element,u,n.suggestions),n.fixPosition(),u.show(),i.autoSelectFirst&&(n.selectedIndex=0,u.scrollTop(0),u.children("."+o).first().addClass(l)),n.visible=!0,n.findBestHint())}else this.options.showNoSuggestionNotice?this.noSuggestions():this.hide()},noSuggestions:function(){var t=this,n=t.options.beforeRender,i=e(t.suggestionsContainer),a=e(t.noSuggestionsContainer);this.adjustContainerWidth(),a.detach(),i.empty(),i.append(a),e.isFunction(n)&&n.call(t.element,i,t.suggestions),t.fixPosition(),i.show(),t.visible=!0},adjustContainerWidth:function(){var t,n=this,i=n.options,a=e(n.suggestionsContainer);"auto"===i.width?(t=n.el.outerWidth(),a.css("width",t>0?t:300)):"flex"===i.width&&a.css("width","")},findBestHint:function(){var t=this,n=t.el.val().toLowerCase(),i=null;n&&(e.each(t.suggestions,function(e,t){var a=0===t.value.toLowerCase().indexOf(n);return a&&(i=t),!a}),t.signalHint(i))},signalHint:function(t){var n="",i=this;t&&(n=i.currentValue+t.value.substr(i.currentValue.length)),i.hintValue!==n&&(i.hintValue=n,i.hint=t,(this.options.onHint||e.noop)(n))},verifySuggestionsFormat:function(t){return t.length&&"string"==typeof t[0]?e.map(t,function(e){return{value:e,data:null}}):t},validateOrientation:function(t,n){return t=e.trim(t||"").toLowerCase(),-1===e.inArray(t,["auto","bottom","top"])&&(t=n),t},processResponse:function(e,t,n){var i=this,a=i.options;e.suggestions=i.verifySuggestionsFormat(e.suggestions),a.noCache||(i.cachedResponse[n]=e,a.preventBadQueries&&!e.suggestions.length&&i.badQueries.push(t)),t===i.getQuery(i.currentValue)&&(i.suggestions=e.suggestions,i.suggest())},activate:function(t){var n,i=this,a=i.classes.selected,s=e(i.suggestionsContainer),r=s.find("."+i.classes.suggestion);return s.find("."+a).removeClass(a),i.selectedIndex=t,-1!==i.selectedIndex&&r.length>i.selectedIndex?(n=r.get(i.selectedIndex),e(n).addClass(a),n):null},selectHint:function(){var t=this,n=e.inArray(t.hint,t.suggestions);t.select(n)},select:function(e){var t=this;t.hide(),t.onSelect(e)},moveUp:function(){var t=this;if(-1!==t.selectedIndex)return 0===t.selectedIndex?(e(t.suggestionsContainer).children().first().removeClass(t.classes.selected),t.selectedIndex=-1,t.el.val(t.currentValue),void t.findBestHint()):void t.adjustScroll(t.selectedIndex-1)},moveDown:function(){var e=this;e.selectedIndex!==e.suggestions.length-1&&e.adjustScroll(e.selectedIndex+1)},adjustScroll:function(t){var n=this,i=n.activate(t);if(i){var a,s,r,o=e(i).outerHeight();a=i.offsetTop,r=(s=e(n.suggestionsContainer).scrollTop())+n.options.maxHeight-o,a<s?e(n.suggestionsContainer).scrollTop(a):a>r&&e(n.suggestionsContainer).scrollTop(a-n.options.maxHeight+o),n.options.preserveInput||n.el.val(n.getValue(n.suggestions[t].value)),n.signalHint(null)}},onSelect:function(t){var n=this,i=n.options.onSelect,a=n.suggestions[t];n.currentValue=n.getValue(a.value),n.currentValue===n.el.val()||n.options.preserveInput||n.el.val(n.currentValue),n.signalHint(null),n.suggestions=[],n.selection=a,e.isFunction(i)&&i.call(n.element,a)},getValue:function(e){var t,n,i=this,a=i.options.delimiter;return a?(t=i.currentValue,n=t.split(a),1===n.length?e:t.substr(0,t.length-n[n.length-1].length)+e):e},dispose:function(){var t=this;t.el.off(".autocomplete").removeData("autocomplete"),e(window).off("resize.autocomplete",t.fixPositionCapture),e(t.suggestionsContainer).remove()}},e.fn.devbridgeAutocomplete=function(n,i){return arguments.length?this.each(function(){var a=e(this),s=a.data("autocomplete");"string"==typeof n?s&&"function"==typeof s[n]&&s[n](i):(s&&s.dispose&&s.dispose(),s=new t(this,n),a.data("autocomplete",s))}):this.first().data("autocomplete")},e.fn.autocomplete||(e.fn.autocomplete=e.fn.devbridgeAutocomplete)}),function(e){e.fn.datePicker=function(){return this.each(function(){new Pikaday({field:this,firstDay:1,format:"DD.MM.YYYY",maxDate:new Date,yearRange:[1900,2017],i18n:{previousMonth:"Предыдущий месяц",nextMonth:"Следующий месяц",months:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],weekdays:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"],weekdaysShort:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"]}})})}}(jQuery),$(document).ready(function(){var e=$(".js-events-block-content");$(".js-events-block-filter").click(function(){var t=$(this),n=t.attr("href");return t.hasClass("active")||(e.spin("large","#000"),$.ajax(n,{method:"GET",cache:!1}).done(function(n){$(".js-events-block-filter").removeClass("active"),t.addClass("active"),e.html(n)}).fail(function(e,t,n){alert("Ошибка загрузки данных. Пожалуйста, попробуйте ещё раз."),console.log(e),console.log(n)}).always(function(){e.spin(!1)})),!1})}),function(e){e.fn.formAjax=function(){this.each(function(){e(this).on("submit",function(){var t=e(this),n=t.attr("action"),i=t.attr("method"),a=new FormData(t[0]);return e("body").spin("large","#000"),e.ajax({url:n,type:i,data:a,processData:!1,contentType:!1,cache:!1,dataType:"json"}).done(function(e){e&&e.success?initSideModal(e.message,"message-modal",!1,!1):e&&e.message&&alert("Ошибка отправки данных: "+e.message)}).fail(function(e,t,n){alert("Ошибка отправки данных. Пожалуйста, попробуйте ещё раз."),console.log(e),console.log(n)}).always(function(){e("body").spin(!1)}),!1})})}}(jQuery),function(e){e.fn.formValidation=function(){this.each(function(){e(this).validate({errorPlacement:function(e,t){},highlight:function(t,n,i){e(t).closest(".form-group").find(".form-label").addClass("form-label-error").removeClass("form-label-valid"),e(t).closest(".form-control").addClass(n).removeClass(i),e(t).addClass(n).removeClass(i)},unhighlight:function(t,n,i){e(t).closest(".form-group").find(".form-label").removeClass("form-label-error").addClass("form-label-valid"),e(t).closest(".form-control").removeClass(n).addClass(i),e(t).removeClass(n).addClass(i)}})})}}(jQuery),function(e){e.fn.inputFile=function(){return this.each(function(){e(this).on("focus blur change",function(){var t=e(this).val(),n=e(this).siblings(".js-input-file-title").data("input-file-default-title"),i=e(this).siblings(".js-input-file-subtitle");""!=t?(t.length>10&&(t=t.substr(0,10)+"..."),e(this).siblings(".js-input-file-title").html(t),i.animate({opacity:0},300)):(e(this).siblings(".js-input-file-title").html(n),i.animate({opacity:1},300))}),e(this).on("focus",function(){e(this).closest(".form-control").addClass("is-focus")}),e(this).on("blur",function(){e(this).closest(".form-control").removeClass("is-focus")})})}}(jQuery),function(e){e.fn.maskedinput=function(){this.each(function(){var t=e(this).data("masked-input"),n=e(this).data("masked-input-placeholder"),i=e(this).is("[data-masked-input-clearifnotmatch]");e(this).mask(t,{placeholder:n,clearIfNotMatch:i})})}}(jQuery),function(e){e.fn.inputPhoto=function(){return this.each(function(){var t=e(this)[0],n=e(this).closest(".form-control-photo"),i=e(this).siblings(".form-control-photo-area"),a=e(this).siblings(".form-control-photo-notify");t.addEventListener("change",function(e){var s=t.files[0],r=/image.*/;if(s.type.match(r)){n.removeClass("is-with-error"),n.addClass("is-with-photo"),a.removeClass("active");var o=new FileReader;o.onload=function(e){i.html("");var t=new Image;t.src=o.result,i.append(t)},o.readAsDataURL(s)}else t.value="",n.removeClass("is-with-photo"),n.addClass("is-with-error"),a.addClass("active").html("Недопустимый формат файла!")})})}}(jQuery),function(e){e.fn.inputRegionCity=function(){return this.each(function(){var t=e(this).find(".js-regions-autocomplete"),n=e(this).find(".js-region-id"),i=e(this).find(".js-cities-autocomplete"),a=e(this).find(".js-city-id"),s=null,r=null;i.attr("readonly",!0),t.devbridgeAutocomplete({serviceUrl:"data/regions.json",minChars:1,onSelect:function(e){s=e,n.val()!=e.data&&(i.attr("readonly",!1),n.val(e.data),i.val(""),a.val(""))},onInvalidateSelection:function(){n.val(""),t.val(""),a.val(""),i.val(""),i.attr("readonly",!0)}}),i.devbridgeAutocomplete({serviceUrl:function(e,t){return"data/cities.json?"+s.data},minChars:1,onSelect:function(e){r=e,a.val(e.data)},onInvalidateSelection:function(){i.val(""),a.val("")}})})}}(jQuery);var contactsMap;$(document).ready(function(){$(".js-mobile-menu-toggle").click(function(){return $(this).siblings("ul").hasClass("active")?($(this).removeClass("active"),$(this).siblings("ul").removeClass("active")):($(this).siblings("ul").addClass("active"),$(this).addClass("active")),!1})}),function(){function e(t,n,i){$(t.target).closest(n).length||(i(),$(document).off("click","body",e))}function t(){$(".js-offcanvas").addClass("active"),$(i).addClass("active"),$(document).on("click","body",function(t){e(t,a,n)})}function n(){$(".js-offcanvas, "+i).removeClass("active")}var i="#offcanvas",a="#offcanvas > .main-offcanvas";$(".js-offcanvas").click(function(){return $(this).hasClass("active")?n():t(),!1}),new Hammer(document.querySelector(i)).on("swipeleft",function(e){n()})}(),$(document).on("click","[data-side-modal]",function(e){var t=$(this).attr("href"),n=$(this).data("side-modal"),i=$(this).data("side-modal-class"),a=$(this).is("[data-side-modal-prevent-overlay-close]"),s=$(this).is("[data-side-modal-prevent-esc-close]");return n?($modalContent=$(n).clone(),initSideModal($modalContent,i,a,s)):($("body").spin("large","#000"),$.ajax(t,{method:"GET",cache:!1}).done(function(e){$modalContent=e,initSideModal($modalContent,i,a,s)}).fail(function(e,t,n){alert("Ошибка загрузки данных. Пожалуйста, попробуйте перезагрузить страницу."),console.log(e),console.log(n)}).always(function(){$("body").spin(!1)})),!1}),$(document).ready(function(){new Swiper(".js-sponsors-swiper",{loop:!0,pagination:".js-sponsors-swiper .swiper-pagination",paginationClickable:!0}),new Swiper(".js-speakers-swiper",{loop:!0,prevButton:".js-speakers-block-button-prev",nextButton:".js-speakers-block-button-next",pagination:".js-speakers-swiper .swiper-pagination",paginationClickable:!0}),new Swiper(".js-news-swiper",{loop:!0,prevButton:".js-news-block-button-prev",nextButton:".js-news-block-button-next",pagination:".js-news-swiper .swiper-pagination",paginationClickable:!0});$(".js-events-swiper").each(function(){$swiper=$(this),new Swiper($swiper,{loop:!0,pagination:$swiper.find(".swiper-pagination"),paginationClickable:!0})}),$(".js-flip-clock").each(function(){var e=+$(this).data("time-left");$(this).FlipClock(e,{countdown:!0,clockFace:"HourlyCounter",callbacks:{interval:function(){$("span.seconds").next().next().remove(),$("span.seconds").next().remove(),$("span.seconds").remove()}},language:"russian"})}),$("[data-masked-input]").maskedinput(),$("[data-validate]").formValidation(),$(".js-input-file").inputFile(),$(".js-input-photo").inputPhoto(),$(".js-datepicker").datePicker(),$(".js-input-region-city").inputRegionCity(),$("[data-form-ajax]").formAjax(),$(".js-smooth-scroll").click(function(){history.pushState(null,null,$(this).attr("href"));var e=window.location.hash;return $(e).length>0&&$("html, body").animate({scrollTop:$($.attr(this,"href")).offset().top-10},700),!1})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
